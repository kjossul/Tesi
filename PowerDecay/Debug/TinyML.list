
TinyML.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000158bc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d48  08015a80  08015a80  00025a80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080167c8  080167c8  00030938  2**0
                  CONTENTS
  4 .ARM          00000008  080167c8  080167c8  000267c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080167d0  080167d0  00030938  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080167d0  080167d0  000267d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080167d4  080167d4  000267d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000938  20000000  080167d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002278  20000938  08017110  00030938  2**2
                  ALLOC
 10 ._user_heap_stack 00010800  20002bb0  08017110  00032bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030938  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038a14  00000000  00000000  00030968  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005f72  00000000  00000000  0006937c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002ae0  00000000  00000000  0006f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002820  00000000  00000000  00071dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003f48d  00000000  00000000  000745f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00028a59  00000000  00000000  000b3a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00165189  00000000  00000000  000dc4d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0024165f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c944  00000000  00000000  002416dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000938 	.word	0x20000938
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08015a64 	.word	0x08015a64

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000093c 	.word	0x2000093c
 80001fc:	08015a64 	.word	0x08015a64

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f7c:	b0e8      	sub	sp, #416	; 0x1a0
 8000f7e:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	 char buf[128];
	  int buf_len = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	  // Buffers used to store input and output tensors
	  AI_ALIGNED(4) ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
	  AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

	  // Pointer to our model
	  ai_handle sine_model = AI_HANDLE_NULL;
 8000f86:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]

	  // Initialize wrapper structs that hold pointers to data and info about the
	  // data (tensor height, width, channels)
	  ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8000f8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f92:	4ad3      	ldr	r2, [pc, #844]	; (80012e0 <main+0x368>)
 8000f94:	461c      	mov	r4, r3
 8000f96:	4615      	mov	r5, r2
 8000f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fa0:	e884 0003 	stmia.w	r4, {r0, r1}
	  ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8000fa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fa8:	4acd      	ldr	r2, [pc, #820]	; (80012e0 <main+0x368>)
 8000faa:	461c      	mov	r4, r3
 8000fac:	4615      	mov	r5, r2
 8000fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fb6:	e884 0003 	stmia.w	r4, {r0, r1}

	  // Set working memory and get weights/biases from model
	  ai_network_params ai_params = {
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4ac9      	ldr	r2, [pc, #804]	; (80012e4 <main+0x36c>)
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	809a      	strh	r2, [r3, #4]
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2201      	movs	r2, #1
 8000fca:	80da      	strh	r2, [r3, #6]
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2201      	movs	r2, #1
 8000fd0:	811a      	strh	r2, [r3, #8]
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	f240 5204 	movw	r2, #1284	; 0x504
 8000fd8:	60da      	str	r2, [r3, #12]
	    AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 8000fda:	f00f fc35 	bl	8010848 <ai_sine_model_data_weights_get>
 8000fde:	4602      	mov	r2, r0
	  ai_network_params ai_params = {
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	611a      	str	r2, [r3, #16]
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	615a      	str	r2, [r3, #20]
 8000fea:	463b      	mov	r3, r7
 8000fec:	4abe      	ldr	r2, [pc, #760]	; (80012e8 <main+0x370>)
 8000fee:	619a      	str	r2, [r3, #24]
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	839a      	strh	r2, [r3, #28]
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	83da      	strh	r2, [r3, #30]
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	2201      	movs	r2, #1
 8001000:	841a      	strh	r2, [r3, #32]
 8001002:	463b      	mov	r3, r7
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
 8001008:	463b      	mov	r3, r7
 800100a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
 8001010:	463b      	mov	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	62da      	str	r2, [r3, #44]	; 0x2c
	    AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
	  };

	  // Set pointers wrapper structs to our data buffers
	  ai_input[0].n_batches = 1;
 8001016:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800101a:	2201      	movs	r2, #1
 800101c:	809a      	strh	r2, [r3, #4]
	  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800101e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001022:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001026:	611a      	str	r2, [r3, #16]
	  ai_output[0].n_batches = 1;
 8001028:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800102c:	2201      	movs	r2, #1
 800102e:	809a      	strh	r2, [r3, #4]
	  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001030:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001034:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001038:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103a:	f002 f93a 	bl	80032b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103e:	f000 f961 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001042:	f001 f86b 	bl	800211c <MX_GPIO_Init>
  MX_DMA_Init();
 8001046:	f001 f83f 	bl	80020c8 <MX_DMA_Init>
  MX_ADC1_Init();
 800104a:	f000 fa19 	bl	8001480 <MX_ADC1_Init>
  MX_DAC1_Init();
 800104e:	f000 fa9d 	bl	800158c <MX_DAC1_Init>
  MX_DFSDM1_Init();
 8001052:	f000 facf 	bl	80015f4 <MX_DFSDM1_Init>
  MX_I2C2_SMBUS_Init();
 8001056:	f000 fb65 	bl	8001724 <MX_I2C2_SMBUS_Init>
  MX_I2C3_Init();
 800105a:	f000 fba5 	bl	80017a8 <MX_I2C3_Init>
  MX_I2C4_Init();
 800105e:	f000 fbe3 	bl	8001828 <MX_I2C4_Init>
  MX_LTDC_Init();
 8001062:	f000 fc21 	bl	80018a8 <MX_LTDC_Init>
  MX_RTC_Init();
 8001066:	f000 fce5 	bl	8001a34 <MX_RTC_Init>
  MX_SAI1_Init();
 800106a:	f000 fd31 	bl	8001ad0 <MX_SAI1_Init>
  MX_SPI1_Init();
 800106e:	f000 fdf1 	bl	8001c54 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001072:	f000 fe2d 	bl	8001cd0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001076:	f000 fe69 	bl	8001d4c <MX_SPI3_Init>
  MX_TIM2_Init();
 800107a:	f000 fea5 	bl	8001dc8 <MX_TIM2_Init>
  MX_TIM5_Init();
 800107e:	f000 fefd 	bl	8001e7c <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001082:	f000 ff85 	bl	8001f90 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001086:	f000 ffd1 	bl	800202c <MX_USART3_UART_Init>
  MX_CRC_Init();
 800108a:	f000 fa5d 	bl	8001548 <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 800108e:	f00e fb75 	bl	800f77c <MX_USB_DEVICE_Init>
  MX_TIM16_Init();
 8001092:	f000 ff57 	bl	8001f44 <MX_TIM16_Init>
  MX_X_CUBE_AI_Init();
 8001096:	f00f fa29 	bl	80104ec <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  // Start timer/counter
    HAL_TIM_Base_Start(&htim16);
 800109a:	4894      	ldr	r0, [pc, #592]	; (80012ec <main+0x374>)
 800109c:	f00a f860 	bl	800b160 <HAL_TIM_Base_Start>

    // Greetings!
    buf_len = sprintf(buf, "STM32 X-Cube-AI test\r\n");
 80010a0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80010a4:	4a92      	ldr	r2, [pc, #584]	; (80012f0 <main+0x378>)
 80010a6:	461c      	mov	r4, r3
 80010a8:	4615      	mov	r5, r2
 80010aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010b2:	6020      	str	r0, [r4, #0]
 80010b4:	3404      	adds	r4, #4
 80010b6:	8021      	strh	r1, [r4, #0]
 80010b8:	3402      	adds	r4, #2
 80010ba:	0c0b      	lsrs	r3, r1, #16
 80010bc:	7023      	strb	r3, [r4, #0]
 80010be:	2316      	movs	r3, #22
 80010c0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    CDC_Transmit_FS((uint8_t *)buf, buf_len);
 80010c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f00e fc11 	bl	800f8f8 <CDC_Transmit_FS>
    // HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);

    // Create instance of neural network
    ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 80010d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f00f fb41 	bl	8010764 <ai_sine_model_create>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (ai_err.type != AI_ERROR_NONE)
 80010e8:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d01a      	beq.n	8001126 <main+0x1ae>
    {
      buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 80010f0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80010f4:	4a7f      	ldr	r2, [pc, #508]	; (80012f4 <main+0x37c>)
 80010f6:	461c      	mov	r4, r3
 80010f8:	4615      	mov	r5, r2
 80010fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001102:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001106:	6020      	str	r0, [r4, #0]
 8001108:	3404      	adds	r4, #4
 800110a:	8021      	strh	r1, [r4, #0]
 800110c:	2325      	movs	r3, #37	; 0x25
 800110e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
      CDC_Transmit_FS((uint8_t *)buf, buf_len);
 8001112:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001116:	b29a      	uxth	r2, r3
 8001118:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f00e fbea 	bl	800f8f8 <CDC_Transmit_FS>
      // HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
      while(1);
 8001124:	e7fe      	b.n	8001124 <main+0x1ac>
    }

    // Initialize neural network
    if (!ai_sine_model_init(sine_model, &ai_params))
 8001126:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	463a      	mov	r2, r7
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f00f fb39 	bl	80107a8 <ai_sine_model_init>
 8001136:	4603      	mov	r3, r0
 8001138:	f083 0301 	eor.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d017      	beq.n	8001172 <main+0x1fa>
    {
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001142:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001146:	4a6c      	ldr	r2, [pc, #432]	; (80012f8 <main+0x380>)
 8001148:	461c      	mov	r4, r3
 800114a:	4615      	mov	r5, r2
 800114c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001154:	682b      	ldr	r3, [r5, #0]
 8001156:	7023      	strb	r3, [r4, #0]
 8001158:	2320      	movs	r3, #32
 800115a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
      CDC_Transmit_FS((uint8_t *)buf, buf_len);
 800115e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001162:	b29a      	uxth	r2, r3
 8001164:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f00e fbc4 	bl	800f8f8 <CDC_Transmit_FS>
      // HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
      while(1);
 8001170:	e7fe      	b.n	8001170 <main+0x1f8>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    // Get current timestamp
	    timestamp = htim16.Instance->CNT;
 8001172:	4b5e      	ldr	r3, [pc, #376]	; (80012ec <main+0x374>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	    x_val = (float)timestamp / 100000.0 * 3.14;
 800117c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001188:	ee17 0a90 	vmov	r0, s15
 800118c:	f7ff f9f4 	bl	8000578 <__aeabi_f2d>
 8001190:	a34f      	add	r3, pc, #316	; (adr r3, 80012d0 <main+0x358>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fb71 	bl	800087c <__aeabi_ddiv>
 800119a:	4603      	mov	r3, r0
 800119c:	460c      	mov	r4, r1
 800119e:	4618      	mov	r0, r3
 80011a0:	4621      	mov	r1, r4
 80011a2:	a34d      	add	r3, pc, #308	; (adr r3, 80012d8 <main+0x360>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fa3e 	bl	8000628 <__aeabi_dmul>
 80011ac:	4603      	mov	r3, r0
 80011ae:	460c      	mov	r4, r1
 80011b0:	4618      	mov	r0, r3
 80011b2:	4621      	mov	r1, r4
 80011b4:	f7ff fd10 	bl	8000bd8 <__aeabi_d2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	    // Fill input buffer (use test value)
	    for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011c4:	e00d      	b.n	80011e2 <main+0x26a>
	    {
	      ((ai_float *)in_data)[i] = (ai_float)x_val;
 80011c6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80011d0:	4413      	add	r3, r2
 80011d2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011d6:	601a      	str	r2, [r3, #0]
	    for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 80011d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80011dc:	3301      	adds	r3, #1
 80011de:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011e2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0ed      	beq.n	80011c6 <main+0x24e>
	    }

	    // Perform inference
	    nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 80011ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80011f4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00f fb14 	bl	8010826 <ai_sine_model_run>
 80011fe:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
	    if (nbatch != 1) {
 8001202:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001206:	2b01      	cmp	r3, #1
 8001208:	d016      	beq.n	8001238 <main+0x2c0>
	      buf_len = sprintf(buf, "Error: could not run inference\r\n");
 800120a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800120e:	4a3b      	ldr	r2, [pc, #236]	; (80012fc <main+0x384>)
 8001210:	461c      	mov	r4, r3
 8001212:	4615      	mov	r5, r2
 8001214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	7023      	strb	r3, [r4, #0]
 8001220:	2320      	movs	r3, #32
 8001222:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	      // HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
	      CDC_Transmit_FS((uint8_t *)buf, buf_len);
 8001226:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800122a:	b29a      	uxth	r2, r3
 800122c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f00e fb60 	bl	800f8f8 <CDC_Transmit_FS>
	    }

	    // Read output (predicted y) of neural network
	    y_val = ((float *)out_data)[0];
 8001238:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

	    // Print output of neural network along with inference time (microseconds)
	    buf_len = sprintf(buf,
 8001242:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8001246:	f7ff f997 	bl	8000578 <__aeabi_f2d>
 800124a:	4680      	mov	r8, r0
 800124c:	4689      	mov	r9, r1
 800124e:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8001252:	f7ff f991 	bl	8000578 <__aeabi_f2d>
 8001256:	4604      	mov	r4, r0
 8001258:	460d      	mov	r5, r1
 800125a:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 800125e:	f7ff f98b 	bl	8000578 <__aeabi_f2d>
 8001262:	4682      	mov	sl, r0
 8001264:	468b      	mov	fp, r1
	                      "sin(%f) = %f (err = %f) | Duration: %lu\r\n",
	                      x_val, y_val, y_val - sin(x_val),
 8001266:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 800126a:	f7ff f985 	bl	8000578 <__aeabi_f2d>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	ec43 2b10 	vmov	d0, r2, r3
 8001276:	f010 fe63 	bl	8011f40 <sin>
 800127a:	ec53 2b10 	vmov	r2, r3, d0
	    buf_len = sprintf(buf,
 800127e:	4650      	mov	r0, sl
 8001280:	4659      	mov	r1, fp
 8001282:	f7ff f819 	bl	80002b8 <__aeabi_dsub>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
	                      htim16.Instance->CNT - timestamp);
 800128a:	4918      	ldr	r1, [pc, #96]	; (80012ec <main+0x374>)
 800128c:	6809      	ldr	r1, [r1, #0]
 800128e:	6a48      	ldr	r0, [r1, #36]	; 0x24
	    buf_len = sprintf(buf,
 8001290:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8001294:	1a41      	subs	r1, r0, r1
 8001296:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800129a:	9104      	str	r1, [sp, #16]
 800129c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012a0:	e9cd 4500 	strd	r4, r5, [sp]
 80012a4:	4642      	mov	r2, r8
 80012a6:	464b      	mov	r3, r9
 80012a8:	4915      	ldr	r1, [pc, #84]	; (8001300 <main+0x388>)
 80012aa:	f012 fc39 	bl	8013b20 <siprintf>
 80012ae:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	    // HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
	    CDC_Transmit_FS((uint8_t *)buf, buf_len);
 80012b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f00e fb1a 	bl	800f8f8 <CDC_Transmit_FS>
	    // Wait before doing it again
	    HAL_Delay(500);
 80012c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c8:	f002 f868 	bl	800339c <HAL_Delay>
	    timestamp = htim16.Instance->CNT;
 80012cc:	e751      	b.n	8001172 <main+0x1fa>
 80012ce:	bf00      	nop
 80012d0:	00000000 	.word	0x00000000
 80012d4:	40f86a00 	.word	0x40f86a00
 80012d8:	51eb851f 	.word	0x51eb851f
 80012dc:	40091eb8 	.word	0x40091eb8
 80012e0:	08015b34 	.word	0x08015b34
 80012e4:	40040440 	.word	0x40040440
 80012e8:	00040440 	.word	0x00040440
 80012ec:	20001284 	.word	0x20001284
 80012f0:	08015a80 	.word	0x08015a80
 80012f4:	08015a98 	.word	0x08015a98
 80012f8:	08015ac0 	.word	0x08015ac0
 80012fc:	08015ae4 	.word	0x08015ae4
 8001300:	08015b08 	.word	0x08015b08

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b0be      	sub	sp, #248	; 0xf8
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800130e:	2244      	movs	r2, #68	; 0x44
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f011 fe6b 	bl	8012fee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	229c      	movs	r2, #156	; 0x9c
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f011 fe5d 	bl	8012fee <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001334:	2000      	movs	r0, #0
 8001336:	f005 fee9 	bl	800710c <HAL_PWREx_ControlVoltageScaling>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001340:	f001 f8d8 	bl	80024f4 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001344:	f005 feb2 	bl	80070ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001348:	4b4a      	ldr	r3, [pc, #296]	; (8001474 <SystemClock_Config+0x170>)
 800134a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800134e:	4a49      	ldr	r2, [pc, #292]	; (8001474 <SystemClock_Config+0x170>)
 8001350:	f023 0318 	bic.w	r3, r3, #24
 8001354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8001358:	2325      	movs	r3, #37	; 0x25
 800135a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001362:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001366:	2301      	movs	r3, #1
 8001368:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800136c:	2301      	movs	r3, #1
 800136e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001372:	2302      	movs	r3, #2
 8001374:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001378:	2303      	movs	r3, #3
 800137a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 2;
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001384:	231e      	movs	r3, #30
 8001386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001390:	2302      	movs	r3, #2
 8001392:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001396:	2302      	movs	r3, #2
 8001398:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013a0:	4618      	mov	r0, r3
 80013a2:	f005 ff77 	bl	8007294 <HAL_RCC_OscConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80013ac:	f001 f8a2 	bl	80024f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b0:	230f      	movs	r3, #15
 80013b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b6:	2303      	movs	r3, #3
 80013b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013d2:	2105      	movs	r1, #5
 80013d4:	4618      	mov	r0, r3
 80013d6:	f006 fb83 	bl	8007ae0 <HAL_RCC_ClockConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80013e0:	f001 f888 	bl	80024f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <SystemClock_Config+0x174>)
 80013e6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_LTDC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001400:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800140e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001412:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001416:	2300      	movs	r3, #0
 8001418:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV2;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 8001420:	2303      	movs	r3, #3
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.PLLSAI2.PLLSAI2M = 2;
 8001424:	2302      	movs	r3, #2
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 8001428:	2308      	movs	r3, #8
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 800142c:	2302      	movs	r3, #2
 800142e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8001430:	2302      	movs	r3, #2
 8001432:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8001434:	2302      	movs	r3, #2
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 8001438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800143c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800143e:	2303      	movs	r3, #3
 8001440:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001442:	2305      	movs	r3, #5
 8001444:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8001446:	2360      	movs	r3, #96	; 0x60
 8001448:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 800144a:	2319      	movs	r3, #25
 800144c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800144e:	2304      	movs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8001452:	2304      	movs	r3, #4
 8001454:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <SystemClock_Config+0x178>)
 8001458:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4618      	mov	r0, r3
 800145e:	f006 fdeb 	bl	8008038 <HAL_RCCEx_PeriphCLKConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x168>
  {
    Error_Handler();
 8001468:	f001 f844 	bl	80024f4 <Error_Handler>
  }
}
 800146c:	bf00      	nop
 800146e:	37f8      	adds	r7, #248	; 0xf8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000
 8001478:	00536986 	.word	0x00536986
 800147c:	01010000 	.word	0x01010000

08001480 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001486:	463b      	mov	r3, r7
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <MX_ADC1_Init+0xbc>)
 8001498:	4a29      	ldr	r2, [pc, #164]	; (8001540 <MX_ADC1_Init+0xc0>)
 800149a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800149c:	4b27      	ldr	r3, [pc, #156]	; (800153c <MX_ADC1_Init+0xbc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <MX_ADC1_Init+0xbc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a8:	4b24      	ldr	r3, [pc, #144]	; (800153c <MX_ADC1_Init+0xbc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ae:	4b23      	ldr	r3, [pc, #140]	; (800153c <MX_ADC1_Init+0xbc>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b4:	4b21      	ldr	r3, [pc, #132]	; (800153c <MX_ADC1_Init+0xbc>)
 80014b6:	2204      	movs	r2, #4
 80014b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <MX_ADC1_Init+0xbc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	; (800153c <MX_ADC1_Init+0xbc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <MX_ADC1_Init+0xbc>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <MX_ADC1_Init+0xbc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <MX_ADC1_Init+0xbc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <MX_ADC1_Init+0xbc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <MX_ADC1_Init+0xbc>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_ADC1_Init+0xbc>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <MX_ADC1_Init+0xbc>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014f6:	4811      	ldr	r0, [pc, #68]	; (800153c <MX_ADC1_Init+0xbc>)
 80014f8:	f002 f912 	bl	8003720 <HAL_ADC_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001502:	f000 fff7 	bl	80024f4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_ADC1_Init+0xc4>)
 8001508:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800150a:	2306      	movs	r3, #6
 800150c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001512:	237f      	movs	r3, #127	; 0x7f
 8001514:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001516:	2304      	movs	r3, #4
 8001518:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151e:	463b      	mov	r3, r7
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <MX_ADC1_Init+0xbc>)
 8001524:	f002 fa46 	bl	80039b4 <HAL_ADC_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800152e:	f000 ffe1 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000f08 	.word	0x20000f08
 8001540:	50040000 	.word	0x50040000
 8001544:	80000001 	.word	0x80000001

08001548 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <MX_CRC_Init+0x3c>)
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <MX_CRC_Init+0x40>)
 8001550:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_CRC_Init+0x3c>)
 8001554:	2200      	movs	r2, #0
 8001556:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <MX_CRC_Init+0x3c>)
 800155a:	2200      	movs	r2, #0
 800155c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_CRC_Init+0x3c>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <MX_CRC_Init+0x3c>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_CRC_Init+0x3c>)
 800156c:	2201      	movs	r2, #1
 800156e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001570:	4804      	ldr	r0, [pc, #16]	; (8001584 <MX_CRC_Init+0x3c>)
 8001572:	f002 ff2b 	bl	80043cc <HAL_CRC_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800157c:	f000 ffba 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000ca4 	.word	0x20000ca4
 8001588:	40023000 	.word	0x40023000

0800158c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001592:	463b      	mov	r3, r7
 8001594:	2228      	movs	r2, #40	; 0x28
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f011 fd28 	bl	8012fee <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <MX_DAC1_Init+0x60>)
 80015a0:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <MX_DAC1_Init+0x64>)
 80015a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015a4:	4811      	ldr	r0, [pc, #68]	; (80015ec <MX_DAC1_Init+0x60>)
 80015a6:	f002 fffb 	bl	80045a0 <HAL_DAC_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015b0:	f000 ffa0 	bl	80024f4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	4806      	ldr	r0, [pc, #24]	; (80015ec <MX_DAC1_Init+0x60>)
 80015d4:	f003 f806 	bl	80045e4 <HAL_DAC_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 80015de:	f000 ff89 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000c04 	.word	0x20000c04
 80015f0:	40007400 	.word	0x40007400

080015f4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80015f8:	4b43      	ldr	r3, [pc, #268]	; (8001708 <MX_DFSDM1_Init+0x114>)
 80015fa:	4a44      	ldr	r2, [pc, #272]	; (800170c <MX_DFSDM1_Init+0x118>)
 80015fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80015fe:	4b42      	ldr	r3, [pc, #264]	; (8001708 <MX_DFSDM1_Init+0x114>)
 8001600:	2200      	movs	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 8001604:	4b40      	ldr	r3, [pc, #256]	; (8001708 <MX_DFSDM1_Init+0x114>)
 8001606:	2200      	movs	r2, #0
 8001608:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 800160a:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <MX_DFSDM1_Init+0x114>)
 800160c:	2200      	movs	r2, #0
 800160e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8001610:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <MX_DFSDM1_Init+0x114>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 1;
 8001616:	4b3c      	ldr	r3, [pc, #240]	; (8001708 <MX_DFSDM1_Init+0x114>)
 8001618:	2201      	movs	r2, #1
 800161a:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800161c:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <MX_DFSDM1_Init+0x114>)
 800161e:	2201      	movs	r2, #1
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8001622:	4839      	ldr	r0, [pc, #228]	; (8001708 <MX_DFSDM1_Init+0x114>)
 8001624:	f003 f9f2 	bl	8004a0c <HAL_DFSDM_FilterInit>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 800162e:	f000 ff61 	bl	80024f4 <Error_Handler>
  }
  hdfsdm1_channel5.Instance = DFSDM1_Channel5;
 8001632:	4b37      	ldr	r3, [pc, #220]	; (8001710 <MX_DFSDM1_Init+0x11c>)
 8001634:	4a37      	ldr	r2, [pc, #220]	; (8001714 <MX_DFSDM1_Init+0x120>)
 8001636:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel5.Init.OutputClock.Activation = ENABLE;
 8001638:	4b35      	ldr	r3, [pc, #212]	; (8001710 <MX_DFSDM1_Init+0x11c>)
 800163a:	2201      	movs	r2, #1
 800163c:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel5.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800163e:	4b34      	ldr	r3, [pc, #208]	; (8001710 <MX_DFSDM1_Init+0x11c>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel5.Init.OutputClock.Divider = 2;
 8001644:	4b32      	ldr	r3, [pc, #200]	; (8001710 <MX_DFSDM1_Init+0x11c>)
 8001646:	2202      	movs	r2, #2
 8001648:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel5.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800164a:	4b31      	ldr	r3, [pc, #196]	; (8001710 <MX_DFSDM1_Init+0x11c>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel5.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001650:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <MX_DFSDM1_Init+0x11c>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel5.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001656:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <MX_DFSDM1_Init+0x11c>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel5.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800165c:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <MX_DFSDM1_Init+0x11c>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel5.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001662:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <MX_DFSDM1_Init+0x11c>)
 8001664:	2204      	movs	r2, #4
 8001666:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel5.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001668:	4b29      	ldr	r3, [pc, #164]	; (8001710 <MX_DFSDM1_Init+0x11c>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel5.Init.Awd.Oversampling = 1;
 800166e:	4b28      	ldr	r3, [pc, #160]	; (8001710 <MX_DFSDM1_Init+0x11c>)
 8001670:	2201      	movs	r2, #1
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel5.Init.Offset = 0;
 8001674:	4b26      	ldr	r3, [pc, #152]	; (8001710 <MX_DFSDM1_Init+0x11c>)
 8001676:	2200      	movs	r2, #0
 8001678:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel5.Init.RightBitShift = 0x00;
 800167a:	4b25      	ldr	r3, [pc, #148]	; (8001710 <MX_DFSDM1_Init+0x11c>)
 800167c:	2200      	movs	r2, #0
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel5) != HAL_OK)
 8001680:	4823      	ldr	r0, [pc, #140]	; (8001710 <MX_DFSDM1_Init+0x11c>)
 8001682:	f003 f8ef 	bl	8004864 <HAL_DFSDM_ChannelInit>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_DFSDM1_Init+0x9c>
  {
    Error_Handler();
 800168c:	f000 ff32 	bl	80024f4 <Error_Handler>
  }
  hdfsdm1_channel7.Instance = DFSDM1_Channel7;
 8001690:	4b21      	ldr	r3, [pc, #132]	; (8001718 <MX_DFSDM1_Init+0x124>)
 8001692:	4a22      	ldr	r2, [pc, #136]	; (800171c <MX_DFSDM1_Init+0x128>)
 8001694:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel7.Init.OutputClock.Activation = ENABLE;
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <MX_DFSDM1_Init+0x124>)
 8001698:	2201      	movs	r2, #1
 800169a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <MX_DFSDM1_Init+0x124>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel7.Init.OutputClock.Divider = 2;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <MX_DFSDM1_Init+0x124>)
 80016a4:	2202      	movs	r2, #2
 80016a6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <MX_DFSDM1_Init+0x124>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <MX_DFSDM1_Init+0x124>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <MX_DFSDM1_Init+0x124>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <MX_DFSDM1_Init+0x124>)
 80016bc:	2200      	movs	r2, #0
 80016be:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <MX_DFSDM1_Init+0x124>)
 80016c2:	2204      	movs	r2, #4
 80016c4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_DFSDM1_Init+0x124>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel7.Init.Awd.Oversampling = 1;
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <MX_DFSDM1_Init+0x124>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel7.Init.Offset = 0;
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_DFSDM1_Init+0x124>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel7.Init.RightBitShift = 0x00;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <MX_DFSDM1_Init+0x124>)
 80016da:	2200      	movs	r2, #0
 80016dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel7) != HAL_OK)
 80016de:	480e      	ldr	r0, [pc, #56]	; (8001718 <MX_DFSDM1_Init+0x124>)
 80016e0:	f003 f8c0 	bl	8004864 <HAL_DFSDM_ChannelInit>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_DFSDM1_Init+0xfa>
  {
    Error_Handler();
 80016ea:	f000 ff03 	bl	80024f4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_5, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80016ee:	2201      	movs	r2, #1
 80016f0:	490b      	ldr	r1, [pc, #44]	; (8001720 <MX_DFSDM1_Init+0x12c>)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_DFSDM1_Init+0x114>)
 80016f4:	f003 fa64 	bl	8004bc0 <HAL_DFSDM_FilterConfigRegChannel>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_DFSDM1_Init+0x10e>
  {
    Error_Handler();
 80016fe:	f000 fef9 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000cc8 	.word	0x20000cc8
 800170c:	40016100 	.word	0x40016100
 8001710:	20000f70 	.word	0x20000f70
 8001714:	400160a0 	.word	0x400160a0
 8001718:	2000102c 	.word	0x2000102c
 800171c:	400160e0 	.word	0x400160e0
 8001720:	00050020 	.word	0x00050020

08001724 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <MX_I2C2_SMBUS_Init+0x78>)
 800172a:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <MX_I2C2_SMBUS_Init+0x7c>)
 800172c:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x307075B1;
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <MX_I2C2_SMBUS_Init+0x78>)
 8001730:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <MX_I2C2_SMBUS_Init+0x80>)
 8001732:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <MX_I2C2_SMBUS_Init+0x78>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <MX_I2C2_SMBUS_Init+0x78>)
 800173c:	2202      	movs	r2, #2
 800173e:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <MX_I2C2_SMBUS_Init+0x78>)
 8001742:	2201      	movs	r2, #1
 8001744:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <MX_I2C2_SMBUS_Init+0x78>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <MX_I2C2_SMBUS_Init+0x78>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_I2C2_SMBUS_Init+0x78>)
 8001754:	2200      	movs	r2, #0
 8001756:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <MX_I2C2_SMBUS_Init+0x78>)
 800175a:	2200      	movs	r2, #0
 800175c:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_I2C2_SMBUS_Init+0x78>)
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <MX_I2C2_SMBUS_Init+0x78>)
 8001766:	2200      	movs	r2, #0
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_I2C2_SMBUS_Init+0x78>)
 800176c:	2200      	movs	r2, #0
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x000085B8;
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <MX_I2C2_SMBUS_Init+0x78>)
 8001772:	f248 52b8 	movw	r2, #34232	; 0x85b8
 8001776:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <MX_I2C2_SMBUS_Init+0x78>)
 800177a:	f008 fcd1 	bl	800a120 <HAL_SMBUS_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001784:	f000 feb6 	bl	80024f4 <Error_Handler>
  }
  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <MX_I2C2_SMBUS_Init+0x78>)
 800178a:	f008 fd81 	bl	800a290 <HAL_SMBUS_EnableAlert_IT>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 8001794:	f000 feae 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20001234 	.word	0x20001234
 80017a0:	40005800 	.word	0x40005800
 80017a4:	307075b1 	.word	0x307075b1

080017a8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <MX_I2C3_Init+0x74>)
 80017ae:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <MX_I2C3_Init+0x78>)
 80017b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_I2C3_Init+0x74>)
 80017b4:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <MX_I2C3_Init+0x7c>)
 80017b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <MX_I2C3_Init+0x74>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_I2C3_Init+0x74>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <MX_I2C3_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_I2C3_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <MX_I2C3_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_I2C3_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_I2C3_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017e2:	480e      	ldr	r0, [pc, #56]	; (800181c <MX_I2C3_Init+0x74>)
 80017e4:	f003 ff72 	bl	80056cc <HAL_I2C_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80017ee:	f000 fe81 	bl	80024f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017f2:	2100      	movs	r1, #0
 80017f4:	4809      	ldr	r0, [pc, #36]	; (800181c <MX_I2C3_Init+0x74>)
 80017f6:	f003 fff8 	bl	80057ea <HAL_I2CEx_ConfigAnalogFilter>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001800:	f000 fe78 	bl	80024f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001804:	2100      	movs	r1, #0
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_I2C3_Init+0x74>)
 8001808:	f004 f83a 	bl	8005880 <HAL_I2CEx_ConfigDigitalFilter>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001812:	f000 fe6f 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000b08 	.word	0x20000b08
 8001820:	40005c00 	.word	0x40005c00
 8001824:	307075b1 	.word	0x307075b1

08001828 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <MX_I2C4_Init+0x74>)
 800182e:	4a1c      	ldr	r2, [pc, #112]	; (80018a0 <MX_I2C4_Init+0x78>)
 8001830:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8001832:	4b1a      	ldr	r3, [pc, #104]	; (800189c <MX_I2C4_Init+0x74>)
 8001834:	4a1b      	ldr	r2, [pc, #108]	; (80018a4 <MX_I2C4_Init+0x7c>)
 8001836:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <MX_I2C4_Init+0x74>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800183e:	4b17      	ldr	r3, [pc, #92]	; (800189c <MX_I2C4_Init+0x74>)
 8001840:	2201      	movs	r2, #1
 8001842:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <MX_I2C4_Init+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <MX_I2C4_Init+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_I2C4_Init+0x74>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_I2C4_Init+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_I2C4_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001862:	480e      	ldr	r0, [pc, #56]	; (800189c <MX_I2C4_Init+0x74>)
 8001864:	f003 ff32 	bl	80056cc <HAL_I2C_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800186e:	f000 fe41 	bl	80024f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001872:	2100      	movs	r1, #0
 8001874:	4809      	ldr	r0, [pc, #36]	; (800189c <MX_I2C4_Init+0x74>)
 8001876:	f003 ffb8 	bl	80057ea <HAL_I2CEx_ConfigAnalogFilter>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001880:	f000 fe38 	bl	80024f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001884:	2100      	movs	r1, #0
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_I2C4_Init+0x74>)
 8001888:	f003 fffa 	bl	8005880 <HAL_I2CEx_ConfigDigitalFilter>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001892:	f000 fe2f 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000b54 	.word	0x20000b54
 80018a0:	40008400 	.word	0x40008400
 80018a4:	307075b1 	.word	0x307075b1

080018a8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b09a      	sub	sp, #104	; 0x68
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80018ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018b2:	2234      	movs	r2, #52	; 0x34
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f011 fb99 	bl	8012fee <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80018bc:	463b      	mov	r3, r7
 80018be:	2234      	movs	r2, #52	; 0x34
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f011 fb93 	bl	8012fee <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80018c8:	4b58      	ldr	r3, [pc, #352]	; (8001a2c <MX_LTDC_Init+0x184>)
 80018ca:	4a59      	ldr	r2, [pc, #356]	; (8001a30 <MX_LTDC_Init+0x188>)
 80018cc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80018ce:	4b57      	ldr	r3, [pc, #348]	; (8001a2c <MX_LTDC_Init+0x184>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80018d4:	4b55      	ldr	r3, [pc, #340]	; (8001a2c <MX_LTDC_Init+0x184>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80018da:	4b54      	ldr	r3, [pc, #336]	; (8001a2c <MX_LTDC_Init+0x184>)
 80018dc:	2200      	movs	r2, #0
 80018de:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80018e0:	4b52      	ldr	r3, [pc, #328]	; (8001a2c <MX_LTDC_Init+0x184>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 80018e6:	4b51      	ldr	r3, [pc, #324]	; (8001a2c <MX_LTDC_Init+0x184>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 80018ec:	4b4f      	ldr	r3, [pc, #316]	; (8001a2c <MX_LTDC_Init+0x184>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 80018f2:	4b4e      	ldr	r3, [pc, #312]	; (8001a2c <MX_LTDC_Init+0x184>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 80018f8:	4b4c      	ldr	r3, [pc, #304]	; (8001a2c <MX_LTDC_Init+0x184>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 801;
 80018fe:	4b4b      	ldr	r3, [pc, #300]	; (8001a2c <MX_LTDC_Init+0x184>)
 8001900:	f240 3221 	movw	r2, #801	; 0x321
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8001906:	4b49      	ldr	r3, [pc, #292]	; (8001a2c <MX_LTDC_Init+0x184>)
 8001908:	f240 12e1 	movw	r2, #481	; 0x1e1
 800190c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 802;
 800190e:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <MX_LTDC_Init+0x184>)
 8001910:	f240 3222 	movw	r2, #802	; 0x322
 8001914:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 8001916:	4b45      	ldr	r3, [pc, #276]	; (8001a2c <MX_LTDC_Init+0x184>)
 8001918:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800191c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800191e:	4b43      	ldr	r3, [pc, #268]	; (8001a2c <MX_LTDC_Init+0x184>)
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001926:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <MX_LTDC_Init+0x184>)
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800192e:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <MX_LTDC_Init+0x184>)
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001936:	483d      	ldr	r0, [pc, #244]	; (8001a2c <MX_LTDC_Init+0x184>)
 8001938:	f003 ffee 	bl	8005918 <HAL_LTDC_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001942:	f000 fdd7 	bl	80024f4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001956:	2300      	movs	r3, #0
 8001958:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001966:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001968:	2305      	movs	r3, #5
 800196a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800198a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800198e:	2200      	movs	r2, #0
 8001990:	4619      	mov	r1, r3
 8001992:	4826      	ldr	r0, [pc, #152]	; (8001a2c <MX_LTDC_Init+0x184>)
 8001994:	f004 f890 	bl	8005ab8 <HAL_LTDC_ConfigLayer>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800199e:	f000 fda9 	bl	80024f4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80019be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80019c4:	2305      	movs	r3, #5
 80019c6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80019e6:	463b      	mov	r3, r7
 80019e8:	2201      	movs	r2, #1
 80019ea:	4619      	mov	r1, r3
 80019ec:	480f      	ldr	r0, [pc, #60]	; (8001a2c <MX_LTDC_Init+0x184>)
 80019ee:	f004 f863 	bl	8005ab8 <HAL_LTDC_ConfigLayer>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80019f8:	f000 fd7c 	bl	80024f4 <Error_Handler>
  }
  if (HAL_LTDC_SetPitch(&hltdc, 0, 0) != HAL_OK)
 80019fc:	2200      	movs	r2, #0
 80019fe:	2100      	movs	r1, #0
 8001a00:	480a      	ldr	r0, [pc, #40]	; (8001a2c <MX_LTDC_Init+0x184>)
 8001a02:	f004 f897 	bl	8005b34 <HAL_LTDC_SetPitch>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_LTDC_Init+0x168>
  {
    Error_Handler();
 8001a0c:	f000 fd72 	bl	80024f4 <Error_Handler>
  }
  if (HAL_LTDC_SetPitch(&hltdc, 0, 1) != HAL_OK)
 8001a10:	2201      	movs	r2, #1
 8001a12:	2100      	movs	r1, #0
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_LTDC_Init+0x184>)
 8001a16:	f004 f88d 	bl	8005b34 <HAL_LTDC_SetPitch>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_LTDC_Init+0x17c>
  {
    Error_Handler();
 8001a20:	f000 fd68 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	3768      	adds	r7, #104	; 0x68
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000dcc 	.word	0x20000dcc
 8001a30:	40016800 	.word	0x40016800

08001a34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	2228      	movs	r2, #40	; 0x28
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f011 fad4 	bl	8012fee <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <MX_RTC_Init+0x94>)
 8001a48:	4a20      	ldr	r2, [pc, #128]	; (8001acc <MX_RTC_Init+0x98>)
 8001a4a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <MX_RTC_Init+0x94>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a52:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <MX_RTC_Init+0x94>)
 8001a54:	227f      	movs	r2, #127	; 0x7f
 8001a56:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <MX_RTC_Init+0x94>)
 8001a5a:	22ff      	movs	r2, #255	; 0xff
 8001a5c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_RTC_Init+0x94>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <MX_RTC_Init+0x94>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <MX_RTC_Init+0x94>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <MX_RTC_Init+0x94>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a76:	4814      	ldr	r0, [pc, #80]	; (8001ac8 <MX_RTC_Init+0x94>)
 8001a78:	f007 ff6e 	bl	8009958 <HAL_RTC_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001a82:	f000 fd37 	bl	80024f4 <Error_Handler>
  }
  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8001a86:	2301      	movs	r3, #1
 8001a88:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8001aaa:	463b      	mov	r3, r7
 8001aac:	4619      	mov	r1, r3
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <MX_RTC_Init+0x94>)
 8001ab0:	f008 f864 	bl	8009b7c <HAL_RTCEx_SetTamper>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8001aba:	f000 fd1b 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	3728      	adds	r7, #40	; 0x28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20001008 	.word	0x20001008
 8001acc:	40002800 	.word	0x40002800

08001ad0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001ad4:	4b5a      	ldr	r3, [pc, #360]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001ad6:	4a5b      	ldr	r2, [pc, #364]	; (8001c44 <MX_SAI1_Init+0x174>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ada:	4b59      	ldr	r3, [pc, #356]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001ae0:	4b57      	ldr	r3, [pc, #348]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001ae6:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001ae8:	2240      	movs	r2, #64	; 0x40
 8001aea:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001aec:	4b54      	ldr	r3, [pc, #336]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001af2:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001af8:	4b51      	ldr	r3, [pc, #324]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001afe:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b04:	4b4e      	ldr	r3, [pc, #312]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001b0a:	4b4d      	ldr	r3, [pc, #308]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b10:	4b4b      	ldr	r3, [pc, #300]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001b16:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b18:	4a4b      	ldr	r2, [pc, #300]	; (8001c48 <MX_SAI1_Init+0x178>)
 8001b1a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b1c:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b22:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b28:	4b45      	ldr	r3, [pc, #276]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b2e:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8001b34:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 8001b3c:	4b40      	ldr	r3, [pc, #256]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001b42:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b48:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001b50:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b56:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b5c:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b62:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b6e:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001b74:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001b80:	482f      	ldr	r0, [pc, #188]	; (8001c40 <MX_SAI1_Init+0x170>)
 8001b82:	f008 f8b7 	bl	8009cf4 <HAL_SAI_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8001b8c:	f000 fcb2 	bl	80024f4 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001b90:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001b92:	4a2f      	ldr	r2, [pc, #188]	; (8001c50 <MX_SAI1_Init+0x180>)
 8001b94:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001ba4:	2240      	movs	r2, #64	; 0x40
 8001ba6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001bae:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001bc6:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8001be6:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001bec:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001bf6:	2208      	movs	r2, #8
 8001bf8:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001c2a:	4808      	ldr	r0, [pc, #32]	; (8001c4c <MX_SAI1_Init+0x17c>)
 8001c2c:	f008 f862 	bl	8009cf4 <HAL_SAI_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_SAI1_Init+0x16a>
  {
    Error_Handler();
 8001c36:	f000 fc5d 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20001114 	.word	0x20001114
 8001c44:	40015404 	.word	0x40015404
 8001c48:	0002ee00 	.word	0x0002ee00
 8001c4c:	20000e74 	.word	0x20000e74
 8001c50:	40015424 	.word	0x40015424

08001c54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <MX_SPI1_Init+0x74>)
 8001c5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <MX_SPI1_Init+0x78>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <MX_SPI1_Init+0x74>)
 8001c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <MX_SPI1_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c6c:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <MX_SPI1_Init+0x74>)
 8001c6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <MX_SPI1_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <MX_SPI1_Init+0x74>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_SPI1_Init+0x74>)
 8001c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <MX_SPI1_Init+0x74>)
 8001c8a:	2228      	movs	r2, #40	; 0x28
 8001c8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <MX_SPI1_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <MX_SPI1_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <MX_SPI1_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <MX_SPI1_Init+0x74>)
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <MX_SPI1_Init+0x74>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <MX_SPI1_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cb2:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_SPI1_Init+0x74>)
 8001cb4:	f009 f95a 	bl	800af6c <HAL_SPI_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001cbe:	f000 fc19 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20001064 	.word	0x20001064
 8001ccc:	40013000 	.word	0x40013000

08001cd0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <MX_SPI2_Init+0x74>)
 8001cd6:	4a1c      	ldr	r2, [pc, #112]	; (8001d48 <MX_SPI2_Init+0x78>)
 8001cd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <MX_SPI2_Init+0x74>)
 8001cdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ce0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <MX_SPI2_Init+0x74>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ce8:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <MX_SPI2_Init+0x74>)
 8001cea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <MX_SPI2_Init+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <MX_SPI2_Init+0x74>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_SPI2_Init+0x74>)
 8001cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d02:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <MX_SPI2_Init+0x74>)
 8001d06:	2228      	movs	r2, #40	; 0x28
 8001d08:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_SPI2_Init+0x74>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_SPI2_Init+0x74>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <MX_SPI2_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_SPI2_Init+0x74>)
 8001d1e:	2207      	movs	r2, #7
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <MX_SPI2_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_SPI2_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_SPI2_Init+0x74>)
 8001d30:	f009 f91c 	bl	800af6c <HAL_SPI_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d3a:	f000 fbdb 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000ba0 	.word	0x20000ba0
 8001d48:	40003800 	.word	0x40003800

08001d4c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <MX_SPI3_Init+0x74>)
 8001d52:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <MX_SPI3_Init+0x78>)
 8001d54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <MX_SPI3_Init+0x74>)
 8001d58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d5c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d5e:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <MX_SPI3_Init+0x74>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <MX_SPI3_Init+0x74>)
 8001d66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d6a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <MX_SPI3_Init+0x74>)
 8001d6e:	2202      	movs	r2, #2
 8001d70:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <MX_SPI3_Init+0x74>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <MX_SPI3_Init+0x74>)
 8001d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d7e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <MX_SPI3_Init+0x74>)
 8001d82:	2218      	movs	r2, #24
 8001d84:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <MX_SPI3_Init+0x74>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <MX_SPI3_Init+0x74>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <MX_SPI3_Init+0x74>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <MX_SPI3_Init+0x74>)
 8001d9a:	2207      	movs	r2, #7
 8001d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <MX_SPI3_Init+0x74>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <MX_SPI3_Init+0x74>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_SPI3_Init+0x74>)
 8001dac:	f009 f8de 	bl	800af6c <HAL_SPI_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001db6:	f000 fb9d 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000d68 	.word	0x20000d68
 8001dc4:	40003c00 	.word	0x40003c00

08001dc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dda:	463b      	mov	r3, r7
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
 8001de8:	615a      	str	r2, [r3, #20]
 8001dea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dec:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <MX_TIM2_Init+0xb0>)
 8001dee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001df4:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <MX_TIM2_Init+0xb0>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <MX_TIM2_Init+0xb0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <MX_TIM2_Init+0xb0>)
 8001e02:	f04f 32ff 	mov.w	r2, #4294967295
 8001e06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <MX_TIM2_Init+0xb0>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <MX_TIM2_Init+0xb0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e14:	4818      	ldr	r0, [pc, #96]	; (8001e78 <MX_TIM2_Init+0xb0>)
 8001e16:	f009 fa62 	bl	800b2de <HAL_TIM_PWM_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001e20:	f000 fb68 	bl	80024f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	4619      	mov	r1, r3
 8001e32:	4811      	ldr	r0, [pc, #68]	; (8001e78 <MX_TIM2_Init+0xb0>)
 8001e34:	f009 fffa 	bl	800be2c <HAL_TIMEx_MasterConfigSynchronization>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001e3e:	f000 fb59 	bl	80024f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e42:	2360      	movs	r3, #96	; 0x60
 8001e44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e52:	463b      	mov	r3, r7
 8001e54:	2200      	movs	r2, #0
 8001e56:	4619      	mov	r1, r3
 8001e58:	4807      	ldr	r0, [pc, #28]	; (8001e78 <MX_TIM2_Init+0xb0>)
 8001e5a:	f009 fb67 	bl	800b52c <HAL_TIM_PWM_ConfigChannel>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001e64:	f000 fb46 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e68:	4803      	ldr	r0, [pc, #12]	; (8001e78 <MX_TIM2_Init+0xb0>)
 8001e6a:	f000 ff6d 	bl	8002d48 <HAL_TIM_MspPostInit>

}
 8001e6e:	bf00      	nop
 8001e70:	3728      	adds	r7, #40	; 0x28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200010c8 	.word	0x200010c8

08001e7c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e8e:	463b      	mov	r3, r7
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
 8001e9c:	615a      	str	r2, [r3, #20]
 8001e9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ea0:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <MX_TIM5_Init+0xc0>)
 8001ea2:	4a27      	ldr	r2, [pc, #156]	; (8001f40 <MX_TIM5_Init+0xc4>)
 8001ea4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ea6:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <MX_TIM5_Init+0xc0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <MX_TIM5_Init+0xc0>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <MX_TIM5_Init+0xc0>)
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <MX_TIM5_Init+0xc0>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <MX_TIM5_Init+0xc0>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001ec6:	481d      	ldr	r0, [pc, #116]	; (8001f3c <MX_TIM5_Init+0xc0>)
 8001ec8:	f009 f9b2 	bl	800b230 <HAL_TIM_OC_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001ed2:	f000 fb0f 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8001ed6:	2108      	movs	r1, #8
 8001ed8:	4818      	ldr	r0, [pc, #96]	; (8001f3c <MX_TIM5_Init+0xc0>)
 8001eda:	f009 fa57 	bl	800b38c <HAL_TIM_OnePulse_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8001ee4:	f000 fb06 	bl	80024f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ef0:	f107 031c 	add.w	r3, r7, #28
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4811      	ldr	r0, [pc, #68]	; (8001f3c <MX_TIM5_Init+0xc0>)
 8001ef8:	f009 ff98 	bl	800be2c <HAL_TIMEx_MasterConfigSynchronization>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001f02:	f000 faf7 	bl	80024f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8001f06:	2350      	movs	r3, #80	; 0x50
 8001f08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f16:	463b      	mov	r3, r7
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4807      	ldr	r0, [pc, #28]	; (8001f3c <MX_TIM5_Init+0xc0>)
 8001f1e:	f009 fa8f 	bl	800b440 <HAL_TIM_OC_ConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001f28:	f000 fae4 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001f2c:	4803      	ldr	r0, [pc, #12]	; (8001f3c <MX_TIM5_Init+0xc0>)
 8001f2e:	f000 ff0b 	bl	8002d48 <HAL_TIM_MspPostInit>

}
 8001f32:	bf00      	nop
 8001f34:	3728      	adds	r7, #40	; 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000d1c 	.word	0x20000d1c
 8001f40:	40000c00 	.word	0x40000c00

08001f44 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <MX_TIM16_Init+0x44>)
 8001f4a:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <MX_TIM16_Init+0x48>)
 8001f4c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 120-1;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <MX_TIM16_Init+0x44>)
 8001f50:	2277      	movs	r2, #119	; 0x77
 8001f52:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <MX_TIM16_Init+0x44>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <MX_TIM16_Init+0x44>)
 8001f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f60:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <MX_TIM16_Init+0x44>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <MX_TIM16_Init+0x44>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <MX_TIM16_Init+0x44>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f74:	4804      	ldr	r0, [pc, #16]	; (8001f88 <MX_TIM16_Init+0x44>)
 8001f76:	f009 f89c 	bl	800b0b2 <HAL_TIM_Base_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001f80:	f000 fab8 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20001284 	.word	0x20001284
 8001f8c:	40014400 	.word	0x40014400

08001f90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f94:	4b23      	ldr	r3, [pc, #140]	; (8002024 <MX_USART2_UART_Init+0x94>)
 8001f96:	4a24      	ldr	r2, [pc, #144]	; (8002028 <MX_USART2_UART_Init+0x98>)
 8001f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f9a:	4b22      	ldr	r3, [pc, #136]	; (8002024 <MX_USART2_UART_Init+0x94>)
 8001f9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <MX_USART2_UART_Init+0x94>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <MX_USART2_UART_Init+0x94>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <MX_USART2_UART_Init+0x94>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <MX_USART2_UART_Init+0x94>)
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <MX_USART2_UART_Init+0x94>)
 8001fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fc0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <MX_USART2_UART_Init+0x94>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fc8:	4b16      	ldr	r3, [pc, #88]	; (8002024 <MX_USART2_UART_Init+0x94>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <MX_USART2_UART_Init+0x94>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <MX_USART2_UART_Init+0x94>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fda:	4812      	ldr	r0, [pc, #72]	; (8002024 <MX_USART2_UART_Init+0x94>)
 8001fdc:	f009 ffae 	bl	800bf3c <HAL_UART_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001fe6:	f000 fa85 	bl	80024f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fea:	2100      	movs	r1, #0
 8001fec:	480d      	ldr	r0, [pc, #52]	; (8002024 <MX_USART2_UART_Init+0x94>)
 8001fee:	f00a fc6a 	bl	800c8c6 <HAL_UARTEx_SetTxFifoThreshold>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001ff8:	f000 fa7c 	bl	80024f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4809      	ldr	r0, [pc, #36]	; (8002024 <MX_USART2_UART_Init+0x94>)
 8002000:	f00a fc9f 	bl	800c942 <HAL_UARTEx_SetRxFifoThreshold>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800200a:	f000 fa73 	bl	80024f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800200e:	4805      	ldr	r0, [pc, #20]	; (8002024 <MX_USART2_UART_Init+0x94>)
 8002010:	f00a fc20 	bl	800c854 <HAL_UARTEx_DisableFifoMode>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800201a:	f000 fa6b 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200011a8 	.word	0x200011a8
 8002028:	40004400 	.word	0x40004400

0800202c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <MX_USART3_UART_Init+0x94>)
 8002032:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <MX_USART3_UART_Init+0x98>)
 8002034:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002036:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <MX_USART3_UART_Init+0x94>)
 8002038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800203c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <MX_USART3_UART_Init+0x94>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <MX_USART3_UART_Init+0x94>)
 8002046:	2200      	movs	r2, #0
 8002048:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <MX_USART3_UART_Init+0x94>)
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <MX_USART3_UART_Init+0x94>)
 8002052:	220c      	movs	r2, #12
 8002054:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002056:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <MX_USART3_UART_Init+0x94>)
 8002058:	f44f 7240 	mov.w	r2, #768	; 0x300
 800205c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <MX_USART3_UART_Init+0x94>)
 8002060:	2200      	movs	r2, #0
 8002062:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <MX_USART3_UART_Init+0x94>)
 8002066:	2200      	movs	r2, #0
 8002068:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <MX_USART3_UART_Init+0x94>)
 800206c:	2200      	movs	r2, #0
 800206e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <MX_USART3_UART_Init+0x94>)
 8002072:	2200      	movs	r2, #0
 8002074:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002076:	4812      	ldr	r0, [pc, #72]	; (80020c0 <MX_USART3_UART_Init+0x94>)
 8002078:	f009 ff60 	bl	800bf3c <HAL_UART_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8002082:	f000 fa37 	bl	80024f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002086:	2100      	movs	r1, #0
 8002088:	480d      	ldr	r0, [pc, #52]	; (80020c0 <MX_USART3_UART_Init+0x94>)
 800208a:	f00a fc1c 	bl	800c8c6 <HAL_UARTEx_SetTxFifoThreshold>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8002094:	f000 fa2e 	bl	80024f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002098:	2100      	movs	r1, #0
 800209a:	4809      	ldr	r0, [pc, #36]	; (80020c0 <MX_USART3_UART_Init+0x94>)
 800209c:	f00a fc51 	bl	800c942 <HAL_UARTEx_SetRxFifoThreshold>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 80020a6:	f000 fa25 	bl	80024f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_USART3_UART_Init+0x94>)
 80020ac:	f00a fbd2 	bl	800c854 <HAL_UARTEx_DisableFifoMode>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 80020b6:	f000 fa1d 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000c18 	.word	0x20000c18
 80020c4:	40004800 	.word	0x40004800

080020c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <MX_DMA_Init+0x50>)
 80020d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d2:	4a11      	ldr	r2, [pc, #68]	; (8002118 <MX_DMA_Init+0x50>)
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	6493      	str	r3, [r2, #72]	; 0x48
 80020da:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <MX_DMA_Init+0x50>)
 80020dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020e6:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <MX_DMA_Init+0x50>)
 80020e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <MX_DMA_Init+0x50>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6493      	str	r3, [r2, #72]	; 0x48
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <MX_DMA_Init+0x50>)
 80020f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	200b      	movs	r0, #11
 8002104:	f002 f92b 	bl	800435e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002108:	200b      	movs	r0, #11
 800210a:	f002 f944 	bl	8004396 <HAL_NVIC_EnableIRQ>

}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000

0800211c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	; 0x38
 8002120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002132:	4bb5      	ldr	r3, [pc, #724]	; (8002408 <MX_GPIO_Init+0x2ec>)
 8002134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002136:	4ab4      	ldr	r2, [pc, #720]	; (8002408 <MX_GPIO_Init+0x2ec>)
 8002138:	f043 0310 	orr.w	r3, r3, #16
 800213c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800213e:	4bb2      	ldr	r3, [pc, #712]	; (8002408 <MX_GPIO_Init+0x2ec>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	623b      	str	r3, [r7, #32]
 8002148:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800214a:	4baf      	ldr	r3, [pc, #700]	; (8002408 <MX_GPIO_Init+0x2ec>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	4aae      	ldr	r2, [pc, #696]	; (8002408 <MX_GPIO_Init+0x2ec>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002156:	4bac      	ldr	r3, [pc, #688]	; (8002408 <MX_GPIO_Init+0x2ec>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002162:	4ba9      	ldr	r3, [pc, #676]	; (8002408 <MX_GPIO_Init+0x2ec>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002166:	4aa8      	ldr	r2, [pc, #672]	; (8002408 <MX_GPIO_Init+0x2ec>)
 8002168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800216e:	4ba6      	ldr	r3, [pc, #664]	; (8002408 <MX_GPIO_Init+0x2ec>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217a:	4ba3      	ldr	r3, [pc, #652]	; (8002408 <MX_GPIO_Init+0x2ec>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	4aa2      	ldr	r2, [pc, #648]	; (8002408 <MX_GPIO_Init+0x2ec>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002186:	4ba0      	ldr	r3, [pc, #640]	; (8002408 <MX_GPIO_Init+0x2ec>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	4b9d      	ldr	r3, [pc, #628]	; (8002408 <MX_GPIO_Init+0x2ec>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002196:	4a9c      	ldr	r2, [pc, #624]	; (8002408 <MX_GPIO_Init+0x2ec>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219e:	4b9a      	ldr	r3, [pc, #616]	; (8002408 <MX_GPIO_Init+0x2ec>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021aa:	4b97      	ldr	r3, [pc, #604]	; (8002408 <MX_GPIO_Init+0x2ec>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	4a96      	ldr	r2, [pc, #600]	; (8002408 <MX_GPIO_Init+0x2ec>)
 80021b0:	f043 0308 	orr.w	r3, r3, #8
 80021b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b6:	4b94      	ldr	r3, [pc, #592]	; (8002408 <MX_GPIO_Init+0x2ec>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021c2:	4b91      	ldr	r3, [pc, #580]	; (8002408 <MX_GPIO_Init+0x2ec>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	4a90      	ldr	r2, [pc, #576]	; (8002408 <MX_GPIO_Init+0x2ec>)
 80021c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ce:	4b8e      	ldr	r3, [pc, #568]	; (8002408 <MX_GPIO_Init+0x2ec>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80021da:	f005 f84b 	bl	8007274 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021de:	4b8a      	ldr	r3, [pc, #552]	; (8002408 <MX_GPIO_Init+0x2ec>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	4a89      	ldr	r2, [pc, #548]	; (8002408 <MX_GPIO_Init+0x2ec>)
 80021e4:	f043 0320 	orr.w	r3, r3, #32
 80021e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ea:	4b87      	ldr	r3, [pc, #540]	; (8002408 <MX_GPIO_Init+0x2ec>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	f242 0102 	movw	r1, #8194	; 0x2002
 80021fc:	4883      	ldr	r0, [pc, #524]	; (800240c <MX_GPIO_Init+0x2f0>)
 80021fe:	f003 fa4d 	bl	800569c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	f648 0181 	movw	r1, #34945	; 0x8881
 8002208:	4881      	ldr	r0, [pc, #516]	; (8002410 <MX_GPIO_Init+0x2f4>)
 800220a:	f003 fa47 	bl	800569c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002218:	f003 fa40 	bl	800569c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 800221c:	2200      	movs	r2, #0
 800221e:	2140      	movs	r1, #64	; 0x40
 8002220:	487c      	ldr	r0, [pc, #496]	; (8002414 <MX_GPIO_Init+0x2f8>)
 8002222:	f003 fa3b 	bl	800569c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8002226:	2200      	movs	r2, #0
 8002228:	f247 5128 	movw	r1, #29992	; 0x7528
 800222c:	487a      	ldr	r0, [pc, #488]	; (8002418 <MX_GPIO_Init+0x2fc>)
 800222e:	f003 fa35 	bl	800569c <HAL_GPIO_WritePin>
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BLE_SPI_CS_Pin|SEL1_2_Pin, GPIO_PIN_RESET);
 8002232:	2200      	movs	r2, #0
 8002234:	2121      	movs	r1, #33	; 0x21
 8002236:	4879      	ldr	r0, [pc, #484]	; (800241c <MX_GPIO_Init+0x300>)
 8002238:	f003 fa30 	bl	800569c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 800223c:	2200      	movs	r2, #0
 800223e:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8002242:	4877      	ldr	r0, [pc, #476]	; (8002420 <MX_GPIO_Init+0x304>)
 8002244:	f003 fa2a 	bl	800569c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 8002248:	f240 4301 	movw	r3, #1025	; 0x401
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800224e:	2300      	movs	r3, #0
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225a:	4619      	mov	r1, r3
 800225c:	486b      	ldr	r0, [pc, #428]	; (800240c <MX_GPIO_Init+0x2f0>)
 800225e:	f003 f88b 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
  GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 8002262:	f244 3301 	movw	r3, #17153	; 0x4301
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002268:	2303      	movs	r3, #3
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002274:	4619      	mov	r1, r3
 8002276:	486a      	ldr	r0, [pc, #424]	; (8002420 <MX_GPIO_Init+0x304>)
 8002278:	f003 f87e 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_PE0H3_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 800227c:	2308      	movs	r3, #8
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002280:	2300      	movs	r3, #0
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 8002288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228c:	4619      	mov	r1, r3
 800228e:	4865      	ldr	r0, [pc, #404]	; (8002424 <MX_GPIO_Init+0x308>)
 8002290:	f003 f872 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin SDMMC_D2_Pin SDMMC_D1_Pin SDMMC_CK_Pin
                           SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 8002294:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDMMC_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80022a6:	230c      	movs	r3, #12
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ae:	4619      	mov	r1, r3
 80022b0:	4858      	ldr	r0, [pc, #352]	; (8002414 <MX_GPIO_Init+0x2f8>)
 80022b2:	f003 f861 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
  GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 80022b6:	f64c 1308 	movw	r3, #51464	; 0xc908
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ADWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022bc:	4b5a      	ldr	r3, [pc, #360]	; (8002428 <MX_GPIO_Init+0x30c>)
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c8:	4619      	mov	r1, r3
 80022ca:	4850      	ldr	r0, [pc, #320]	; (800240c <MX_GPIO_Init+0x2f0>)
 80022cc:	f003 f854 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin;
 80022d0:	f242 0302 	movw	r3, #8194	; 0x2002
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	4619      	mov	r1, r3
 80022e8:	4848      	ldr	r0, [pc, #288]	; (800240c <MX_GPIO_Init+0x2f0>)
 80022ea:	f003 f845 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 80022ee:	f648 0381 	movw	r3, #34945	; 0x8881
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002304:	4619      	mov	r1, r3
 8002306:	4842      	ldr	r0, [pc, #264]	; (8002410 <MX_GPIO_Init+0x2f4>)
 8002308:	f003 f836 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin PA1_Pin */
  GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|PA1_Pin;
 800230c:	f240 6303 	movw	r3, #1539	; 0x603
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002312:	2303      	movs	r3, #3
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231e:	4619      	mov	r1, r3
 8002320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002324:	f003 f828 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12_Pin PG10_Pin PG9_Pin */
  GPIO_InitStruct.Pin = PG12_Pin|PG10_Pin|PG9_Pin;
 8002328:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800232e:	2303      	movs	r3, #3
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233a:	4619      	mov	r1, r3
 800233c:	4837      	ldr	r0, [pc, #220]	; (800241c <MX_GPIO_Init+0x300>)
 800233e:	f003 f81b 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002342:	2304      	movs	r3, #4
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002352:	230c      	movs	r3, #12
 8002354:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235a:	4619      	mov	r1, r3
 800235c:	482c      	ldr	r0, [pc, #176]	; (8002410 <MX_GPIO_Init+0x2f4>)
 800235e:	f003 f80b 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RST_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin;
 8002362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002368:	2301      	movs	r3, #1
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 8002374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002378:	4619      	mov	r1, r3
 800237a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800237e:	f002 fffb 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8002382:	2340      	movs	r3, #64	; 0x40
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	2301      	movs	r3, #1
 8002388:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002396:	4619      	mov	r1, r3
 8002398:	481e      	ldr	r0, [pc, #120]	; (8002414 <MX_GPIO_Init+0x2f8>)
 800239a:	f002 ffed 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin CS_DHC_Pin SEL3_4_Pin */
  GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 800239e:	f247 5328 	movw	r3, #29992	; 0x7528
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a4:	2301      	movs	r3, #1
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b4:	4619      	mov	r1, r3
 80023b6:	4818      	ldr	r0, [pc, #96]	; (8002418 <MX_GPIO_Init+0x2fc>)
 80023b8:	f002 ffde 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
  GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 80023bc:	f44f 7324 	mov.w	r3, #656	; 0x290
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023c2:	4b19      	ldr	r3, [pc, #100]	; (8002428 <MX_GPIO_Init+0x30c>)
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ce:	4619      	mov	r1, r3
 80023d0:	4811      	ldr	r0, [pc, #68]	; (8002418 <MX_GPIO_Init+0x2fc>)
 80023d2:	f002 ffd1 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_SPI_CS_Pin SEL1_2_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin|SEL1_2_Pin;
 80023d6:	2321      	movs	r3, #33	; 0x21
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023da:	2301      	movs	r3, #1
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ea:	4619      	mov	r1, r3
 80023ec:	480b      	ldr	r0, [pc, #44]	; (800241c <MX_GPIO_Init+0x300>)
 80023ee:	f002 ffc3 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 80023f2:	2342      	movs	r3, #66	; 0x42
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <MX_GPIO_Init+0x30c>)
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002402:	4619      	mov	r1, r3
 8002404:	e012      	b.n	800242c <MX_GPIO_Init+0x310>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	48001000 	.word	0x48001000
 8002410:	48000c00 	.word	0x48000c00
 8002414:	48000800 	.word	0x48000800
 8002418:	48001400 	.word	0x48001400
 800241c:	48001800 	.word	0x48001800
 8002420:	48000400 	.word	0x48000400
 8002424:	48001c00 	.word	0x48001c00
 8002428:	10110000 	.word	0x10110000
 800242c:	482b      	ldr	r0, [pc, #172]	; (80024dc <MX_GPIO_Init+0x3c0>)
 800242e:	f002 ffa3 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 8002432:	f241 0304 	movw	r3, #4100	; 0x1004
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002438:	2300      	movs	r3, #0
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002444:	4619      	mov	r1, r3
 8002446:	4826      	ldr	r0, [pc, #152]	; (80024e0 <MX_GPIO_Init+0x3c4>)
 8002448:	f002 ff96 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 800244c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002452:	2300      	movs	r3, #0
 8002454:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 800245a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245e:	4619      	mov	r1, r3
 8002460:	4820      	ldr	r0, [pc, #128]	; (80024e4 <MX_GPIO_Init+0x3c8>)
 8002462:	f002 ff89 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8002466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <MX_GPIO_Init+0x3cc>)
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8002474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002478:	4619      	mov	r1, r3
 800247a:	481c      	ldr	r0, [pc, #112]	; (80024ec <MX_GPIO_Init+0x3d0>)
 800247c:	f002 ff7c 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 8002480:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002486:	2301      	movs	r3, #1
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002496:	4619      	mov	r1, r3
 8002498:	4811      	ldr	r0, [pc, #68]	; (80024e0 <MX_GPIO_Init+0x3c4>)
 800249a:	f002 ff6d 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_DH_Pin */
  GPIO_InitStruct.Pin = INT2_DH_Pin;
 800249e:	2304      	movs	r3, #4
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024a2:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <MX_GPIO_Init+0x3cc>)
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 80024aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ae:	4619      	mov	r1, r3
 80024b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b4:	f002 ff60 	bl	8005378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12_Pin */
  GPIO_InitStruct.Pin = PE12_Pin;
 80024b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024be:	2303      	movs	r3, #3
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PE12_GPIO_Port, &GPIO_InitStruct);
 80024c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ca:	4619      	mov	r1, r3
 80024cc:	4808      	ldr	r0, [pc, #32]	; (80024f0 <MX_GPIO_Init+0x3d4>)
 80024ce:	f002 ff53 	bl	8005378 <HAL_GPIO_Init>

}
 80024d2:	bf00      	nop
 80024d4:	3738      	adds	r7, #56	; 0x38
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	48001800 	.word	0x48001800
 80024e0:	48000400 	.word	0x48000400
 80024e4:	48001400 	.word	0x48001400
 80024e8:	10110000 	.word	0x10110000
 80024ec:	48000c00 	.word	0x48000c00
 80024f0:	48001000 	.word	0x48001000

080024f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024fa:	e7fe      	b.n	80024fa <Error_Handler+0x6>

080024fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <HAL_MspInit+0x44>)
 8002504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002506:	4a0e      	ldr	r2, [pc, #56]	; (8002540 <HAL_MspInit+0x44>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6613      	str	r3, [r2, #96]	; 0x60
 800250e:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <HAL_MspInit+0x44>)
 8002510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_MspInit+0x44>)
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	4a08      	ldr	r2, [pc, #32]	; (8002540 <HAL_MspInit+0x44>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	6593      	str	r3, [r2, #88]	; 0x58
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_MspInit+0x44>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000

08002544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a37      	ldr	r2, [pc, #220]	; (8002640 <HAL_ADC_MspInit+0xfc>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d168      	bne.n	8002638 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002566:	4b37      	ldr	r3, [pc, #220]	; (8002644 <HAL_ADC_MspInit+0x100>)
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	4a36      	ldr	r2, [pc, #216]	; (8002644 <HAL_ADC_MspInit+0x100>)
 800256c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002572:	4b34      	ldr	r3, [pc, #208]	; (8002644 <HAL_ADC_MspInit+0x100>)
 8002574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800257e:	4b31      	ldr	r3, [pc, #196]	; (8002644 <HAL_ADC_MspInit+0x100>)
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	4a30      	ldr	r2, [pc, #192]	; (8002644 <HAL_ADC_MspInit+0x100>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800258a:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <HAL_ADC_MspInit+0x100>)
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	4b2b      	ldr	r3, [pc, #172]	; (8002644 <HAL_ADC_MspInit+0x100>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259a:	4a2a      	ldr	r2, [pc, #168]	; (8002644 <HAL_ADC_MspInit+0x100>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <HAL_ADC_MspInit+0x100>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PA5     ------> ADC1_IN10
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Pin|ADC1_IN2_Pin|uC_ADC_BATT_Pin;
 80025ae:	2313      	movs	r3, #19
 80025b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80025b2:	230b      	movs	r3, #11
 80025b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	4821      	ldr	r0, [pc, #132]	; (8002648 <HAL_ADC_MspInit+0x104>)
 80025c2:	f002 fed9 	bl	8005378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EX_ADC_Pin;
 80025c6:	2320      	movs	r3, #32
 80025c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80025ca:	230b      	movs	r3, #11
 80025cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(EX_ADC_GPIO_Port, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025dc:	f002 fecc 	bl	8005378 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80025e0:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HAL_ADC_MspInit+0x108>)
 80025e2:	4a1b      	ldr	r2, [pc, #108]	; (8002650 <HAL_ADC_MspInit+0x10c>)
 80025e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80025e6:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_ADC_MspInit+0x108>)
 80025e8:	2205      	movs	r2, #5
 80025ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025ec:	4b17      	ldr	r3, [pc, #92]	; (800264c <HAL_ADC_MspInit+0x108>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f2:	4b16      	ldr	r3, [pc, #88]	; (800264c <HAL_ADC_MspInit+0x108>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025f8:	4b14      	ldr	r3, [pc, #80]	; (800264c <HAL_ADC_MspInit+0x108>)
 80025fa:	2280      	movs	r2, #128	; 0x80
 80025fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_ADC_MspInit+0x108>)
 8002600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002604:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_ADC_MspInit+0x108>)
 8002608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800260c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <HAL_ADC_MspInit+0x108>)
 8002610:	2220      	movs	r2, #32
 8002612:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002614:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_ADC_MspInit+0x108>)
 8002616:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800261a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800261c:	480b      	ldr	r0, [pc, #44]	; (800264c <HAL_ADC_MspInit+0x108>)
 800261e:	f002 fcf1 	bl	8005004 <HAL_DMA_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 8002628:	f7ff ff64 	bl	80024f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a07      	ldr	r2, [pc, #28]	; (800264c <HAL_ADC_MspInit+0x108>)
 8002630:	651a      	str	r2, [r3, #80]	; 0x50
 8002632:	4a06      	ldr	r2, [pc, #24]	; (800264c <HAL_ADC_MspInit+0x108>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002638:	bf00      	nop
 800263a:	3728      	adds	r7, #40	; 0x28
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	50040000 	.word	0x50040000
 8002644:	40021000 	.word	0x40021000
 8002648:	48000800 	.word	0x48000800
 800264c:	20000fa8 	.word	0x20000fa8
 8002650:	40020008 	.word	0x40020008

08002654 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0a      	ldr	r2, [pc, #40]	; (800268c <HAL_CRC_MspInit+0x38>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10b      	bne.n	800267e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_CRC_MspInit+0x3c>)
 8002668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266a:	4a09      	ldr	r2, [pc, #36]	; (8002690 <HAL_CRC_MspInit+0x3c>)
 800266c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002670:	6493      	str	r3, [r2, #72]	; 0x48
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <HAL_CRC_MspInit+0x3c>)
 8002674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40023000 	.word	0x40023000
 8002690:	40021000 	.word	0x40021000

08002694 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a15      	ldr	r2, [pc, #84]	; (8002708 <HAL_DAC_MspInit+0x74>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d124      	bne.n	8002700 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_DAC_MspInit+0x78>)
 80026b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ba:	4a14      	ldr	r2, [pc, #80]	; (800270c <HAL_DAC_MspInit+0x78>)
 80026bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026c0:	6593      	str	r3, [r2, #88]	; 0x58
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_DAC_MspInit+0x78>)
 80026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	4b0f      	ldr	r3, [pc, #60]	; (800270c <HAL_DAC_MspInit+0x78>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d2:	4a0e      	ldr	r2, [pc, #56]	; (800270c <HAL_DAC_MspInit+0x78>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <HAL_DAC_MspInit+0x78>)
 80026dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC1_OUT1_Pin;
 80026e6:	2310      	movs	r3, #16
 80026e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ea:	2303      	movs	r3, #3
 80026ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_OUT1_GPIO_Port, &GPIO_InitStruct);
 80026f2:	f107 0314 	add.w	r3, r7, #20
 80026f6:	4619      	mov	r1, r3
 80026f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026fc:	f002 fe3c 	bl	8005378 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002700:	bf00      	nop
 8002702:	3728      	adds	r7, #40	; 0x28
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40007400 	.word	0x40007400
 800270c:	40021000 	.word	0x40021000

08002710 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8002728:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <HAL_DFSDM_FilterMspInit+0xe0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d15b      	bne.n	80027e8 <HAL_DFSDM_FilterMspInit+0xd8>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8002730:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <HAL_DFSDM_FilterMspInit+0xe4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3301      	adds	r3, #1
 8002736:	4a2f      	ldr	r2, [pc, #188]	; (80027f4 <HAL_DFSDM_FilterMspInit+0xe4>)
 8002738:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800273a:	4b2e      	ldr	r3, [pc, #184]	; (80027f4 <HAL_DFSDM_FilterMspInit+0xe4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d10b      	bne.n	800275a <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002742:	4b2d      	ldr	r3, [pc, #180]	; (80027f8 <HAL_DFSDM_FilterMspInit+0xe8>)
 8002744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002746:	4a2c      	ldr	r2, [pc, #176]	; (80027f8 <HAL_DFSDM_FilterMspInit+0xe8>)
 8002748:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274c:	6613      	str	r3, [r2, #96]	; 0x60
 800274e:	4b2a      	ldr	r3, [pc, #168]	; (80027f8 <HAL_DFSDM_FilterMspInit+0xe8>)
 8002750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275a:	4b27      	ldr	r3, [pc, #156]	; (80027f8 <HAL_DFSDM_FilterMspInit+0xe8>)
 800275c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275e:	4a26      	ldr	r2, [pc, #152]	; (80027f8 <HAL_DFSDM_FilterMspInit+0xe8>)
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002766:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <HAL_DFSDM_FilterMspInit+0xe8>)
 8002768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002772:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <HAL_DFSDM_FilterMspInit+0xe8>)
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	4a20      	ldr	r2, [pc, #128]	; (80027f8 <HAL_DFSDM_FilterMspInit+0xe8>)
 8002778:	f043 0310 	orr.w	r3, r3, #16
 800277c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800277e:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <HAL_DFSDM_FilterMspInit+0xe8>)
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PB6     ------> DFSDM1_DATIN5
    PE9     ------> DFSDM1_CKOUT
    PB10     ------> DFSDM1_DATIN7
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 800278a:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800278e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002790:	2302      	movs	r3, #2
 8002792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002794:	2302      	movs	r3, #2
 8002796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002798:	2303      	movs	r3, #3
 800279a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800279c:	2306      	movs	r3, #6
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	4619      	mov	r1, r3
 80027a6:	4815      	ldr	r0, [pc, #84]	; (80027fc <HAL_DFSDM_FilterMspInit+0xec>)
 80027a8:	f002 fde6 	bl	8005378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80027ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027b6:	2302      	movs	r3, #2
 80027b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ba:	2303      	movs	r3, #3
 80027bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80027be:	2306      	movs	r3, #6
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	480d      	ldr	r0, [pc, #52]	; (8002800 <HAL_DFSDM_FilterMspInit+0xf0>)
 80027ca:	f002 fdd5 	bl	8005378 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	203d      	movs	r0, #61	; 0x3d
 80027d4:	f001 fdc3 	bl	800435e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 80027d8:	203d      	movs	r0, #61	; 0x3d
 80027da:	f001 fddc 	bl	8004396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80027de:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <HAL_DFSDM_FilterMspInit+0xe0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3301      	adds	r3, #1
 80027e4:	4a02      	ldr	r2, [pc, #8]	; (80027f0 <HAL_DFSDM_FilterMspInit+0xe0>)
 80027e6:	6013      	str	r3, [r2, #0]
  }

}
 80027e8:	bf00      	nop
 80027ea:	3728      	adds	r7, #40	; 0x28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000958 	.word	0x20000958
 80027f4:	20000954 	.word	0x20000954
 80027f8:	40021000 	.word	0x40021000
 80027fc:	48000400 	.word	0x48000400
 8002800:	48001000 	.word	0x48001000

08002804 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 800281c:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d153      	bne.n	80028cc <HAL_DFSDM_ChannelMspInit+0xc8>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8002824:	4b2c      	ldr	r3, [pc, #176]	; (80028d8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3301      	adds	r3, #1
 800282a:	4a2b      	ldr	r2, [pc, #172]	; (80028d8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800282c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800282e:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d10b      	bne.n	800284e <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002836:	4b29      	ldr	r3, [pc, #164]	; (80028dc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8002838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283a:	4a28      	ldr	r2, [pc, #160]	; (80028dc <HAL_DFSDM_ChannelMspInit+0xd8>)
 800283c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002840:	6613      	str	r3, [r2, #96]	; 0x60
 8002842:	4b26      	ldr	r3, [pc, #152]	; (80028dc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8002844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002846:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	4b23      	ldr	r3, [pc, #140]	; (80028dc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	4a22      	ldr	r2, [pc, #136]	; (80028dc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285a:	4b20      	ldr	r3, [pc, #128]	; (80028dc <HAL_DFSDM_ChannelMspInit+0xd8>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286a:	4a1c      	ldr	r2, [pc, #112]	; (80028dc <HAL_DFSDM_ChannelMspInit+0xd8>)
 800286c:	f043 0310 	orr.w	r3, r3, #16
 8002870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002872:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PB6     ------> DFSDM1_DATIN5
    PE9     ------> DFSDM1_CKOUT
    PB10     ------> DFSDM1_DATIN7
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 800287e:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8002882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002884:	2302      	movs	r3, #2
 8002886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002888:	2302      	movs	r3, #2
 800288a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288c:	2303      	movs	r3, #3
 800288e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002890:	2306      	movs	r3, #6
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	4619      	mov	r1, r3
 800289a:	4811      	ldr	r0, [pc, #68]	; (80028e0 <HAL_DFSDM_ChannelMspInit+0xdc>)
 800289c:	f002 fd6c 	bl	8005378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80028a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028aa:	2302      	movs	r3, #2
 80028ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ae:	2303      	movs	r3, #3
 80028b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80028b2:	2306      	movs	r3, #6
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	4619      	mov	r1, r3
 80028bc:	4809      	ldr	r0, [pc, #36]	; (80028e4 <HAL_DFSDM_ChannelMspInit+0xe0>)
 80028be:	f002 fd5b 	bl	8005378 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	4a02      	ldr	r2, [pc, #8]	; (80028d4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80028ca:	6013      	str	r3, [r2, #0]
  }

}
 80028cc:	bf00      	nop
 80028ce:	3728      	adds	r7, #40	; 0x28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000958 	.word	0x20000958
 80028d8:	20000954 	.word	0x20000954
 80028dc:	40021000 	.word	0x40021000
 80028e0:	48000400 	.word	0x48000400
 80028e4:	48001000 	.word	0x48001000

080028e8 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	f107 0314 	add.w	r3, r7, #20
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
  if(hsmbus->Instance==I2C2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1f      	ldr	r2, [pc, #124]	; (8002984 <HAL_SMBUS_MspInit+0x9c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d137      	bne.n	800297a <HAL_SMBUS_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800290a:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <HAL_SMBUS_MspInit+0xa0>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	4a1e      	ldr	r2, [pc, #120]	; (8002988 <HAL_SMBUS_MspInit+0xa0>)
 8002910:	f043 0320 	orr.w	r3, r3, #32
 8002914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002916:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <HAL_SMBUS_MspInit+0xa0>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF2     ------> I2C2_SMBA
    PF1     ------> I2C2_SCL
    PF0     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SMBA_Pin|I2C2_SDA_Pin|I2C2_SDAF0_Pin;
 8002922:	2307      	movs	r3, #7
 8002924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002926:	2312      	movs	r3, #18
 8002928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800292a:	2301      	movs	r3, #1
 800292c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002932:	2304      	movs	r3, #4
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	4619      	mov	r1, r3
 800293c:	4813      	ldr	r0, [pc, #76]	; (800298c <HAL_SMBUS_MspInit+0xa4>)
 800293e:	f002 fd1b 	bl	8005378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_SMBUS_MspInit+0xa0>)
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002946:	4a10      	ldr	r2, [pc, #64]	; (8002988 <HAL_SMBUS_MspInit+0xa0>)
 8002948:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800294c:	6593      	str	r3, [r2, #88]	; 0x58
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_SMBUS_MspInit+0xa0>)
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800295a:	2200      	movs	r2, #0
 800295c:	2100      	movs	r1, #0
 800295e:	2021      	movs	r0, #33	; 0x21
 8002960:	f001 fcfd 	bl	800435e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002964:	2021      	movs	r0, #33	; 0x21
 8002966:	f001 fd16 	bl	8004396 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	2022      	movs	r0, #34	; 0x22
 8002970:	f001 fcf5 	bl	800435e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002974:	2022      	movs	r0, #34	; 0x22
 8002976:	f001 fd0e 	bl	8004396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800297a:	bf00      	nop
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40005800 	.word	0x40005800
 8002988:	40021000 	.word	0x40021000
 800298c:	48001400 	.word	0x48001400

08002990 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08c      	sub	sp, #48	; 0x30
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 031c 	add.w	r3, r7, #28
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a30      	ldr	r2, [pc, #192]	; (8002a70 <HAL_I2C_MspInit+0xe0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d12b      	bne.n	8002a0a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029b2:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <HAL_I2C_MspInit+0xe4>)
 80029b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b6:	4a2f      	ldr	r2, [pc, #188]	; (8002a74 <HAL_I2C_MspInit+0xe4>)
 80029b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029be:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <HAL_I2C_MspInit+0xe4>)
 80029c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c6:	61bb      	str	r3, [r7, #24]
 80029c8:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 80029ca:	f004 fc53 	bl	8007274 <HAL_PWREx_EnableVddIO2>
    /**I2C3 GPIO Configuration
    PG8     ------> I2C3_SDA
    PG7     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 80029ce:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80029d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d4:	2312      	movs	r3, #18
 80029d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029d8:	2301      	movs	r3, #1
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029e0:	2304      	movs	r3, #4
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029e4:	f107 031c 	add.w	r3, r7, #28
 80029e8:	4619      	mov	r1, r3
 80029ea:	4823      	ldr	r0, [pc, #140]	; (8002a78 <HAL_I2C_MspInit+0xe8>)
 80029ec:	f002 fcc4 	bl	8005378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029f0:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <HAL_I2C_MspInit+0xe4>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	4a1f      	ldr	r2, [pc, #124]	; (8002a74 <HAL_I2C_MspInit+0xe4>)
 80029f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029fa:	6593      	str	r3, [r2, #88]	; 0x58
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_I2C_MspInit+0xe4>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002a08:	e02d      	b.n	8002a66 <HAL_I2C_MspInit+0xd6>
  else if(hi2c->Instance==I2C4)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1b      	ldr	r2, [pc, #108]	; (8002a7c <HAL_I2C_MspInit+0xec>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d128      	bne.n	8002a66 <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a14:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <HAL_I2C_MspInit+0xe4>)
 8002a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a18:	4a16      	ldr	r2, [pc, #88]	; (8002a74 <HAL_I2C_MspInit+0xe4>)
 8002a1a:	f043 0308 	orr.w	r3, r3, #8
 8002a1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <HAL_I2C_MspInit+0xe4>)
 8002a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 8002a2c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a32:	2312      	movs	r3, #18
 8002a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a36:	2301      	movs	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002a3e:	2304      	movs	r3, #4
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a42:	f107 031c 	add.w	r3, r7, #28
 8002a46:	4619      	mov	r1, r3
 8002a48:	480d      	ldr	r0, [pc, #52]	; (8002a80 <HAL_I2C_MspInit+0xf0>)
 8002a4a:	f002 fc95 	bl	8005378 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_I2C_MspInit+0xe4>)
 8002a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a52:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <HAL_I2C_MspInit+0xe4>)
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_I2C_MspInit+0xe4>)
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
}
 8002a66:	bf00      	nop
 8002a68:	3730      	adds	r7, #48	; 0x30
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40005c00 	.word	0x40005c00
 8002a74:	40021000 	.word	0x40021000
 8002a78:	48001800 	.word	0x48001800
 8002a7c:	40008400 	.word	0x40008400
 8002a80:	48000c00 	.word	0x48000c00

08002a84 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <HAL_LTDC_MspInit+0x38>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d10b      	bne.n	8002aae <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <HAL_LTDC_MspInit+0x3c>)
 8002a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9a:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <HAL_LTDC_MspInit+0x3c>)
 8002a9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aa0:	6613      	str	r3, [r2, #96]	; 0x60
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <HAL_LTDC_MspInit+0x3c>)
 8002aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40016800 	.word	0x40016800
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a08      	ldr	r2, [pc, #32]	; (8002af4 <HAL_RTC_MspInit+0x30>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <HAL_RTC_MspInit+0x34>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	4a06      	ldr	r2, [pc, #24]	; (8002af8 <HAL_RTC_MspInit+0x34>)
 8002ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40002800 	.word	0x40002800
 8002af8:	40021000 	.word	0x40021000

08002afc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08e      	sub	sp, #56	; 0x38
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a54      	ldr	r2, [pc, #336]	; (8002c6c <HAL_SPI_MspInit+0x170>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d12a      	bne.n	8002b74 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b1e:	4b54      	ldr	r3, [pc, #336]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b22:	4a53      	ldr	r2, [pc, #332]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002b24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b28:	6613      	str	r3, [r2, #96]	; 0x60
 8002b2a:	4b51      	ldr	r3, [pc, #324]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b32:	623b      	str	r3, [r7, #32]
 8002b34:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b36:	4b4e      	ldr	r3, [pc, #312]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3a:	4a4d      	ldr	r2, [pc, #308]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b42:	4b4b      	ldr	r3, [pc, #300]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4a:	61fb      	str	r3, [r7, #28]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
    HAL_PWREx_EnableVddIO2();
 8002b4e:	f004 fb91 	bl	8007274 <HAL_PWREx_EnableVddIO2>
    /**SPI1 GPIO Configuration
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 8002b52:	231c      	movs	r3, #28
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b56:	2302      	movs	r3, #2
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b62:	2305      	movs	r3, #5
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4841      	ldr	r0, [pc, #260]	; (8002c74 <HAL_SPI_MspInit+0x178>)
 8002b6e:	f002 fc03 	bl	8005378 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002b72:	e076      	b.n	8002c62 <HAL_SPI_MspInit+0x166>
  else if(hspi->Instance==SPI2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a3f      	ldr	r2, [pc, #252]	; (8002c78 <HAL_SPI_MspInit+0x17c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d144      	bne.n	8002c08 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b7e:	4b3c      	ldr	r3, [pc, #240]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	4a3b      	ldr	r2, [pc, #236]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b88:	6593      	str	r3, [r2, #88]	; 0x58
 8002b8a:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b92:	61bb      	str	r3, [r7, #24]
 8002b94:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b96:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	4a35      	ldr	r2, [pc, #212]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002b9c:	f043 0308 	orr.w	r3, r3, #8
 8002ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ba2:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bae:	4b30      	ldr	r3, [pc, #192]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb2:	4a2f      	ldr	r2, [pc, #188]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002bb4:	f043 0304 	orr.w	r3, r3, #4
 8002bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bba:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPI2_CLK_Pin;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bd6:	2305      	movs	r3, #5
 8002bd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_CLK_GPIO_Port, &GPIO_InitStruct);
 8002bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bde:	4619      	mov	r1, r3
 8002be0:	4826      	ldr	r0, [pc, #152]	; (8002c7c <HAL_SPI_MspInit+0x180>)
 8002be2:	f002 fbc9 	bl	8005378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8002be6:	230c      	movs	r3, #12
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bf6:	2305      	movs	r3, #5
 8002bf8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bfe:	4619      	mov	r1, r3
 8002c00:	481f      	ldr	r0, [pc, #124]	; (8002c80 <HAL_SPI_MspInit+0x184>)
 8002c02:	f002 fbb9 	bl	8005378 <HAL_GPIO_Init>
}
 8002c06:	e02c      	b.n	8002c62 <HAL_SPI_MspInit+0x166>
  else if(hspi->Instance==SPI3)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1d      	ldr	r2, [pc, #116]	; (8002c84 <HAL_SPI_MspInit+0x188>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d127      	bne.n	8002c62 <HAL_SPI_MspInit+0x166>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c12:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c16:	4a16      	ldr	r2, [pc, #88]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c1e:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2e:	4a10      	ldr	r2, [pc, #64]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <HAL_SPI_MspInit+0x174>)
 8002c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin|SPI3_CLK_Pin;
 8002c42:	2338      	movs	r3, #56	; 0x38
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	2302      	movs	r3, #2
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c52:	2306      	movs	r3, #6
 8002c54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	480a      	ldr	r0, [pc, #40]	; (8002c88 <HAL_SPI_MspInit+0x18c>)
 8002c5e:	f002 fb8b 	bl	8005378 <HAL_GPIO_Init>
}
 8002c62:	bf00      	nop
 8002c64:	3738      	adds	r7, #56	; 0x38
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40013000 	.word	0x40013000
 8002c70:	40021000 	.word	0x40021000
 8002c74:	48001800 	.word	0x48001800
 8002c78:	40003800 	.word	0x40003800
 8002c7c:	48000c00 	.word	0x48000c00
 8002c80:	48000800 	.word	0x48000800
 8002c84:	40003c00 	.word	0x40003c00
 8002c88:	48000400 	.word	0x48000400

08002c8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9c:	d10b      	bne.n	8002cb6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_TIM_PWM_MspInit+0x38>)
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca2:	4a08      	ldr	r2, [pc, #32]	; (8002cc4 <HAL_TIM_PWM_MspInit+0x38>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6593      	str	r3, [r2, #88]	; 0x58
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_TIM_PWM_MspInit+0x38>)
 8002cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000

08002cc8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <HAL_TIM_OC_MspInit+0x38>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d10b      	bne.n	8002cf2 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <HAL_TIM_OC_MspInit+0x3c>)
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cde:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <HAL_TIM_OC_MspInit+0x3c>)
 8002ce0:	f043 0308 	orr.w	r3, r3, #8
 8002ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <HAL_TIM_OC_MspInit+0x3c>)
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40000c00 	.word	0x40000c00
 8002d04:	40021000 	.word	0x40021000

08002d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <HAL_TIM_Base_MspInit+0x38>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d10b      	bne.n	8002d32 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_TIM_Base_MspInit+0x3c>)
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1e:	4a09      	ldr	r2, [pc, #36]	; (8002d44 <HAL_TIM_Base_MspInit+0x3c>)
 8002d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d24:	6613      	str	r3, [r2, #96]	; 0x60
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <HAL_TIM_Base_MspInit+0x3c>)
 8002d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40014400 	.word	0x40014400
 8002d44:	40021000 	.word	0x40021000

08002d48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d68:	d11e      	bne.n	8002da8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6a:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <HAL_TIM_MspPostInit+0xac>)
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6e:	4a21      	ldr	r2, [pc, #132]	; (8002df4 <HAL_TIM_MspPostInit+0xac>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d76:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <HAL_TIM_MspPostInit+0xac>)
 8002d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = EX_PWM_Pin;
 8002d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d90:	2300      	movs	r3, #0
 8002d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d94:	2301      	movs	r3, #1
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EX_PWM_GPIO_Port, &GPIO_InitStruct);
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002da2:	f002 fae9 	bl	8005378 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002da6:	e020      	b.n	8002dea <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM5)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <HAL_TIM_MspPostInit+0xb0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d11b      	bne.n	8002dea <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <HAL_TIM_MspPostInit+0xac>)
 8002db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db6:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <HAL_TIM_MspPostInit+0xac>)
 8002db8:	f043 0320 	orr.w	r3, r3, #32
 8002dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <HAL_TIM_MspPostInit+0xac>)
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SW_SEL_Pin;
 8002dca:	2340      	movs	r3, #64	; 0x40
 8002dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 8002dde:	f107 0314 	add.w	r3, r7, #20
 8002de2:	4619      	mov	r1, r3
 8002de4:	4805      	ldr	r0, [pc, #20]	; (8002dfc <HAL_TIM_MspPostInit+0xb4>)
 8002de6:	f002 fac7 	bl	8005378 <HAL_GPIO_Init>
}
 8002dea:	bf00      	nop
 8002dec:	3728      	adds	r7, #40	; 0x28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40000c00 	.word	0x40000c00
 8002dfc:	48001400 	.word	0x48001400

08002e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08c      	sub	sp, #48	; 0x30
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	f107 031c 	add.w	r3, r7, #28
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a3d      	ldr	r2, [pc, #244]	; (8002f14 <HAL_UART_MspInit+0x114>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d128      	bne.n	8002e74 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e22:	4b3d      	ldr	r3, [pc, #244]	; (8002f18 <HAL_UART_MspInit+0x118>)
 8002e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e26:	4a3c      	ldr	r2, [pc, #240]	; (8002f18 <HAL_UART_MspInit+0x118>)
 8002e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e2e:	4b3a      	ldr	r3, [pc, #232]	; (8002f18 <HAL_UART_MspInit+0x118>)
 8002e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e3a:	4b37      	ldr	r3, [pc, #220]	; (8002f18 <HAL_UART_MspInit+0x118>)
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3e:	4a36      	ldr	r2, [pc, #216]	; (8002f18 <HAL_UART_MspInit+0x118>)
 8002e40:	f043 0308 	orr.w	r3, r3, #8
 8002e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e46:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <HAL_UART_MspInit+0x118>)
 8002e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 8002e52:	2370      	movs	r3, #112	; 0x70
 8002e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e56:	2302      	movs	r3, #2
 8002e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e62:	2307      	movs	r3, #7
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e66:	f107 031c 	add.w	r3, r7, #28
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	482b      	ldr	r0, [pc, #172]	; (8002f1c <HAL_UART_MspInit+0x11c>)
 8002e6e:	f002 fa83 	bl	8005378 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e72:	e04a      	b.n	8002f0a <HAL_UART_MspInit+0x10a>
  else if(huart->Instance==USART3)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a29      	ldr	r2, [pc, #164]	; (8002f20 <HAL_UART_MspInit+0x120>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d145      	bne.n	8002f0a <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e7e:	4b26      	ldr	r3, [pc, #152]	; (8002f18 <HAL_UART_MspInit+0x118>)
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	4a25      	ldr	r2, [pc, #148]	; (8002f18 <HAL_UART_MspInit+0x118>)
 8002e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e88:	6593      	str	r3, [r2, #88]	; 0x58
 8002e8a:	4b23      	ldr	r3, [pc, #140]	; (8002f18 <HAL_UART_MspInit+0x118>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e96:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <HAL_UART_MspInit+0x118>)
 8002e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9a:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <HAL_UART_MspInit+0x118>)
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_UART_MspInit+0x118>)
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eae:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HAL_UART_MspInit+0x118>)
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb2:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <HAL_UART_MspInit+0x118>)
 8002eb4:	f043 0302 	orr.w	r3, r3, #2
 8002eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eba:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <HAL_UART_MspInit+0x118>)
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8002ec6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ed8:	2307      	movs	r3, #7
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002edc:	f107 031c 	add.w	r3, r7, #28
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	480e      	ldr	r0, [pc, #56]	; (8002f1c <HAL_UART_MspInit+0x11c>)
 8002ee4:	f002 fa48 	bl	8005378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8002ee8:	f242 0302 	movw	r3, #8194	; 0x2002
 8002eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002efa:	2307      	movs	r3, #7
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efe:	f107 031c 	add.w	r3, r7, #28
 8002f02:	4619      	mov	r1, r3
 8002f04:	4807      	ldr	r0, [pc, #28]	; (8002f24 <HAL_UART_MspInit+0x124>)
 8002f06:	f002 fa37 	bl	8005378 <HAL_GPIO_Init>
}
 8002f0a:	bf00      	nop
 8002f0c:	3730      	adds	r7, #48	; 0x30
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40004400 	.word	0x40004400
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	48000c00 	.word	0x48000c00
 8002f20:	40004800 	.word	0x40004800
 8002f24:	48000400 	.word	0x48000400

08002f28 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a2a      	ldr	r2, [pc, #168]	; (8002fe0 <HAL_SAI_MspInit+0xb8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d124      	bne.n	8002f84 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002f3a:	4b2a      	ldr	r3, [pc, #168]	; (8002fe4 <HAL_SAI_MspInit+0xbc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10b      	bne.n	8002f5a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002f42:	4b29      	ldr	r3, [pc, #164]	; (8002fe8 <HAL_SAI_MspInit+0xc0>)
 8002f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f46:	4a28      	ldr	r2, [pc, #160]	; (8002fe8 <HAL_SAI_MspInit+0xc0>)
 8002f48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8002f4e:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <HAL_SAI_MspInit+0xc0>)
 8002f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002f5a:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <HAL_SAI_MspInit+0xbc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	4a20      	ldr	r2, [pc, #128]	; (8002fe4 <HAL_SAI_MspInit+0xbc>)
 8002f62:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin;
 8002f64:	2374      	movs	r3, #116	; 0x74
 8002f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f70:	2300      	movs	r3, #0
 8002f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002f74:	230d      	movs	r3, #13
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	481b      	ldr	r0, [pc, #108]	; (8002fec <HAL_SAI_MspInit+0xc4>)
 8002f80:	f002 f9fa 	bl	8005378 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a19      	ldr	r2, [pc, #100]	; (8002ff0 <HAL_SAI_MspInit+0xc8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d124      	bne.n	8002fd8 <HAL_SAI_MspInit+0xb0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002f8e:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <HAL_SAI_MspInit+0xbc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10b      	bne.n	8002fae <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002f96:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <HAL_SAI_MspInit+0xc0>)
 8002f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9a:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <HAL_SAI_MspInit+0xc0>)
 8002f9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8002fa2:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <HAL_SAI_MspInit+0xc0>)
 8002fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002fae:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <HAL_SAI_MspInit+0xbc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <HAL_SAI_MspInit+0xbc>)
 8002fb6:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE7     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002fc8:	230d      	movs	r3, #13
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4806      	ldr	r0, [pc, #24]	; (8002fec <HAL_SAI_MspInit+0xc4>)
 8002fd4:	f002 f9d0 	bl	8005378 <HAL_GPIO_Init>

    }
}
 8002fd8:	bf00      	nop
 8002fda:	3728      	adds	r7, #40	; 0x28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40015404 	.word	0x40015404
 8002fe4:	2000095c 	.word	0x2000095c
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	48001000 	.word	0x48001000
 8002ff0:	40015424 	.word	0x40015424

08002ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ff8:	e7fe      	b.n	8002ff8 <NMI_Handler+0x4>

08002ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ffe:	e7fe      	b.n	8002ffe <HardFault_Handler+0x4>

08003000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003004:	e7fe      	b.n	8003004 <MemManage_Handler+0x4>

08003006 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003006:	b480      	push	{r7}
 8003008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800300a:	e7fe      	b.n	800300a <BusFault_Handler+0x4>

0800300c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003010:	e7fe      	b.n	8003010 <UsageFault_Handler+0x4>

08003012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003012:	b480      	push	{r7}
 8003014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003016:	bf00      	nop
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003040:	f000 f98c 	bl	800335c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003044:	bf00      	nop
 8003046:	bd80      	pop	{r7, pc}

08003048 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800304c:	4802      	ldr	r0, [pc, #8]	; (8003058 <DMA1_Channel1_IRQHandler+0x10>)
 800304e:	f002 f881 	bl	8005154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000fa8 	.word	0x20000fa8

0800305c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_SMBUS_EV_IRQHandler(&hsmbus2);
 8003060:	4802      	ldr	r0, [pc, #8]	; (800306c <I2C2_EV_IRQHandler+0x10>)
 8003062:	f007 f92f 	bl	800a2c4 <HAL_SMBUS_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20001234 	.word	0x20001234

08003070 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_SMBUS_ER_IRQHandler(&hsmbus2);
 8003074:	4802      	ldr	r0, [pc, #8]	; (8003080 <I2C2_ER_IRQHandler+0x10>)
 8003076:	f007 f9d3 	bl	800a420 <HAL_SMBUS_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20001234 	.word	0x20001234

08003084 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 8003088:	4802      	ldr	r0, [pc, #8]	; (8003094 <DFSDM1_FLT0_IRQHandler+0x10>)
 800308a:	f001 fddf 	bl	8004c4c <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000cc8 	.word	0x20000cc8

08003098 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800309c:	4802      	ldr	r0, [pc, #8]	; (80030a8 <OTG_FS_IRQHandler+0x10>)
 800309e:	f003 f8b9 	bl	8006214 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	200027a4 	.word	0x200027a4

080030ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	e00a      	b.n	80030d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030be:	f3af 8000 	nop.w
 80030c2:	4601      	mov	r1, r0
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	60ba      	str	r2, [r7, #8]
 80030ca:	b2ca      	uxtb	r2, r1
 80030cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	3301      	adds	r3, #1
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	429a      	cmp	r2, r3
 80030da:	dbf0      	blt.n	80030be <_read+0x12>
	}

return len;
 80030dc:	687b      	ldr	r3, [r7, #4]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b086      	sub	sp, #24
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e009      	b.n	800310c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	60ba      	str	r2, [r7, #8]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3301      	adds	r3, #1
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	dbf1      	blt.n	80030f8 <_write+0x12>
	}
	return len;
 8003114:	687b      	ldr	r3, [r7, #4]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <_close>:

int _close(int file)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
	return -1;
 8003126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003146:	605a      	str	r2, [r3, #4]
	return 0;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <_isatty>:

int _isatty(int file)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
	return 1;
 800315e:	2301      	movs	r3, #1
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
	return 0;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003190:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <_sbrk+0x5c>)
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <_sbrk+0x60>)
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800319c:	4b13      	ldr	r3, [pc, #76]	; (80031ec <_sbrk+0x64>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <_sbrk+0x64>)
 80031a6:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <_sbrk+0x68>)
 80031a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <_sbrk+0x64>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d207      	bcs.n	80031c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031b8:	f00f fed4 	bl	8012f64 <__errno>
 80031bc:	4602      	mov	r2, r0
 80031be:	230c      	movs	r3, #12
 80031c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	e009      	b.n	80031dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <_sbrk+0x64>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <_sbrk+0x64>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	4a05      	ldr	r2, [pc, #20]	; (80031ec <_sbrk+0x64>)
 80031d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031da:	68fb      	ldr	r3, [r7, #12]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	200a0000 	.word	0x200a0000
 80031e8:	00000800 	.word	0x00000800
 80031ec:	20000960 	.word	0x20000960
 80031f0:	20002bb0 	.word	0x20002bb0

080031f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031f8:	4b17      	ldr	r3, [pc, #92]	; (8003258 <SystemInit+0x64>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fe:	4a16      	ldr	r2, [pc, #88]	; (8003258 <SystemInit+0x64>)
 8003200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003208:	4b14      	ldr	r3, [pc, #80]	; (800325c <SystemInit+0x68>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a13      	ldr	r2, [pc, #76]	; (800325c <SystemInit+0x68>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <SystemInit+0x68>)
 8003216:	2200      	movs	r2, #0
 8003218:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <SystemInit+0x68>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a0f      	ldr	r2, [pc, #60]	; (800325c <SystemInit+0x68>)
 8003220:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003224:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003228:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800322a:	4b0c      	ldr	r3, [pc, #48]	; (800325c <SystemInit+0x68>)
 800322c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003230:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <SystemInit+0x68>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a09      	ldr	r2, [pc, #36]	; (800325c <SystemInit+0x68>)
 8003238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <SystemInit+0x68>)
 8003240:	2200      	movs	r2, #0
 8003242:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003244:	4b04      	ldr	r3, [pc, #16]	; (8003258 <SystemInit+0x64>)
 8003246:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800324a:	609a      	str	r2, [r3, #8]
#endif
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	e000ed00 	.word	0xe000ed00
 800325c:	40021000 	.word	0x40021000

08003260 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003298 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003264:	f7ff ffc6 	bl	80031f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003268:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800326a:	e003      	b.n	8003274 <LoopCopyDataInit>

0800326c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800326c:	4b0b      	ldr	r3, [pc, #44]	; (800329c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800326e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003270:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003272:	3104      	adds	r1, #4

08003274 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003274:	480a      	ldr	r0, [pc, #40]	; (80032a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003278:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800327a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800327c:	d3f6      	bcc.n	800326c <CopyDataInit>
	ldr	r2, =_sbss
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003280:	e002      	b.n	8003288 <LoopFillZerobss>

08003282 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003282:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003284:	f842 3b04 	str.w	r3, [r2], #4

08003288 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003288:	4b08      	ldr	r3, [pc, #32]	; (80032ac <LoopForever+0x16>)
	cmp	r2, r3
 800328a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800328c:	d3f9      	bcc.n	8003282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800328e:	f00f fe6f 	bl	8012f70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003292:	f7fd fe71 	bl	8000f78 <main>

08003296 <LoopForever>:

LoopForever:
    b LoopForever
 8003296:	e7fe      	b.n	8003296 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003298:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800329c:	080167d8 	.word	0x080167d8
	ldr	r0, =_sdata
 80032a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80032a4:	20000938 	.word	0x20000938
	ldr	r2, =_sbss
 80032a8:	20000938 	.word	0x20000938
	ldr	r3, = _ebss
 80032ac:	20002bb0 	.word	0x20002bb0

080032b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032b0:	e7fe      	b.n	80032b0 <ADC1_IRQHandler>

080032b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032bc:	2003      	movs	r0, #3
 80032be:	f001 f843 	bl	8004348 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032c2:	2000      	movs	r0, #0
 80032c4:	f000 f80e 	bl	80032e4 <HAL_InitTick>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	71fb      	strb	r3, [r7, #7]
 80032d2:	e001      	b.n	80032d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032d4:	f7ff f912 	bl	80024fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032d8:	79fb      	ldrb	r3, [r7, #7]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80032f0:	4b17      	ldr	r3, [pc, #92]	; (8003350 <HAL_InitTick+0x6c>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d023      	beq.n	8003340 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80032f8:	4b16      	ldr	r3, [pc, #88]	; (8003354 <HAL_InitTick+0x70>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	4b14      	ldr	r3, [pc, #80]	; (8003350 <HAL_InitTick+0x6c>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	4619      	mov	r1, r3
 8003302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003306:	fbb3 f3f1 	udiv	r3, r3, r1
 800330a:	fbb2 f3f3 	udiv	r3, r2, r3
 800330e:	4618      	mov	r0, r3
 8003310:	f001 f84f 	bl	80043b2 <HAL_SYSTICK_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10f      	bne.n	800333a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b0f      	cmp	r3, #15
 800331e:	d809      	bhi.n	8003334 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003320:	2200      	movs	r2, #0
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	f04f 30ff 	mov.w	r0, #4294967295
 8003328:	f001 f819 	bl	800435e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800332c:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <HAL_InitTick+0x74>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e007      	b.n	8003344 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
 8003338:	e004      	b.n	8003344 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	e001      	b.n	8003344 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000008 	.word	0x20000008
 8003354:	20000000 	.word	0x20000000
 8003358:	20000004 	.word	0x20000004

0800335c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_IncTick+0x20>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_IncTick+0x24>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4413      	add	r3, r2
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <HAL_IncTick+0x24>)
 800336e:	6013      	str	r3, [r2, #0]
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000008 	.word	0x20000008
 8003380:	200012d0 	.word	0x200012d0

08003384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return uwTick;
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <HAL_GetTick+0x14>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	200012d0 	.word	0x200012d0

0800339c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a4:	f7ff ffee 	bl	8003384 <HAL_GetTick>
 80033a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d005      	beq.n	80033c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <HAL_Delay+0x40>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033c2:	bf00      	nop
 80033c4:	f7ff ffde 	bl	8003384 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d8f7      	bhi.n	80033c4 <HAL_Delay+0x28>
  {
  }
}
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000008 	.word	0x20000008

080033e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	609a      	str	r2, [r3, #8]
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	609a      	str	r2, [r3, #8]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	3360      	adds	r3, #96	; 0x60
 800345a:	461a      	mov	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4b08      	ldr	r3, [pc, #32]	; (800348c <LL_ADC_SetOffset+0x44>)
 800346a:	4013      	ands	r3, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	4313      	orrs	r3, r2
 8003478:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003480:	bf00      	nop
 8003482:	371c      	adds	r7, #28
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	03fff000 	.word	0x03fff000

08003490 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3360      	adds	r3, #96	; 0x60
 800349e:	461a      	mov	r2, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3360      	adds	r3, #96	; 0x60
 80034cc:	461a      	mov	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	431a      	orrs	r2, r3
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	615a      	str	r2, [r3, #20]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3330      	adds	r3, #48	; 0x30
 8003528:	461a      	mov	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	4413      	add	r3, r2
 8003536:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	211f      	movs	r1, #31
 8003544:	fa01 f303 	lsl.w	r3, r1, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	401a      	ands	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	0e9b      	lsrs	r3, r3, #26
 8003550:	f003 011f 	and.w	r1, r3, #31
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	431a      	orrs	r2, r3
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003564:	bf00      	nop
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3314      	adds	r3, #20
 8003580:	461a      	mov	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	0e5b      	lsrs	r3, r3, #25
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	4413      	add	r3, r2
 800358e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	0d1b      	lsrs	r3, r3, #20
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	2107      	movs	r1, #7
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	401a      	ands	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	0d1b      	lsrs	r3, r3, #20
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	431a      	orrs	r2, r3
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e0:	43db      	mvns	r3, r3
 80035e2:	401a      	ands	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f003 0318 	and.w	r3, r3, #24
 80035ea:	4908      	ldr	r1, [pc, #32]	; (800360c <LL_ADC_SetChannelSingleDiff+0x44>)
 80035ec:	40d9      	lsrs	r1, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	400b      	ands	r3, r1
 80035f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f6:	431a      	orrs	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	0007ffff 	.word	0x0007ffff

08003610 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003620:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6093      	str	r3, [r2, #8]
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003648:	d101      	bne.n	800364e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800366c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003670:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003698:	d101      	bne.n	800369e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <LL_ADC_IsEnabled+0x18>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <LL_ADC_IsEnabled+0x1a>
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d101      	bne.n	80036ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b08      	cmp	r3, #8
 800370a:	d101      	bne.n	8003710 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800372c:	2300      	movs	r3, #0
 800372e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e12d      	b.n	8003996 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7fe fefb 	bl	8002544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff67 	bl	8003634 <LL_ADC_IsDeepPowerDownEnabled>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d004      	beq.n	8003776 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff ff4d 	bl	8003610 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff ff82 	bl	8003684 <LL_ADC_IsInternalRegulatorEnabled>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d113      	bne.n	80037ae <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff ff66 	bl	800365c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003790:	4b83      	ldr	r3, [pc, #524]	; (80039a0 <HAL_ADC_Init+0x280>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	099b      	lsrs	r3, r3, #6
 8003796:	4a83      	ldr	r2, [pc, #524]	; (80039a4 <HAL_ADC_Init+0x284>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	099b      	lsrs	r3, r3, #6
 800379e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037a0:	e002      	b.n	80037a8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f9      	bne.n	80037a2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff ff66 	bl	8003684 <LL_ADC_IsInternalRegulatorEnabled>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10d      	bne.n	80037da <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	f043 0210 	orr.w	r2, r3, #16
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	f043 0201 	orr.w	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff ff77 	bl	80036d2 <LL_ADC_REG_IsConversionOngoing>
 80037e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ea:	f003 0310 	and.w	r3, r3, #16
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f040 80c8 	bne.w	8003984 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f040 80c4 	bne.w	8003984 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003800:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003804:	f043 0202 	orr.w	r2, r3, #2
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ff4b 	bl	80036ac <LL_ADC_IsEnabled>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10b      	bne.n	8003834 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800381c:	4862      	ldr	r0, [pc, #392]	; (80039a8 <HAL_ADC_Init+0x288>)
 800381e:	f7ff ff45 	bl	80036ac <LL_ADC_IsEnabled>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d105      	bne.n	8003834 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4619      	mov	r1, r3
 800382e:	485f      	ldr	r0, [pc, #380]	; (80039ac <HAL_ADC_Init+0x28c>)
 8003830:	f7ff fdd6 	bl	80033e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	7e5b      	ldrb	r3, [r3, #25]
 8003838:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800383e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003844:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800384a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003852:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d106      	bne.n	8003870 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	3b01      	subs	r3, #1
 8003868:	045b      	lsls	r3, r3, #17
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003874:	2b00      	cmp	r3, #0
 8003876:	d009      	beq.n	800388c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4313      	orrs	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	4b47      	ldr	r3, [pc, #284]	; (80039b0 <HAL_ADC_Init+0x290>)
 8003894:	4013      	ands	r3, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	69b9      	ldr	r1, [r7, #24]
 800389c:	430b      	orrs	r3, r1
 800389e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff ff14 	bl	80036d2 <LL_ADC_REG_IsConversionOngoing>
 80038aa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff ff21 	bl	80036f8 <LL_ADC_INJ_IsConversionOngoing>
 80038b6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d140      	bne.n	8003940 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d13d      	bne.n	8003940 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	7e1b      	ldrb	r3, [r3, #24]
 80038cc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80038ce:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038d6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038e6:	f023 0306 	bic.w	r3, r3, #6
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	69b9      	ldr	r1, [r7, #24]
 80038f0:	430b      	orrs	r3, r1
 80038f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d118      	bne.n	8003930 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003908:	f023 0304 	bic.w	r3, r3, #4
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003914:	4311      	orrs	r1, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800391a:	4311      	orrs	r1, r2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003920:	430a      	orrs	r2, r1
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0201 	orr.w	r2, r2, #1
 800392c:	611a      	str	r2, [r3, #16]
 800392e:	e007      	b.n	8003940 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d10c      	bne.n	8003962 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f023 010f 	bic.w	r1, r3, #15
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	1e5a      	subs	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
 8003960:	e007      	b.n	8003972 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 020f 	bic.w	r2, r2, #15
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	f023 0303 	bic.w	r3, r3, #3
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	659a      	str	r2, [r3, #88]	; 0x58
 8003982:	e007      	b.n	8003994 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	f043 0210 	orr.w	r2, r3, #16
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003994:	7ffb      	ldrb	r3, [r7, #31]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000000 	.word	0x20000000
 80039a4:	053e2d63 	.word	0x053e2d63
 80039a8:	50040000 	.word	0x50040000
 80039ac:	50040300 	.word	0x50040300
 80039b0:	fff0c007 	.word	0xfff0c007

080039b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b0b6      	sub	sp, #216	; 0xd8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x22>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e3d4      	b.n	8004180 <HAL_ADC_ConfigChannel+0x7cc>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff fe75 	bl	80036d2 <LL_ADC_REG_IsConversionOngoing>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 83b9 	bne.w	8004162 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b05      	cmp	r3, #5
 80039f6:	d824      	bhi.n	8003a42 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	3b02      	subs	r3, #2
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d81b      	bhi.n	8003a3a <HAL_ADC_ConfigChannel+0x86>
 8003a02:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <HAL_ADC_ConfigChannel+0x54>)
 8003a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a08:	08003a19 	.word	0x08003a19
 8003a0c:	08003a21 	.word	0x08003a21
 8003a10:	08003a29 	.word	0x08003a29
 8003a14:	08003a31 	.word	0x08003a31
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	220c      	movs	r2, #12
 8003a1c:	605a      	str	r2, [r3, #4]
          break;
 8003a1e:	e011      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2212      	movs	r2, #18
 8003a24:	605a      	str	r2, [r3, #4]
          break;
 8003a26:	e00d      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2218      	movs	r2, #24
 8003a2c:	605a      	str	r2, [r3, #4]
          break;
 8003a2e:	e009      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a36:	605a      	str	r2, [r3, #4]
          break;
 8003a38:	e004      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2206      	movs	r2, #6
 8003a3e:	605a      	str	r2, [r3, #4]
          break;
 8003a40:	e000      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003a42:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	6859      	ldr	r1, [r3, #4]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	461a      	mov	r2, r3
 8003a52:	f7ff fd61 	bl	8003518 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fe39 	bl	80036d2 <LL_ADC_REG_IsConversionOngoing>
 8003a60:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fe45 	bl	80036f8 <LL_ADC_INJ_IsConversionOngoing>
 8003a6e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f040 81c1 	bne.w	8003dfe <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f040 81bc 	bne.w	8003dfe <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a8e:	d10f      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f7ff fd68 	bl	8003570 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fd22 	bl	80034f2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003aae:	e00e      	b.n	8003ace <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	6819      	ldr	r1, [r3, #0]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	461a      	mov	r2, r3
 8003abe:	f7ff fd57 	bl	8003570 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff fd12 	bl	80034f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	695a      	ldr	r2, [r3, #20]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	08db      	lsrs	r3, r3, #3
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d00a      	beq.n	8003b06 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	6919      	ldr	r1, [r3, #16]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b00:	f7ff fca2 	bl	8003448 <LL_ADC_SetOffset>
 8003b04:	e17b      	b.n	8003dfe <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fcbf 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x17e>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fcb4 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	0e9b      	lsrs	r3, r3, #26
 8003b2c:	f003 021f 	and.w	r2, r3, #31
 8003b30:	e01e      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x1bc>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff fca9 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b48:	fa93 f3a3 	rbit	r3, r3
 8003b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003b60:	2320      	movs	r3, #32
 8003b62:	e004      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003b64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b68:	fab3 f383 	clz	r3, r3
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x1d4>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	0e9b      	lsrs	r3, r3, #26
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	e018      	b.n	8003bba <HAL_ADC_ConfigChannel+0x206>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b94:	fa93 f3a3 	rbit	r3, r3
 8003b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003ba4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003bac:	2320      	movs	r3, #32
 8003bae:	e004      	b.n	8003bba <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003bb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bb4:	fab3 f383 	clz	r3, r3
 8003bb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d106      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff fc78 	bl	80034bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff fc5c 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x244>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2101      	movs	r1, #1
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff fc51 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	0e9b      	lsrs	r3, r3, #26
 8003bf2:	f003 021f 	and.w	r2, r3, #31
 8003bf6:	e01e      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x282>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fc46 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003c1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003c26:	2320      	movs	r3, #32
 8003c28:	e004      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c2e:	fab3 f383 	clz	r3, r3
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d105      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x29a>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	0e9b      	lsrs	r3, r3, #26
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	e018      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x2cc>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003c62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003c6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003c72:	2320      	movs	r3, #32
 8003c74:	e004      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003c76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d106      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff fc15 	bl	80034bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2102      	movs	r1, #2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff fbf9 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x30a>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2102      	movs	r1, #2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fbee 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	0e9b      	lsrs	r3, r3, #26
 8003cb8:	f003 021f 	and.w	r2, r3, #31
 8003cbc:	e01e      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x348>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fbe3 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003cdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ce0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003ce4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003cec:	2320      	movs	r3, #32
 8003cee:	e004      	b.n	8003cfa <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003cf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cf4:	fab3 f383 	clz	r3, r3
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x360>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	0e9b      	lsrs	r3, r3, #26
 8003d0e:	f003 031f 	and.w	r3, r3, #31
 8003d12:	e016      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x38e>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d20:	fa93 f3a3 	rbit	r3, r3
 8003d24:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003d26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003d34:	2320      	movs	r3, #32
 8003d36:	e004      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d3c:	fab3 f383 	clz	r3, r3
 8003d40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d106      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff fbb4 	bl	80034bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2103      	movs	r1, #3
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff fb98 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <HAL_ADC_ConfigChannel+0x3cc>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2103      	movs	r1, #3
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fb8d 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003d76:	4603      	mov	r3, r0
 8003d78:	0e9b      	lsrs	r3, r3, #26
 8003d7a:	f003 021f 	and.w	r2, r3, #31
 8003d7e:	e017      	b.n	8003db0 <HAL_ADC_ConfigChannel+0x3fc>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2103      	movs	r1, #3
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fb82 	bl	8003490 <LL_ADC_GetOffsetChannel>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d92:	fa93 f3a3 	rbit	r3, r3
 8003d96:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003d98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d9a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003da2:	2320      	movs	r3, #32
 8003da4:	e003      	b.n	8003dae <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003da8:	fab3 f383 	clz	r3, r3
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d105      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x414>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	0e9b      	lsrs	r3, r3, #26
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	e011      	b.n	8003dec <HAL_ADC_ConfigChannel+0x438>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dd0:	fa93 f3a3 	rbit	r3, r3
 8003dd4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003dd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003de0:	2320      	movs	r3, #32
 8003de2:	e003      	b.n	8003dec <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d106      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2200      	movs	r2, #0
 8003df6:	2103      	movs	r1, #3
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fb5f 	bl	80034bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff fc52 	bl	80036ac <LL_ADC_IsEnabled>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f040 8140 	bne.w	8004090 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6819      	ldr	r1, [r3, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f7ff fbd3 	bl	80035c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	4a8f      	ldr	r2, [pc, #572]	; (8004064 <HAL_ADC_ConfigChannel+0x6b0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	f040 8131 	bne.w	8004090 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10b      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x4a2>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	0e9b      	lsrs	r3, r3, #26
 8003e44:	3301      	adds	r3, #1
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	2b09      	cmp	r3, #9
 8003e4c:	bf94      	ite	ls
 8003e4e:	2301      	movls	r3, #1
 8003e50:	2300      	movhi	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	e019      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x4d6>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e5e:	fa93 f3a3 	rbit	r3, r3
 8003e62:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003e64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e66:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003e68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003e6e:	2320      	movs	r3, #32
 8003e70:	e003      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e74:	fab3 f383 	clz	r3, r3
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	2b09      	cmp	r3, #9
 8003e82:	bf94      	ite	ls
 8003e84:	2301      	movls	r3, #1
 8003e86:	2300      	movhi	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d079      	beq.n	8003f82 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d107      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x4f6>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	0e9b      	lsrs	r3, r3, #26
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	069b      	lsls	r3, r3, #26
 8003ea4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ea8:	e015      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x522>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eba:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003ec2:	2320      	movs	r3, #32
 8003ec4:	e003      	b.n	8003ece <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec8:	fab3 f383 	clz	r3, r3
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	069b      	lsls	r3, r3, #26
 8003ed2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x542>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	0e9b      	lsrs	r3, r3, #26
 8003ee8:	3301      	adds	r3, #1
 8003eea:	f003 031f 	and.w	r3, r3, #31
 8003eee:	2101      	movs	r1, #1
 8003ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef4:	e017      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x572>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003efe:	fa93 f3a3 	rbit	r3, r3
 8003f02:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003f0e:	2320      	movs	r3, #32
 8003f10:	e003      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f14:	fab3 f383 	clz	r3, r3
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	2101      	movs	r1, #1
 8003f22:	fa01 f303 	lsl.w	r3, r1, r3
 8003f26:	ea42 0103 	orr.w	r1, r2, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x598>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	0e9b      	lsrs	r3, r3, #26
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	f003 021f 	and.w	r2, r3, #31
 8003f42:	4613      	mov	r3, r2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	4413      	add	r3, r2
 8003f48:	051b      	lsls	r3, r3, #20
 8003f4a:	e018      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x5ca>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003f64:	2320      	movs	r3, #32
 8003f66:	e003      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6a:	fab3 f383 	clz	r3, r3
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	3301      	adds	r3, #1
 8003f72:	f003 021f 	and.w	r2, r3, #31
 8003f76:	4613      	mov	r3, r2
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	4413      	add	r3, r2
 8003f7c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f7e:	430b      	orrs	r3, r1
 8003f80:	e081      	b.n	8004086 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d107      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x5ea>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	0e9b      	lsrs	r3, r3, #26
 8003f94:	3301      	adds	r3, #1
 8003f96:	069b      	lsls	r3, r3, #26
 8003f98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f9c:	e015      	b.n	8003fca <HAL_ADC_ConfigChannel+0x616>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	fa93 f3a3 	rbit	r3, r3
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003fb6:	2320      	movs	r3, #32
 8003fb8:	e003      	b.n	8003fc2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	fab3 f383 	clz	r3, r3
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	069b      	lsls	r3, r3, #26
 8003fc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <HAL_ADC_ConfigChannel+0x636>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	0e9b      	lsrs	r3, r3, #26
 8003fdc:	3301      	adds	r3, #1
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	e017      	b.n	800401a <HAL_ADC_ConfigChannel+0x666>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	fa93 f3a3 	rbit	r3, r3
 8003ff6:	61fb      	str	r3, [r7, #28]
  return result;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8004002:	2320      	movs	r3, #32
 8004004:	e003      	b.n	800400e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	fab3 f383 	clz	r3, r3
 800400c:	b2db      	uxtb	r3, r3
 800400e:	3301      	adds	r3, #1
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	2101      	movs	r1, #1
 8004016:	fa01 f303 	lsl.w	r3, r1, r3
 800401a:	ea42 0103 	orr.w	r1, r2, r3
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x692>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	0e9b      	lsrs	r3, r3, #26
 8004030:	3301      	adds	r3, #1
 8004032:	f003 021f 	and.w	r2, r3, #31
 8004036:	4613      	mov	r3, r2
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	4413      	add	r3, r2
 800403c:	3b1e      	subs	r3, #30
 800403e:	051b      	lsls	r3, r3, #20
 8004040:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004044:	e01e      	b.n	8004084 <HAL_ADC_ConfigChannel+0x6d0>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	fa93 f3a3 	rbit	r3, r3
 8004052:	613b      	str	r3, [r7, #16]
  return result;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d104      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800405e:	2320      	movs	r3, #32
 8004060:	e006      	b.n	8004070 <HAL_ADC_ConfigChannel+0x6bc>
 8004062:	bf00      	nop
 8004064:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	fab3 f383 	clz	r3, r3
 800406e:	b2db      	uxtb	r3, r3
 8004070:	3301      	adds	r3, #1
 8004072:	f003 021f 	and.w	r2, r3, #31
 8004076:	4613      	mov	r3, r2
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4413      	add	r3, r2
 800407c:	3b1e      	subs	r3, #30
 800407e:	051b      	lsls	r3, r3, #20
 8004080:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004084:	430b      	orrs	r3, r1
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	6892      	ldr	r2, [r2, #8]
 800408a:	4619      	mov	r1, r3
 800408c:	f7ff fa70 	bl	8003570 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	4b3c      	ldr	r3, [pc, #240]	; (8004188 <HAL_ADC_ConfigChannel+0x7d4>)
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d06b      	beq.n	8004174 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800409c:	483b      	ldr	r0, [pc, #236]	; (800418c <HAL_ADC_ConfigChannel+0x7d8>)
 800409e:	f7ff f9c5 	bl	800342c <LL_ADC_GetCommonPathInternalCh>
 80040a2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a39      	ldr	r2, [pc, #228]	; (8004190 <HAL_ADC_ConfigChannel+0x7dc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d126      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d120      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a34      	ldr	r2, [pc, #208]	; (8004194 <HAL_ADC_ConfigChannel+0x7e0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d156      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040ce:	4619      	mov	r1, r3
 80040d0:	482e      	ldr	r0, [pc, #184]	; (800418c <HAL_ADC_ConfigChannel+0x7d8>)
 80040d2:	f7ff f998 	bl	8003406 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80040d6:	4b30      	ldr	r3, [pc, #192]	; (8004198 <HAL_ADC_ConfigChannel+0x7e4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	099b      	lsrs	r3, r3, #6
 80040dc:	4a2f      	ldr	r2, [pc, #188]	; (800419c <HAL_ADC_ConfigChannel+0x7e8>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	099a      	lsrs	r2, r3, #6
 80040e4:	4613      	mov	r3, r2
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040ee:	e002      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f9      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040fc:	e03a      	b.n	8004174 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a27      	ldr	r2, [pc, #156]	; (80041a0 <HAL_ADC_ConfigChannel+0x7ec>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d113      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x77c>
 8004108:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800410c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10d      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1e      	ldr	r2, [pc, #120]	; (8004194 <HAL_ADC_ConfigChannel+0x7e0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d12a      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800411e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004126:	4619      	mov	r1, r3
 8004128:	4818      	ldr	r0, [pc, #96]	; (800418c <HAL_ADC_ConfigChannel+0x7d8>)
 800412a:	f7ff f96c 	bl	8003406 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800412e:	e021      	b.n	8004174 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1b      	ldr	r2, [pc, #108]	; (80041a4 <HAL_ADC_ConfigChannel+0x7f0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d11c      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800413a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800413e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d116      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a12      	ldr	r2, [pc, #72]	; (8004194 <HAL_ADC_ConfigChannel+0x7e0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d111      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004150:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004154:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004158:	4619      	mov	r1, r3
 800415a:	480c      	ldr	r0, [pc, #48]	; (800418c <HAL_ADC_ConfigChannel+0x7d8>)
 800415c:	f7ff f953 	bl	8003406 <LL_ADC_SetCommonPathInternalCh>
 8004160:	e008      	b.n	8004174 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	f043 0220 	orr.w	r2, r3, #32
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800417c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004180:	4618      	mov	r0, r3
 8004182:	37d8      	adds	r7, #216	; 0xd8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	80080000 	.word	0x80080000
 800418c:	50040300 	.word	0x50040300
 8004190:	c7520000 	.word	0xc7520000
 8004194:	50040000 	.word	0x50040000
 8004198:	20000000 	.word	0x20000000
 800419c:	053e2d63 	.word	0x053e2d63
 80041a0:	cb840000 	.word	0xcb840000
 80041a4:	80000001 	.word	0x80000001

080041a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041b8:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <__NVIC_SetPriorityGrouping+0x44>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041c4:	4013      	ands	r3, r2
 80041c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041da:	4a04      	ldr	r2, [pc, #16]	; (80041ec <__NVIC_SetPriorityGrouping+0x44>)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	60d3      	str	r3, [r2, #12]
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041f4:	4b04      	ldr	r3, [pc, #16]	; (8004208 <__NVIC_GetPriorityGrouping+0x18>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	0a1b      	lsrs	r3, r3, #8
 80041fa:	f003 0307 	and.w	r3, r3, #7
}
 80041fe:	4618      	mov	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	e000ed00 	.word	0xe000ed00

0800420c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421a:	2b00      	cmp	r3, #0
 800421c:	db0b      	blt.n	8004236 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	f003 021f 	and.w	r2, r3, #31
 8004224:	4907      	ldr	r1, [pc, #28]	; (8004244 <__NVIC_EnableIRQ+0x38>)
 8004226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	2001      	movs	r0, #1
 800422e:	fa00 f202 	lsl.w	r2, r0, r2
 8004232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	e000e100 	.word	0xe000e100

08004248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	6039      	str	r1, [r7, #0]
 8004252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004258:	2b00      	cmp	r3, #0
 800425a:	db0a      	blt.n	8004272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	b2da      	uxtb	r2, r3
 8004260:	490c      	ldr	r1, [pc, #48]	; (8004294 <__NVIC_SetPriority+0x4c>)
 8004262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004266:	0112      	lsls	r2, r2, #4
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	440b      	add	r3, r1
 800426c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004270:	e00a      	b.n	8004288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	b2da      	uxtb	r2, r3
 8004276:	4908      	ldr	r1, [pc, #32]	; (8004298 <__NVIC_SetPriority+0x50>)
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	3b04      	subs	r3, #4
 8004280:	0112      	lsls	r2, r2, #4
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	440b      	add	r3, r1
 8004286:	761a      	strb	r2, [r3, #24]
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	e000e100 	.word	0xe000e100
 8004298:	e000ed00 	.word	0xe000ed00

0800429c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800429c:	b480      	push	{r7}
 800429e:	b089      	sub	sp, #36	; 0x24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f1c3 0307 	rsb	r3, r3, #7
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	bf28      	it	cs
 80042ba:	2304      	movcs	r3, #4
 80042bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3304      	adds	r3, #4
 80042c2:	2b06      	cmp	r3, #6
 80042c4:	d902      	bls.n	80042cc <NVIC_EncodePriority+0x30>
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3b03      	subs	r3, #3
 80042ca:	e000      	b.n	80042ce <NVIC_EncodePriority+0x32>
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d0:	f04f 32ff 	mov.w	r2, #4294967295
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43da      	mvns	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	401a      	ands	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042e4:	f04f 31ff 	mov.w	r1, #4294967295
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	fa01 f303 	lsl.w	r3, r1, r3
 80042ee:	43d9      	mvns	r1, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f4:	4313      	orrs	r3, r2
         );
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3724      	adds	r7, #36	; 0x24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3b01      	subs	r3, #1
 8004310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004314:	d301      	bcc.n	800431a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004316:	2301      	movs	r3, #1
 8004318:	e00f      	b.n	800433a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800431a:	4a0a      	ldr	r2, [pc, #40]	; (8004344 <SysTick_Config+0x40>)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3b01      	subs	r3, #1
 8004320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004322:	210f      	movs	r1, #15
 8004324:	f04f 30ff 	mov.w	r0, #4294967295
 8004328:	f7ff ff8e 	bl	8004248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <SysTick_Config+0x40>)
 800432e:	2200      	movs	r2, #0
 8004330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004332:	4b04      	ldr	r3, [pc, #16]	; (8004344 <SysTick_Config+0x40>)
 8004334:	2207      	movs	r2, #7
 8004336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	e000e010 	.word	0xe000e010

08004348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff ff29 	bl	80041a8 <__NVIC_SetPriorityGrouping>
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b086      	sub	sp, #24
 8004362:	af00      	add	r7, sp, #0
 8004364:	4603      	mov	r3, r0
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004370:	f7ff ff3e 	bl	80041f0 <__NVIC_GetPriorityGrouping>
 8004374:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	6978      	ldr	r0, [r7, #20]
 800437c:	f7ff ff8e 	bl	800429c <NVIC_EncodePriority>
 8004380:	4602      	mov	r2, r0
 8004382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff ff5d 	bl	8004248 <__NVIC_SetPriority>
}
 800438e:	bf00      	nop
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	4603      	mov	r3, r0
 800439e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff ff31 	bl	800420c <__NVIC_EnableIRQ>
}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff ffa2 	bl	8004304 <SysTick_Config>
 80043c0:	4603      	mov	r3, r0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e054      	b.n	8004488 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	7f5b      	ldrb	r3, [r3, #29]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d105      	bne.n	80043f4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fe f930 	bl	8002654 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	791b      	ldrb	r3, [r3, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10c      	bne.n	800441c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a22      	ldr	r2, [pc, #136]	; (8004490 <HAL_CRC_Init+0xc4>)
 8004408:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0218 	bic.w	r2, r2, #24
 8004418:	609a      	str	r2, [r3, #8]
 800441a:	e00c      	b.n	8004436 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6899      	ldr	r1, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	461a      	mov	r2, r3
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f834 	bl	8004494 <HAL_CRCEx_Polynomial_Set>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e028      	b.n	8004488 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	795b      	ldrb	r3, [r3, #5]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d105      	bne.n	800444a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f04f 32ff 	mov.w	r2, #4294967295
 8004446:	611a      	str	r2, [r3, #16]
 8004448:	e004      	b.n	8004454 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6912      	ldr	r2, [r2, #16]
 8004452:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695a      	ldr	r2, [r3, #20]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699a      	ldr	r2, [r3, #24]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	04c11db7 	.word	0x04c11db7

08004494 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80044a4:	231f      	movs	r3, #31
 80044a6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80044a8:	bf00      	nop
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1e5a      	subs	r2, r3, #1
 80044ae:	613a      	str	r2, [r7, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d009      	beq.n	80044c8 <HAL_CRCEx_Polynomial_Set+0x34>
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b18      	cmp	r3, #24
 80044cc:	d846      	bhi.n	800455c <HAL_CRCEx_Polynomial_Set+0xc8>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	08004563 	.word	0x08004563
 80044d8:	0800455d 	.word	0x0800455d
 80044dc:	0800455d 	.word	0x0800455d
 80044e0:	0800455d 	.word	0x0800455d
 80044e4:	0800455d 	.word	0x0800455d
 80044e8:	0800455d 	.word	0x0800455d
 80044ec:	0800455d 	.word	0x0800455d
 80044f0:	0800455d 	.word	0x0800455d
 80044f4:	08004551 	.word	0x08004551
 80044f8:	0800455d 	.word	0x0800455d
 80044fc:	0800455d 	.word	0x0800455d
 8004500:	0800455d 	.word	0x0800455d
 8004504:	0800455d 	.word	0x0800455d
 8004508:	0800455d 	.word	0x0800455d
 800450c:	0800455d 	.word	0x0800455d
 8004510:	0800455d 	.word	0x0800455d
 8004514:	08004545 	.word	0x08004545
 8004518:	0800455d 	.word	0x0800455d
 800451c:	0800455d 	.word	0x0800455d
 8004520:	0800455d 	.word	0x0800455d
 8004524:	0800455d 	.word	0x0800455d
 8004528:	0800455d 	.word	0x0800455d
 800452c:	0800455d 	.word	0x0800455d
 8004530:	0800455d 	.word	0x0800455d
 8004534:	08004539 	.word	0x08004539
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	2b06      	cmp	r3, #6
 800453c:	d913      	bls.n	8004566 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004542:	e010      	b.n	8004566 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	2b07      	cmp	r3, #7
 8004548:	d90f      	bls.n	800456a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800454e:	e00c      	b.n	800456a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b0f      	cmp	r3, #15
 8004554:	d90b      	bls.n	800456e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800455a:	e008      	b.n	800456e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	75fb      	strb	r3, [r7, #23]
      break;
 8004560:	e006      	b.n	8004570 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004562:	bf00      	nop
 8004564:	e004      	b.n	8004570 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004566:	bf00      	nop
 8004568:	e002      	b.n	8004570 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800456a:	bf00      	nop
 800456c:	e000      	b.n	8004570 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800456e:	bf00      	nop
  }
  if (status == HAL_OK)
 8004570:	7dfb      	ldrb	r3, [r7, #23]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10d      	bne.n	8004592 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f023 0118 	bic.w	r1, r3, #24
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	430a      	orrs	r2, r1
 8004590:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004592:	7dfb      	ldrb	r3, [r7, #23]
}
 8004594:	4618      	mov	r0, r3
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e014      	b.n	80045dc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	791b      	ldrb	r3, [r3, #4]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d105      	bne.n	80045c8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fe f866 	bl	8002694 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	795b      	ldrb	r3, [r3, #5]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_DAC_ConfigChannel+0x1c>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e12a      	b.n	8004856 <HAL_DAC_ConfigChannel+0x272>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2202      	movs	r2, #2
 800460a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b04      	cmp	r3, #4
 8004612:	d174      	bne.n	80046fe <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004614:	f7fe feb6 	bl	8003384 <HAL_GetTick>
 8004618:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d134      	bne.n	800468a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004620:	e011      	b.n	8004646 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004622:	f7fe feaf 	bl	8003384 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d90a      	bls.n	8004646 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f043 0208 	orr.w	r2, r3, #8
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2203      	movs	r2, #3
 8004640:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e107      	b.n	8004856 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e6      	bne.n	8004622 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004654:	2001      	movs	r0, #1
 8004656:	f7fe fea1 	bl	800339c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	69d2      	ldr	r2, [r2, #28]
 8004662:	641a      	str	r2, [r3, #64]	; 0x40
 8004664:	e01e      	b.n	80046a4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004666:	f7fe fe8d 	bl	8003384 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	d90a      	bls.n	800468a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f043 0208 	orr.w	r2, r3, #8
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2203      	movs	r2, #3
 8004684:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e0e5      	b.n	8004856 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004690:	2b00      	cmp	r3, #0
 8004692:	dbe8      	blt.n	8004666 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004694:	2001      	movs	r0, #1
 8004696:	f7fe fe81 	bl	800339c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	69d2      	ldr	r2, [r2, #28]
 80046a2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80046b4:	fa01 f303 	lsl.w	r3, r1, r3
 80046b8:	43db      	mvns	r3, r3
 80046ba:	ea02 0103 	and.w	r1, r2, r3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	6a1a      	ldr	r2, [r3, #32]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	409a      	lsls	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	21ff      	movs	r1, #255	; 0xff
 80046e0:	fa01 f303 	lsl.w	r3, r1, r3
 80046e4:	43db      	mvns	r3, r3
 80046e6:	ea02 0103 	and.w	r1, r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	409a      	lsls	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d11d      	bne.n	8004742 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	221f      	movs	r2, #31
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	69fa      	ldr	r2, [r7, #28]
 800471e:	4013      	ands	r3, r2
 8004720:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	69fa      	ldr	r2, [r7, #28]
 8004736:	4313      	orrs	r3, r2
 8004738:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004748:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	2207      	movs	r2, #7
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43db      	mvns	r3, r3
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	4013      	ands	r3, r2
 800475c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	431a      	orrs	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f003 0310 	and.w	r3, r3, #16
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	4313      	orrs	r3, r2
 8004780:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6819      	ldr	r1, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43da      	mvns	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	400a      	ands	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f003 0310 	and.w	r3, r3, #16
 80047b6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43db      	mvns	r3, r3
 80047c0:	69fa      	ldr	r2, [r7, #28]
 80047c2:	4013      	ands	r3, r2
 80047c4:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e6:	d104      	bne.n	80047f2 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ee:	61fb      	str	r3, [r7, #28]
 80047f0:	e018      	b.n	8004824 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004800:	61fb      	str	r3, [r7, #28]
 8004802:	e00f      	b.n	8004824 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8004804:	f003 fb20 	bl	8007e48 <HAL_RCC_GetHCLKFreq>
 8004808:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4a14      	ldr	r2, [pc, #80]	; (8004860 <HAL_DAC_ConfigChannel+0x27c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d904      	bls.n	800481c <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	e003      	b.n	8004824 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004822:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6819      	ldr	r1, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	22c0      	movs	r2, #192	; 0xc0
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43da      	mvns	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	400a      	ands	r2, r1
 8004846:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2201      	movs	r2, #1
 800484c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	04c4b400 	.word	0x04c4b400

08004864 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0ac      	b.n	80049d0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fb76 	bl	8004f6c <DFSDM_GetChannelFromInstance>
 8004880:	4602      	mov	r2, r0
 8004882:	4b55      	ldr	r3, [pc, #340]	; (80049d8 <HAL_DFSDM_ChannelInit+0x174>)
 8004884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e09f      	b.n	80049d0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7fd ffb7 	bl	8002804 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004896:	4b51      	ldr	r3, [pc, #324]	; (80049dc <HAL_DFSDM_ChannelInit+0x178>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3301      	adds	r3, #1
 800489c:	4a4f      	ldr	r2, [pc, #316]	; (80049dc <HAL_DFSDM_ChannelInit+0x178>)
 800489e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80048a0:	4b4e      	ldr	r3, [pc, #312]	; (80049dc <HAL_DFSDM_ChannelInit+0x178>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d125      	bne.n	80048f4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80048a8:	4b4d      	ldr	r3, [pc, #308]	; (80049e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a4c      	ldr	r2, [pc, #304]	; (80049e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80048ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048b2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80048b4:	4b4a      	ldr	r3, [pc, #296]	; (80049e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4948      	ldr	r1, [pc, #288]	; (80049e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80048c2:	4b47      	ldr	r3, [pc, #284]	; (80049e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a46      	ldr	r2, [pc, #280]	; (80049e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80048c8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80048cc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	791b      	ldrb	r3, [r3, #4]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d108      	bne.n	80048e8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80048d6:	4b42      	ldr	r3, [pc, #264]	; (80049e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	3b01      	subs	r3, #1
 80048e0:	041b      	lsls	r3, r3, #16
 80048e2:	493f      	ldr	r1, [pc, #252]	; (80049e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80048e8:	4b3d      	ldr	r3, [pc, #244]	; (80049e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a3c      	ldr	r2, [pc, #240]	; (80049e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80048ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048f2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004902:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6819      	ldr	r1, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004912:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004918:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 020f 	bic.w	r2, r2, #15
 8004930:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6819      	ldr	r1, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004958:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6899      	ldr	r1, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	3b01      	subs	r3, #1
 800496a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f002 0207 	and.w	r2, r2, #7
 8004984:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6859      	ldr	r1, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049b0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fad4 	bl	8004f6c <DFSDM_GetChannelFromInstance>
 80049c4:	4601      	mov	r1, r0
 80049c6:	4a04      	ldr	r2, [pc, #16]	; (80049d8 <HAL_DFSDM_ChannelInit+0x174>)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20000968 	.word	0x20000968
 80049dc:	20000964 	.word	0x20000964
 80049e0:	40016000 	.word	0x40016000

080049e4 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e0ca      	b.n	8004bb4 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a66      	ldr	r2, [pc, #408]	; (8004bbc <HAL_DFSDM_FilterInit+0x1b0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d109      	bne.n	8004a3c <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d003      	beq.n	8004a38 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0bb      	b.n	8004bb4 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7fd fe5b 	bl	8002710 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004a68:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	7a1b      	ldrb	r3, [r3, #8]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d108      	bne.n	8004a84 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	e007      	b.n	8004a94 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004a92:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	7a5b      	ldrb	r3, [r3, #9]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d108      	bne.n	8004aae <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	e007      	b.n	8004abe <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004abc:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004acc:	f023 0308 	bic.w	r3, r3, #8
 8004ad0:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d108      	bne.n	8004aec <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6819      	ldr	r1, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	7c1b      	ldrb	r3, [r3, #16]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d108      	bne.n	8004b06 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0210 	orr.w	r2, r2, #16
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e007      	b.n	8004b16 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0210 	bic.w	r2, r2, #16
 8004b14:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	7c5b      	ldrb	r3, [r3, #17]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d108      	bne.n	8004b30 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0220 	orr.w	r2, r2, #32
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e007      	b.n	8004b40 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0220 	bic.w	r2, r2, #32
 8004b3e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8004b4e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8004b52:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6959      	ldr	r1, [r3, #20]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004b66:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004b6e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699a      	ldr	r2, [r3, #24]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	7c1a      	ldrb	r2, [r3, #16]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40016100 	.word	0x40016100

08004bc0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d02e      	beq.n	8004c38 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004be0:	2bff      	cmp	r3, #255	; 0xff
 8004be2:	d029      	beq.n	8004c38 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	6812      	ldr	r2, [r2, #0]
 8004bee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bf6:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d10d      	bne.n	8004c1a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	e00a      	b.n	8004c30 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6819      	ldr	r1, [r3, #0]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	021b      	lsls	r3, r3, #8
 8004c24:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	631a      	str	r2, [r3, #48]	; 0x30
 8004c36:	e001      	b.n	8004c3c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8004c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08c      	sub	sp, #48	; 0x30
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00f      	beq.n	8004c8e <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f966 	bl	8004f58 <HAL_DFSDM_FilterErrorCallback>
 8004c8c:	e13b      	b.n	8004f06 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00f      	beq.n	8004cb8 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2204      	movs	r2, #4
 8004ca8:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2202      	movs	r2, #2
 8004cae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f951 	bl	8004f58 <HAL_DFSDM_FilterErrorCallback>
 8004cb6:	e126      	b.n	8004f06 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d025      	beq.n	8004d0e <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d020      	beq.n	8004d0e <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f923 	bl	8004f18 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f040 8114 	bne.w	8004f04 <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f040 810f 	bne.w	8004f04 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0202 	bic.w	r2, r2, #2
 8004cf4:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d101      	bne.n	8004d04 <HAL_DFSDM_IRQHandler+0xb8>
 8004d00:	2201      	movs	r2, #1
 8004d02:	e000      	b.n	8004d06 <HAL_DFSDM_IRQHandler+0xba>
 8004d04:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004d0c:	e0fa      	b.n	8004f04 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d034      	beq.n	8004d82 <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d02f      	beq.n	8004d82 <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f902 	bl	8004f2c <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2c:	1e5a      	subs	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f040 80e5 	bne.w	8004f06 <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d112      	bne.n	8004d6a <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0201 	bic.w	r2, r2, #1
 8004d52:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d101      	bne.n	8004d62 <HAL_DFSDM_IRQHandler+0x116>
 8004d5e:	2201      	movs	r2, #1
 8004d60:	e000      	b.n	8004d64 <HAL_DFSDM_IRQHandler+0x118>
 8004d62:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d102      	bne.n	8004d7a <HAL_DFSDM_IRQHandler+0x12e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d78:	e000      	b.n	8004d7c <HAL_DFSDM_IRQHandler+0x130>
 8004d7a:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8004d80:	e0c1      	b.n	8004f06 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d03d      	beq.n	8004e08 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d038      	beq.n	8004e08 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_DFSDM_IRQHandler+0x162>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <HAL_DFSDM_IRQHandler+0x164>
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d109      	bne.n	8004dcc <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8004dbe:	e005      	b.n	8004dcc <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d102      	bne.n	8004ddc <HAL_DFSDM_IRQHandler+0x190>
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	2b06      	cmp	r3, #6
 8004dda:	d9f1      	bls.n	8004dc0 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d105      	bne.n	8004dee <HAL_DFSDM_IRQHandler+0x1a2>
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	3308      	adds	r3, #8
 8004de6:	2201      	movs	r2, #1
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	e003      	b.n	8004df6 <HAL_DFSDM_IRQHandler+0x1aa>
 8004dee:	2201      	movs	r2, #1
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f89d 	bl	8004f40 <HAL_DFSDM_FilterAwdCallback>
  {
 8004e06:	e07e      	b.n	8004f06 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a40      	ldr	r2, [pc, #256]	; (8004f10 <HAL_DFSDM_IRQHandler+0x2c4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d141      	bne.n	8004e96 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d03c      	beq.n	8004e96 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d037      	beq.n	8004e96 <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	0c1b      	lsrs	r3, r3, #16
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 8004e36:	e02a      	b.n	8004e8e <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d01f      	beq.n	8004e82 <HAL_DFSDM_IRQHandler+0x236>
 8004e42:	4a34      	ldr	r2, [pc, #208]	; (8004f14 <HAL_DFSDM_IRQHandler+0x2c8>)
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d019      	beq.n	8004e82 <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8004e4e:	4a31      	ldr	r2, [pc, #196]	; (8004f14 <HAL_DFSDM_IRQHandler+0x2c8>)
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00f      	beq.n	8004e82 <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f103 0210 	add.w	r2, r3, #16
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e72:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8004e74:	4a27      	ldr	r2, [pc, #156]	; (8004f14 <HAL_DFSDM_IRQHandler+0x2c8>)
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff fdb1 	bl	80049e4 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	3301      	adds	r3, #1
 8004e86:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	085b      	lsrs	r3, r3, #1
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	2b07      	cmp	r3, #7
 8004e92:	d9d1      	bls.n	8004e38 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 8004e94:	e037      	b.n	8004f06 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1d      	ldr	r2, [pc, #116]	; (8004f10 <HAL_DFSDM_IRQHandler+0x2c4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d132      	bne.n	8004f06 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d02d      	beq.n	8004f06 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d028      	beq.n	8004f06 <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	0e1b      	lsrs	r3, r3, #24
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8004ec4:	e005      	b.n	8004ed2 <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d102      	bne.n	8004ee2 <HAL_DFSDM_IRQHandler+0x296>
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b06      	cmp	r3, #6
 8004ee0:	d9f1      	bls.n	8004ec6 <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	f103 0218 	add.w	r2, r3, #24
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2101      	movs	r1, #1
 8004eee:	fa01 f202 	lsl.w	r2, r1, r2
 8004ef2:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8004ef4:	4a07      	ldr	r2, [pc, #28]	; (8004f14 <HAL_DFSDM_IRQHandler+0x2c8>)
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff fd7b 	bl	80049f8 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8004f02:	e000      	b.n	8004f06 <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004f04:	bf00      	nop
}
 8004f06:	bf00      	nop
 8004f08:	3730      	adds	r7, #48	; 0x30
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40016100 	.word	0x40016100
 8004f14:	20000968 	.word	0x20000968

08004f18 <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a1c      	ldr	r2, [pc, #112]	; (8004fe8 <DFSDM_GetChannelFromInstance+0x7c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d102      	bne.n	8004f82 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e02b      	b.n	8004fda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a19      	ldr	r2, [pc, #100]	; (8004fec <DFSDM_GetChannelFromInstance+0x80>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d102      	bne.n	8004f90 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	e024      	b.n	8004fda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a17      	ldr	r2, [pc, #92]	; (8004ff0 <DFSDM_GetChannelFromInstance+0x84>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d102      	bne.n	8004f9e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e01d      	b.n	8004fda <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a14      	ldr	r2, [pc, #80]	; (8004ff4 <DFSDM_GetChannelFromInstance+0x88>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d102      	bne.n	8004fac <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004fa6:	2304      	movs	r3, #4
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	e016      	b.n	8004fda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a12      	ldr	r2, [pc, #72]	; (8004ff8 <DFSDM_GetChannelFromInstance+0x8c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d102      	bne.n	8004fba <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004fb4:	2305      	movs	r3, #5
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e00f      	b.n	8004fda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a0f      	ldr	r2, [pc, #60]	; (8004ffc <DFSDM_GetChannelFromInstance+0x90>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d102      	bne.n	8004fc8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004fc2:	2306      	movs	r3, #6
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	e008      	b.n	8004fda <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a0d      	ldr	r2, [pc, #52]	; (8005000 <DFSDM_GetChannelFromInstance+0x94>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d102      	bne.n	8004fd6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004fd0:	2307      	movs	r3, #7
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	e001      	b.n	8004fda <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004fda:	68fb      	ldr	r3, [r7, #12]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40016000 	.word	0x40016000
 8004fec:	40016020 	.word	0x40016020
 8004ff0:	40016040 	.word	0x40016040
 8004ff4:	40016080 	.word	0x40016080
 8004ff8:	400160a0 	.word	0x400160a0
 8004ffc:	400160c0 	.word	0x400160c0
 8005000:	400160e0 	.word	0x400160e0

08005004 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e08d      	b.n	8005132 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	4b47      	ldr	r3, [pc, #284]	; (800513c <HAL_DMA_Init+0x138>)
 800501e:	429a      	cmp	r2, r3
 8005020:	d80f      	bhi.n	8005042 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	4b45      	ldr	r3, [pc, #276]	; (8005140 <HAL_DMA_Init+0x13c>)
 800502a:	4413      	add	r3, r2
 800502c:	4a45      	ldr	r2, [pc, #276]	; (8005144 <HAL_DMA_Init+0x140>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	091b      	lsrs	r3, r3, #4
 8005034:	009a      	lsls	r2, r3, #2
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a42      	ldr	r2, [pc, #264]	; (8005148 <HAL_DMA_Init+0x144>)
 800503e:	641a      	str	r2, [r3, #64]	; 0x40
 8005040:	e00e      	b.n	8005060 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	461a      	mov	r2, r3
 8005048:	4b40      	ldr	r3, [pc, #256]	; (800514c <HAL_DMA_Init+0x148>)
 800504a:	4413      	add	r3, r2
 800504c:	4a3d      	ldr	r2, [pc, #244]	; (8005144 <HAL_DMA_Init+0x140>)
 800504e:	fba2 2303 	umull	r2, r3, r2, r3
 8005052:	091b      	lsrs	r3, r3, #4
 8005054:	009a      	lsls	r2, r3, #2
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a3c      	ldr	r2, [pc, #240]	; (8005150 <HAL_DMA_Init+0x14c>)
 800505e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800509c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f8fe 	bl	80052b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c0:	d102      	bne.n	80050c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80050dc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d010      	beq.n	8005108 <HAL_DMA_Init+0x104>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d80c      	bhi.n	8005108 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f91e 	bl	8005330 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005104:	605a      	str	r2, [r3, #4]
 8005106:	e008      	b.n	800511a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40020407 	.word	0x40020407
 8005140:	bffdfff8 	.word	0xbffdfff8
 8005144:	cccccccd 	.word	0xcccccccd
 8005148:	40020000 	.word	0x40020000
 800514c:	bffdfbf8 	.word	0xbffdfbf8
 8005150:	40020400 	.word	0x40020400

08005154 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005170:	f003 031c 	and.w	r3, r3, #28
 8005174:	2204      	movs	r2, #4
 8005176:	409a      	lsls	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4013      	ands	r3, r2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d026      	beq.n	80051ce <HAL_DMA_IRQHandler+0x7a>
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b00      	cmp	r3, #0
 8005188:	d021      	beq.n	80051ce <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d107      	bne.n	80051a8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0204 	bic.w	r2, r2, #4
 80051a6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ac:	f003 021c 	and.w	r2, r3, #28
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	2104      	movs	r1, #4
 80051b6:	fa01 f202 	lsl.w	r2, r1, r2
 80051ba:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d071      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80051cc:	e06c      	b.n	80052a8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d2:	f003 031c 	and.w	r3, r3, #28
 80051d6:	2202      	movs	r2, #2
 80051d8:	409a      	lsls	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4013      	ands	r3, r2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d02e      	beq.n	8005240 <HAL_DMA_IRQHandler+0xec>
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d029      	beq.n	8005240 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10b      	bne.n	8005212 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 020a 	bic.w	r2, r2, #10
 8005208:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005216:	f003 021c 	and.w	r2, r3, #28
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	2102      	movs	r1, #2
 8005220:	fa01 f202 	lsl.w	r2, r1, r2
 8005224:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d038      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800523e:	e033      	b.n	80052a8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005244:	f003 031c 	and.w	r3, r3, #28
 8005248:	2208      	movs	r2, #8
 800524a:	409a      	lsls	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4013      	ands	r3, r2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d02a      	beq.n	80052aa <HAL_DMA_IRQHandler+0x156>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d025      	beq.n	80052aa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 020e 	bic.w	r2, r2, #14
 800526c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005272:	f003 021c 	and.w	r2, r3, #28
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	2101      	movs	r1, #1
 800527c:	fa01 f202 	lsl.w	r2, r1, r2
 8005280:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
}
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	4b17      	ldr	r3, [pc, #92]	; (8005320 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d80a      	bhi.n	80052de <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052cc:	089b      	lsrs	r3, r3, #2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052d4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6493      	str	r3, [r2, #72]	; 0x48
 80052dc:	e007      	b.n	80052ee <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e2:	089b      	lsrs	r3, r3, #2
 80052e4:	009a      	lsls	r2, r3, #2
 80052e6:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80052e8:	4413      	add	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	3b08      	subs	r3, #8
 80052f6:	4a0c      	ldr	r2, [pc, #48]	; (8005328 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80052f8:	fba2 2303 	umull	r2, r3, r2, r3
 80052fc:	091b      	lsrs	r3, r3, #4
 80052fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a0a      	ldr	r2, [pc, #40]	; (800532c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005304:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f003 031f 	and.w	r3, r3, #31
 800530c:	2201      	movs	r2, #1
 800530e:	409a      	lsls	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005314:	bf00      	nop
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	40020407 	.word	0x40020407
 8005324:	4002081c 	.word	0x4002081c
 8005328:	cccccccd 	.word	0xcccccccd
 800532c:	40020880 	.word	0x40020880

08005330 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005344:	4413      	add	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	461a      	mov	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a08      	ldr	r2, [pc, #32]	; (8005374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005352:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3b01      	subs	r3, #1
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	2201      	movs	r2, #1
 800535e:	409a      	lsls	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005364:	bf00      	nop
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	1000823f 	.word	0x1000823f
 8005374:	40020940 	.word	0x40020940

08005378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005386:	e166      	b.n	8005656 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	2101      	movs	r1, #1
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	fa01 f303 	lsl.w	r3, r1, r3
 8005394:	4013      	ands	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 8158 	beq.w	8005650 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d00b      	beq.n	80053c0 <HAL_GPIO_Init+0x48>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d007      	beq.n	80053c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053b4:	2b11      	cmp	r3, #17
 80053b6:	d003      	beq.n	80053c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b12      	cmp	r3, #18
 80053be:	d130      	bne.n	8005422 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	2203      	movs	r2, #3
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	43db      	mvns	r3, r3
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4013      	ands	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	fa02 f303 	lsl.w	r3, r2, r3
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053f6:	2201      	movs	r2, #1
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	43db      	mvns	r3, r3
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4013      	ands	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	091b      	lsrs	r3, r3, #4
 800540c:	f003 0201 	and.w	r2, r3, #1
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	2203      	movs	r2, #3
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	43db      	mvns	r3, r3
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4013      	ands	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d003      	beq.n	8005462 <HAL_GPIO_Init+0xea>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2b12      	cmp	r3, #18
 8005460:	d123      	bne.n	80054aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	08da      	lsrs	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3208      	adds	r2, #8
 800546a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	220f      	movs	r2, #15
 800547a:	fa02 f303 	lsl.w	r3, r2, r3
 800547e:	43db      	mvns	r3, r3
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4013      	ands	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	08da      	lsrs	r2, r3, #3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3208      	adds	r2, #8
 80054a4:	6939      	ldr	r1, [r7, #16]
 80054a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	2203      	movs	r2, #3
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	43db      	mvns	r3, r3
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4013      	ands	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f003 0203 	and.w	r2, r3, #3
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 80b2 	beq.w	8005650 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ec:	4b61      	ldr	r3, [pc, #388]	; (8005674 <HAL_GPIO_Init+0x2fc>)
 80054ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f0:	4a60      	ldr	r2, [pc, #384]	; (8005674 <HAL_GPIO_Init+0x2fc>)
 80054f2:	f043 0301 	orr.w	r3, r3, #1
 80054f6:	6613      	str	r3, [r2, #96]	; 0x60
 80054f8:	4b5e      	ldr	r3, [pc, #376]	; (8005674 <HAL_GPIO_Init+0x2fc>)
 80054fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005504:	4a5c      	ldr	r2, [pc, #368]	; (8005678 <HAL_GPIO_Init+0x300>)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	089b      	lsrs	r3, r3, #2
 800550a:	3302      	adds	r3, #2
 800550c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005510:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	220f      	movs	r2, #15
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	43db      	mvns	r3, r3
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4013      	ands	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800552e:	d02b      	beq.n	8005588 <HAL_GPIO_Init+0x210>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a52      	ldr	r2, [pc, #328]	; (800567c <HAL_GPIO_Init+0x304>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d025      	beq.n	8005584 <HAL_GPIO_Init+0x20c>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a51      	ldr	r2, [pc, #324]	; (8005680 <HAL_GPIO_Init+0x308>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d01f      	beq.n	8005580 <HAL_GPIO_Init+0x208>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a50      	ldr	r2, [pc, #320]	; (8005684 <HAL_GPIO_Init+0x30c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d019      	beq.n	800557c <HAL_GPIO_Init+0x204>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a4f      	ldr	r2, [pc, #316]	; (8005688 <HAL_GPIO_Init+0x310>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d013      	beq.n	8005578 <HAL_GPIO_Init+0x200>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a4e      	ldr	r2, [pc, #312]	; (800568c <HAL_GPIO_Init+0x314>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00d      	beq.n	8005574 <HAL_GPIO_Init+0x1fc>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a4d      	ldr	r2, [pc, #308]	; (8005690 <HAL_GPIO_Init+0x318>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d007      	beq.n	8005570 <HAL_GPIO_Init+0x1f8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a4c      	ldr	r2, [pc, #304]	; (8005694 <HAL_GPIO_Init+0x31c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d101      	bne.n	800556c <HAL_GPIO_Init+0x1f4>
 8005568:	2307      	movs	r3, #7
 800556a:	e00e      	b.n	800558a <HAL_GPIO_Init+0x212>
 800556c:	2308      	movs	r3, #8
 800556e:	e00c      	b.n	800558a <HAL_GPIO_Init+0x212>
 8005570:	2306      	movs	r3, #6
 8005572:	e00a      	b.n	800558a <HAL_GPIO_Init+0x212>
 8005574:	2305      	movs	r3, #5
 8005576:	e008      	b.n	800558a <HAL_GPIO_Init+0x212>
 8005578:	2304      	movs	r3, #4
 800557a:	e006      	b.n	800558a <HAL_GPIO_Init+0x212>
 800557c:	2303      	movs	r3, #3
 800557e:	e004      	b.n	800558a <HAL_GPIO_Init+0x212>
 8005580:	2302      	movs	r3, #2
 8005582:	e002      	b.n	800558a <HAL_GPIO_Init+0x212>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <HAL_GPIO_Init+0x212>
 8005588:	2300      	movs	r3, #0
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	f002 0203 	and.w	r2, r2, #3
 8005590:	0092      	lsls	r2, r2, #2
 8005592:	4093      	lsls	r3, r2
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800559a:	4937      	ldr	r1, [pc, #220]	; (8005678 <HAL_GPIO_Init+0x300>)
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	089b      	lsrs	r3, r3, #2
 80055a0:	3302      	adds	r3, #2
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80055a8:	4b3b      	ldr	r3, [pc, #236]	; (8005698 <HAL_GPIO_Init+0x320>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	43db      	mvns	r3, r3
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	4013      	ands	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055cc:	4a32      	ldr	r2, [pc, #200]	; (8005698 <HAL_GPIO_Init+0x320>)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80055d2:	4b31      	ldr	r3, [pc, #196]	; (8005698 <HAL_GPIO_Init+0x320>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	43db      	mvns	r3, r3
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4013      	ands	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80055f6:	4a28      	ldr	r2, [pc, #160]	; (8005698 <HAL_GPIO_Init+0x320>)
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055fc:	4b26      	ldr	r3, [pc, #152]	; (8005698 <HAL_GPIO_Init+0x320>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	43db      	mvns	r3, r3
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4013      	ands	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005620:	4a1d      	ldr	r2, [pc, #116]	; (8005698 <HAL_GPIO_Init+0x320>)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005626:	4b1c      	ldr	r3, [pc, #112]	; (8005698 <HAL_GPIO_Init+0x320>)
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	43db      	mvns	r3, r3
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4013      	ands	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800564a:	4a13      	ldr	r2, [pc, #76]	; (8005698 <HAL_GPIO_Init+0x320>)
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	3301      	adds	r3, #1
 8005654:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	fa22 f303 	lsr.w	r3, r2, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	f47f ae91 	bne.w	8005388 <HAL_GPIO_Init+0x10>
  }
}
 8005666:	bf00      	nop
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40021000 	.word	0x40021000
 8005678:	40010000 	.word	0x40010000
 800567c:	48000400 	.word	0x48000400
 8005680:	48000800 	.word	0x48000800
 8005684:	48000c00 	.word	0x48000c00
 8005688:	48001000 	.word	0x48001000
 800568c:	48001400 	.word	0x48001400
 8005690:	48001800 	.word	0x48001800
 8005694:	48001c00 	.word	0x48001c00
 8005698:	40010400 	.word	0x40010400

0800569c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	807b      	strh	r3, [r7, #2]
 80056a8:	4613      	mov	r3, r2
 80056aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056ac:	787b      	ldrb	r3, [r7, #1]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056b2:	887a      	ldrh	r2, [r7, #2]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80056b8:	e002      	b.n	80056c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056ba:	887a      	ldrh	r2, [r7, #2]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e081      	b.n	80057e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fd f94c 	bl	8002990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2224      	movs	r2, #36	; 0x24
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0201 	bic.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800571c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800572c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d107      	bne.n	8005746 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005742:	609a      	str	r2, [r3, #8]
 8005744:	e006      	b.n	8005754 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005752:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2b02      	cmp	r3, #2
 800575a:	d104      	bne.n	8005766 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005764:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005778:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005788:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	ea42 0103 	orr.w	r1, r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	021a      	lsls	r2, r3, #8
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	69d9      	ldr	r1, [r3, #28]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1a      	ldr	r2, [r3, #32]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d138      	bne.n	8005872 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005806:	2b01      	cmp	r3, #1
 8005808:	d101      	bne.n	800580e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800580a:	2302      	movs	r3, #2
 800580c:	e032      	b.n	8005874 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2224      	movs	r2, #36	; 0x24
 800581a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0201 	bic.w	r2, r2, #1
 800582c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800583c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6819      	ldr	r1, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0201 	orr.w	r2, r2, #1
 800585c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	e000      	b.n	8005874 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005872:	2302      	movs	r3, #2
  }
}
 8005874:	4618      	mov	r0, r3
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b20      	cmp	r3, #32
 8005894:	d139      	bne.n	800590a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e033      	b.n	800590c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2224      	movs	r2, #36	; 0x24
 80058b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0201 	bic.w	r2, r2, #1
 80058c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	021b      	lsls	r3, r3, #8
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0201 	orr.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	e000      	b.n	800590c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800590a:	2302      	movs	r3, #2
  }
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e0bf      	b.n	8005aaa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fd f8a0 	bl	8002a84 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800595a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6999      	ldr	r1, [r3, #24]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005970:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6899      	ldr	r1, [r3, #8]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	4b4a      	ldr	r3, [pc, #296]	; (8005ab4 <HAL_LTDC_Init+0x19c>)
 800598c:	400b      	ands	r3, r1
 800598e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	041b      	lsls	r3, r3, #16
 8005996:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6899      	ldr	r1, [r3, #8]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68d9      	ldr	r1, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	4b3e      	ldr	r3, [pc, #248]	; (8005ab4 <HAL_LTDC_Init+0x19c>)
 80059ba:	400b      	ands	r3, r1
 80059bc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	041b      	lsls	r3, r3, #16
 80059c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68d9      	ldr	r1, [r3, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1a      	ldr	r2, [r3, #32]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6919      	ldr	r1, [r3, #16]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	4b33      	ldr	r3, [pc, #204]	; (8005ab4 <HAL_LTDC_Init+0x19c>)
 80059e8:	400b      	ands	r3, r1
 80059ea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	041b      	lsls	r3, r3, #16
 80059f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6919      	ldr	r1, [r3, #16]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6959      	ldr	r1, [r3, #20]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <HAL_LTDC_Init+0x19c>)
 8005a16:	400b      	ands	r3, r1
 8005a18:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	041b      	lsls	r3, r3, #16
 8005a20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6959      	ldr	r1, [r3, #20]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a3e:	021b      	lsls	r3, r3, #8
 8005a40:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005a48:	041b      	lsls	r3, r3, #16
 8005a4a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0206 	orr.w	r2, r2, #6
 8005a86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	f000f800 	.word	0xf000f800

08005ab8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005ab8:	b5b0      	push	{r4, r5, r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <HAL_LTDC_ConfigLayer+0x1a>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e02c      	b.n	8005b2c <HAL_LTDC_ConfigLayer+0x74>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2202      	movs	r2, #2
 8005ade:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2134      	movs	r1, #52	; 0x34
 8005ae8:	fb01 f303 	mul.w	r3, r1, r3
 8005aec:	4413      	add	r3, r2
 8005aee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	4614      	mov	r4, r2
 8005af6:	461d      	mov	r5, r3
 8005af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	68b9      	ldr	r1, [r7, #8]
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 f897 	bl	8005c40 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2201      	movs	r2, #1
 8005b18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bdb0      	pop	{r4, r5, r7, pc}

08005b34 <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b089      	sub	sp, #36	; 0x24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d101      	bne.n	8005b4e <HAL_LTDC_SetPitch+0x1a>
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	e06f      	b.n	8005c2e <HAL_LTDC_SetPitch+0xfa>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2202      	movs	r2, #2
 8005b5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2134      	movs	r1, #52	; 0x34
 8005b64:	fb01 f303 	mul.w	r3, r1, r3
 8005b68:	4413      	add	r3, r2
 8005b6a:	3348      	adds	r3, #72	; 0x48
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 8005b76:	2304      	movs	r3, #4
 8005b78:	61fb      	str	r3, [r7, #28]
 8005b7a:	e016      	b.n	8005baa <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d102      	bne.n	8005b88 <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 8005b82:	2303      	movs	r3, #3
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	e010      	b.n	8005baa <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d008      	beq.n	8005ba0 <HAL_LTDC_SetPitch+0x6c>
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d005      	beq.n	8005ba0 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d002      	beq.n	8005ba0 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b07      	cmp	r3, #7
 8005b9e:	d102      	bne.n	8005ba6 <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	61fb      	str	r3, [r7, #28]
 8005ba4:	e001      	b.n	8005baa <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	fb02 f303 	mul.w	r3, r2, r3
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	01db      	lsls	r3, r3, #7
 8005bc0:	4413      	add	r3, r2
 8005bc2:	3384      	adds	r3, #132	; 0x84
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	4611      	mov	r1, r2
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	01d2      	lsls	r2, r2, #7
 8005bd0:	440a      	add	r2, r1
 8005bd2:	3284      	adds	r2, #132	; 0x84
 8005bd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bd8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8005bde:	4b17      	ldr	r3, [pc, #92]	; (8005c3c <HAL_LTDC_SetPitch+0x108>)
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	4a16      	ldr	r2, [pc, #88]	; (8005c3c <HAL_LTDC_SetPitch+0x108>)
 8005be4:	f043 0301 	orr.w	r3, r3, #1
 8005be8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	01db      	lsls	r3, r3, #7
 8005bf4:	4413      	add	r3, r2
 8005bf6:	3384      	adds	r3, #132	; 0x84
 8005bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	01db      	lsls	r3, r3, #7
 8005c04:	440b      	add	r3, r1
 8005c06:	3384      	adds	r3, #132	; 0x84
 8005c08:	4619      	mov	r1, r3
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8005c10:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <HAL_LTDC_SetPitch+0x108>)
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	4a09      	ldr	r2, [pc, #36]	; (8005c3c <HAL_LTDC_SetPitch+0x108>)
 8005c16:	f043 0301 	orr.w	r3, r3, #1
 8005c1a:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3724      	adds	r7, #36	; 0x24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	40016800 	.word	0x40016800

08005c40 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b089      	sub	sp, #36	; 0x24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	0c1b      	lsrs	r3, r3, #16
 8005c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c5c:	4413      	add	r3, r2
 8005c5e:	041b      	lsls	r3, r3, #16
 8005c60:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	01db      	lsls	r3, r3, #7
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3384      	adds	r3, #132	; 0x84
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	4611      	mov	r1, r2
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	01d2      	lsls	r2, r2, #7
 8005c7c:	440a      	add	r2, r1
 8005c7e:	3284      	adds	r2, #132	; 0x84
 8005c80:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8005c84:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	0c1b      	lsrs	r3, r3, #16
 8005c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c96:	4413      	add	r3, r2
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	01db      	lsls	r3, r3, #7
 8005ca4:	440b      	add	r3, r1
 8005ca6:	3384      	adds	r3, #132	; 0x84
 8005ca8:	4619      	mov	r1, r3
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cbe:	4413      	add	r3, r2
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	01db      	lsls	r3, r3, #7
 8005cce:	4413      	add	r3, r2
 8005cd0:	3384      	adds	r3, #132	; 0x84
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	4611      	mov	r1, r2
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	01d2      	lsls	r2, r2, #7
 8005cde:	440a      	add	r2, r1
 8005ce0:	3284      	adds	r2, #132	; 0x84
 8005ce2:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8005ce6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cf6:	4413      	add	r3, r2
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4619      	mov	r1, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	01db      	lsls	r3, r3, #7
 8005d04:	440b      	add	r3, r1
 8005d06:	3384      	adds	r3, #132	; 0x84
 8005d08:	4619      	mov	r1, r3
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	01db      	lsls	r3, r3, #7
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3384      	adds	r3, #132	; 0x84
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	6812      	ldr	r2, [r2, #0]
 8005d24:	4611      	mov	r1, r2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	01d2      	lsls	r2, r2, #7
 8005d2a:	440a      	add	r2, r1
 8005d2c:	3284      	adds	r2, #132	; 0x84
 8005d2e:	f023 0307 	bic.w	r3, r3, #7
 8005d32:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	01db      	lsls	r3, r3, #7
 8005d3e:	4413      	add	r3, r2
 8005d40:	3384      	adds	r3, #132	; 0x84
 8005d42:	461a      	mov	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d50:	021b      	lsls	r3, r3, #8
 8005d52:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005d5a:	041b      	lsls	r3, r3, #16
 8005d5c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	061b      	lsls	r3, r3, #24
 8005d64:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	01db      	lsls	r3, r3, #7
 8005d70:	4413      	add	r3, r2
 8005d72:	3384      	adds	r3, #132	; 0x84
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	01db      	lsls	r3, r3, #7
 8005d80:	4413      	add	r3, r2
 8005d82:	3384      	adds	r3, #132	; 0x84
 8005d84:	461a      	mov	r2, r3
 8005d86:	2300      	movs	r3, #0
 8005d88:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d90:	461a      	mov	r2, r3
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	01db      	lsls	r3, r3, #7
 8005da4:	440b      	add	r3, r1
 8005da6:	3384      	adds	r3, #132	; 0x84
 8005da8:	4619      	mov	r1, r3
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	01db      	lsls	r3, r3, #7
 8005dba:	4413      	add	r3, r2
 8005dbc:	3384      	adds	r3, #132	; 0x84
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	6812      	ldr	r2, [r2, #0]
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	01d2      	lsls	r2, r2, #7
 8005dca:	440a      	add	r2, r1
 8005dcc:	3284      	adds	r2, #132	; 0x84
 8005dce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005dd2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	01db      	lsls	r3, r3, #7
 8005dde:	4413      	add	r3, r2
 8005de0:	3384      	adds	r3, #132	; 0x84
 8005de2:	461a      	mov	r2, r3
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	01db      	lsls	r3, r3, #7
 8005df4:	4413      	add	r3, r2
 8005df6:	3384      	adds	r3, #132	; 0x84
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	6812      	ldr	r2, [r2, #0]
 8005dfe:	4611      	mov	r1, r2
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	01d2      	lsls	r2, r2, #7
 8005e04:	440a      	add	r2, r1
 8005e06:	3284      	adds	r2, #132	; 0x84
 8005e08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005e0c:	f023 0307 	bic.w	r3, r3, #7
 8005e10:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	69da      	ldr	r2, [r3, #28]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	68f9      	ldr	r1, [r7, #12]
 8005e1c:	6809      	ldr	r1, [r1, #0]
 8005e1e:	4608      	mov	r0, r1
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	01c9      	lsls	r1, r1, #7
 8005e24:	4401      	add	r1, r0
 8005e26:	3184      	adds	r1, #132	; 0x84
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	01db      	lsls	r3, r3, #7
 8005e36:	4413      	add	r3, r2
 8005e38:	3384      	adds	r3, #132	; 0x84
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	461a      	mov	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	01db      	lsls	r3, r3, #7
 8005e46:	4413      	add	r3, r2
 8005e48:	3384      	adds	r3, #132	; 0x84
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	461a      	mov	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	01db      	lsls	r3, r3, #7
 8005e5a:	4413      	add	r3, r2
 8005e5c:	3384      	adds	r3, #132	; 0x84
 8005e5e:	461a      	mov	r2, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d102      	bne.n	8005e74 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005e6e:	2304      	movs	r3, #4
 8005e70:	61fb      	str	r3, [r7, #28]
 8005e72:	e01b      	b.n	8005eac <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d102      	bne.n	8005e82 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	e014      	b.n	8005eac <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d00b      	beq.n	8005ea2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d007      	beq.n	8005ea2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d003      	beq.n	8005ea2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005e9e:	2b07      	cmp	r3, #7
 8005ea0:	d102      	bne.n	8005ea8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	61fb      	str	r3, [r7, #28]
 8005ea6:	e001      	b.n	8005eac <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	01db      	lsls	r3, r3, #7
 8005eb6:	4413      	add	r3, r2
 8005eb8:	3384      	adds	r3, #132	; 0x84
 8005eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	01d2      	lsls	r2, r2, #7
 8005ec6:	440a      	add	r2, r1
 8005ec8:	3284      	adds	r2, #132	; 0x84
 8005eca:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005ece:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	fb02 f303 	mul.w	r3, r2, r3
 8005eda:	041a      	lsls	r2, r3, #16
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	6859      	ldr	r1, [r3, #4]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	1acb      	subs	r3, r1, r3
 8005ee6:	69f9      	ldr	r1, [r7, #28]
 8005ee8:	fb01 f303 	mul.w	r3, r1, r3
 8005eec:	3303      	adds	r3, #3
 8005eee:	68f9      	ldr	r1, [r7, #12]
 8005ef0:	6809      	ldr	r1, [r1, #0]
 8005ef2:	4608      	mov	r0, r1
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	01c9      	lsls	r1, r1, #7
 8005ef8:	4401      	add	r1, r0
 8005efa:	3184      	adds	r1, #132	; 0x84
 8005efc:	4313      	orrs	r3, r2
 8005efe:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	461a      	mov	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	01db      	lsls	r3, r3, #7
 8005f0a:	4413      	add	r3, r2
 8005f0c:	3384      	adds	r3, #132	; 0x84
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	4611      	mov	r1, r2
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	01d2      	lsls	r2, r2, #7
 8005f1a:	440a      	add	r2, r1
 8005f1c:	3284      	adds	r2, #132	; 0x84
 8005f1e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f22:	f023 0307 	bic.w	r3, r3, #7
 8005f26:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	01db      	lsls	r3, r3, #7
 8005f32:	4413      	add	r3, r2
 8005f34:	3384      	adds	r3, #132	; 0x84
 8005f36:	461a      	mov	r2, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	01db      	lsls	r3, r3, #7
 8005f48:	4413      	add	r3, r2
 8005f4a:	3384      	adds	r3, #132	; 0x84
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	6812      	ldr	r2, [r2, #0]
 8005f52:	4611      	mov	r1, r2
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	01d2      	lsls	r2, r2, #7
 8005f58:	440a      	add	r2, r1
 8005f5a:	3284      	adds	r2, #132	; 0x84
 8005f5c:	f043 0301 	orr.w	r3, r3, #1
 8005f60:	6013      	str	r3, [r2, #0]
}
 8005f62:	bf00      	nop
 8005f64:	3724      	adds	r7, #36	; 0x24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f70:	b08f      	sub	sp, #60	; 0x3c
 8005f72:	af0a      	add	r7, sp, #40	; 0x28
 8005f74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e116      	b.n	80061ae <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d106      	bne.n	8005fa0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f009 fe04 	bl	800fba8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f006 fe65 	bl	800cc8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	687e      	ldr	r6, [r7, #4]
 8005fcc:	466d      	mov	r5, sp
 8005fce:	f106 0410 	add.w	r4, r6, #16
 8005fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fde:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fe2:	1d33      	adds	r3, r6, #4
 8005fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fe6:	6838      	ldr	r0, [r7, #0]
 8005fe8:	f006 fd52 	bl	800ca90 <USB_CoreInit>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e0d7      	b.n	80061ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f006 fe53 	bl	800ccb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800600a:	2300      	movs	r3, #0
 800600c:	73fb      	strb	r3, [r7, #15]
 800600e:	e04a      	b.n	80060a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006010:	7bfa      	ldrb	r2, [r7, #15]
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	1a9b      	subs	r3, r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	333d      	adds	r3, #61	; 0x3d
 8006020:	2201      	movs	r2, #1
 8006022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006024:	7bfa      	ldrb	r2, [r7, #15]
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	4613      	mov	r3, r2
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	1a9b      	subs	r3, r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	333c      	adds	r3, #60	; 0x3c
 8006034:	7bfa      	ldrb	r2, [r7, #15]
 8006036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006038:	7bfa      	ldrb	r2, [r7, #15]
 800603a:	7bfb      	ldrb	r3, [r7, #15]
 800603c:	b298      	uxth	r0, r3
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	4613      	mov	r3, r2
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	3342      	adds	r3, #66	; 0x42
 800604c:	4602      	mov	r2, r0
 800604e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006050:	7bfa      	ldrb	r2, [r7, #15]
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	4613      	mov	r3, r2
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	333f      	adds	r3, #63	; 0x3f
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006064:	7bfa      	ldrb	r2, [r7, #15]
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	4613      	mov	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	1a9b      	subs	r3, r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	3344      	adds	r3, #68	; 0x44
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006078:	7bfa      	ldrb	r2, [r7, #15]
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	4613      	mov	r3, r2
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	1a9b      	subs	r3, r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	3348      	adds	r3, #72	; 0x48
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800608c:	7bfa      	ldrb	r2, [r7, #15]
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	4613      	mov	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	3350      	adds	r3, #80	; 0x50
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
 80060a2:	3301      	adds	r3, #1
 80060a4:	73fb      	strb	r3, [r7, #15]
 80060a6:	7bfa      	ldrb	r2, [r7, #15]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d3af      	bcc.n	8006010 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060b0:	2300      	movs	r3, #0
 80060b2:	73fb      	strb	r3, [r7, #15]
 80060b4:	e044      	b.n	8006140 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80060b6:	7bfa      	ldrb	r2, [r7, #15]
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	1a9b      	subs	r3, r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80060c8:	2200      	movs	r2, #0
 80060ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80060cc:	7bfa      	ldrb	r2, [r7, #15]
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	4613      	mov	r3, r2
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	1a9b      	subs	r3, r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	440b      	add	r3, r1
 80060da:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80060de:	7bfa      	ldrb	r2, [r7, #15]
 80060e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80060e2:	7bfa      	ldrb	r2, [r7, #15]
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	4613      	mov	r3, r2
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	1a9b      	subs	r3, r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80060f4:	2200      	movs	r2, #0
 80060f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80060f8:	7bfa      	ldrb	r2, [r7, #15]
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	4613      	mov	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	1a9b      	subs	r3, r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800610e:	7bfa      	ldrb	r2, [r7, #15]
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	4613      	mov	r3, r2
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	1a9b      	subs	r3, r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006124:	7bfa      	ldrb	r2, [r7, #15]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	4613      	mov	r3, r2
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	3301      	adds	r3, #1
 800613e:	73fb      	strb	r3, [r7, #15]
 8006140:	7bfa      	ldrb	r2, [r7, #15]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	429a      	cmp	r2, r3
 8006148:	d3b5      	bcc.n	80060b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	687e      	ldr	r6, [r7, #4]
 8006152:	466d      	mov	r5, sp
 8006154:	f106 0410 	add.w	r4, r6, #16
 8006158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800615a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800615c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800615e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006160:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006164:	e885 0003 	stmia.w	r5, {r0, r1}
 8006168:	1d33      	adds	r3, r6, #4
 800616a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800616c:	6838      	ldr	r0, [r7, #0]
 800616e:	f006 fdc9 	bl	800cd04 <USB_DevInit>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e014      	b.n	80061ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	2b01      	cmp	r3, #1
 800619a:	d102      	bne.n	80061a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 ff61 	bl	8007064 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f007 fd4b 	bl	800dc42 <USB_DevDisconnect>

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d101      	bne.n	80061d2 <HAL_PCD_Start+0x1c>
 80061ce:	2302      	movs	r3, #2
 80061d0:	e01c      	b.n	800620c <HAL_PCD_Start+0x56>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d105      	bne.n	80061ee <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f006 fd3a 	bl	800cc6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f007 fcff 	bl	800dc00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006214:	b590      	push	{r4, r7, lr}
 8006216:	b08d      	sub	sp, #52	; 0x34
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4618      	mov	r0, r3
 800622c:	f007 fdbd 	bl	800ddaa <USB_GetMode>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	f040 838f 	bne.w	8006956 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4618      	mov	r0, r3
 800623e:	f007 fd21 	bl	800dc84 <USB_ReadInterrupts>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 8385 	beq.w	8006954 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f007 fd18 	bl	800dc84 <USB_ReadInterrupts>
 8006254:	4603      	mov	r3, r0
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b02      	cmp	r3, #2
 800625c:	d107      	bne.n	800626e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	695a      	ldr	r2, [r3, #20]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f002 0202 	and.w	r2, r2, #2
 800626c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f007 fd06 	bl	800dc84 <USB_ReadInterrupts>
 8006278:	4603      	mov	r3, r0
 800627a:	f003 0310 	and.w	r3, r3, #16
 800627e:	2b10      	cmp	r3, #16
 8006280:	d161      	bne.n	8006346 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	699a      	ldr	r2, [r3, #24]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0210 	bic.w	r2, r2, #16
 8006290:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f003 020f 	and.w	r2, r3, #15
 800629e:	4613      	mov	r3, r2
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	4413      	add	r3, r2
 80062ae:	3304      	adds	r3, #4
 80062b0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	0c5b      	lsrs	r3, r3, #17
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d124      	bne.n	8006308 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80062c4:	4013      	ands	r3, r2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d035      	beq.n	8006336 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	091b      	lsrs	r3, r3, #4
 80062d2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80062d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062d8:	b29b      	uxth	r3, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	6a38      	ldr	r0, [r7, #32]
 80062de:	f007 fb6c 	bl	800d9ba <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	091b      	lsrs	r3, r3, #4
 80062ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062ee:	441a      	add	r2, r3
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	699a      	ldr	r2, [r3, #24]
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	091b      	lsrs	r3, r3, #4
 80062fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006300:	441a      	add	r2, r3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	619a      	str	r2, [r3, #24]
 8006306:	e016      	b.n	8006336 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	0c5b      	lsrs	r3, r3, #17
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	2b06      	cmp	r3, #6
 8006312:	d110      	bne.n	8006336 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800631a:	2208      	movs	r2, #8
 800631c:	4619      	mov	r1, r3
 800631e:	6a38      	ldr	r0, [r7, #32]
 8006320:	f007 fb4b 	bl	800d9ba <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	699a      	ldr	r2, [r3, #24]
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	091b      	lsrs	r3, r3, #4
 800632c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006330:	441a      	add	r2, r3
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	699a      	ldr	r2, [r3, #24]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0210 	orr.w	r2, r2, #16
 8006344:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f007 fc9a 	bl	800dc84 <USB_ReadInterrupts>
 8006350:	4603      	mov	r3, r0
 8006352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006356:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800635a:	d16e      	bne.n	800643a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	f007 fca0 	bl	800dcaa <USB_ReadDevAllOutEpInterrupt>
 800636a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800636c:	e062      	b.n	8006434 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d057      	beq.n	8006428 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	4611      	mov	r1, r2
 8006382:	4618      	mov	r0, r3
 8006384:	f007 fcc5 	bl	800dd12 <USB_ReadDevOutEPInterrupt>
 8006388:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00c      	beq.n	80063ae <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a0:	461a      	mov	r2, r3
 80063a2:	2301      	movs	r3, #1
 80063a4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80063a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fd81 	bl	8006eb0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00c      	beq.n	80063d2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c4:	461a      	mov	r2, r3
 80063c6:	2308      	movs	r3, #8
 80063c8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80063ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fdbd 	bl	8006f4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f003 0310 	and.w	r3, r3, #16
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d008      	beq.n	80063ee <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e8:	461a      	mov	r2, r3
 80063ea:	2310      	movs	r3, #16
 80063ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006404:	461a      	mov	r2, r3
 8006406:	2320      	movs	r3, #32
 8006408:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d009      	beq.n	8006428 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006420:	461a      	mov	r2, r3
 8006422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006426:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	3301      	adds	r3, #1
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	085b      	lsrs	r3, r3, #1
 8006432:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	2b00      	cmp	r3, #0
 8006438:	d199      	bne.n	800636e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4618      	mov	r0, r3
 8006440:	f007 fc20 	bl	800dc84 <USB_ReadInterrupts>
 8006444:	4603      	mov	r3, r0
 8006446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800644a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800644e:	f040 8087 	bne.w	8006560 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4618      	mov	r0, r3
 8006458:	f007 fc41 	bl	800dcde <USB_ReadDevAllInEpInterrupt>
 800645c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006462:	e07a      	b.n	800655a <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d06f      	beq.n	800654e <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	4611      	mov	r1, r2
 8006478:	4618      	mov	r0, r3
 800647a:	f007 fc68 	bl	800dd4e <USB_ReadDevInEPInterrupt>
 800647e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d020      	beq.n	80064cc <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	f003 030f 	and.w	r3, r3, #15
 8006490:	2201      	movs	r2, #1
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	43db      	mvns	r3, r3
 80064a4:	69f9      	ldr	r1, [r7, #28]
 80064a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064aa:	4013      	ands	r3, r2
 80064ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ba:	461a      	mov	r2, r3
 80064bc:	2301      	movs	r3, #1
 80064be:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f009 fc01 	bl	800fcce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d008      	beq.n	80064e8 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e2:	461a      	mov	r2, r3
 80064e4:	2308      	movs	r3, #8
 80064e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f003 0310 	and.w	r3, r3, #16
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d008      	beq.n	8006504 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fe:	461a      	mov	r2, r3
 8006500:	2310      	movs	r3, #16
 8006502:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650a:	2b00      	cmp	r3, #0
 800650c:	d008      	beq.n	8006520 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651a:	461a      	mov	r2, r3
 800651c:	2340      	movs	r3, #64	; 0x40
 800651e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d008      	beq.n	800653c <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006536:	461a      	mov	r2, r3
 8006538:	2302      	movs	r3, #2
 800653a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fc29 	bl	8006da0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	3301      	adds	r3, #1
 8006552:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	085b      	lsrs	r3, r3, #1
 8006558:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	2b00      	cmp	r3, #0
 800655e:	d181      	bne.n	8006464 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4618      	mov	r0, r3
 8006566:	f007 fb8d 	bl	800dc84 <USB_ReadInterrupts>
 800656a:	4603      	mov	r3, r0
 800656c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006574:	d122      	bne.n	80065bc <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006584:	f023 0301 	bic.w	r3, r3, #1
 8006588:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006590:	2b01      	cmp	r3, #1
 8006592:	d108      	bne.n	80065a6 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800659c:	2100      	movs	r1, #0
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f009 feac 	bl	80102fc <HAL_PCDEx_LPM_Callback>
 80065a4:	e002      	b.n	80065ac <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f009 fbfe 	bl	800fda8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695a      	ldr	r2, [r3, #20]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80065ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f007 fb5f 	bl	800dc84 <USB_ReadInterrupts>
 80065c6:	4603      	mov	r3, r0
 80065c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065d0:	d112      	bne.n	80065f8 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d102      	bne.n	80065e8 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f009 fbba 	bl	800fd5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695a      	ldr	r2, [r3, #20]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80065f6:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f007 fb41 	bl	800dc84 <USB_ReadInterrupts>
 8006602:	4603      	mov	r3, r0
 8006604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800660c:	d121      	bne.n	8006652 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	695a      	ldr	r2, [r3, #20]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800661c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d111      	bne.n	800664c <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006636:	089b      	lsrs	r3, r3, #2
 8006638:	f003 020f 	and.w	r2, r3, #15
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006642:	2101      	movs	r1, #1
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f009 fe59 	bl	80102fc <HAL_PCDEx_LPM_Callback>
 800664a:	e002      	b.n	8006652 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f009 fb85 	bl	800fd5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f007 fb14 	bl	800dc84 <USB_ReadInterrupts>
 800665c:	4603      	mov	r3, r0
 800665e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006666:	f040 80c5 	bne.w	80067f4 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006678:	f023 0301 	bic.w	r3, r3, #1
 800667c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2110      	movs	r1, #16
 8006684:	4618      	mov	r0, r3
 8006686:	f006 fc89 	bl	800cf9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800668a:	2300      	movs	r3, #0
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800668e:	e056      	b.n	800673e <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669c:	461a      	mov	r2, r3
 800669e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066c2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d4:	0151      	lsls	r1, r2, #5
 80066d6:	69fa      	ldr	r2, [r7, #28]
 80066d8:	440a      	add	r2, r1
 80066da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80066e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f0:	461a      	mov	r2, r3
 80066f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006708:	0151      	lsls	r1, r2, #5
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	440a      	add	r2, r1
 800670e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006712:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006716:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006728:	0151      	lsls	r1, r2, #5
 800672a:	69fa      	ldr	r2, [r7, #28]
 800672c:	440a      	add	r2, r1
 800672e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006732:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006736:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673a:	3301      	adds	r3, #1
 800673c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006744:	429a      	cmp	r2, r3
 8006746:	d3a3      	bcc.n	8006690 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006756:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800675a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	2b00      	cmp	r3, #0
 8006762:	d016      	beq.n	8006792 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800676e:	69fa      	ldr	r2, [r7, #28]
 8006770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006774:	f043 030b 	orr.w	r3, r3, #11
 8006778:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006784:	69fa      	ldr	r2, [r7, #28]
 8006786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800678a:	f043 030b 	orr.w	r3, r3, #11
 800678e:	6453      	str	r3, [r2, #68]	; 0x44
 8006790:	e015      	b.n	80067be <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80067a4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80067a8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	69fa      	ldr	r2, [r7, #28]
 80067b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067b8:	f043 030b 	orr.w	r3, r3, #11
 80067bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	69fa      	ldr	r2, [r7, #28]
 80067c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067dc:	4619      	mov	r1, r3
 80067de:	4610      	mov	r0, r2
 80067e0:	f007 fb14 	bl	800de0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	695a      	ldr	r2, [r3, #20]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80067f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f007 fa43 	bl	800dc84 <USB_ReadInterrupts>
 80067fe:	4603      	mov	r3, r0
 8006800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006808:	d124      	bne.n	8006854 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f007 fad9 	bl	800ddc6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4618      	mov	r0, r3
 800681a:	f006 fc20 	bl	800d05e <USB_GetDevSpeed>
 800681e:	4603      	mov	r3, r0
 8006820:	461a      	mov	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681c      	ldr	r4, [r3, #0]
 800682a:	f001 fb0d 	bl	8007e48 <HAL_RCC_GetHCLKFreq>
 800682e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006834:	b2db      	uxtb	r3, r3
 8006836:	461a      	mov	r2, r3
 8006838:	4620      	mov	r0, r4
 800683a:	f006 f97b 	bl	800cb34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f009 fa6d 	bl	800fd1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	695a      	ldr	r2, [r3, #20]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006852:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4618      	mov	r0, r3
 800685a:	f007 fa13 	bl	800dc84 <USB_ReadInterrupts>
 800685e:	4603      	mov	r3, r0
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	2b08      	cmp	r3, #8
 8006866:	d10a      	bne.n	800687e <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f009 fa4a 	bl	800fd02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695a      	ldr	r2, [r3, #20]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f002 0208 	and.w	r2, r2, #8
 800687c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f007 f9fe 	bl	800dc84 <USB_ReadInterrupts>
 8006888:	4603      	mov	r3, r0
 800688a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800688e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006892:	d10f      	bne.n	80068b4 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	b2db      	uxtb	r3, r3
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f009 fabc 	bl	800fe1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695a      	ldr	r2, [r3, #20]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80068b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f007 f9e3 	bl	800dc84 <USB_ReadInterrupts>
 80068be:	4603      	mov	r3, r0
 80068c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068c8:	d10f      	bne.n	80068ea <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f009 fa8f 	bl	800fdf8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	695a      	ldr	r2, [r3, #20]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80068e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f007 f9c8 	bl	800dc84 <USB_ReadInterrupts>
 80068f4:	4603      	mov	r3, r0
 80068f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80068fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068fe:	d10a      	bne.n	8006916 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f009 fa9d 	bl	800fe40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	695a      	ldr	r2, [r3, #20]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006914:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4618      	mov	r0, r3
 800691c:	f007 f9b2 	bl	800dc84 <USB_ReadInterrupts>
 8006920:	4603      	mov	r3, r0
 8006922:	f003 0304 	and.w	r3, r3, #4
 8006926:	2b04      	cmp	r3, #4
 8006928:	d115      	bne.n	8006956 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	f003 0304 	and.w	r3, r3, #4
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f009 fa8d 	bl	800fe5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6859      	ldr	r1, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	430a      	orrs	r2, r1
 8006950:	605a      	str	r2, [r3, #4]
 8006952:	e000      	b.n	8006956 <HAL_PCD_IRQHandler+0x742>
      return;
 8006954:	bf00      	nop
    }
  }
}
 8006956:	3734      	adds	r7, #52	; 0x34
 8006958:	46bd      	mov	sp, r7
 800695a:	bd90      	pop	{r4, r7, pc}

0800695c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800696e:	2b01      	cmp	r3, #1
 8006970:	d101      	bne.n	8006976 <HAL_PCD_SetAddress+0x1a>
 8006972:	2302      	movs	r3, #2
 8006974:	e013      	b.n	800699e <HAL_PCD_SetAddress+0x42>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	78fa      	ldrb	r2, [r7, #3]
 8006982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	78fa      	ldrb	r2, [r7, #3]
 800698c:	4611      	mov	r1, r2
 800698e:	4618      	mov	r0, r3
 8006990:	f007 f910 	bl	800dbb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	4608      	mov	r0, r1
 80069b0:	4611      	mov	r1, r2
 80069b2:	461a      	mov	r2, r3
 80069b4:	4603      	mov	r3, r0
 80069b6:	70fb      	strb	r3, [r7, #3]
 80069b8:	460b      	mov	r3, r1
 80069ba:	803b      	strh	r3, [r7, #0]
 80069bc:	4613      	mov	r3, r2
 80069be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	da0f      	bge.n	80069ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	f003 020f 	and.w	r2, r3, #15
 80069d2:	4613      	mov	r3, r2
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	3338      	adds	r3, #56	; 0x38
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	4413      	add	r3, r2
 80069e0:	3304      	adds	r3, #4
 80069e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2201      	movs	r2, #1
 80069e8:	705a      	strb	r2, [r3, #1]
 80069ea:	e00f      	b.n	8006a0c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069ec:	78fb      	ldrb	r3, [r7, #3]
 80069ee:	f003 020f 	and.w	r2, r3, #15
 80069f2:	4613      	mov	r3, r2
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	1a9b      	subs	r3, r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	4413      	add	r3, r2
 8006a02:	3304      	adds	r3, #4
 8006a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	f003 030f 	and.w	r3, r3, #15
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006a18:	883a      	ldrh	r2, [r7, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	78ba      	ldrb	r2, [r7, #2]
 8006a22:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	785b      	ldrb	r3, [r3, #1]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d004      	beq.n	8006a36 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a36:	78bb      	ldrb	r3, [r7, #2]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d102      	bne.n	8006a42 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_PCD_EP_Open+0xaa>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e00e      	b.n	8006a6e <HAL_PCD_EP_Open+0xc8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68f9      	ldr	r1, [r7, #12]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f006 fb1c 	bl	800d09c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006a6c:	7afb      	ldrb	r3, [r7, #11]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	da0f      	bge.n	8006aaa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a8a:	78fb      	ldrb	r3, [r7, #3]
 8006a8c:	f003 020f 	and.w	r2, r3, #15
 8006a90:	4613      	mov	r3, r2
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	1a9b      	subs	r3, r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	3338      	adds	r3, #56	; 0x38
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	705a      	strb	r2, [r3, #1]
 8006aa8:	e00f      	b.n	8006aca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	f003 020f 	and.w	r2, r3, #15
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	1a9b      	subs	r3, r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	4413      	add	r3, r2
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	f003 030f 	and.w	r3, r3, #15
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d101      	bne.n	8006ae4 <HAL_PCD_EP_Close+0x6e>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	e00e      	b.n	8006b02 <HAL_PCD_EP_Close+0x8c>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68f9      	ldr	r1, [r7, #12]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f006 fb5a 	bl	800d1ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b086      	sub	sp, #24
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
 8006b16:	460b      	mov	r3, r1
 8006b18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b1a:	7afb      	ldrb	r3, [r7, #11]
 8006b1c:	f003 020f 	and.w	r2, r3, #15
 8006b20:	4613      	mov	r3, r2
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	1a9b      	subs	r3, r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	3304      	adds	r3, #4
 8006b32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	2200      	movs	r2, #0
 8006b44:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b4c:	7afb      	ldrb	r3, [r7, #11]
 8006b4e:	f003 030f 	and.w	r3, r3, #15
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b58:	7afb      	ldrb	r3, [r7, #11]
 8006b5a:	f003 030f 	and.w	r3, r3, #15
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6979      	ldr	r1, [r7, #20]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f006 fdd7 	bl	800d71c <USB_EP0StartXfer>
 8006b6e:	e005      	b.n	8006b7c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6979      	ldr	r1, [r7, #20]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f006 fbf4 	bl	800d364 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b92:	78fb      	ldrb	r3, [r7, #3]
 8006b94:	f003 020f 	and.w	r2, r3, #15
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	1a9b      	subs	r3, r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006ba8:	681b      	ldr	r3, [r3, #0]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b086      	sub	sp, #24
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	f003 020f 	and.w	r2, r3, #15
 8006bcc:	4613      	mov	r3, r2
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	1a9b      	subs	r3, r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	3338      	adds	r3, #56	; 0x38
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	4413      	add	r3, r2
 8006bda:	3304      	adds	r3, #4
 8006bdc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2200      	movs	r2, #0
 8006bee:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bf6:	7afb      	ldrb	r3, [r7, #11]
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c02:	7afb      	ldrb	r3, [r7, #11]
 8006c04:	f003 030f 	and.w	r3, r3, #15
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d106      	bne.n	8006c1a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6979      	ldr	r1, [r7, #20]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f006 fd82 	bl	800d71c <USB_EP0StartXfer>
 8006c18:	e005      	b.n	8006c26 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6979      	ldr	r1, [r7, #20]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f006 fb9f 	bl	800d364 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	f003 020f 	and.w	r2, r3, #15
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d901      	bls.n	8006c4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e04e      	b.n	8006cec <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	da0f      	bge.n	8006c76 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	f003 020f 	and.w	r2, r3, #15
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	1a9b      	subs	r3, r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	3338      	adds	r3, #56	; 0x38
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	4413      	add	r3, r2
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	705a      	strb	r2, [r3, #1]
 8006c74:	e00d      	b.n	8006c92 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c76:	78fa      	ldrb	r2, [r7, #3]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	1a9b      	subs	r3, r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	4413      	add	r3, r2
 8006c88:	3304      	adds	r3, #4
 8006c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d101      	bne.n	8006cb2 <HAL_PCD_EP_SetStall+0x82>
 8006cae:	2302      	movs	r3, #2
 8006cb0:	e01c      	b.n	8006cec <HAL_PCD_EP_SetStall+0xbc>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68f9      	ldr	r1, [r7, #12]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f006 fea3 	bl	800da0c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	f003 030f 	and.w	r3, r3, #15
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d108      	bne.n	8006ce2 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4610      	mov	r0, r2
 8006cde:	f007 f895 	bl	800de0c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006d00:	78fb      	ldrb	r3, [r7, #3]
 8006d02:	f003 020f 	and.w	r2, r3, #15
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d901      	bls.n	8006d12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e042      	b.n	8006d98 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	da0f      	bge.n	8006d3a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d1a:	78fb      	ldrb	r3, [r7, #3]
 8006d1c:	f003 020f 	and.w	r2, r3, #15
 8006d20:	4613      	mov	r3, r2
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	1a9b      	subs	r3, r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	3338      	adds	r3, #56	; 0x38
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	3304      	adds	r3, #4
 8006d30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2201      	movs	r2, #1
 8006d36:	705a      	strb	r2, [r3, #1]
 8006d38:	e00f      	b.n	8006d5a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	f003 020f 	and.w	r2, r3, #15
 8006d40:	4613      	mov	r3, r2
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	1a9b      	subs	r3, r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	4413      	add	r3, r2
 8006d50:	3304      	adds	r3, #4
 8006d52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d60:	78fb      	ldrb	r3, [r7, #3]
 8006d62:	f003 030f 	and.w	r3, r3, #15
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d101      	bne.n	8006d7a <HAL_PCD_EP_ClrStall+0x86>
 8006d76:	2302      	movs	r3, #2
 8006d78:	e00e      	b.n	8006d98 <HAL_PCD_EP_ClrStall+0xa4>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68f9      	ldr	r1, [r7, #12]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f006 fead 	bl	800dae8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	4613      	mov	r3, r2
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	1a9b      	subs	r3, r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	3338      	adds	r3, #56	; 0x38
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	699a      	ldr	r2, [r3, #24]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d901      	bls.n	8006dd8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e067      	b.n	8006ea8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	695a      	ldr	r2, [r3, #20]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	69fa      	ldr	r2, [r7, #28]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d902      	bls.n	8006df4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	3303      	adds	r3, #3
 8006df8:	089b      	lsrs	r3, r3, #2
 8006dfa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006dfc:	e026      	b.n	8006e4c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	695a      	ldr	r2, [r3, #20]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	69fa      	ldr	r2, [r7, #28]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d902      	bls.n	8006e1a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	3303      	adds	r3, #3
 8006e1e:	089b      	lsrs	r3, r3, #2
 8006e20:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	68d9      	ldr	r1, [r3, #12]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	6978      	ldr	r0, [r7, #20]
 8006e30:	f006 fd92 	bl	800d958 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	68da      	ldr	r2, [r3, #12]
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	441a      	add	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	699a      	ldr	r2, [r3, #24]
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	441a      	add	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d809      	bhi.n	8006e76 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d203      	bcs.n	8006e76 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1c3      	bne.n	8006dfe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	695a      	ldr	r2, [r3, #20]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d811      	bhi.n	8006ea6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	f003 030f 	and.w	r3, r3, #15
 8006e88:	2201      	movs	r2, #1
 8006e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	43db      	mvns	r3, r3
 8006e9c:	6939      	ldr	r1, [r7, #16]
 8006e9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3720      	adds	r7, #32
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	333c      	adds	r3, #60	; 0x3c
 8006ec8:	3304      	adds	r3, #4
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4a19      	ldr	r2, [pc, #100]	; (8006f48 <PCD_EP_OutXfrComplete_int+0x98>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d124      	bne.n	8006f30 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00a      	beq.n	8006f06 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efc:	461a      	mov	r2, r3
 8006efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f02:	6093      	str	r3, [r2, #8]
 8006f04:	e01a      	b.n	8006f3c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f003 0320 	and.w	r3, r3, #32
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d008      	beq.n	8006f22 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	2320      	movs	r3, #32
 8006f20:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f008 feb5 	bl	800fc98 <HAL_PCD_DataOutStageCallback>
 8006f2e:	e005      	b.n	8006f3c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f008 feae 	bl	800fc98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	4f54310a 	.word	0x4f54310a

08006f4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	333c      	adds	r3, #60	; 0x3c
 8006f64:	3304      	adds	r3, #4
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4a0c      	ldr	r2, [pc, #48]	; (8006fb0 <PCD_EP_OutSetupPacket_int+0x64>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d90e      	bls.n	8006fa0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d009      	beq.n	8006fa0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f98:	461a      	mov	r2, r3
 8006f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f008 fe67 	bl	800fc74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	4f54300a 	.word	0x4f54300a

08006fb4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	70fb      	strb	r3, [r7, #3]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006fcc:	78fb      	ldrb	r3, [r7, #3]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d107      	bne.n	8006fe2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006fd2:	883b      	ldrh	r3, [r7, #0]
 8006fd4:	0419      	lsls	r1, r3, #16
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	629a      	str	r2, [r3, #40]	; 0x28
 8006fe0:	e028      	b.n	8007034 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe8:	0c1b      	lsrs	r3, r3, #16
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	4413      	add	r3, r2
 8006fee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	73fb      	strb	r3, [r7, #15]
 8006ff4:	e00d      	b.n	8007012 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	3340      	adds	r3, #64	; 0x40
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	0c1b      	lsrs	r3, r3, #16
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	4413      	add	r3, r2
 800700a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800700c:	7bfb      	ldrb	r3, [r7, #15]
 800700e:	3301      	adds	r3, #1
 8007010:	73fb      	strb	r3, [r7, #15]
 8007012:	7bfa      	ldrb	r2, [r7, #15]
 8007014:	78fb      	ldrb	r3, [r7, #3]
 8007016:	3b01      	subs	r3, #1
 8007018:	429a      	cmp	r2, r3
 800701a:	d3ec      	bcc.n	8006ff6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800701c:	883b      	ldrh	r3, [r7, #0]
 800701e:	0418      	lsls	r0, r3, #16
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6819      	ldr	r1, [r3, #0]
 8007024:	78fb      	ldrb	r3, [r7, #3]
 8007026:	3b01      	subs	r3, #1
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	4302      	orrs	r2, r0
 800702c:	3340      	adds	r3, #64	; 0x40
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	440b      	add	r3, r1
 8007032:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	460b      	mov	r3, r1
 800704c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	887a      	ldrh	r2, [r7, #2]
 8007054:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007096:	f043 0303 	orr.w	r3, r3, #3
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070b0:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a04      	ldr	r2, [pc, #16]	; (80070c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80070b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070ba:	6013      	str	r3, [r2, #0]
}
 80070bc:	bf00      	nop
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	40007000 	.word	0x40007000

080070cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80070d0:	4b0d      	ldr	r3, [pc, #52]	; (8007108 <HAL_PWREx_GetVoltageRange+0x3c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070dc:	d102      	bne.n	80070e4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80070de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070e2:	e00b      	b.n	80070fc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80070e4:	4b08      	ldr	r3, [pc, #32]	; (8007108 <HAL_PWREx_GetVoltageRange+0x3c>)
 80070e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f2:	d102      	bne.n	80070fa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80070f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070f8:	e000      	b.n	80070fc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80070fa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	40007000 	.word	0x40007000

0800710c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d141      	bne.n	800719e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800711a:	4b4b      	ldr	r3, [pc, #300]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007126:	d131      	bne.n	800718c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007128:	4b47      	ldr	r3, [pc, #284]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800712a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800712e:	4a46      	ldr	r2, [pc, #280]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007134:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007138:	4b43      	ldr	r3, [pc, #268]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007140:	4a41      	ldr	r2, [pc, #260]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007146:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007148:	4b40      	ldr	r3, [pc, #256]	; (800724c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2232      	movs	r2, #50	; 0x32
 800714e:	fb02 f303 	mul.w	r3, r2, r3
 8007152:	4a3f      	ldr	r2, [pc, #252]	; (8007250 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007154:	fba2 2303 	umull	r2, r3, r2, r3
 8007158:	0c9b      	lsrs	r3, r3, #18
 800715a:	3301      	adds	r3, #1
 800715c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800715e:	e002      	b.n	8007166 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3b01      	subs	r3, #1
 8007164:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007166:	4b38      	ldr	r3, [pc, #224]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800716e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007172:	d102      	bne.n	800717a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f2      	bne.n	8007160 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800717a:	4b33      	ldr	r3, [pc, #204]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007186:	d158      	bne.n	800723a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e057      	b.n	800723c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800718c:	4b2e      	ldr	r3, [pc, #184]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800718e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007192:	4a2d      	ldr	r2, [pc, #180]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007198:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800719c:	e04d      	b.n	800723a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a4:	d141      	bne.n	800722a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80071a6:	4b28      	ldr	r3, [pc, #160]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071b2:	d131      	bne.n	8007218 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071b4:	4b24      	ldr	r3, [pc, #144]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ba:	4a23      	ldr	r2, [pc, #140]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80071c4:	4b20      	ldr	r3, [pc, #128]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80071cc:	4a1e      	ldr	r2, [pc, #120]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80071d4:	4b1d      	ldr	r3, [pc, #116]	; (800724c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2232      	movs	r2, #50	; 0x32
 80071da:	fb02 f303 	mul.w	r3, r2, r3
 80071de:	4a1c      	ldr	r2, [pc, #112]	; (8007250 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80071e0:	fba2 2303 	umull	r2, r3, r2, r3
 80071e4:	0c9b      	lsrs	r3, r3, #18
 80071e6:	3301      	adds	r3, #1
 80071e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071ea:	e002      	b.n	80071f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3b01      	subs	r3, #1
 80071f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071f2:	4b15      	ldr	r3, [pc, #84]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071fe:	d102      	bne.n	8007206 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1f2      	bne.n	80071ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007206:	4b10      	ldr	r3, [pc, #64]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800720e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007212:	d112      	bne.n	800723a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e011      	b.n	800723c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007218:	4b0b      	ldr	r3, [pc, #44]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800721a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800721e:	4a0a      	ldr	r2, [pc, #40]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007224:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007228:	e007      	b.n	800723a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800722a:	4b07      	ldr	r3, [pc, #28]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007232:	4a05      	ldr	r2, [pc, #20]	; (8007248 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007234:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007238:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	40007000 	.word	0x40007000
 800724c:	20000000 	.word	0x20000000
 8007250:	431bde83 	.word	0x431bde83

08007254 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007254:	b480      	push	{r7}
 8007256:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007258:	4b05      	ldr	r3, [pc, #20]	; (8007270 <HAL_PWREx_EnableVddUSB+0x1c>)
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	4a04      	ldr	r2, [pc, #16]	; (8007270 <HAL_PWREx_EnableVddUSB+0x1c>)
 800725e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007262:	6053      	str	r3, [r2, #4]
}
 8007264:	bf00      	nop
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	40007000 	.word	0x40007000

08007274 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007274:	b480      	push	{r7}
 8007276:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <HAL_PWREx_EnableVddIO2+0x1c>)
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	4a04      	ldr	r2, [pc, #16]	; (8007290 <HAL_PWREx_EnableVddIO2+0x1c>)
 800727e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007282:	6053      	str	r3, [r2, #4]
}
 8007284:	bf00      	nop
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	40007000 	.word	0x40007000

08007294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d102      	bne.n	80072a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	f000 bc16 	b.w	8007ad4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072a8:	4ba0      	ldr	r3, [pc, #640]	; (800752c <HAL_RCC_OscConfig+0x298>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f003 030c 	and.w	r3, r3, #12
 80072b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072b2:	4b9e      	ldr	r3, [pc, #632]	; (800752c <HAL_RCC_OscConfig+0x298>)
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0310 	and.w	r3, r3, #16
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 80e4 	beq.w	8007492 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d007      	beq.n	80072e0 <HAL_RCC_OscConfig+0x4c>
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	2b0c      	cmp	r3, #12
 80072d4:	f040 808b 	bne.w	80073ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	f040 8087 	bne.w	80073ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80072e0:	4b92      	ldr	r3, [pc, #584]	; (800752c <HAL_RCC_OscConfig+0x298>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d005      	beq.n	80072f8 <HAL_RCC_OscConfig+0x64>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e3ed      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a1a      	ldr	r2, [r3, #32]
 80072fc:	4b8b      	ldr	r3, [pc, #556]	; (800752c <HAL_RCC_OscConfig+0x298>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <HAL_RCC_OscConfig+0x7e>
 8007308:	4b88      	ldr	r3, [pc, #544]	; (800752c <HAL_RCC_OscConfig+0x298>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007310:	e005      	b.n	800731e <HAL_RCC_OscConfig+0x8a>
 8007312:	4b86      	ldr	r3, [pc, #536]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007318:	091b      	lsrs	r3, r3, #4
 800731a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800731e:	4293      	cmp	r3, r2
 8007320:	d223      	bcs.n	800736a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fdc6 	bl	8007eb8 <RCC_SetFlashLatencyFromMSIRange>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e3ce      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007336:	4b7d      	ldr	r3, [pc, #500]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a7c      	ldr	r2, [pc, #496]	; (800752c <HAL_RCC_OscConfig+0x298>)
 800733c:	f043 0308 	orr.w	r3, r3, #8
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	4b7a      	ldr	r3, [pc, #488]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	4977      	ldr	r1, [pc, #476]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007350:	4313      	orrs	r3, r2
 8007352:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007354:	4b75      	ldr	r3, [pc, #468]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	69db      	ldr	r3, [r3, #28]
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	4972      	ldr	r1, [pc, #456]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007364:	4313      	orrs	r3, r2
 8007366:	604b      	str	r3, [r1, #4]
 8007368:	e025      	b.n	80073b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800736a:	4b70      	ldr	r3, [pc, #448]	; (800752c <HAL_RCC_OscConfig+0x298>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a6f      	ldr	r2, [pc, #444]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007370:	f043 0308 	orr.w	r3, r3, #8
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	4b6d      	ldr	r3, [pc, #436]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	496a      	ldr	r1, [pc, #424]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007384:	4313      	orrs	r3, r2
 8007386:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007388:	4b68      	ldr	r3, [pc, #416]	; (800752c <HAL_RCC_OscConfig+0x298>)
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	021b      	lsls	r3, r3, #8
 8007396:	4965      	ldr	r1, [pc, #404]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007398:	4313      	orrs	r3, r2
 800739a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d109      	bne.n	80073b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fd86 	bl	8007eb8 <RCC_SetFlashLatencyFromMSIRange>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e38e      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80073b6:	f000 fcbf 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 80073ba:	4601      	mov	r1, r0
 80073bc:	4b5b      	ldr	r3, [pc, #364]	; (800752c <HAL_RCC_OscConfig+0x298>)
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	091b      	lsrs	r3, r3, #4
 80073c2:	f003 030f 	and.w	r3, r3, #15
 80073c6:	4a5a      	ldr	r2, [pc, #360]	; (8007530 <HAL_RCC_OscConfig+0x29c>)
 80073c8:	5cd3      	ldrb	r3, [r2, r3]
 80073ca:	f003 031f 	and.w	r3, r3, #31
 80073ce:	fa21 f303 	lsr.w	r3, r1, r3
 80073d2:	4a58      	ldr	r2, [pc, #352]	; (8007534 <HAL_RCC_OscConfig+0x2a0>)
 80073d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80073d6:	4b58      	ldr	r3, [pc, #352]	; (8007538 <HAL_RCC_OscConfig+0x2a4>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fb ff82 	bl	80032e4 <HAL_InitTick>
 80073e0:	4603      	mov	r3, r0
 80073e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d052      	beq.n	8007490 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
 80073ec:	e372      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d032      	beq.n	800745c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80073f6:	4b4d      	ldr	r3, [pc, #308]	; (800752c <HAL_RCC_OscConfig+0x298>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a4c      	ldr	r2, [pc, #304]	; (800752c <HAL_RCC_OscConfig+0x298>)
 80073fc:	f043 0301 	orr.w	r3, r3, #1
 8007400:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007402:	f7fb ffbf 	bl	8003384 <HAL_GetTick>
 8007406:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007408:	e008      	b.n	800741c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800740a:	f7fb ffbb 	bl	8003384 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d901      	bls.n	800741c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e35b      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800741c:	4b43      	ldr	r3, [pc, #268]	; (800752c <HAL_RCC_OscConfig+0x298>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0f0      	beq.n	800740a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007428:	4b40      	ldr	r3, [pc, #256]	; (800752c <HAL_RCC_OscConfig+0x298>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a3f      	ldr	r2, [pc, #252]	; (800752c <HAL_RCC_OscConfig+0x298>)
 800742e:	f043 0308 	orr.w	r3, r3, #8
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	4b3d      	ldr	r3, [pc, #244]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	493a      	ldr	r1, [pc, #232]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007442:	4313      	orrs	r3, r2
 8007444:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007446:	4b39      	ldr	r3, [pc, #228]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	021b      	lsls	r3, r3, #8
 8007454:	4935      	ldr	r1, [pc, #212]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007456:	4313      	orrs	r3, r2
 8007458:	604b      	str	r3, [r1, #4]
 800745a:	e01a      	b.n	8007492 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800745c:	4b33      	ldr	r3, [pc, #204]	; (800752c <HAL_RCC_OscConfig+0x298>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a32      	ldr	r2, [pc, #200]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007462:	f023 0301 	bic.w	r3, r3, #1
 8007466:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007468:	f7fb ff8c 	bl	8003384 <HAL_GetTick>
 800746c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800746e:	e008      	b.n	8007482 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007470:	f7fb ff88 	bl	8003384 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	2b02      	cmp	r3, #2
 800747c:	d901      	bls.n	8007482 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e328      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007482:	4b2a      	ldr	r3, [pc, #168]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1f0      	bne.n	8007470 <HAL_RCC_OscConfig+0x1dc>
 800748e:	e000      	b.n	8007492 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007490:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d073      	beq.n	8007586 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	d005      	beq.n	80074b0 <HAL_RCC_OscConfig+0x21c>
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	2b0c      	cmp	r3, #12
 80074a8:	d10e      	bne.n	80074c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d10b      	bne.n	80074c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074b0:	4b1e      	ldr	r3, [pc, #120]	; (800752c <HAL_RCC_OscConfig+0x298>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d063      	beq.n	8007584 <HAL_RCC_OscConfig+0x2f0>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d15f      	bne.n	8007584 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e305      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074d0:	d106      	bne.n	80074e0 <HAL_RCC_OscConfig+0x24c>
 80074d2:	4b16      	ldr	r3, [pc, #88]	; (800752c <HAL_RCC_OscConfig+0x298>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a15      	ldr	r2, [pc, #84]	; (800752c <HAL_RCC_OscConfig+0x298>)
 80074d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074dc:	6013      	str	r3, [r2, #0]
 80074de:	e01d      	b.n	800751c <HAL_RCC_OscConfig+0x288>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074e8:	d10c      	bne.n	8007504 <HAL_RCC_OscConfig+0x270>
 80074ea:	4b10      	ldr	r3, [pc, #64]	; (800752c <HAL_RCC_OscConfig+0x298>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a0f      	ldr	r2, [pc, #60]	; (800752c <HAL_RCC_OscConfig+0x298>)
 80074f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074f4:	6013      	str	r3, [r2, #0]
 80074f6:	4b0d      	ldr	r3, [pc, #52]	; (800752c <HAL_RCC_OscConfig+0x298>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a0c      	ldr	r2, [pc, #48]	; (800752c <HAL_RCC_OscConfig+0x298>)
 80074fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	e00b      	b.n	800751c <HAL_RCC_OscConfig+0x288>
 8007504:	4b09      	ldr	r3, [pc, #36]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a08      	ldr	r2, [pc, #32]	; (800752c <HAL_RCC_OscConfig+0x298>)
 800750a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	4b06      	ldr	r3, [pc, #24]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a05      	ldr	r2, [pc, #20]	; (800752c <HAL_RCC_OscConfig+0x298>)
 8007516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800751a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d01b      	beq.n	800755c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007524:	f7fb ff2e 	bl	8003384 <HAL_GetTick>
 8007528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800752a:	e010      	b.n	800754e <HAL_RCC_OscConfig+0x2ba>
 800752c:	40021000 	.word	0x40021000
 8007530:	08015d90 	.word	0x08015d90
 8007534:	20000000 	.word	0x20000000
 8007538:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800753c:	f7fb ff22 	bl	8003384 <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	2b64      	cmp	r3, #100	; 0x64
 8007548:	d901      	bls.n	800754e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e2c2      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800754e:	4baf      	ldr	r3, [pc, #700]	; (800780c <HAL_RCC_OscConfig+0x578>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0f0      	beq.n	800753c <HAL_RCC_OscConfig+0x2a8>
 800755a:	e014      	b.n	8007586 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755c:	f7fb ff12 	bl	8003384 <HAL_GetTick>
 8007560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007562:	e008      	b.n	8007576 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007564:	f7fb ff0e 	bl	8003384 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b64      	cmp	r3, #100	; 0x64
 8007570:	d901      	bls.n	8007576 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e2ae      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007576:	4ba5      	ldr	r3, [pc, #660]	; (800780c <HAL_RCC_OscConfig+0x578>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1f0      	bne.n	8007564 <HAL_RCC_OscConfig+0x2d0>
 8007582:	e000      	b.n	8007586 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b00      	cmp	r3, #0
 8007590:	d060      	beq.n	8007654 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	2b04      	cmp	r3, #4
 8007596:	d005      	beq.n	80075a4 <HAL_RCC_OscConfig+0x310>
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	2b0c      	cmp	r3, #12
 800759c:	d119      	bne.n	80075d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d116      	bne.n	80075d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075a4:	4b99      	ldr	r3, [pc, #612]	; (800780c <HAL_RCC_OscConfig+0x578>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d005      	beq.n	80075bc <HAL_RCC_OscConfig+0x328>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d101      	bne.n	80075bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e28b      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075bc:	4b93      	ldr	r3, [pc, #588]	; (800780c <HAL_RCC_OscConfig+0x578>)
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	061b      	lsls	r3, r3, #24
 80075ca:	4990      	ldr	r1, [pc, #576]	; (800780c <HAL_RCC_OscConfig+0x578>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075d0:	e040      	b.n	8007654 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d023      	beq.n	8007622 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075da:	4b8c      	ldr	r3, [pc, #560]	; (800780c <HAL_RCC_OscConfig+0x578>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a8b      	ldr	r2, [pc, #556]	; (800780c <HAL_RCC_OscConfig+0x578>)
 80075e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e6:	f7fb fecd 	bl	8003384 <HAL_GetTick>
 80075ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075ec:	e008      	b.n	8007600 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075ee:	f7fb fec9 	bl	8003384 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d901      	bls.n	8007600 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e269      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007600:	4b82      	ldr	r3, [pc, #520]	; (800780c <HAL_RCC_OscConfig+0x578>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007608:	2b00      	cmp	r3, #0
 800760a:	d0f0      	beq.n	80075ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800760c:	4b7f      	ldr	r3, [pc, #508]	; (800780c <HAL_RCC_OscConfig+0x578>)
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	061b      	lsls	r3, r3, #24
 800761a:	497c      	ldr	r1, [pc, #496]	; (800780c <HAL_RCC_OscConfig+0x578>)
 800761c:	4313      	orrs	r3, r2
 800761e:	604b      	str	r3, [r1, #4]
 8007620:	e018      	b.n	8007654 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007622:	4b7a      	ldr	r3, [pc, #488]	; (800780c <HAL_RCC_OscConfig+0x578>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a79      	ldr	r2, [pc, #484]	; (800780c <HAL_RCC_OscConfig+0x578>)
 8007628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800762c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800762e:	f7fb fea9 	bl	8003384 <HAL_GetTick>
 8007632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007634:	e008      	b.n	8007648 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007636:	f7fb fea5 	bl	8003384 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	2b02      	cmp	r3, #2
 8007642:	d901      	bls.n	8007648 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e245      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007648:	4b70      	ldr	r3, [pc, #448]	; (800780c <HAL_RCC_OscConfig+0x578>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1f0      	bne.n	8007636 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0308 	and.w	r3, r3, #8
 800765c:	2b00      	cmp	r3, #0
 800765e:	d03c      	beq.n	80076da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d01c      	beq.n	80076a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007668:	4b68      	ldr	r3, [pc, #416]	; (800780c <HAL_RCC_OscConfig+0x578>)
 800766a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800766e:	4a67      	ldr	r2, [pc, #412]	; (800780c <HAL_RCC_OscConfig+0x578>)
 8007670:	f043 0301 	orr.w	r3, r3, #1
 8007674:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007678:	f7fb fe84 	bl	8003384 <HAL_GetTick>
 800767c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800767e:	e008      	b.n	8007692 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007680:	f7fb fe80 	bl	8003384 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b02      	cmp	r3, #2
 800768c:	d901      	bls.n	8007692 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e220      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007692:	4b5e      	ldr	r3, [pc, #376]	; (800780c <HAL_RCC_OscConfig+0x578>)
 8007694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b00      	cmp	r3, #0
 800769e:	d0ef      	beq.n	8007680 <HAL_RCC_OscConfig+0x3ec>
 80076a0:	e01b      	b.n	80076da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076a2:	4b5a      	ldr	r3, [pc, #360]	; (800780c <HAL_RCC_OscConfig+0x578>)
 80076a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076a8:	4a58      	ldr	r2, [pc, #352]	; (800780c <HAL_RCC_OscConfig+0x578>)
 80076aa:	f023 0301 	bic.w	r3, r3, #1
 80076ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076b2:	f7fb fe67 	bl	8003384 <HAL_GetTick>
 80076b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80076b8:	e008      	b.n	80076cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076ba:	f7fb fe63 	bl	8003384 <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d901      	bls.n	80076cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e203      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80076cc:	4b4f      	ldr	r3, [pc, #316]	; (800780c <HAL_RCC_OscConfig+0x578>)
 80076ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1ef      	bne.n	80076ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0304 	and.w	r3, r3, #4
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f000 80a6 	beq.w	8007834 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076e8:	2300      	movs	r3, #0
 80076ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80076ec:	4b47      	ldr	r3, [pc, #284]	; (800780c <HAL_RCC_OscConfig+0x578>)
 80076ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10d      	bne.n	8007714 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076f8:	4b44      	ldr	r3, [pc, #272]	; (800780c <HAL_RCC_OscConfig+0x578>)
 80076fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076fc:	4a43      	ldr	r2, [pc, #268]	; (800780c <HAL_RCC_OscConfig+0x578>)
 80076fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007702:	6593      	str	r3, [r2, #88]	; 0x58
 8007704:	4b41      	ldr	r3, [pc, #260]	; (800780c <HAL_RCC_OscConfig+0x578>)
 8007706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800770c:	60bb      	str	r3, [r7, #8]
 800770e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007710:	2301      	movs	r3, #1
 8007712:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007714:	4b3e      	ldr	r3, [pc, #248]	; (8007810 <HAL_RCC_OscConfig+0x57c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771c:	2b00      	cmp	r3, #0
 800771e:	d118      	bne.n	8007752 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007720:	4b3b      	ldr	r3, [pc, #236]	; (8007810 <HAL_RCC_OscConfig+0x57c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a3a      	ldr	r2, [pc, #232]	; (8007810 <HAL_RCC_OscConfig+0x57c>)
 8007726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800772a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800772c:	f7fb fe2a 	bl	8003384 <HAL_GetTick>
 8007730:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007732:	e008      	b.n	8007746 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007734:	f7fb fe26 	bl	8003384 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b02      	cmp	r3, #2
 8007740:	d901      	bls.n	8007746 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e1c6      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007746:	4b32      	ldr	r3, [pc, #200]	; (8007810 <HAL_RCC_OscConfig+0x57c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0f0      	beq.n	8007734 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d108      	bne.n	800776c <HAL_RCC_OscConfig+0x4d8>
 800775a:	4b2c      	ldr	r3, [pc, #176]	; (800780c <HAL_RCC_OscConfig+0x578>)
 800775c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007760:	4a2a      	ldr	r2, [pc, #168]	; (800780c <HAL_RCC_OscConfig+0x578>)
 8007762:	f043 0301 	orr.w	r3, r3, #1
 8007766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800776a:	e024      	b.n	80077b6 <HAL_RCC_OscConfig+0x522>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	2b05      	cmp	r3, #5
 8007772:	d110      	bne.n	8007796 <HAL_RCC_OscConfig+0x502>
 8007774:	4b25      	ldr	r3, [pc, #148]	; (800780c <HAL_RCC_OscConfig+0x578>)
 8007776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800777a:	4a24      	ldr	r2, [pc, #144]	; (800780c <HAL_RCC_OscConfig+0x578>)
 800777c:	f043 0304 	orr.w	r3, r3, #4
 8007780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007784:	4b21      	ldr	r3, [pc, #132]	; (800780c <HAL_RCC_OscConfig+0x578>)
 8007786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800778a:	4a20      	ldr	r2, [pc, #128]	; (800780c <HAL_RCC_OscConfig+0x578>)
 800778c:	f043 0301 	orr.w	r3, r3, #1
 8007790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007794:	e00f      	b.n	80077b6 <HAL_RCC_OscConfig+0x522>
 8007796:	4b1d      	ldr	r3, [pc, #116]	; (800780c <HAL_RCC_OscConfig+0x578>)
 8007798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800779c:	4a1b      	ldr	r2, [pc, #108]	; (800780c <HAL_RCC_OscConfig+0x578>)
 800779e:	f023 0301 	bic.w	r3, r3, #1
 80077a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077a6:	4b19      	ldr	r3, [pc, #100]	; (800780c <HAL_RCC_OscConfig+0x578>)
 80077a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ac:	4a17      	ldr	r2, [pc, #92]	; (800780c <HAL_RCC_OscConfig+0x578>)
 80077ae:	f023 0304 	bic.w	r3, r3, #4
 80077b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d016      	beq.n	80077ec <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077be:	f7fb fde1 	bl	8003384 <HAL_GetTick>
 80077c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077c4:	e00a      	b.n	80077dc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077c6:	f7fb fddd 	bl	8003384 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d901      	bls.n	80077dc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e17b      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077dc:	4b0b      	ldr	r3, [pc, #44]	; (800780c <HAL_RCC_OscConfig+0x578>)
 80077de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d0ed      	beq.n	80077c6 <HAL_RCC_OscConfig+0x532>
 80077ea:	e01a      	b.n	8007822 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ec:	f7fb fdca 	bl	8003384 <HAL_GetTick>
 80077f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80077f2:	e00f      	b.n	8007814 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077f4:	f7fb fdc6 	bl	8003384 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007802:	4293      	cmp	r3, r2
 8007804:	d906      	bls.n	8007814 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e164      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
 800780a:	bf00      	nop
 800780c:	40021000 	.word	0x40021000
 8007810:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007814:	4ba8      	ldr	r3, [pc, #672]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1e8      	bne.n	80077f4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007822:	7ffb      	ldrb	r3, [r7, #31]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d105      	bne.n	8007834 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007828:	4ba3      	ldr	r3, [pc, #652]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 800782a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782c:	4aa2      	ldr	r2, [pc, #648]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 800782e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007832:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0320 	and.w	r3, r3, #32
 800783c:	2b00      	cmp	r3, #0
 800783e:	d03c      	beq.n	80078ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	2b00      	cmp	r3, #0
 8007846:	d01c      	beq.n	8007882 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007848:	4b9b      	ldr	r3, [pc, #620]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 800784a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800784e:	4a9a      	ldr	r2, [pc, #616]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007850:	f043 0301 	orr.w	r3, r3, #1
 8007854:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007858:	f7fb fd94 	bl	8003384 <HAL_GetTick>
 800785c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800785e:	e008      	b.n	8007872 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007860:	f7fb fd90 	bl	8003384 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d901      	bls.n	8007872 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e130      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007872:	4b91      	ldr	r3, [pc, #580]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007874:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0ef      	beq.n	8007860 <HAL_RCC_OscConfig+0x5cc>
 8007880:	e01b      	b.n	80078ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007882:	4b8d      	ldr	r3, [pc, #564]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007884:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007888:	4a8b      	ldr	r2, [pc, #556]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 800788a:	f023 0301 	bic.w	r3, r3, #1
 800788e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007892:	f7fb fd77 	bl	8003384 <HAL_GetTick>
 8007896:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007898:	e008      	b.n	80078ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800789a:	f7fb fd73 	bl	8003384 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d901      	bls.n	80078ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e113      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078ac:	4b82      	ldr	r3, [pc, #520]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 80078ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078b2:	f003 0302 	and.w	r3, r3, #2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1ef      	bne.n	800789a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 8107 	beq.w	8007ad2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	f040 80cb 	bne.w	8007a64 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80078ce:	4b7a      	ldr	r3, [pc, #488]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f003 0203 	and.w	r2, r3, #3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078de:	429a      	cmp	r2, r3
 80078e0:	d12c      	bne.n	800793c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ec:	3b01      	subs	r3, #1
 80078ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d123      	bne.n	800793c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007900:	429a      	cmp	r2, r3
 8007902:	d11b      	bne.n	800793c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007910:	429a      	cmp	r2, r3
 8007912:	d113      	bne.n	800793c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791e:	085b      	lsrs	r3, r3, #1
 8007920:	3b01      	subs	r3, #1
 8007922:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007924:	429a      	cmp	r2, r3
 8007926:	d109      	bne.n	800793c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	085b      	lsrs	r3, r3, #1
 8007934:	3b01      	subs	r3, #1
 8007936:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007938:	429a      	cmp	r2, r3
 800793a:	d06d      	beq.n	8007a18 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	2b0c      	cmp	r3, #12
 8007940:	d068      	beq.n	8007a14 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007942:	4b5d      	ldr	r3, [pc, #372]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d105      	bne.n	800795a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800794e:	4b5a      	ldr	r3, [pc, #360]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e0ba      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800795e:	4b56      	ldr	r3, [pc, #344]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a55      	ldr	r2, [pc, #340]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007964:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007968:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800796a:	f7fb fd0b 	bl	8003384 <HAL_GetTick>
 800796e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007970:	e008      	b.n	8007984 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007972:	f7fb fd07 	bl	8003384 <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	2b02      	cmp	r3, #2
 800797e:	d901      	bls.n	8007984 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e0a7      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007984:	4b4c      	ldr	r3, [pc, #304]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1f0      	bne.n	8007972 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007990:	4b49      	ldr	r3, [pc, #292]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007992:	68da      	ldr	r2, [r3, #12]
 8007994:	4b49      	ldr	r3, [pc, #292]	; (8007abc <HAL_RCC_OscConfig+0x828>)
 8007996:	4013      	ands	r3, r2
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80079a0:	3a01      	subs	r2, #1
 80079a2:	0112      	lsls	r2, r2, #4
 80079a4:	4311      	orrs	r1, r2
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80079aa:	0212      	lsls	r2, r2, #8
 80079ac:	4311      	orrs	r1, r2
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80079b2:	0852      	lsrs	r2, r2, #1
 80079b4:	3a01      	subs	r2, #1
 80079b6:	0552      	lsls	r2, r2, #21
 80079b8:	4311      	orrs	r1, r2
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80079be:	0852      	lsrs	r2, r2, #1
 80079c0:	3a01      	subs	r2, #1
 80079c2:	0652      	lsls	r2, r2, #25
 80079c4:	4311      	orrs	r1, r2
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079ca:	06d2      	lsls	r2, r2, #27
 80079cc:	430a      	orrs	r2, r1
 80079ce:	493a      	ldr	r1, [pc, #232]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80079d4:	4b38      	ldr	r3, [pc, #224]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a37      	ldr	r2, [pc, #220]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 80079da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80079e0:	4b35      	ldr	r3, [pc, #212]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	4a34      	ldr	r2, [pc, #208]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 80079e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80079ec:	f7fb fcca 	bl	8003384 <HAL_GetTick>
 80079f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079f2:	e008      	b.n	8007a06 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079f4:	f7fb fcc6 	bl	8003384 <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d901      	bls.n	8007a06 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e066      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a06:	4b2c      	ldr	r3, [pc, #176]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0f0      	beq.n	80079f4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a12:	e05e      	b.n	8007ad2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e05d      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a18:	4b27      	ldr	r3, [pc, #156]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d156      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007a24:	4b24      	ldr	r3, [pc, #144]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a23      	ldr	r2, [pc, #140]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a30:	4b21      	ldr	r3, [pc, #132]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	4a20      	ldr	r2, [pc, #128]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007a3c:	f7fb fca2 	bl	8003384 <HAL_GetTick>
 8007a40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a42:	e008      	b.n	8007a56 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a44:	f7fb fc9e 	bl	8003384 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d901      	bls.n	8007a56 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e03e      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a56:	4b18      	ldr	r3, [pc, #96]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0f0      	beq.n	8007a44 <HAL_RCC_OscConfig+0x7b0>
 8007a62:	e036      	b.n	8007ad2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	2b0c      	cmp	r3, #12
 8007a68:	d031      	beq.n	8007ace <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a6a:	4b13      	ldr	r3, [pc, #76]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a12      	ldr	r2, [pc, #72]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007a70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a74:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007a76:	4b10      	ldr	r3, [pc, #64]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d105      	bne.n	8007a8e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007a82:	4b0d      	ldr	r3, [pc, #52]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	4a0c      	ldr	r2, [pc, #48]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007a88:	f023 0303 	bic.w	r3, r3, #3
 8007a8c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007a8e:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	4a09      	ldr	r2, [pc, #36]	; (8007ab8 <HAL_RCC_OscConfig+0x824>)
 8007a94:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a9c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a9e:	f7fb fc71 	bl	8003384 <HAL_GetTick>
 8007aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007aa4:	e00c      	b.n	8007ac0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aa6:	f7fb fc6d 	bl	8003384 <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d905      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e00d      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
 8007ab8:	40021000 	.word	0x40021000
 8007abc:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ac0:	4b06      	ldr	r3, [pc, #24]	; (8007adc <HAL_RCC_OscConfig+0x848>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1ec      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x812>
 8007acc:	e001      	b.n	8007ad2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e000      	b.n	8007ad4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3720      	adds	r7, #32
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	40021000 	.word	0x40021000

08007ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007aea:	2300      	movs	r3, #0
 8007aec:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e10f      	b.n	8007d18 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007af8:	4b89      	ldr	r3, [pc, #548]	; (8007d20 <HAL_RCC_ClockConfig+0x240>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 030f 	and.w	r3, r3, #15
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d910      	bls.n	8007b28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b06:	4b86      	ldr	r3, [pc, #536]	; (8007d20 <HAL_RCC_ClockConfig+0x240>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f023 020f 	bic.w	r2, r3, #15
 8007b0e:	4984      	ldr	r1, [pc, #528]	; (8007d20 <HAL_RCC_ClockConfig+0x240>)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b16:	4b82      	ldr	r3, [pc, #520]	; (8007d20 <HAL_RCC_ClockConfig+0x240>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 030f 	and.w	r3, r3, #15
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d001      	beq.n	8007b28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e0f7      	b.n	8007d18 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 8089 	beq.w	8007c48 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d133      	bne.n	8007ba6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b3e:	4b79      	ldr	r3, [pc, #484]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e0e4      	b.n	8007d18 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007b4e:	f000 fa0d 	bl	8007f6c <RCC_GetSysClockFreqFromPLLSource>
 8007b52:	4602      	mov	r2, r0
 8007b54:	4b74      	ldr	r3, [pc, #464]	; (8007d28 <HAL_RCC_ClockConfig+0x248>)
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d955      	bls.n	8007c06 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007b5a:	4b72      	ldr	r3, [pc, #456]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10a      	bne.n	8007b7c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007b66:	4b6f      	ldr	r3, [pc, #444]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b6e:	4a6d      	ldr	r2, [pc, #436]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007b76:	2380      	movs	r3, #128	; 0x80
 8007b78:	617b      	str	r3, [r7, #20]
 8007b7a:	e044      	b.n	8007c06 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d03e      	beq.n	8007c06 <HAL_RCC_ClockConfig+0x126>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d13a      	bne.n	8007c06 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007b90:	4b64      	ldr	r3, [pc, #400]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b98:	4a62      	ldr	r2, [pc, #392]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b9e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007ba0:	2380      	movs	r3, #128	; 0x80
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	e02f      	b.n	8007c06 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d107      	bne.n	8007bbe <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007bae:	4b5d      	ldr	r3, [pc, #372]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d115      	bne.n	8007be6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e0ac      	b.n	8007d18 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d107      	bne.n	8007bd6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007bc6:	4b57      	ldr	r3, [pc, #348]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d109      	bne.n	8007be6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e0a0      	b.n	8007d18 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007bd6:	4b53      	ldr	r3, [pc, #332]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e098      	b.n	8007d18 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007be6:	f000 f8a7 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8007bea:	4602      	mov	r2, r0
 8007bec:	4b4e      	ldr	r3, [pc, #312]	; (8007d28 <HAL_RCC_ClockConfig+0x248>)
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d909      	bls.n	8007c06 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007bf2:	4b4c      	ldr	r3, [pc, #304]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bfa:	4a4a      	ldr	r2, [pc, #296]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c00:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007c02:	2380      	movs	r3, #128	; 0x80
 8007c04:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c06:	4b47      	ldr	r3, [pc, #284]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f023 0203 	bic.w	r2, r3, #3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	4944      	ldr	r1, [pc, #272]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c18:	f7fb fbb4 	bl	8003384 <HAL_GetTick>
 8007c1c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c1e:	e00a      	b.n	8007c36 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c20:	f7fb fbb0 	bl	8003384 <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d901      	bls.n	8007c36 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e070      	b.n	8007d18 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c36:	4b3b      	ldr	r3, [pc, #236]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f003 020c 	and.w	r2, r3, #12
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d1eb      	bne.n	8007c20 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0302 	and.w	r3, r3, #2
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d009      	beq.n	8007c68 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c54:	4b33      	ldr	r3, [pc, #204]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	4930      	ldr	r1, [pc, #192]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	608b      	str	r3, [r1, #8]
 8007c66:	e008      	b.n	8007c7a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	2b80      	cmp	r3, #128	; 0x80
 8007c6c:	d105      	bne.n	8007c7a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007c6e:	4b2d      	ldr	r3, [pc, #180]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	4a2c      	ldr	r2, [pc, #176]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c78:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c7a:	4b29      	ldr	r3, [pc, #164]	; (8007d20 <HAL_RCC_ClockConfig+0x240>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 030f 	and.w	r3, r3, #15
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d210      	bcs.n	8007caa <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c88:	4b25      	ldr	r3, [pc, #148]	; (8007d20 <HAL_RCC_ClockConfig+0x240>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f023 020f 	bic.w	r2, r3, #15
 8007c90:	4923      	ldr	r1, [pc, #140]	; (8007d20 <HAL_RCC_ClockConfig+0x240>)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c98:	4b21      	ldr	r3, [pc, #132]	; (8007d20 <HAL_RCC_ClockConfig+0x240>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 030f 	and.w	r3, r3, #15
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d001      	beq.n	8007caa <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e036      	b.n	8007d18 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0304 	and.w	r3, r3, #4
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d008      	beq.n	8007cc8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cb6:	4b1b      	ldr	r3, [pc, #108]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	4918      	ldr	r1, [pc, #96]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0308 	and.w	r3, r3, #8
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d009      	beq.n	8007ce8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cd4:	4b13      	ldr	r3, [pc, #76]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	00db      	lsls	r3, r3, #3
 8007ce2:	4910      	ldr	r1, [pc, #64]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ce8:	f000 f826 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8007cec:	4601      	mov	r1, r0
 8007cee:	4b0d      	ldr	r3, [pc, #52]	; (8007d24 <HAL_RCC_ClockConfig+0x244>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	091b      	lsrs	r3, r3, #4
 8007cf4:	f003 030f 	and.w	r3, r3, #15
 8007cf8:	4a0c      	ldr	r2, [pc, #48]	; (8007d2c <HAL_RCC_ClockConfig+0x24c>)
 8007cfa:	5cd3      	ldrb	r3, [r2, r3]
 8007cfc:	f003 031f 	and.w	r3, r3, #31
 8007d00:	fa21 f303 	lsr.w	r3, r1, r3
 8007d04:	4a0a      	ldr	r2, [pc, #40]	; (8007d30 <HAL_RCC_ClockConfig+0x250>)
 8007d06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007d08:	4b0a      	ldr	r3, [pc, #40]	; (8007d34 <HAL_RCC_ClockConfig+0x254>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fb fae9 	bl	80032e4 <HAL_InitTick>
 8007d12:	4603      	mov	r3, r0
 8007d14:	73fb      	strb	r3, [r7, #15]

  return status;
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3718      	adds	r7, #24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	40022000 	.word	0x40022000
 8007d24:	40021000 	.word	0x40021000
 8007d28:	04c4b400 	.word	0x04c4b400
 8007d2c:	08015d90 	.word	0x08015d90
 8007d30:	20000000 	.word	0x20000000
 8007d34:	20000004 	.word	0x20000004

08007d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b089      	sub	sp, #36	; 0x24
 8007d3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	61fb      	str	r3, [r7, #28]
 8007d42:	2300      	movs	r3, #0
 8007d44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d46:	4b3d      	ldr	r3, [pc, #244]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f003 030c 	and.w	r3, r3, #12
 8007d4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d50:	4b3a      	ldr	r3, [pc, #232]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f003 0303 	and.w	r3, r3, #3
 8007d58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d005      	beq.n	8007d6c <HAL_RCC_GetSysClockFreq+0x34>
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	2b0c      	cmp	r3, #12
 8007d64:	d121      	bne.n	8007daa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d11e      	bne.n	8007daa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007d6c:	4b33      	ldr	r3, [pc, #204]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0308 	and.w	r3, r3, #8
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d107      	bne.n	8007d88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007d78:	4b30      	ldr	r3, [pc, #192]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8007d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d7e:	0a1b      	lsrs	r3, r3, #8
 8007d80:	f003 030f 	and.w	r3, r3, #15
 8007d84:	61fb      	str	r3, [r7, #28]
 8007d86:	e005      	b.n	8007d94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007d88:	4b2c      	ldr	r3, [pc, #176]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	091b      	lsrs	r3, r3, #4
 8007d8e:	f003 030f 	and.w	r3, r3, #15
 8007d92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007d94:	4a2a      	ldr	r2, [pc, #168]	; (8007e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10d      	bne.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007da8:	e00a      	b.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	d102      	bne.n	8007db6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007db0:	4b24      	ldr	r3, [pc, #144]	; (8007e44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007db2:	61bb      	str	r3, [r7, #24]
 8007db4:	e004      	b.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d101      	bne.n	8007dc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007dbc:	4b21      	ldr	r3, [pc, #132]	; (8007e44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007dbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	2b0c      	cmp	r3, #12
 8007dc4:	d133      	bne.n	8007e2e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007dc6:	4b1d      	ldr	r3, [pc, #116]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f003 0303 	and.w	r3, r3, #3
 8007dce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d002      	beq.n	8007ddc <HAL_RCC_GetSysClockFreq+0xa4>
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d003      	beq.n	8007de2 <HAL_RCC_GetSysClockFreq+0xaa>
 8007dda:	e005      	b.n	8007de8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007ddc:	4b19      	ldr	r3, [pc, #100]	; (8007e44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007dde:	617b      	str	r3, [r7, #20]
      break;
 8007de0:	e005      	b.n	8007dee <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007de2:	4b18      	ldr	r3, [pc, #96]	; (8007e44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007de4:	617b      	str	r3, [r7, #20]
      break;
 8007de6:	e002      	b.n	8007dee <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	617b      	str	r3, [r7, #20]
      break;
 8007dec:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007dee:	4b13      	ldr	r3, [pc, #76]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	091b      	lsrs	r3, r3, #4
 8007df4:	f003 030f 	and.w	r3, r3, #15
 8007df8:	3301      	adds	r3, #1
 8007dfa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007dfc:	4b0f      	ldr	r3, [pc, #60]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	0a1b      	lsrs	r3, r3, #8
 8007e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	fb02 f203 	mul.w	r2, r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e12:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e14:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <HAL_RCC_GetSysClockFreq+0x104>)
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	0e5b      	lsrs	r3, r3, #25
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	3301      	adds	r3, #1
 8007e20:	005b      	lsls	r3, r3, #1
 8007e22:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007e2e:	69bb      	ldr	r3, [r7, #24]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3724      	adds	r7, #36	; 0x24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	40021000 	.word	0x40021000
 8007e40:	08015da8 	.word	0x08015da8
 8007e44:	00f42400 	.word	0x00f42400

08007e48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e4c:	4b03      	ldr	r3, [pc, #12]	; (8007e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	20000000 	.word	0x20000000

08007e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007e64:	f7ff fff0 	bl	8007e48 <HAL_RCC_GetHCLKFreq>
 8007e68:	4601      	mov	r1, r0
 8007e6a:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	0a1b      	lsrs	r3, r3, #8
 8007e70:	f003 0307 	and.w	r3, r3, #7
 8007e74:	4a04      	ldr	r2, [pc, #16]	; (8007e88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e76:	5cd3      	ldrb	r3, [r2, r3]
 8007e78:	f003 031f 	and.w	r3, r3, #31
 8007e7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	40021000 	.word	0x40021000
 8007e88:	08015da0 	.word	0x08015da0

08007e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007e90:	f7ff ffda 	bl	8007e48 <HAL_RCC_GetHCLKFreq>
 8007e94:	4601      	mov	r1, r0
 8007e96:	4b06      	ldr	r3, [pc, #24]	; (8007eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	0adb      	lsrs	r3, r3, #11
 8007e9c:	f003 0307 	and.w	r3, r3, #7
 8007ea0:	4a04      	ldr	r2, [pc, #16]	; (8007eb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007ea2:	5cd3      	ldrb	r3, [r2, r3]
 8007ea4:	f003 031f 	and.w	r3, r3, #31
 8007ea8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	40021000 	.word	0x40021000
 8007eb4:	08015da0 	.word	0x08015da0

08007eb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007ec4:	4b27      	ldr	r3, [pc, #156]	; (8007f64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007ed0:	f7ff f8fc 	bl	80070cc <HAL_PWREx_GetVoltageRange>
 8007ed4:	6178      	str	r0, [r7, #20]
 8007ed6:	e014      	b.n	8007f02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ed8:	4b22      	ldr	r3, [pc, #136]	; (8007f64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007edc:	4a21      	ldr	r2, [pc, #132]	; (8007f64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8007ee4:	4b1f      	ldr	r3, [pc, #124]	; (8007f64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007ef0:	f7ff f8ec 	bl	80070cc <HAL_PWREx_GetVoltageRange>
 8007ef4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007ef6:	4b1b      	ldr	r3, [pc, #108]	; (8007f64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007efa:	4a1a      	ldr	r2, [pc, #104]	; (8007f64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f08:	d10b      	bne.n	8007f22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b80      	cmp	r3, #128	; 0x80
 8007f0e:	d913      	bls.n	8007f38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2ba0      	cmp	r3, #160	; 0xa0
 8007f14:	d902      	bls.n	8007f1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007f16:	2302      	movs	r3, #2
 8007f18:	613b      	str	r3, [r7, #16]
 8007f1a:	e00d      	b.n	8007f38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	613b      	str	r3, [r7, #16]
 8007f20:	e00a      	b.n	8007f38 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b7f      	cmp	r3, #127	; 0x7f
 8007f26:	d902      	bls.n	8007f2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007f28:	2302      	movs	r3, #2
 8007f2a:	613b      	str	r3, [r7, #16]
 8007f2c:	e004      	b.n	8007f38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b70      	cmp	r3, #112	; 0x70
 8007f32:	d101      	bne.n	8007f38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007f34:	2301      	movs	r3, #1
 8007f36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007f38:	4b0b      	ldr	r3, [pc, #44]	; (8007f68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f023 020f 	bic.w	r2, r3, #15
 8007f40:	4909      	ldr	r1, [pc, #36]	; (8007f68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007f48:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 030f 	and.w	r3, r3, #15
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d001      	beq.n	8007f5a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e000      	b.n	8007f5c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40021000 	.word	0x40021000
 8007f68:	40022000 	.word	0x40022000

08007f6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8007f76:	4b2d      	ldr	r3, [pc, #180]	; (800802c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f003 0303 	and.w	r3, r3, #3
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d118      	bne.n	8007fb4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007f82:	4b2a      	ldr	r3, [pc, #168]	; (800802c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0308 	and.w	r3, r3, #8
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d107      	bne.n	8007f9e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007f8e:	4b27      	ldr	r3, [pc, #156]	; (800802c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f94:	0a1b      	lsrs	r3, r3, #8
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	617b      	str	r3, [r7, #20]
 8007f9c:	e005      	b.n	8007faa <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007f9e:	4b23      	ldr	r3, [pc, #140]	; (800802c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	091b      	lsrs	r3, r3, #4
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007faa:	4a21      	ldr	r2, [pc, #132]	; (8008030 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fb2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007fb4:	4b1d      	ldr	r3, [pc, #116]	; (800802c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f003 0303 	and.w	r3, r3, #3
 8007fbc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d002      	beq.n	8007fca <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d003      	beq.n	8007fd0 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8007fc8:	e005      	b.n	8007fd6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007fca:	4b1a      	ldr	r3, [pc, #104]	; (8008034 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007fcc:	613b      	str	r3, [r7, #16]
    break;
 8007fce:	e005      	b.n	8007fdc <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007fd0:	4b18      	ldr	r3, [pc, #96]	; (8008034 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007fd2:	613b      	str	r3, [r7, #16]
    break;
 8007fd4:	e002      	b.n	8007fdc <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	613b      	str	r3, [r7, #16]
    break;
 8007fda:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007fdc:	4b13      	ldr	r3, [pc, #76]	; (800802c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	091b      	lsrs	r3, r3, #4
 8007fe2:	f003 030f 	and.w	r3, r3, #15
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007fea:	4b10      	ldr	r3, [pc, #64]	; (800802c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	0a1b      	lsrs	r3, r3, #8
 8007ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	fb02 f203 	mul.w	r2, r2, r3
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008000:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008002:	4b0a      	ldr	r3, [pc, #40]	; (800802c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	0e5b      	lsrs	r3, r3, #25
 8008008:	f003 0303 	and.w	r3, r3, #3
 800800c:	3301      	adds	r3, #1
 800800e:	005b      	lsls	r3, r3, #1
 8008010:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	fbb2 f3f3 	udiv	r3, r2, r3
 800801a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800801c:	683b      	ldr	r3, [r7, #0]
}
 800801e:	4618      	mov	r0, r3
 8008020:	371c      	adds	r7, #28
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	40021000 	.word	0x40021000
 8008030:	08015da8 	.word	0x08015da8
 8008034:	00f42400 	.word	0x00f42400

08008038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008040:	2300      	movs	r3, #0
 8008042:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008044:	2300      	movs	r3, #0
 8008046:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008050:	2b00      	cmp	r3, #0
 8008052:	d03d      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008058:	2b40      	cmp	r3, #64	; 0x40
 800805a:	d00b      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800805c:	2b40      	cmp	r3, #64	; 0x40
 800805e:	d804      	bhi.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00e      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8008064:	2b20      	cmp	r3, #32
 8008066:	d015      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008068:	e01d      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800806a:	2b60      	cmp	r3, #96	; 0x60
 800806c:	d01e      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x74>
 800806e:	2b80      	cmp	r3, #128	; 0x80
 8008070:	d01c      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008072:	e018      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008074:	4b86      	ldr	r3, [pc, #536]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	4a85      	ldr	r2, [pc, #532]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800807a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800807e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008080:	e015      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3304      	adds	r3, #4
 8008086:	2100      	movs	r1, #0
 8008088:	4618      	mov	r0, r3
 800808a:	f001 f973 	bl	8009374 <RCCEx_PLLSAI1_Config>
 800808e:	4603      	mov	r3, r0
 8008090:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008092:	e00c      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	3320      	adds	r3, #32
 8008098:	2100      	movs	r1, #0
 800809a:	4618      	mov	r0, r3
 800809c:	f001 fa5a 	bl	8009554 <RCCEx_PLLSAI2_Config>
 80080a0:	4603      	mov	r3, r0
 80080a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080a4:	e003      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	74fb      	strb	r3, [r7, #19]
      break;
 80080aa:	e000      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80080ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080ae:	7cfb      	ldrb	r3, [r7, #19]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10b      	bne.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080b4:	4b76      	ldr	r3, [pc, #472]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80080b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080ba:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c2:	4973      	ldr	r1, [pc, #460]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80080ca:	e001      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080cc:	7cfb      	ldrb	r3, [r7, #19]
 80080ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d042      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080e4:	d00f      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80080e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ea:	d805      	bhi.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d011      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80080f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080f4:	d017      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80080f6:	e01f      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80080f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080fc:	d01f      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80080fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008102:	d01c      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008104:	e018      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008106:	4b62      	ldr	r3, [pc, #392]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	4a61      	ldr	r2, [pc, #388]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800810c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008110:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008112:	e015      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3304      	adds	r3, #4
 8008118:	2100      	movs	r1, #0
 800811a:	4618      	mov	r0, r3
 800811c:	f001 f92a 	bl	8009374 <RCCEx_PLLSAI1_Config>
 8008120:	4603      	mov	r3, r0
 8008122:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008124:	e00c      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3320      	adds	r3, #32
 800812a:	2100      	movs	r1, #0
 800812c:	4618      	mov	r0, r3
 800812e:	f001 fa11 	bl	8009554 <RCCEx_PLLSAI2_Config>
 8008132:	4603      	mov	r3, r0
 8008134:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008136:	e003      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	74fb      	strb	r3, [r7, #19]
      break;
 800813c:	e000      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800813e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008140:	7cfb      	ldrb	r3, [r7, #19]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10b      	bne.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008146:	4b52      	ldr	r3, [pc, #328]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008148:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800814c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008154:	494e      	ldr	r1, [pc, #312]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008156:	4313      	orrs	r3, r2
 8008158:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800815c:	e001      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800815e:	7cfb      	ldrb	r3, [r7, #19]
 8008160:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 809f 	beq.w	80082ae <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008170:	2300      	movs	r3, #0
 8008172:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008174:	4b46      	ldr	r3, [pc, #280]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8008180:	2301      	movs	r3, #1
 8008182:	e000      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008184:	2300      	movs	r3, #0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00d      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800818a:	4b41      	ldr	r3, [pc, #260]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800818c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800818e:	4a40      	ldr	r2, [pc, #256]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008194:	6593      	str	r3, [r2, #88]	; 0x58
 8008196:	4b3e      	ldr	r3, [pc, #248]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800819e:	60bb      	str	r3, [r7, #8]
 80081a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081a2:	2301      	movs	r3, #1
 80081a4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081a6:	4b3b      	ldr	r3, [pc, #236]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a3a      	ldr	r2, [pc, #232]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80081ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081b2:	f7fb f8e7 	bl	8003384 <HAL_GetTick>
 80081b6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80081b8:	e009      	b.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ba:	f7fb f8e3 	bl	8003384 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d902      	bls.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	74fb      	strb	r3, [r7, #19]
        break;
 80081cc:	e005      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80081ce:	4b31      	ldr	r3, [pc, #196]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d0ef      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80081da:	7cfb      	ldrb	r3, [r7, #19]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d15b      	bne.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80081e0:	4b2b      	ldr	r3, [pc, #172]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80081e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ea:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d01f      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d019      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80081fe:	4b24      	ldr	r3, [pc, #144]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008208:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800820a:	4b21      	ldr	r3, [pc, #132]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800820c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008210:	4a1f      	ldr	r2, [pc, #124]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800821a:	4b1d      	ldr	r3, [pc, #116]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800821c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008220:	4a1b      	ldr	r2, [pc, #108]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800822a:	4a19      	ldr	r2, [pc, #100]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d016      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800823c:	f7fb f8a2 	bl	8003384 <HAL_GetTick>
 8008240:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008242:	e00b      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008244:	f7fb f89e 	bl	8003384 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008252:	4293      	cmp	r3, r2
 8008254:	d902      	bls.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	74fb      	strb	r3, [r7, #19]
            break;
 800825a:	e006      	b.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800825c:	4b0c      	ldr	r3, [pc, #48]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800825e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0ec      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800826a:	7cfb      	ldrb	r3, [r7, #19]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10c      	bne.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008270:	4b07      	ldr	r3, [pc, #28]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008276:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008280:	4903      	ldr	r1, [pc, #12]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008282:	4313      	orrs	r3, r2
 8008284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008288:	e008      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800828a:	7cfb      	ldrb	r3, [r7, #19]
 800828c:	74bb      	strb	r3, [r7, #18]
 800828e:	e005      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8008290:	40021000 	.word	0x40021000
 8008294:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008298:	7cfb      	ldrb	r3, [r7, #19]
 800829a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800829c:	7c7b      	ldrb	r3, [r7, #17]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d105      	bne.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082a2:	4ba0      	ldr	r3, [pc, #640]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a6:	4a9f      	ldr	r2, [pc, #636]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00a      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082ba:	4b9a      	ldr	r3, [pc, #616]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082c0:	f023 0203 	bic.w	r2, r3, #3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c8:	4996      	ldr	r1, [pc, #600]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082ca:	4313      	orrs	r3, r2
 80082cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00a      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80082dc:	4b91      	ldr	r3, [pc, #580]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e2:	f023 020c 	bic.w	r2, r3, #12
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	498e      	ldr	r1, [pc, #568]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0304 	and.w	r3, r3, #4
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00a      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80082fe:	4b89      	ldr	r3, [pc, #548]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008304:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830c:	4985      	ldr	r1, [pc, #532]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800830e:	4313      	orrs	r3, r2
 8008310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0308 	and.w	r3, r3, #8
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00a      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008320:	4b80      	ldr	r3, [pc, #512]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008326:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800832e:	497d      	ldr	r1, [pc, #500]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008330:	4313      	orrs	r3, r2
 8008332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0310 	and.w	r3, r3, #16
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008342:	4b78      	ldr	r3, [pc, #480]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008348:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008350:	4974      	ldr	r1, [pc, #464]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008352:	4313      	orrs	r3, r2
 8008354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0320 	and.w	r3, r3, #32
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00a      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008364:	4b6f      	ldr	r3, [pc, #444]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800836a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008372:	496c      	ldr	r1, [pc, #432]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008374:	4313      	orrs	r3, r2
 8008376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008386:	4b67      	ldr	r3, [pc, #412]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800838c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008394:	4963      	ldr	r1, [pc, #396]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008396:	4313      	orrs	r3, r2
 8008398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00a      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80083a8:	4b5e      	ldr	r3, [pc, #376]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083b6:	495b      	ldr	r1, [pc, #364]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80083ca:	4b56      	ldr	r3, [pc, #344]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d8:	4952      	ldr	r1, [pc, #328]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00a      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80083ec:	4b4d      	ldr	r3, [pc, #308]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083fa:	494a      	ldr	r1, [pc, #296]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00a      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800840e:	4b45      	ldr	r3, [pc, #276]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008414:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800841c:	4941      	ldr	r1, [pc, #260]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800841e:	4313      	orrs	r3, r2
 8008420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00a      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008430:	4b3c      	ldr	r3, [pc, #240]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008432:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008436:	f023 0203 	bic.w	r2, r3, #3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800843e:	4939      	ldr	r1, [pc, #228]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008440:	4313      	orrs	r3, r2
 8008442:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d028      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008452:	4b34      	ldr	r3, [pc, #208]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008458:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008460:	4930      	ldr	r1, [pc, #192]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008462:	4313      	orrs	r3, r2
 8008464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800846c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008470:	d106      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008472:	4b2c      	ldr	r3, [pc, #176]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	4a2b      	ldr	r2, [pc, #172]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800847c:	60d3      	str	r3, [r2, #12]
 800847e:	e011      	b.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008484:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008488:	d10c      	bne.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3304      	adds	r3, #4
 800848e:	2101      	movs	r1, #1
 8008490:	4618      	mov	r0, r3
 8008492:	f000 ff6f 	bl	8009374 <RCCEx_PLLSAI1_Config>
 8008496:	4603      	mov	r3, r0
 8008498:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800849a:	7cfb      	ldrb	r3, [r7, #19]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80084a0:	7cfb      	ldrb	r3, [r7, #19]
 80084a2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d04d      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084b8:	d108      	bne.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80084ba:	4b1a      	ldr	r3, [pc, #104]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084c0:	4a18      	ldr	r2, [pc, #96]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084c6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80084ca:	e012      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80084cc:	4b15      	ldr	r3, [pc, #84]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084d2:	4a14      	ldr	r2, [pc, #80]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084d8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80084dc:	4b11      	ldr	r3, [pc, #68]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ea:	490e      	ldr	r1, [pc, #56]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084fa:	d106      	bne.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084fc:	4b09      	ldr	r3, [pc, #36]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	4a08      	ldr	r2, [pc, #32]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008506:	60d3      	str	r3, [r2, #12]
 8008508:	e020      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800850e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008512:	d109      	bne.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008514:	4b03      	ldr	r3, [pc, #12]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	4a02      	ldr	r2, [pc, #8]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800851a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800851e:	60d3      	str	r3, [r2, #12]
 8008520:	e014      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008522:	bf00      	nop
 8008524:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800852c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008530:	d10c      	bne.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3304      	adds	r3, #4
 8008536:	2101      	movs	r1, #1
 8008538:	4618      	mov	r0, r3
 800853a:	f000 ff1b 	bl	8009374 <RCCEx_PLLSAI1_Config>
 800853e:	4603      	mov	r3, r0
 8008540:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008542:	7cfb      	ldrb	r3, [r7, #19]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008548:	7cfb      	ldrb	r3, [r7, #19]
 800854a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d028      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008558:	4b7a      	ldr	r3, [pc, #488]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800855a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800855e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008566:	4977      	ldr	r1, [pc, #476]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008568:	4313      	orrs	r3, r2
 800856a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008576:	d106      	bne.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008578:	4b72      	ldr	r3, [pc, #456]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	4a71      	ldr	r2, [pc, #452]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800857e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008582:	60d3      	str	r3, [r2, #12]
 8008584:	e011      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800858a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800858e:	d10c      	bne.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3304      	adds	r3, #4
 8008594:	2101      	movs	r1, #1
 8008596:	4618      	mov	r0, r3
 8008598:	f000 feec 	bl	8009374 <RCCEx_PLLSAI1_Config>
 800859c:	4603      	mov	r3, r0
 800859e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085a0:	7cfb      	ldrb	r3, [r7, #19]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80085a6:	7cfb      	ldrb	r3, [r7, #19]
 80085a8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d01e      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085b6:	4b63      	ldr	r3, [pc, #396]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80085b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085c6:	495f      	ldr	r1, [pc, #380]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085d8:	d10c      	bne.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	3304      	adds	r3, #4
 80085de:	2102      	movs	r1, #2
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 fec7 	bl	8009374 <RCCEx_PLLSAI1_Config>
 80085e6:	4603      	mov	r3, r0
 80085e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085ea:	7cfb      	ldrb	r3, [r7, #19]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80085f0:	7cfb      	ldrb	r3, [r7, #19]
 80085f2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00b      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008600:	4b50      	ldr	r3, [pc, #320]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008602:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008606:	f023 0204 	bic.w	r2, r3, #4
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008610:	494c      	ldr	r1, [pc, #304]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008612:	4313      	orrs	r3, r2
 8008614:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00b      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008624:	4b47      	ldr	r3, [pc, #284]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008626:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800862a:	f023 0218 	bic.w	r2, r3, #24
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008634:	4943      	ldr	r1, [pc, #268]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008636:	4313      	orrs	r3, r2
 8008638:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d035      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008648:	4b3e      	ldr	r3, [pc, #248]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a3d      	ldr	r2, [pc, #244]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800864e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008654:	f7fa fe96 	bl	8003384 <HAL_GetTick>
 8008658:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800865a:	e009      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800865c:	f7fa fe92 	bl	8003384 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	2b02      	cmp	r3, #2
 8008668:	d902      	bls.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	74fb      	strb	r3, [r7, #19]
        break;
 800866e:	e005      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008670:	4b34      	ldr	r3, [pc, #208]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1ef      	bne.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 800867c:	7cfb      	ldrb	r3, [r7, #19]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d113      	bne.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8008682:	4b30      	ldr	r3, [pc, #192]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008684:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008688:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008692:	492c      	ldr	r1, [pc, #176]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008694:	4313      	orrs	r3, r2
 8008696:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	3320      	adds	r3, #32
 800869e:	2102      	movs	r1, #2
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 ff57 	bl	8009554 <RCCEx_PLLSAI2_Config>
 80086a6:	4603      	mov	r3, r0
 80086a8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80086aa:	7cfb      	ldrb	r3, [r7, #19]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 80086b0:	7cfb      	ldrb	r3, [r7, #19]
 80086b2:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d01e      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80086c0:	4b20      	ldr	r3, [pc, #128]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80086c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d0:	491c      	ldr	r1, [pc, #112]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086e2:	d10c      	bne.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	3320      	adds	r3, #32
 80086e8:	2101      	movs	r1, #1
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 ff32 	bl	8009554 <RCCEx_PLLSAI2_Config>
 80086f0:	4603      	mov	r3, r0
 80086f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80086f4:	7cfb      	ldrb	r3, [r7, #19]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      {
        /* set overall return value */
        status = ret;
 80086fa:	7cfb      	ldrb	r3, [r7, #19]
 80086fc:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d017      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800870a:	4b0e      	ldr	r3, [pc, #56]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800870c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008710:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800871a:	490a      	ldr	r1, [pc, #40]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800871c:	4313      	orrs	r3, r2
 800871e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008728:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800872c:	d105      	bne.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x702>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800872e:	4b05      	ldr	r3, [pc, #20]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	4a04      	ldr	r2, [pc, #16]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008738:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800873a:	7cbb      	ldrb	r3, [r7, #18]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	40021000 	.word	0x40021000

08008748 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b088      	sub	sp, #32
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008750:	2300      	movs	r3, #0
 8008752:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800875a:	d137      	bne.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800875c:	4baf      	ldr	r3, [pc, #700]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800875e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008766:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800876e:	d014      	beq.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8008770:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008774:	d01e      	beq.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8008776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800877a:	d001      	beq.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800877c:	f000 bdf1 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008780:	4ba6      	ldr	r3, [pc, #664]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008786:	f003 0302 	and.w	r3, r3, #2
 800878a:	2b02      	cmp	r3, #2
 800878c:	f040 85e2 	bne.w	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
        frequency = LSE_VALUE;
 8008790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008794:	61fb      	str	r3, [r7, #28]
      break;
 8008796:	f000 bddd 	b.w	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800879a:	4ba0      	ldr	r3, [pc, #640]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800879c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	f040 85d7 	bne.w	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = LSI_VALUE;
 80087aa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80087ae:	61fb      	str	r3, [r7, #28]
      break;
 80087b0:	f000 bdd2 	b.w	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087b4:	4b99      	ldr	r3, [pc, #612]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087c0:	f040 85cc 	bne.w	800935c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
        frequency = HSE_VALUE / 32U;
 80087c4:	4b96      	ldr	r3, [pc, #600]	; (8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80087c6:	61fb      	str	r3, [r7, #28]
      break;
 80087c8:	f000 bdc8 	b.w	800935c <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087cc:	4b93      	ldr	r3, [pc, #588]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	f003 0303 	and.w	r3, r3, #3
 80087d4:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d023      	beq.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d02e      	beq.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d139      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80087e4:	4b8d      	ldr	r3, [pc, #564]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0302 	and.w	r3, r3, #2
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d116      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80087f0:	4b8a      	ldr	r3, [pc, #552]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0308 	and.w	r3, r3, #8
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 80087fc:	4b87      	ldr	r3, [pc, #540]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	091b      	lsrs	r3, r3, #4
 8008802:	f003 030f 	and.w	r3, r3, #15
 8008806:	e005      	b.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8008808:	4b84      	ldr	r3, [pc, #528]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800880a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800880e:	0a1b      	lsrs	r3, r3, #8
 8008810:	f003 030f 	and.w	r3, r3, #15
 8008814:	4a83      	ldr	r2, [pc, #524]	; (8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800881a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800881c:	e01f      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	61bb      	str	r3, [r7, #24]
      break;
 8008822:	e01c      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008824:	4b7d      	ldr	r3, [pc, #500]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800882c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008830:	d102      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8008832:	4b7d      	ldr	r3, [pc, #500]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008834:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008836:	e012      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8008838:	2300      	movs	r3, #0
 800883a:	61bb      	str	r3, [r7, #24]
      break;
 800883c:	e00f      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800883e:	4b77      	ldr	r3, [pc, #476]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008846:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800884a:	d102      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 800884c:	4b76      	ldr	r3, [pc, #472]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800884e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008850:	e005      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8008852:	2300      	movs	r3, #0
 8008854:	61bb      	str	r3, [r7, #24]
      break;
 8008856:	e002      	b.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	61bb      	str	r3, [r7, #24]
      break;
 800885c:	bf00      	nop
    }

    switch(PeriphClk)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008864:	f000 84cc 	beq.w	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 8008868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800886c:	d82d      	bhi.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 800886e:	2b10      	cmp	r3, #16
 8008870:	f000 82f7 	beq.w	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8008874:	2b10      	cmp	r3, #16
 8008876:	d811      	bhi.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008878:	2b02      	cmp	r3, #2
 800887a:	f000 8241 	beq.w	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 800887e:	2b02      	cmp	r3, #2
 8008880:	d804      	bhi.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8008882:	2b01      	cmp	r3, #1
 8008884:	f000 81fb 	beq.w	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x536>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8008888:	f000 bd6b 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
    switch(PeriphClk)
 800888c:	2b04      	cmp	r3, #4
 800888e:	f000 8280 	beq.w	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008892:	2b08      	cmp	r3, #8
 8008894:	f000 82b1 	beq.w	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
      break;
 8008898:	f000 bd63 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
    switch(PeriphClk)
 800889c:	2b80      	cmp	r3, #128	; 0x80
 800889e:	f000 8407 	beq.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 80088a2:	2b80      	cmp	r3, #128	; 0x80
 80088a4:	d807      	bhi.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 80088a6:	2b20      	cmp	r3, #32
 80088a8:	f000 8313 	beq.w	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80088ac:	2b40      	cmp	r3, #64	; 0x40
 80088ae:	f000 83dc 	beq.w	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x922>
      break;
 80088b2:	f000 bd56 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
    switch(PeriphClk)
 80088b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ba:	f000 841c 	beq.w	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 80088be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088c2:	f000 845c 	beq.w	800917e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      break;
 80088c6:	f000 bd4c 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
    switch(PeriphClk)
 80088ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ce:	f000 837b 	beq.w	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
 80088d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088d6:	d813      	bhi.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80088d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088dc:	d032      	beq.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80088de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e2:	d804      	bhi.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 80088e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088e8:	d024      	beq.n	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
      break;
 80088ea:	f000 bd3a 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
    switch(PeriphClk)
 80088ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088f2:	d02f      	beq.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 80088f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088f8:	f000 8323 	beq.w	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
      break;
 80088fc:	f000 bd31 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
    switch(PeriphClk)
 8008900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008904:	f000 841a 	beq.w	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8008908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800890c:	d808      	bhi.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800890e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008912:	d01f      	beq.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8008914:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008918:	f000 80cb 	beq.w	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
      break;
 800891c:	f000 bd21 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
    switch(PeriphClk)
 8008920:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008924:	f000 8361 	beq.w	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800892c:	f000 84b0 	beq.w	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
      break;
 8008930:	f000 bd17 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8008934:	69b9      	ldr	r1, [r7, #24]
 8008936:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800893a:	f000 fefb 	bl	8009734 <RCCEx_GetSAIxPeriphCLKFreq>
 800893e:	61f8      	str	r0, [r7, #28]
      break;
 8008940:	f000 bd0f 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8008944:	69b9      	ldr	r1, [r7, #24]
 8008946:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800894a:	f000 fef3 	bl	8009734 <RCCEx_GetSAIxPeriphCLKFreq>
 800894e:	61f8      	str	r0, [r7, #28]
      break;
 8008950:	f000 bd07 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8008954:	4b31      	ldr	r3, [pc, #196]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800895a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800895e:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008966:	d061      	beq.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8008968:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800896c:	d803      	bhi.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800896e:	2b00      	cmp	r3, #0
 8008970:	f000 8089 	beq.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
          break;
 8008974:	e09b      	b.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x366>
        switch(srcclk)
 8008976:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800897a:	d021      	beq.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 800897c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008980:	d000      	beq.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
          break;
 8008982:	e094      	b.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x366>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008984:	4b25      	ldr	r3, [pc, #148]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0302 	and.w	r3, r3, #2
 800898c:	2b02      	cmp	r3, #2
 800898e:	f040 8084 	bne.w	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008992:	4b22      	ldr	r3, [pc, #136]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 0308 	and.w	r3, r3, #8
 800899a:	2b00      	cmp	r3, #0
 800899c:	d005      	beq.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800899e:	4b1f      	ldr	r3, [pc, #124]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	091b      	lsrs	r3, r3, #4
 80089a4:	f003 030f 	and.w	r3, r3, #15
 80089a8:	e005      	b.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
 80089aa:	4b1c      	ldr	r3, [pc, #112]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80089ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089b0:	0a1b      	lsrs	r3, r3, #8
 80089b2:	f003 030f 	and.w	r3, r3, #15
 80089b6:	4a1b      	ldr	r2, [pc, #108]	; (8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80089b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089bc:	61fb      	str	r3, [r7, #28]
          break;
 80089be:	e06c      	b.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80089c0:	4b16      	ldr	r3, [pc, #88]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089cc:	d168      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80089ce:	4b13      	ldr	r3, [pc, #76]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089da:	d161      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80089dc:	4b0f      	ldr	r3, [pc, #60]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	0a1b      	lsrs	r3, r3, #8
 80089e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	fb02 f203 	mul.w	r2, r2, r3
 80089f0:	4b0a      	ldr	r3, [pc, #40]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	091b      	lsrs	r3, r3, #4
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	3301      	adds	r3, #1
 80089fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a00:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008a02:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	0d5b      	lsrs	r3, r3, #21
 8008a08:	f003 0303 	and.w	r3, r3, #3
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	005b      	lsls	r3, r3, #1
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a16:	61fb      	str	r3, [r7, #28]
          break;
 8008a18:	e042      	b.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
 8008a1a:	bf00      	nop
 8008a1c:	40021000 	.word	0x40021000
 8008a20:	0007a120 	.word	0x0007a120
 8008a24:	08015da8 	.word	0x08015da8
 8008a28:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8008a2c:	4bb0      	ldr	r3, [pc, #704]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a38:	d135      	bne.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8008a3a:	4bad      	ldr	r3, [pc, #692]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a46:	d12e      	bne.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008a48:	4ba9      	ldr	r3, [pc, #676]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	0a1b      	lsrs	r3, r3, #8
 8008a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a52:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	fb02 f203 	mul.w	r2, r2, r3
 8008a5c:	4ba4      	ldr	r3, [pc, #656]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	091b      	lsrs	r3, r3, #4
 8008a62:	f003 030f 	and.w	r3, r3, #15
 8008a66:	3301      	adds	r3, #1
 8008a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a6c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8008a6e:	4ba0      	ldr	r3, [pc, #640]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	0d5b      	lsrs	r3, r3, #21
 8008a74:	f003 0303 	and.w	r3, r3, #3
 8008a78:	3301      	adds	r3, #1
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a82:	61fb      	str	r3, [r7, #28]
          break;
 8008a84:	e00f      	b.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8008a86:	4b9a      	ldr	r3, [pc, #616]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a8c:	f003 0302 	and.w	r3, r3, #2
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d10b      	bne.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x364>
            frequency = HSI48_VALUE;
 8008a94:	4b97      	ldr	r3, [pc, #604]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8008a96:	61fb      	str	r3, [r7, #28]
          break;
 8008a98:	e008      	b.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          break;
 8008a9a:	bf00      	nop
 8008a9c:	f000 bc61 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008aa0:	bf00      	nop
 8008aa2:	f000 bc5e 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008aa6:	bf00      	nop
 8008aa8:	f000 bc5b 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008aac:	bf00      	nop
        break;
 8008aae:	f000 bc58 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8008ab2:	4b8f      	ldr	r3, [pc, #572]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ac0:	d13d      	bne.n	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008ac2:	4b8b      	ldr	r3, [pc, #556]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ace:	f040 8447 	bne.w	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8008ad2:	4b87      	ldr	r3, [pc, #540]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ade:	f040 843f 	bne.w	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008ae2:	4b83      	ldr	r3, [pc, #524]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	0a1b      	lsrs	r3, r3, #8
 8008ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aec:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	fb02 f203 	mul.w	r2, r2, r3
 8008af6:	4b7e      	ldr	r3, [pc, #504]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	091b      	lsrs	r3, r3, #4
 8008afc:	f003 030f 	and.w	r3, r3, #15
 8008b00:	3301      	adds	r3, #1
 8008b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b06:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8008b08:	4b79      	ldr	r3, [pc, #484]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	0edb      	lsrs	r3, r3, #27
 8008b0e:	f003 031f 	and.w	r3, r3, #31
 8008b12:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10a      	bne.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008b1a:	4b75      	ldr	r3, [pc, #468]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
                pllp = 17U;
 8008b26:	2311      	movs	r3, #17
 8008b28:	617b      	str	r3, [r7, #20]
 8008b2a:	e001      	b.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
                pllp = 7U;
 8008b2c:	2307      	movs	r3, #7
 8008b2e:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b38:	61fb      	str	r3, [r7, #28]
      break;
 8008b3a:	f000 bc11 	b.w	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8008b3e:	4b6c      	ldr	r3, [pc, #432]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b44:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008b48:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b50:	d056      	beq.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b56:	d802      	bhi.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d07e      	beq.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          break;
 8008b5c:	e08e      	b.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>
        switch(srcclk)
 8008b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b62:	d020      	beq.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8008b64:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008b68:	d000      	beq.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x424>
          break;
 8008b6a:	e087      	b.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008b6c:	4b60      	ldr	r3, [pc, #384]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 0302 	and.w	r3, r3, #2
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d17a      	bne.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0x526>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008b78:	4b5d      	ldr	r3, [pc, #372]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0308 	and.w	r3, r3, #8
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8008b84:	4b5a      	ldr	r3, [pc, #360]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	091b      	lsrs	r3, r3, #4
 8008b8a:	f003 030f 	and.w	r3, r3, #15
 8008b8e:	e005      	b.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 8008b90:	4b57      	ldr	r3, [pc, #348]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b96:	0a1b      	lsrs	r3, r3, #8
 8008b98:	f003 030f 	and.w	r3, r3, #15
 8008b9c:	4a56      	ldr	r2, [pc, #344]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8008b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ba2:	61fb      	str	r3, [r7, #28]
          break;
 8008ba4:	e063      	b.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0x526>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008ba6:	4b52      	ldr	r3, [pc, #328]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bb2:	d15e      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008bb4:	4b4e      	ldr	r3, [pc, #312]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bc0:	d157      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008bc2:	4b4b      	ldr	r3, [pc, #300]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	0a1b      	lsrs	r3, r3, #8
 8008bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bcc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	fb02 f203 	mul.w	r2, r2, r3
 8008bd6:	4b46      	ldr	r3, [pc, #280]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	091b      	lsrs	r3, r3, #4
 8008bdc:	f003 030f 	and.w	r3, r3, #15
 8008be0:	3301      	adds	r3, #1
 8008be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008be8:	4b41      	ldr	r3, [pc, #260]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	0d5b      	lsrs	r3, r3, #21
 8008bee:	f003 0303 	and.w	r3, r3, #3
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	005b      	lsls	r3, r3, #1
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfc:	61fb      	str	r3, [r7, #28]
          break;
 8008bfe:	e038      	b.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8008c00:	4b3b      	ldr	r3, [pc, #236]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c0c:	d133      	bne.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8008c0e:	4b38      	ldr	r3, [pc, #224]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c1a:	d12c      	bne.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008c1c:	4b34      	ldr	r3, [pc, #208]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	0a1b      	lsrs	r3, r3, #8
 8008c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c26:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	fb02 f203 	mul.w	r2, r2, r3
 8008c30:	4b2f      	ldr	r3, [pc, #188]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	091b      	lsrs	r3, r3, #4
 8008c36:	f003 030f 	and.w	r3, r3, #15
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c40:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8008c42:	4b2b      	ldr	r3, [pc, #172]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	0d5b      	lsrs	r3, r3, #21
 8008c48:	f003 0303 	and.w	r3, r3, #3
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	005b      	lsls	r3, r3, #1
 8008c50:	69ba      	ldr	r2, [r7, #24]
 8008c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c56:	61fb      	str	r3, [r7, #28]
          break;
 8008c58:	e00d      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8008c5a:	4b25      	ldr	r3, [pc, #148]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c60:	f003 0302 	and.w	r3, r3, #2
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d108      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x532>
            frequency = HSI48_VALUE;
 8008c68:	4b22      	ldr	r3, [pc, #136]	; (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8008c6a:	61fb      	str	r3, [r7, #28]
          break;
 8008c6c:	e005      	b.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x532>
          break;
 8008c6e:	bf00      	nop
 8008c70:	e376      	b.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
          break;
 8008c72:	bf00      	nop
 8008c74:	e374      	b.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
          break;
 8008c76:	bf00      	nop
 8008c78:	e372      	b.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
          break;
 8008c7a:	bf00      	nop
      break;
 8008c7c:	e370      	b.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008c7e:	4b1c      	ldr	r3, [pc, #112]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c84:	f003 0303 	and.w	r3, r3, #3
 8008c88:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	d828      	bhi.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8008c90:	a201      	add	r2, pc, #4	; (adr r2, 8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8008c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c96:	bf00      	nop
 8008c98:	08008ca9 	.word	0x08008ca9
 8008c9c:	08008cb1 	.word	0x08008cb1
 8008ca0:	08008cb9 	.word	0x08008cb9
 8008ca4:	08008ccd 	.word	0x08008ccd
          frequency = HAL_RCC_GetPCLK2Freq();
 8008ca8:	f7ff f8f0 	bl	8007e8c <HAL_RCC_GetPCLK2Freq>
 8008cac:	61f8      	str	r0, [r7, #28]
          break;
 8008cae:	e01d      	b.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
          frequency = HAL_RCC_GetSysClockFreq();
 8008cb0:	f7ff f842 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8008cb4:	61f8      	str	r0, [r7, #28]
          break;
 8008cb6:	e019      	b.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008cb8:	4b0d      	ldr	r3, [pc, #52]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cc4:	d10f      	bne.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
            frequency = HSI_VALUE;
 8008cc6:	4b0d      	ldr	r3, [pc, #52]	; (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8008cc8:	61fb      	str	r3, [r7, #28]
          break;
 8008cca:	e00c      	b.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008ccc:	4b08      	ldr	r3, [pc, #32]	; (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cd2:	f003 0302 	and.w	r3, r3, #2
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d107      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
            frequency = LSE_VALUE;
 8008cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cde:	61fb      	str	r3, [r7, #28]
          break;
 8008ce0:	e003      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
          break;
 8008ce2:	bf00      	nop
 8008ce4:	e33d      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008ce6:	bf00      	nop
 8008ce8:	e33b      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008cea:	bf00      	nop
        break;
 8008cec:	e339      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
 8008cee:	bf00      	nop
 8008cf0:	40021000 	.word	0x40021000
 8008cf4:	02dc6c00 	.word	0x02dc6c00
 8008cf8:	08015da8 	.word	0x08015da8
 8008cfc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008d00:	4baf      	ldr	r3, [pc, #700]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d06:	f003 030c 	and.w	r3, r3, #12
 8008d0a:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b0c      	cmp	r3, #12
 8008d10:	d839      	bhi.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8008d12:	a201      	add	r2, pc, #4	; (adr r2, 8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d18:	08008d4d 	.word	0x08008d4d
 8008d1c:	08008d87 	.word	0x08008d87
 8008d20:	08008d87 	.word	0x08008d87
 8008d24:	08008d87 	.word	0x08008d87
 8008d28:	08008d55 	.word	0x08008d55
 8008d2c:	08008d87 	.word	0x08008d87
 8008d30:	08008d87 	.word	0x08008d87
 8008d34:	08008d87 	.word	0x08008d87
 8008d38:	08008d5d 	.word	0x08008d5d
 8008d3c:	08008d87 	.word	0x08008d87
 8008d40:	08008d87 	.word	0x08008d87
 8008d44:	08008d87 	.word	0x08008d87
 8008d48:	08008d71 	.word	0x08008d71
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d4c:	f7ff f888 	bl	8007e60 <HAL_RCC_GetPCLK1Freq>
 8008d50:	61f8      	str	r0, [r7, #28]
          break;
 8008d52:	e01d      	b.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d54:	f7fe fff0 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8008d58:	61f8      	str	r0, [r7, #28]
          break;
 8008d5a:	e019      	b.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d5c:	4b98      	ldr	r3, [pc, #608]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d68:	d10f      	bne.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x642>
            frequency = HSI_VALUE;
 8008d6a:	4b96      	ldr	r3, [pc, #600]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>)
 8008d6c:	61fb      	str	r3, [r7, #28]
          break;
 8008d6e:	e00c      	b.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x642>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008d70:	4b93      	ldr	r3, [pc, #588]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d76:	f003 0302 	and.w	r3, r3, #2
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d107      	bne.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
            frequency = LSE_VALUE;
 8008d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d82:	61fb      	str	r3, [r7, #28]
          break;
 8008d84:	e003      	b.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
          break;
 8008d86:	bf00      	nop
 8008d88:	e2eb      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008d8a:	bf00      	nop
 8008d8c:	e2e9      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008d8e:	bf00      	nop
        break;
 8008d90:	e2e7      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008d92:	4b8b      	ldr	r3, [pc, #556]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d9c:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2b10      	cmp	r3, #16
 8008da2:	d00d      	beq.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 8008da4:	2b10      	cmp	r3, #16
 8008da6:	d802      	bhi.n	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d005      	beq.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8008dac:	e024      	b.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
        switch(srcclk)
 8008dae:	2b20      	cmp	r3, #32
 8008db0:	d00a      	beq.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8008db2:	2b30      	cmp	r3, #48	; 0x30
 8008db4:	d012      	beq.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x694>
          break;
 8008db6:	e01f      	b.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008db8:	f7ff f852 	bl	8007e60 <HAL_RCC_GetPCLK1Freq>
 8008dbc:	61f8      	str	r0, [r7, #28]
          break;
 8008dbe:	e01b      	b.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          frequency = HAL_RCC_GetSysClockFreq();
 8008dc0:	f7fe ffba 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8008dc4:	61f8      	str	r0, [r7, #28]
          break;
 8008dc6:	e017      	b.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008dc8:	4b7d      	ldr	r3, [pc, #500]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dd4:	d10d      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
            frequency = HSI_VALUE;
 8008dd6:	4b7b      	ldr	r3, [pc, #492]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>)
 8008dd8:	61fb      	str	r3, [r7, #28]
          break;
 8008dda:	e00a      	b.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008ddc:	4b78      	ldr	r3, [pc, #480]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008de2:	f003 0302 	and.w	r3, r3, #2
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d105      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = LSE_VALUE;
 8008dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dee:	61fb      	str	r3, [r7, #28]
          break;
 8008df0:	e001      	b.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          break;
 8008df2:	bf00      	nop
 8008df4:	e2b5      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008df6:	bf00      	nop
        break;
 8008df8:	e2b3      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008dfa:	4b71      	ldr	r3, [pc, #452]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e04:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2b40      	cmp	r3, #64	; 0x40
 8008e0a:	d00d      	beq.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008e0c:	2b40      	cmp	r3, #64	; 0x40
 8008e0e:	d802      	bhi.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d005      	beq.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          break;
 8008e14:	e024      	b.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
        switch(srcclk)
 8008e16:	2b80      	cmp	r3, #128	; 0x80
 8008e18:	d00a      	beq.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8008e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8008e1c:	d012      	beq.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
          break;
 8008e1e:	e01f      	b.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e20:	f7ff f81e 	bl	8007e60 <HAL_RCC_GetPCLK1Freq>
 8008e24:	61f8      	str	r0, [r7, #28]
          break;
 8008e26:	e01b      	b.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e28:	f7fe ff86 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8008e2c:	61f8      	str	r0, [r7, #28]
          break;
 8008e2e:	e017      	b.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e30:	4b63      	ldr	r3, [pc, #396]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e3c:	d10d      	bne.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x712>
            frequency = HSI_VALUE;
 8008e3e:	4b61      	ldr	r3, [pc, #388]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>)
 8008e40:	61fb      	str	r3, [r7, #28]
          break;
 8008e42:	e00a      	b.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x712>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008e44:	4b5e      	ldr	r3, [pc, #376]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e4a:	f003 0302 	and.w	r3, r3, #2
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d105      	bne.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            frequency = LSE_VALUE;
 8008e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e56:	61fb      	str	r3, [r7, #28]
          break;
 8008e58:	e001      	b.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
          break;
 8008e5a:	bf00      	nop
 8008e5c:	e281      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008e5e:	bf00      	nop
        break;
 8008e60:	e27f      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008e62:	4b57      	ldr	r3, [pc, #348]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e6c:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e74:	d010      	beq.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 8008e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e7a:	d802      	bhi.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d007      	beq.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          break;
 8008e80:	e026      	b.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
        switch(srcclk)
 8008e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e86:	d00b      	beq.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8008e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e8c:	d012      	beq.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
          break;
 8008e8e:	e01f      	b.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e90:	f7fe ffe6 	bl	8007e60 <HAL_RCC_GetPCLK1Freq>
 8008e94:	61f8      	str	r0, [r7, #28]
          break;
 8008e96:	e01b      	b.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e98:	f7fe ff4e 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8008e9c:	61f8      	str	r0, [r7, #28]
          break;
 8008e9e:	e017      	b.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ea0:	4b47      	ldr	r3, [pc, #284]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eac:	d10d      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
            frequency = HSI_VALUE;
 8008eae:	4b45      	ldr	r3, [pc, #276]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>)
 8008eb0:	61fb      	str	r3, [r7, #28]
          break;
 8008eb2:	e00a      	b.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008eb4:	4b42      	ldr	r3, [pc, #264]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d105      	bne.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = LSE_VALUE;
 8008ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ec6:	61fb      	str	r3, [r7, #28]
          break;
 8008ec8:	e001      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x786>
          break;
 8008eca:	bf00      	nop
 8008ecc:	e249      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008ece:	bf00      	nop
        break;
 8008ed0:	e247      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008ed2:	4b3b      	ldr	r3, [pc, #236]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ed8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008edc:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ee4:	d010      	beq.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
 8008ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eea:	d802      	bhi.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d007      	beq.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
          break;
 8008ef0:	e026      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
        switch(srcclk)
 8008ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ef6:	d00b      	beq.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 8008ef8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008efc:	d012      	beq.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          break;
 8008efe:	e01f      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f00:	f7fe ffae 	bl	8007e60 <HAL_RCC_GetPCLK1Freq>
 8008f04:	61f8      	str	r0, [r7, #28]
          break;
 8008f06:	e01b      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f08:	f7fe ff16 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8008f0c:	61f8      	str	r0, [r7, #28]
          break;
 8008f0e:	e017      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f10:	4b2b      	ldr	r3, [pc, #172]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f1c:	d10d      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
            frequency = HSI_VALUE;
 8008f1e:	4b29      	ldr	r3, [pc, #164]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>)
 8008f20:	61fb      	str	r3, [r7, #28]
          break;
 8008f22:	e00a      	b.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f24:	4b26      	ldr	r3, [pc, #152]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f2a:	f003 0302 	and.w	r3, r3, #2
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d105      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
            frequency = LSE_VALUE;
 8008f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f36:	61fb      	str	r3, [r7, #28]
          break;
 8008f38:	e001      	b.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
          break;
 8008f3a:	bf00      	nop
 8008f3c:	e211      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008f3e:	bf00      	nop
        break;
 8008f40:	e20f      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008f42:	4b1f      	ldr	r3, [pc, #124]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f4c:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f54:	d007      	beq.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
 8008f56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f5a:	d000      	beq.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          break;
 8008f5c:	e02f      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f5e:	f7fe feeb 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8008f62:	61f8      	str	r0, [r7, #28]
          break;
 8008f64:	e02b      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008f66:	4b16      	ldr	r3, [pc, #88]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f72:	d123      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8008f74:	4b12      	ldr	r3, [pc, #72]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d01d      	beq.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x874>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008f80:	4b0f      	ldr	r3, [pc, #60]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	0a1b      	lsrs	r3, r3, #8
 8008f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f8a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	fb02 f203 	mul.w	r2, r2, r3
 8008f94:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	091b      	lsrs	r3, r3, #4
 8008f9a:	f003 030f 	and.w	r3, r3, #15
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8008fa6:	4b06      	ldr	r3, [pc, #24]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	0e5b      	lsrs	r3, r3, #25
 8008fac:	f003 0303 	and.w	r3, r3, #3
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	005b      	lsls	r3, r3, #1
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fba:	61fb      	str	r3, [r7, #28]
          break;
 8008fbc:	bf00      	nop
        break;
 8008fbe:	e1d0      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
 8008fc0:	40021000 	.word	0x40021000
 8008fc4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008fc8:	4bac      	ldr	r3, [pc, #688]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8008fca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fce:	f003 0304 	and.w	r3, r3, #4
 8008fd2:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d103      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8008fda:	f7fe ff57 	bl	8007e8c <HAL_RCC_GetPCLK2Freq>
 8008fde:	61f8      	str	r0, [r7, #28]
        break;
 8008fe0:	e1bf      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008fe2:	f7fe fea9 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8008fe6:	61f8      	str	r0, [r7, #28]
        break;
 8008fe8:	e1bb      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8008fea:	4ba4      	ldr	r3, [pc, #656]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8008fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ff0:	f003 0318 	and.w	r3, r3, #24
 8008ff4:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2b08      	cmp	r3, #8
 8008ffa:	d028      	beq.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 8008ffc:	2b10      	cmp	r3, #16
 8008ffe:	d009      	beq.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8009000:	2b00      	cmp	r3, #0
 8009002:	d000      	beq.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 8009004:	e030      	b.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8009006:	69b9      	ldr	r1, [r7, #24]
 8009008:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800900c:	f000 fb92 	bl	8009734 <RCCEx_GetSAIxPeriphCLKFreq>
 8009010:	61f8      	str	r0, [r7, #28]
          break;
 8009012:	e029      	b.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009014:	4b99      	ldr	r3, [pc, #612]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0302 	and.w	r3, r3, #2
 800901c:	2b02      	cmp	r3, #2
 800901e:	d120      	bne.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009020:	4b96      	ldr	r3, [pc, #600]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 0308 	and.w	r3, r3, #8
 8009028:	2b00      	cmp	r3, #0
 800902a:	d005      	beq.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 800902c:	4b93      	ldr	r3, [pc, #588]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	091b      	lsrs	r3, r3, #4
 8009032:	f003 030f 	and.w	r3, r3, #15
 8009036:	e005      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8009038:	4b90      	ldr	r3, [pc, #576]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 800903a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800903e:	0a1b      	lsrs	r3, r3, #8
 8009040:	f003 030f 	and.w	r3, r3, #15
 8009044:	4a8e      	ldr	r2, [pc, #568]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>)
 8009046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800904a:	61fb      	str	r3, [r7, #28]
          break;
 800904c:	e009      	b.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800904e:	4b8b      	ldr	r3, [pc, #556]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800905a:	d104      	bne.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
            frequency = HSI_VALUE;
 800905c:	4b89      	ldr	r3, [pc, #548]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800905e:	61fb      	str	r3, [r7, #28]
          break;
 8009060:	e001      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
          break;
 8009062:	bf00      	nop
 8009064:	e17d      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8009066:	bf00      	nop
        break;
 8009068:	e17b      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800906a:	4b84      	ldr	r3, [pc, #528]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 800906c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009070:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009074:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800907c:	d009      	beq.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 800907e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009082:	d00a      	beq.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8009084:	2b00      	cmp	r3, #0
 8009086:	d000      	beq.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          break;
 8009088:	e011      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x966>
          frequency = HAL_RCC_GetPCLK1Freq();
 800908a:	f7fe fee9 	bl	8007e60 <HAL_RCC_GetPCLK1Freq>
 800908e:	61f8      	str	r0, [r7, #28]
          break;
 8009090:	e00d      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x966>
          frequency = HAL_RCC_GetSysClockFreq();
 8009092:	f7fe fe51 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8009096:	61f8      	str	r0, [r7, #28]
          break;
 8009098:	e009      	b.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x966>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800909a:	4b78      	ldr	r3, [pc, #480]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090a6:	d101      	bne.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x964>
            frequency = HSI_VALUE;
 80090a8:	4b76      	ldr	r3, [pc, #472]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80090aa:	61fb      	str	r3, [r7, #28]
          break;
 80090ac:	bf00      	nop
        break;
 80090ae:	e158      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80090b0:	4b72      	ldr	r3, [pc, #456]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 80090b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80090ba:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090c2:	d009      	beq.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 80090c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090c8:	d00a      	beq.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d000      	beq.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
 80090ce:	e011      	b.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 80090d0:	f7fe fec6 	bl	8007e60 <HAL_RCC_GetPCLK1Freq>
 80090d4:	61f8      	str	r0, [r7, #28]
          break;
 80090d6:	e00d      	b.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
          frequency = HAL_RCC_GetSysClockFreq();
 80090d8:	f7fe fe2e 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 80090dc:	61f8      	str	r0, [r7, #28]
          break;
 80090de:	e009      	b.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090e0:	4b66      	ldr	r3, [pc, #408]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090ec:	d101      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
            frequency = HSI_VALUE;
 80090ee:	4b65      	ldr	r3, [pc, #404]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80090f0:	61fb      	str	r3, [r7, #28]
          break;
 80090f2:	bf00      	nop
        break;
 80090f4:	e135      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80090f6:	4b61      	ldr	r3, [pc, #388]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 80090f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009100:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009108:	d009      	beq.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
 800910a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800910e:	d00a      	beq.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8009110:	2b00      	cmp	r3, #0
 8009112:	d000      	beq.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          break;
 8009114:	e011      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009116:	f7fe fea3 	bl	8007e60 <HAL_RCC_GetPCLK1Freq>
 800911a:	61f8      	str	r0, [r7, #28]
          break;
 800911c:	e00d      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800911e:	f7fe fe0b 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8009122:	61f8      	str	r0, [r7, #28]
          break;
 8009124:	e009      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009126:	4b55      	ldr	r3, [pc, #340]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800912e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009132:	d101      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x9f0>
            frequency = HSI_VALUE;
 8009134:	4b53      	ldr	r3, [pc, #332]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009136:	61fb      	str	r3, [r7, #28]
          break;
 8009138:	bf00      	nop
        break;
 800913a:	e112      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800913c:	4b4f      	ldr	r3, [pc, #316]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 800913e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009142:	f003 0303 	and.w	r3, r3, #3
 8009146:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d008      	beq.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
 800914e:	2b01      	cmp	r3, #1
 8009150:	d302      	bcc.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>
 8009152:	2b02      	cmp	r3, #2
 8009154:	d008      	beq.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          break;
 8009156:	e011      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009158:	f7fe fe82 	bl	8007e60 <HAL_RCC_GetPCLK1Freq>
 800915c:	61f8      	str	r0, [r7, #28]
          break;
 800915e:	e00d      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
          frequency = HAL_RCC_GetSysClockFreq();
 8009160:	f7fe fdea 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8009164:	61f8      	str	r0, [r7, #28]
          break;
 8009166:	e009      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009168:	4b44      	ldr	r3, [pc, #272]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009174:	d101      	bne.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
            frequency = HSI_VALUE;
 8009176:	4b43      	ldr	r3, [pc, #268]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009178:	61fb      	str	r3, [r7, #28]
          break;
 800917a:	bf00      	nop
        break;
 800917c:	e0f1      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800917e:	4b3f      	ldr	r3, [pc, #252]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009184:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009188:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009190:	d010      	beq.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
 8009192:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009196:	d802      	bhi.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8009198:	2b00      	cmp	r3, #0
 800919a:	d007      	beq.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          break;
 800919c:	e02f      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
        switch(srcclk)
 800919e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80091a2:	d012      	beq.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80091a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80091a8:	d019      	beq.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
          break;
 80091aa:	e028      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80091ac:	f7fe fe58 	bl	8007e60 <HAL_RCC_GetPCLK1Freq>
 80091b0:	61f8      	str	r0, [r7, #28]
          break;
 80091b2:	e024      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80091b4:	4b31      	ldr	r3, [pc, #196]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 80091b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091ba:	f003 0302 	and.w	r3, r3, #2
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d118      	bne.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
              frequency = LSI_VALUE;
 80091c2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80091c6:	61fb      	str	r3, [r7, #28]
          break;
 80091c8:	e014      	b.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091ca:	4b2c      	ldr	r3, [pc, #176]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091d6:	d10f      	bne.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
            frequency = HSI_VALUE;
 80091d8:	4b2a      	ldr	r3, [pc, #168]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80091da:	61fb      	str	r3, [r7, #28]
          break;
 80091dc:	e00c      	b.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80091de:	4b27      	ldr	r3, [pc, #156]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 80091e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091e4:	f003 0302 	and.w	r3, r3, #2
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d107      	bne.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
            frequency = LSE_VALUE;
 80091ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091f0:	61fb      	str	r3, [r7, #28]
          break;
 80091f2:	e003      	b.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          break;
 80091f4:	bf00      	nop
 80091f6:	e0b4      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 80091f8:	bf00      	nop
 80091fa:	e0b2      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 80091fc:	bf00      	nop
        break;
 80091fe:	e0b0      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009200:	4b1e      	ldr	r3, [pc, #120]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009206:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800920a:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009212:	d010      	beq.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009218:	d802      	bhi.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
 800921a:	2b00      	cmp	r3, #0
 800921c:	d007      	beq.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
          break;
 800921e:	e036      	b.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
        switch(srcclk)
 8009220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009224:	d012      	beq.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
 8009226:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800922a:	d019      	beq.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
          break;
 800922c:	e02f      	b.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = HAL_RCC_GetPCLK1Freq();
 800922e:	f7fe fe17 	bl	8007e60 <HAL_RCC_GetPCLK1Freq>
 8009232:	61f8      	str	r0, [r7, #28]
          break;
 8009234:	e02b      	b.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009236:	4b11      	ldr	r3, [pc, #68]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800923c:	f003 0302 	and.w	r3, r3, #2
 8009240:	2b02      	cmp	r3, #2
 8009242:	d118      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
              frequency = LSI_VALUE;
 8009244:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009248:	61fb      	str	r3, [r7, #28]
          break;
 800924a:	e014      	b.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800924c:	4b0b      	ldr	r3, [pc, #44]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009258:	d116      	bne.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
            frequency = HSI_VALUE;
 800925a:	4b0a      	ldr	r3, [pc, #40]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800925c:	61fb      	str	r3, [r7, #28]
          break;
 800925e:	e013      	b.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009260:	4b06      	ldr	r3, [pc, #24]	; (800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009266:	f003 0302 	and.w	r3, r3, #2
 800926a:	2b02      	cmp	r3, #2
 800926c:	d10e      	bne.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
            frequency = LSE_VALUE;
 800926e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009272:	61fb      	str	r3, [r7, #28]
          break;
 8009274:	e00a      	b.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8009276:	bf00      	nop
 8009278:	e073      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
 800927a:	bf00      	nop
 800927c:	40021000 	.word	0x40021000
 8009280:	08015da8 	.word	0x08015da8
 8009284:	00f42400 	.word	0x00f42400
          break;
 8009288:	bf00      	nop
 800928a:	e06a      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 800928c:	bf00      	nop
        break;
 800928e:	e068      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009290:	4b36      	ldr	r3, [pc, #216]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 8009292:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009296:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800929a:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092a2:	d009      	beq.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80092a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092a8:	d023      	beq.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d000      	beq.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 80092ae:	e050      	b.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetSysClockFreq();
 80092b0:	f7fe fd42 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 80092b4:	61f8      	str	r0, [r7, #28]
          break;
 80092b6:	e04c      	b.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80092b8:	4b2c      	ldr	r3, [pc, #176]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0302 	and.w	r3, r3, #2
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d143      	bne.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80092c4:	4b29      	ldr	r3, [pc, #164]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0308 	and.w	r3, r3, #8
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d005      	beq.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80092d0:	4b26      	ldr	r3, [pc, #152]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	091b      	lsrs	r3, r3, #4
 80092d6:	f003 030f 	and.w	r3, r3, #15
 80092da:	e005      	b.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
 80092dc:	4b23      	ldr	r3, [pc, #140]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 80092de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092e2:	0a1b      	lsrs	r3, r3, #8
 80092e4:	f003 030f 	and.w	r3, r3, #15
 80092e8:	4a21      	ldr	r2, [pc, #132]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>)
 80092ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092ee:	61fb      	str	r3, [r7, #28]
          break;
 80092f0:	e02c      	b.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80092f2:	4b1e      	ldr	r3, [pc, #120]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092fe:	d127      	bne.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009300:	4b1a      	ldr	r3, [pc, #104]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800930c:	d120      	bne.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800930e:	4b17      	ldr	r3, [pc, #92]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	0a1b      	lsrs	r3, r3, #8
 8009314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009318:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	fb02 f203 	mul.w	r2, r2, r3
 8009322:	4b12      	ldr	r3, [pc, #72]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	091b      	lsrs	r3, r3, #4
 8009328:	f003 030f 	and.w	r3, r3, #15
 800932c:	3301      	adds	r3, #1
 800932e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009332:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009334:	4b0d      	ldr	r3, [pc, #52]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	0d5b      	lsrs	r3, r3, #21
 800933a:	f003 0303 	and.w	r3, r3, #3
 800933e:	3301      	adds	r3, #1
 8009340:	005b      	lsls	r3, r3, #1
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	fbb2 f3f3 	udiv	r3, r2, r3
 8009348:	61fb      	str	r3, [r7, #28]
          break;
 800934a:	e001      	b.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
          break;
 800934c:	bf00      	nop
 800934e:	e008      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8009350:	bf00      	nop
        break;
 8009352:	e006      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
      break;
 8009354:	bf00      	nop
 8009356:	e004      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
      break;
 8009358:	bf00      	nop
 800935a:	e002      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
      break;
 800935c:	bf00      	nop
 800935e:	e000      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
      break;
 8009360:	bf00      	nop
    }
  }

  return(frequency);
 8009362:	69fb      	ldr	r3, [r7, #28]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3720      	adds	r7, #32
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	40021000 	.word	0x40021000
 8009370:	08015da8 	.word	0x08015da8

08009374 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009382:	4b70      	ldr	r3, [pc, #448]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00e      	beq.n	80093ac <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800938e:	4b6d      	ldr	r3, [pc, #436]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f003 0203 	and.w	r2, r3, #3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	429a      	cmp	r2, r3
 800939c:	d103      	bne.n	80093a6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
       ||
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d13f      	bne.n	8009426 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	73fb      	strb	r3, [r7, #15]
 80093aa:	e03c      	b.n	8009426 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d00c      	beq.n	80093ce <RCCEx_PLLSAI1_Config+0x5a>
 80093b4:	2b03      	cmp	r3, #3
 80093b6:	d013      	beq.n	80093e0 <RCCEx_PLLSAI1_Config+0x6c>
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d120      	bne.n	80093fe <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80093bc:	4b61      	ldr	r3, [pc, #388]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 0302 	and.w	r3, r3, #2
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d11d      	bne.n	8009404 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80093cc:	e01a      	b.n	8009404 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80093ce:	4b5d      	ldr	r3, [pc, #372]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d116      	bne.n	8009408 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80093de:	e013      	b.n	8009408 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80093e0:	4b58      	ldr	r3, [pc, #352]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10f      	bne.n	800940c <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80093ec:	4b55      	ldr	r3, [pc, #340]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d109      	bne.n	800940c <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80093fc:	e006      	b.n	800940c <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	73fb      	strb	r3, [r7, #15]
      break;
 8009402:	e004      	b.n	800940e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8009404:	bf00      	nop
 8009406:	e002      	b.n	800940e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8009408:	bf00      	nop
 800940a:	e000      	b.n	800940e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800940c:	bf00      	nop
    }

    if(status == HAL_OK)
 800940e:	7bfb      	ldrb	r3, [r7, #15]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d108      	bne.n	8009426 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8009414:	4b4b      	ldr	r3, [pc, #300]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	f023 0203 	bic.w	r2, r3, #3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4948      	ldr	r1, [pc, #288]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009422:	4313      	orrs	r3, r2
 8009424:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009426:	7bfb      	ldrb	r3, [r7, #15]
 8009428:	2b00      	cmp	r3, #0
 800942a:	f040 8086 	bne.w	800953a <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800942e:	4b45      	ldr	r3, [pc, #276]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a44      	ldr	r2, [pc, #272]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009434:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800943a:	f7f9 ffa3 	bl	8003384 <HAL_GetTick>
 800943e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009440:	e009      	b.n	8009456 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009442:	f7f9 ff9f 	bl	8003384 <HAL_GetTick>
 8009446:	4602      	mov	r2, r0
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	2b02      	cmp	r3, #2
 800944e:	d902      	bls.n	8009456 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8009450:	2303      	movs	r3, #3
 8009452:	73fb      	strb	r3, [r7, #15]
        break;
 8009454:	e005      	b.n	8009462 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009456:	4b3b      	ldr	r3, [pc, #236]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1ef      	bne.n	8009442 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d168      	bne.n	800953a <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d113      	bne.n	8009496 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800946e:	4b35      	ldr	r3, [pc, #212]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009470:	691a      	ldr	r2, [r3, #16]
 8009472:	4b35      	ldr	r3, [pc, #212]	; (8009548 <RCCEx_PLLSAI1_Config+0x1d4>)
 8009474:	4013      	ands	r3, r2
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	6892      	ldr	r2, [r2, #8]
 800947a:	0211      	lsls	r1, r2, #8
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	68d2      	ldr	r2, [r2, #12]
 8009480:	06d2      	lsls	r2, r2, #27
 8009482:	4311      	orrs	r1, r2
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	6852      	ldr	r2, [r2, #4]
 8009488:	3a01      	subs	r2, #1
 800948a:	0112      	lsls	r2, r2, #4
 800948c:	430a      	orrs	r2, r1
 800948e:	492d      	ldr	r1, [pc, #180]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009490:	4313      	orrs	r3, r2
 8009492:	610b      	str	r3, [r1, #16]
 8009494:	e02d      	b.n	80094f2 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d115      	bne.n	80094c8 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800949c:	4b29      	ldr	r3, [pc, #164]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 800949e:	691a      	ldr	r2, [r3, #16]
 80094a0:	4b2a      	ldr	r3, [pc, #168]	; (800954c <RCCEx_PLLSAI1_Config+0x1d8>)
 80094a2:	4013      	ands	r3, r2
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	6892      	ldr	r2, [r2, #8]
 80094a8:	0211      	lsls	r1, r2, #8
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	6912      	ldr	r2, [r2, #16]
 80094ae:	0852      	lsrs	r2, r2, #1
 80094b0:	3a01      	subs	r2, #1
 80094b2:	0552      	lsls	r2, r2, #21
 80094b4:	4311      	orrs	r1, r2
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	6852      	ldr	r2, [r2, #4]
 80094ba:	3a01      	subs	r2, #1
 80094bc:	0112      	lsls	r2, r2, #4
 80094be:	430a      	orrs	r2, r1
 80094c0:	4920      	ldr	r1, [pc, #128]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	610b      	str	r3, [r1, #16]
 80094c6:	e014      	b.n	80094f2 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80094c8:	4b1e      	ldr	r3, [pc, #120]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 80094ca:	691a      	ldr	r2, [r3, #16]
 80094cc:	4b20      	ldr	r3, [pc, #128]	; (8009550 <RCCEx_PLLSAI1_Config+0x1dc>)
 80094ce:	4013      	ands	r3, r2
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	6892      	ldr	r2, [r2, #8]
 80094d4:	0211      	lsls	r1, r2, #8
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	6952      	ldr	r2, [r2, #20]
 80094da:	0852      	lsrs	r2, r2, #1
 80094dc:	3a01      	subs	r2, #1
 80094de:	0652      	lsls	r2, r2, #25
 80094e0:	4311      	orrs	r1, r2
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	6852      	ldr	r2, [r2, #4]
 80094e6:	3a01      	subs	r2, #1
 80094e8:	0112      	lsls	r2, r2, #4
 80094ea:	430a      	orrs	r2, r1
 80094ec:	4915      	ldr	r1, [pc, #84]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80094f2:	4b14      	ldr	r3, [pc, #80]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a13      	ldr	r2, [pc, #76]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 80094f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80094fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094fe:	f7f9 ff41 	bl	8003384 <HAL_GetTick>
 8009502:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009504:	e009      	b.n	800951a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009506:	f7f9 ff3d 	bl	8003384 <HAL_GetTick>
 800950a:	4602      	mov	r2, r0
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	2b02      	cmp	r3, #2
 8009512:	d902      	bls.n	800951a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8009514:	2303      	movs	r3, #3
 8009516:	73fb      	strb	r3, [r7, #15]
          break;
 8009518:	e005      	b.n	8009526 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800951a:	4b0a      	ldr	r3, [pc, #40]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d0ef      	beq.n	8009506 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8009526:	7bfb      	ldrb	r3, [r7, #15]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d106      	bne.n	800953a <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800952c:	4b05      	ldr	r3, [pc, #20]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 800952e:	691a      	ldr	r2, [r3, #16]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	4903      	ldr	r1, [pc, #12]	; (8009544 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009536:	4313      	orrs	r3, r2
 8009538:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800953a:	7bfb      	ldrb	r3, [r7, #15]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	40021000 	.word	0x40021000
 8009548:	07ff800f 	.word	0x07ff800f
 800954c:	ff9f800f 	.word	0xff9f800f
 8009550:	f9ff800f 	.word	0xf9ff800f

08009554 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009562:	4b70      	ldr	r3, [pc, #448]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f003 0303 	and.w	r3, r3, #3
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00e      	beq.n	800958c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800956e:	4b6d      	ldr	r3, [pc, #436]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	f003 0203 	and.w	r2, r3, #3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	429a      	cmp	r2, r3
 800957c:	d103      	bne.n	8009586 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
       ||
 8009582:	2b00      	cmp	r3, #0
 8009584:	d13f      	bne.n	8009606 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	73fb      	strb	r3, [r7, #15]
 800958a:	e03c      	b.n	8009606 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b02      	cmp	r3, #2
 8009592:	d00c      	beq.n	80095ae <RCCEx_PLLSAI2_Config+0x5a>
 8009594:	2b03      	cmp	r3, #3
 8009596:	d013      	beq.n	80095c0 <RCCEx_PLLSAI2_Config+0x6c>
 8009598:	2b01      	cmp	r3, #1
 800959a:	d120      	bne.n	80095de <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800959c:	4b61      	ldr	r3, [pc, #388]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 0302 	and.w	r3, r3, #2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d11d      	bne.n	80095e4 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80095ac:	e01a      	b.n	80095e4 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80095ae:	4b5d      	ldr	r3, [pc, #372]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d116      	bne.n	80095e8 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80095be:	e013      	b.n	80095e8 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80095c0:	4b58      	ldr	r3, [pc, #352]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10f      	bne.n	80095ec <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80095cc:	4b55      	ldr	r3, [pc, #340]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d109      	bne.n	80095ec <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80095dc:	e006      	b.n	80095ec <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	73fb      	strb	r3, [r7, #15]
      break;
 80095e2:	e004      	b.n	80095ee <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80095e4:	bf00      	nop
 80095e6:	e002      	b.n	80095ee <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80095e8:	bf00      	nop
 80095ea:	e000      	b.n	80095ee <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80095ec:	bf00      	nop
    }

    if(status == HAL_OK)
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d108      	bne.n	8009606 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80095f4:	4b4b      	ldr	r3, [pc, #300]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	f023 0203 	bic.w	r2, r3, #3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4948      	ldr	r1, [pc, #288]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009602:	4313      	orrs	r3, r2
 8009604:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009606:	7bfb      	ldrb	r3, [r7, #15]
 8009608:	2b00      	cmp	r3, #0
 800960a:	f040 8086 	bne.w	800971a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800960e:	4b45      	ldr	r3, [pc, #276]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a44      	ldr	r2, [pc, #272]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800961a:	f7f9 feb3 	bl	8003384 <HAL_GetTick>
 800961e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009620:	e009      	b.n	8009636 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009622:	f7f9 feaf 	bl	8003384 <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	2b02      	cmp	r3, #2
 800962e:	d902      	bls.n	8009636 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	73fb      	strb	r3, [r7, #15]
        break;
 8009634:	e005      	b.n	8009642 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009636:	4b3b      	ldr	r3, [pc, #236]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1ef      	bne.n	8009622 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d168      	bne.n	800971a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d113      	bne.n	8009676 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800964e:	4b35      	ldr	r3, [pc, #212]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009650:	695a      	ldr	r2, [r3, #20]
 8009652:	4b35      	ldr	r3, [pc, #212]	; (8009728 <RCCEx_PLLSAI2_Config+0x1d4>)
 8009654:	4013      	ands	r3, r2
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	6892      	ldr	r2, [r2, #8]
 800965a:	0211      	lsls	r1, r2, #8
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	68d2      	ldr	r2, [r2, #12]
 8009660:	06d2      	lsls	r2, r2, #27
 8009662:	4311      	orrs	r1, r2
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	6852      	ldr	r2, [r2, #4]
 8009668:	3a01      	subs	r2, #1
 800966a:	0112      	lsls	r2, r2, #4
 800966c:	430a      	orrs	r2, r1
 800966e:	492d      	ldr	r1, [pc, #180]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009670:	4313      	orrs	r3, r2
 8009672:	614b      	str	r3, [r1, #20]
 8009674:	e02d      	b.n	80096d2 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d115      	bne.n	80096a8 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800967c:	4b29      	ldr	r3, [pc, #164]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 800967e:	695a      	ldr	r2, [r3, #20]
 8009680:	4b2a      	ldr	r3, [pc, #168]	; (800972c <RCCEx_PLLSAI2_Config+0x1d8>)
 8009682:	4013      	ands	r3, r2
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	6892      	ldr	r2, [r2, #8]
 8009688:	0211      	lsls	r1, r2, #8
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	6912      	ldr	r2, [r2, #16]
 800968e:	0852      	lsrs	r2, r2, #1
 8009690:	3a01      	subs	r2, #1
 8009692:	0552      	lsls	r2, r2, #21
 8009694:	4311      	orrs	r1, r2
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	6852      	ldr	r2, [r2, #4]
 800969a:	3a01      	subs	r2, #1
 800969c:	0112      	lsls	r2, r2, #4
 800969e:	430a      	orrs	r2, r1
 80096a0:	4920      	ldr	r1, [pc, #128]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 80096a2:	4313      	orrs	r3, r2
 80096a4:	614b      	str	r3, [r1, #20]
 80096a6:	e014      	b.n	80096d2 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80096a8:	4b1e      	ldr	r3, [pc, #120]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 80096aa:	695a      	ldr	r2, [r3, #20]
 80096ac:	4b20      	ldr	r3, [pc, #128]	; (8009730 <RCCEx_PLLSAI2_Config+0x1dc>)
 80096ae:	4013      	ands	r3, r2
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	6892      	ldr	r2, [r2, #8]
 80096b4:	0211      	lsls	r1, r2, #8
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	6952      	ldr	r2, [r2, #20]
 80096ba:	0852      	lsrs	r2, r2, #1
 80096bc:	3a01      	subs	r2, #1
 80096be:	0652      	lsls	r2, r2, #25
 80096c0:	4311      	orrs	r1, r2
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	6852      	ldr	r2, [r2, #4]
 80096c6:	3a01      	subs	r2, #1
 80096c8:	0112      	lsls	r2, r2, #4
 80096ca:	430a      	orrs	r2, r1
 80096cc:	4915      	ldr	r1, [pc, #84]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 80096ce:	4313      	orrs	r3, r2
 80096d0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80096d2:	4b14      	ldr	r3, [pc, #80]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a13      	ldr	r2, [pc, #76]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 80096d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096de:	f7f9 fe51 	bl	8003384 <HAL_GetTick>
 80096e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80096e4:	e009      	b.n	80096fa <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80096e6:	f7f9 fe4d 	bl	8003384 <HAL_GetTick>
 80096ea:	4602      	mov	r2, r0
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d902      	bls.n	80096fa <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80096f4:	2303      	movs	r3, #3
 80096f6:	73fb      	strb	r3, [r7, #15]
          break;
 80096f8:	e005      	b.n	8009706 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80096fa:	4b0a      	ldr	r3, [pc, #40]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d0ef      	beq.n	80096e6 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8009706:	7bfb      	ldrb	r3, [r7, #15]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d106      	bne.n	800971a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800970c:	4b05      	ldr	r3, [pc, #20]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 800970e:	695a      	ldr	r2, [r3, #20]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	4903      	ldr	r1, [pc, #12]	; (8009724 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009716:	4313      	orrs	r3, r2
 8009718:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800971a:	7bfb      	ldrb	r3, [r7, #15]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	40021000 	.word	0x40021000
 8009728:	07ff800f 	.word	0x07ff800f
 800972c:	ff9f800f 	.word	0xff9f800f
 8009730:	f9ff800f 	.word	0xf9ff800f

08009734 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8009734:	b480      	push	{r7}
 8009736:	b089      	sub	sp, #36	; 0x24
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800973e:	2300      	movs	r3, #0
 8009740:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8009746:	2300      	movs	r3, #0
 8009748:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009750:	d10b      	bne.n	800976a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009752:	4b7e      	ldr	r3, [pc, #504]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009758:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800975c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	2b60      	cmp	r3, #96	; 0x60
 8009762:	d112      	bne.n	800978a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009764:	4b7a      	ldr	r3, [pc, #488]	; (8009950 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8009766:	61fb      	str	r3, [r7, #28]
 8009768:	e00f      	b.n	800978a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009770:	d10b      	bne.n	800978a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009772:	4b76      	ldr	r3, [pc, #472]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009774:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009778:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800977c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009784:	d101      	bne.n	800978a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8009786:	4b72      	ldr	r3, [pc, #456]	; (8009950 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8009788:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	2b00      	cmp	r3, #0
 800978e:	f040 80d6 	bne.w	800993e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	2b40      	cmp	r3, #64	; 0x40
 800979a:	d003      	beq.n	80097a4 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097a2:	d13b      	bne.n	800981c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80097a4:	4b69      	ldr	r3, [pc, #420]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097b0:	f040 80c4 	bne.w	800993c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80097b4:	4b65      	ldr	r3, [pc, #404]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f000 80bd 	beq.w	800993c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80097c2:	4b62      	ldr	r3, [pc, #392]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	091b      	lsrs	r3, r3, #4
 80097c8:	f003 030f 	and.w	r3, r3, #15
 80097cc:	3301      	adds	r3, #1
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097d4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80097d6:	4b5d      	ldr	r3, [pc, #372]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	0a1b      	lsrs	r3, r3, #8
 80097dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097e0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80097e2:	4b5a      	ldr	r3, [pc, #360]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	0edb      	lsrs	r3, r3, #27
 80097e8:	f003 031f 	and.w	r3, r3, #31
 80097ec:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10a      	bne.n	800980a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80097f4:	4b55      	ldr	r3, [pc, #340]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d002      	beq.n	8009806 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8009800:	2311      	movs	r3, #17
 8009802:	617b      	str	r3, [r7, #20]
 8009804:	e001      	b.n	800980a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8009806:	2307      	movs	r3, #7
 8009808:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	fb02 f203 	mul.w	r2, r2, r3
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	fbb2 f3f3 	udiv	r3, r2, r3
 8009818:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800981a:	e08f      	b.n	800993c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d13a      	bne.n	8009898 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8009822:	4b4a      	ldr	r3, [pc, #296]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800982a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800982e:	f040 8086 	bne.w	800993e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8009832:	4b46      	ldr	r3, [pc, #280]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800983a:	2b00      	cmp	r3, #0
 800983c:	d07f      	beq.n	800993e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800983e:	4b43      	ldr	r3, [pc, #268]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	091b      	lsrs	r3, r3, #4
 8009844:	f003 030f 	and.w	r3, r3, #15
 8009848:	3301      	adds	r3, #1
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009850:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009852:	4b3e      	ldr	r3, [pc, #248]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	0a1b      	lsrs	r3, r3, #8
 8009858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800985c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800985e:	4b3b      	ldr	r3, [pc, #236]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	0edb      	lsrs	r3, r3, #27
 8009864:	f003 031f 	and.w	r3, r3, #31
 8009868:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10a      	bne.n	8009886 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8009870:	4b36      	ldr	r3, [pc, #216]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d002      	beq.n	8009882 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800987c:	2311      	movs	r3, #17
 800987e:	617b      	str	r3, [r7, #20]
 8009880:	e001      	b.n	8009886 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8009882:	2307      	movs	r3, #7
 8009884:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	fb02 f203 	mul.w	r2, r2, r3
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	fbb2 f3f3 	udiv	r3, r2, r3
 8009894:	61fb      	str	r3, [r7, #28]
 8009896:	e052      	b.n	800993e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	2b80      	cmp	r3, #128	; 0x80
 800989c:	d003      	beq.n	80098a6 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098a4:	d109      	bne.n	80098ba <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098a6:	4b29      	ldr	r3, [pc, #164]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098b2:	d144      	bne.n	800993e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80098b4:	4b27      	ldr	r3, [pc, #156]	; (8009954 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80098b6:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098b8:	e041      	b.n	800993e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	2b20      	cmp	r3, #32
 80098be:	d003      	beq.n	80098c8 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098c6:	d13a      	bne.n	800993e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80098c8:	4b20      	ldr	r3, [pc, #128]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098d4:	d133      	bne.n	800993e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80098d6:	4b1d      	ldr	r3, [pc, #116]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d02d      	beq.n	800993e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80098e2:	4b1a      	ldr	r3, [pc, #104]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	091b      	lsrs	r3, r3, #4
 80098e8:	f003 030f 	and.w	r3, r3, #15
 80098ec:	3301      	adds	r3, #1
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098f4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80098f6:	4b15      	ldr	r3, [pc, #84]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	0a1b      	lsrs	r3, r3, #8
 80098fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009900:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8009902:	4b12      	ldr	r3, [pc, #72]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	0edb      	lsrs	r3, r3, #27
 8009908:	f003 031f 	and.w	r3, r3, #31
 800990c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10a      	bne.n	800992a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8009914:	4b0d      	ldr	r3, [pc, #52]	; (800994c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009916:	695b      	ldr	r3, [r3, #20]
 8009918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8009920:	2311      	movs	r3, #17
 8009922:	617b      	str	r3, [r7, #20]
 8009924:	e001      	b.n	800992a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8009926:	2307      	movs	r3, #7
 8009928:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	fb02 f203 	mul.w	r2, r2, r3
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	fbb2 f3f3 	udiv	r3, r2, r3
 8009938:	61fb      	str	r3, [r7, #28]
 800993a:	e000      	b.n	800993e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800993c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800993e:	69fb      	ldr	r3, [r7, #28]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3724      	adds	r7, #36	; 0x24
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	40021000 	.word	0x40021000
 8009950:	001fff68 	.word	0x001fff68
 8009954:	00f42400 	.word	0x00f42400

08009958 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d06c      	beq.n	8009a44 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d106      	bne.n	8009984 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f7f9 f8a0 	bl	8002ac4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	22ca      	movs	r2, #202	; 0xca
 8009992:	625a      	str	r2, [r3, #36]	; 0x24
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2253      	movs	r2, #83	; 0x53
 800999a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f87c 	bl	8009a9a <RTC_EnterInitMode>
 80099a2:	4603      	mov	r3, r0
 80099a4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80099a6:	7bfb      	ldrb	r3, [r7, #15]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d14b      	bne.n	8009a44 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	6812      	ldr	r2, [r2, #0]
 80099b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80099ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099be:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6899      	ldr	r1, [r3, #8]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685a      	ldr	r2, [r3, #4]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	431a      	orrs	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	431a      	orrs	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	430a      	orrs	r2, r1
 80099dc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	68d2      	ldr	r2, [r2, #12]
 80099e6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6919      	ldr	r1, [r3, #16]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	041a      	lsls	r2, r3, #16
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	430a      	orrs	r2, r1
 80099fa:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f87f 	bl	8009b00 <RTC_ExitInitMode>
 8009a02:	4603      	mov	r3, r0
 8009a04:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d11b      	bne.n	8009a44 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f022 0203 	bic.w	r2, r2, #3
 8009a1a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	69da      	ldr	r2, [r3, #28]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	430a      	orrs	r2, r1
 8009a32:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	22ff      	movs	r2, #255	; 0xff
 8009a3a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68da      	ldr	r2, [r3, #12]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009a64:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009a66:	f7f9 fc8d 	bl	8003384 <HAL_GetTick>
 8009a6a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009a6c:	e009      	b.n	8009a82 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009a6e:	f7f9 fc89 	bl	8003384 <HAL_GetTick>
 8009a72:	4602      	mov	r2, r0
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a7c:	d901      	bls.n	8009a82 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	e007      	b.n	8009a92 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f003 0320 	and.w	r3, r3, #32
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d0ee      	beq.n	8009a6e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d120      	bne.n	8009af6 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8009abc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009abe:	f7f9 fc61 	bl	8003384 <HAL_GetTick>
 8009ac2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009ac4:	e00d      	b.n	8009ae2 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009ac6:	f7f9 fc5d 	bl	8003384 <HAL_GetTick>
 8009aca:	4602      	mov	r2, r0
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ad4:	d905      	bls.n	8009ae2 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2203      	movs	r2, #3
 8009ade:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d102      	bne.n	8009af6 <RTC_EnterInitMode+0x5c>
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
 8009af2:	2b03      	cmp	r3, #3
 8009af4:	d1e7      	bne.n	8009ac6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009b0c:	4b1a      	ldr	r3, [pc, #104]	; (8009b78 <RTC_ExitInitMode+0x78>)
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	4a19      	ldr	r2, [pc, #100]	; (8009b78 <RTC_ExitInitMode+0x78>)
 8009b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b16:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009b18:	4b17      	ldr	r3, [pc, #92]	; (8009b78 <RTC_ExitInitMode+0x78>)
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	f003 0320 	and.w	r3, r3, #32
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10c      	bne.n	8009b3e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f7ff ff92 	bl	8009a4e <HAL_RTC_WaitForSynchro>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d01e      	beq.n	8009b6e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2203      	movs	r2, #3
 8009b34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	73fb      	strb	r3, [r7, #15]
 8009b3c:	e017      	b.n	8009b6e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009b3e:	4b0e      	ldr	r3, [pc, #56]	; (8009b78 <RTC_ExitInitMode+0x78>)
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	4a0d      	ldr	r2, [pc, #52]	; (8009b78 <RTC_ExitInitMode+0x78>)
 8009b44:	f023 0320 	bic.w	r3, r3, #32
 8009b48:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7ff ff7f 	bl	8009a4e <HAL_RTC_WaitForSynchro>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d005      	beq.n	8009b62 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2203      	movs	r2, #3
 8009b5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009b62:	4b05      	ldr	r3, [pc, #20]	; (8009b78 <RTC_ExitInitMode+0x78>)
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	4a04      	ldr	r2, [pc, #16]	; (8009b78 <RTC_ExitInitMode+0x78>)
 8009b68:	f043 0320 	orr.w	r3, r3, #32
 8009b6c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	40002800 	.word	0x40002800

08009b7c <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d101      	bne.n	8009b94 <HAL_RTCEx_SetTamper+0x18>
 8009b90:	2302      	movs	r3, #2
 8009b92:	e0a9      	b.n	8009ce8 <HAL_RTCEx_SetTamper+0x16c>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2202      	movs	r2, #2
 8009ba0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Read register */
  tmpreg = hrtc->Instance->TAMPCR;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009baa:	60fb      	str	r3, [r7, #12]

#if defined(RTC_TAMPER1_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_1) != 0)
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 0301 	and.w	r3, r3, #1
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d021      	beq.n	8009bfc <HAL_RTCEx_SetTamper+0x80>
  {
    MODIFY_REG(tmpreg,
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f023 1207 	bic.w	r2, r3, #458759	; 0x70007
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6889      	ldr	r1, [r1, #8]
 8009bc6:	2900      	cmp	r1, #0
 8009bc8:	d101      	bne.n	8009bce <HAL_RTCEx_SetTamper+0x52>
 8009bca:	2100      	movs	r1, #0
 8009bcc:	e000      	b.n	8009bd0 <HAL_RTCEx_SetTamper+0x54>
 8009bce:	2102      	movs	r1, #2
 8009bd0:	430b      	orrs	r3, r1
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	68c9      	ldr	r1, [r1, #12]
 8009bd6:	2900      	cmp	r1, #0
 8009bd8:	d101      	bne.n	8009bde <HAL_RTCEx_SetTamper+0x62>
 8009bda:	2100      	movs	r1, #0
 8009bdc:	e001      	b.n	8009be2 <HAL_RTCEx_SetTamper+0x66>
 8009bde:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8009be2:	430b      	orrs	r3, r1
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	6909      	ldr	r1, [r1, #16]
 8009be8:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8009bec:	d102      	bne.n	8009bf4 <HAL_RTCEx_SetTamper+0x78>
 8009bee:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009bf2:	e000      	b.n	8009bf6 <HAL_RTCEx_SetTamper+0x7a>
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	430b      	orrs	r3, r1
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER1_SUPPORT */

#if defined(RTC_TAMPER2_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_2) != 0)
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 0308 	and.w	r3, r3, #8
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d023      	beq.n	8009c50 <HAL_RTCEx_SetTamper+0xd4>
  {
    MODIFY_REG(tmpreg,
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8009c0e:	f023 031c 	bic.w	r3, r3, #28
 8009c12:	683a      	ldr	r2, [r7, #0]
 8009c14:	6812      	ldr	r2, [r2, #0]
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6889      	ldr	r1, [r1, #8]
 8009c1a:	2900      	cmp	r1, #0
 8009c1c:	d101      	bne.n	8009c22 <HAL_RTCEx_SetTamper+0xa6>
 8009c1e:	2100      	movs	r1, #0
 8009c20:	e000      	b.n	8009c24 <HAL_RTCEx_SetTamper+0xa8>
 8009c22:	2110      	movs	r1, #16
 8009c24:	430a      	orrs	r2, r1
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	68c9      	ldr	r1, [r1, #12]
 8009c2a:	2900      	cmp	r1, #0
 8009c2c:	d101      	bne.n	8009c32 <HAL_RTCEx_SetTamper+0xb6>
 8009c2e:	2100      	movs	r1, #0
 8009c30:	e001      	b.n	8009c36 <HAL_RTCEx_SetTamper+0xba>
 8009c32:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8009c36:	430a      	orrs	r2, r1
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6909      	ldr	r1, [r1, #16]
 8009c3c:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8009c40:	d102      	bne.n	8009c48 <HAL_RTCEx_SetTamper+0xcc>
 8009c42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c46:	e000      	b.n	8009c4a <HAL_RTCEx_SetTamper+0xce>
 8009c48:	2100      	movs	r1, #0
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER2_SUPPORT */

#if defined(RTC_TAMPER3_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_3) != 0)
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0320 	and.w	r3, r3, #32
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d023      	beq.n	8009ca4 <HAL_RTCEx_SetTamper+0x128>
  {
    MODIFY_REG(tmpreg,
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8009c62:	f023 0364 	bic.w	r3, r3, #100	; 0x64
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	6812      	ldr	r2, [r2, #0]
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6889      	ldr	r1, [r1, #8]
 8009c6e:	2900      	cmp	r1, #0
 8009c70:	d101      	bne.n	8009c76 <HAL_RTCEx_SetTamper+0xfa>
 8009c72:	2100      	movs	r1, #0
 8009c74:	e000      	b.n	8009c78 <HAL_RTCEx_SetTamper+0xfc>
 8009c76:	2140      	movs	r1, #64	; 0x40
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	68c9      	ldr	r1, [r1, #12]
 8009c7e:	2900      	cmp	r1, #0
 8009c80:	d101      	bne.n	8009c86 <HAL_RTCEx_SetTamper+0x10a>
 8009c82:	2100      	movs	r1, #0
 8009c84:	e001      	b.n	8009c8a <HAL_RTCEx_SetTamper+0x10e>
 8009c86:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8009c8a:	430a      	orrs	r2, r1
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6909      	ldr	r1, [r1, #16]
 8009c90:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8009c94:	d102      	bne.n	8009c9c <HAL_RTCEx_SetTamper+0x120>
 8009c96:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8009c9a:	e000      	b.n	8009c9e <HAL_RTCEx_SetTamper+0x122>
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER3_SUPPORT */

  /* Update common parameters */
  MODIFY_REG(tmpreg,
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	6951      	ldr	r1, [r2, #20]
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	6992      	ldr	r2, [r2, #24]
 8009cb6:	4311      	orrs	r1, r2
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	69d2      	ldr	r2, [r2, #28]
 8009cbc:	4311      	orrs	r1, r2
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	6a12      	ldr	r2, [r2, #32]
 8009cc2:	4311      	orrs	r1, r2
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	60fb      	str	r3, [r7, #12]
             sTamper->Filter | sTamper->SamplingFrequency | sTamper->PrechargeDuration | sTamper->TamperPullUp | \
             sTamper->TimeStampOnTamperDetection \
             );

  /* Set register */
  WRITE_REG (hrtc->Instance->TAMPCR, tmpreg);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3714      	adds	r7, #20
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b08a      	sub	sp, #40	; 0x28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e1c5      	b.n	800a092 <HAL_SAI_Init+0x39e>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d10e      	bne.n	8009d2e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a80      	ldr	r2, [pc, #512]	; (8009f18 <HAL_SAI_Init+0x224>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d107      	bne.n	8009d2a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d103      	bne.n	8009d2a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e1b1      	b.n	800a092 <HAL_SAI_Init+0x39e>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d106      	bne.n	8009d48 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7f9 f8f0 	bl	8002f28 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f9af 	bl	800a0ac <SAI_Disable>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d001      	beq.n	8009d58 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e19c      	b.n	800a092 <HAL_SAI_Init+0x39e>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d007      	beq.n	8009d78 <HAL_SAI_Init+0x84>
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d302      	bcc.n	8009d72 <HAL_SAI_Init+0x7e>
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d006      	beq.n	8009d7e <HAL_SAI_Init+0x8a>
 8009d70:	e008      	b.n	8009d84 <HAL_SAI_Init+0x90>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009d72:	2300      	movs	r3, #0
 8009d74:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009d76:	e008      	b.n	8009d8a <HAL_SAI_Init+0x96>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009d78:	2310      	movs	r3, #16
 8009d7a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009d7c:	e005      	b.n	8009d8a <HAL_SAI_Init+0x96>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009d7e:	2320      	movs	r3, #32
 8009d80:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009d82:	e002      	b.n	8009d8a <HAL_SAI_Init+0x96>
    default :
      tmpregisterGCR = 0;
 8009d84:	2300      	movs	r3, #0
 8009d86:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009d88:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	2b03      	cmp	r3, #3
 8009d90:	d81d      	bhi.n	8009dce <HAL_SAI_Init+0xda>
 8009d92:	a201      	add	r2, pc, #4	; (adr r2, 8009d98 <HAL_SAI_Init+0xa4>)
 8009d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d98:	08009da9 	.word	0x08009da9
 8009d9c:	08009daf 	.word	0x08009daf
 8009da0:	08009db7 	.word	0x08009db7
 8009da4:	08009dbf 	.word	0x08009dbf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	61fb      	str	r3, [r7, #28]
      break;
 8009dac:	e012      	b.n	8009dd4 <HAL_SAI_Init+0xe0>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009db2:	61fb      	str	r3, [r7, #28]
      break;
 8009db4:	e00e      	b.n	8009dd4 <HAL_SAI_Init+0xe0>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009db6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dba:	61fb      	str	r3, [r7, #28]
      break;
 8009dbc:	e00a      	b.n	8009dd4 <HAL_SAI_Init+0xe0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009dbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dc2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	f043 0301 	orr.w	r3, r3, #1
 8009dca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009dcc:	e002      	b.n	8009dd4 <HAL_SAI_Init+0xe0>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	61fb      	str	r3, [r7, #28]
      break;
 8009dd2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a4f      	ldr	r2, [pc, #316]	; (8009f18 <HAL_SAI_Init+0x224>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d004      	beq.n	8009de8 <HAL_SAI_Init+0xf4>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a4e      	ldr	r2, [pc, #312]	; (8009f1c <HAL_SAI_Init+0x228>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d103      	bne.n	8009df0 <HAL_SAI_Init+0xfc>
  {
    SAI1->GCR = tmpregisterGCR;
 8009de8:	4a4d      	ldr	r2, [pc, #308]	; (8009f20 <HAL_SAI_Init+0x22c>)
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	6013      	str	r3, [r2, #0]
 8009dee:	e002      	b.n	8009df6 <HAL_SAI_Init+0x102>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009df0:	4a4c      	ldr	r2, [pc, #304]	; (8009f24 <HAL_SAI_Init+0x230>)
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	69db      	ldr	r3, [r3, #28]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d073      	beq.n	8009ee6 <HAL_SAI_Init+0x1f2>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a45      	ldr	r2, [pc, #276]	; (8009f18 <HAL_SAI_Init+0x224>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d004      	beq.n	8009e12 <HAL_SAI_Init+0x11e>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a43      	ldr	r2, [pc, #268]	; (8009f1c <HAL_SAI_Init+0x228>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d105      	bne.n	8009e1e <HAL_SAI_Init+0x12a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009e12:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009e16:	f7fe fc97 	bl	8008748 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e1a:	61b8      	str	r0, [r7, #24]
 8009e1c:	e004      	b.n	8009e28 <HAL_SAI_Init+0x134>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009e1e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009e22:	f7fe fc91 	bl	8008748 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e26:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	695b      	ldr	r3, [r3, #20]
 8009e2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009e30:	d120      	bne.n	8009e74 <HAL_SAI_Init+0x180>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e36:	2b04      	cmp	r3, #4
 8009e38:	d102      	bne.n	8009e40 <HAL_SAI_Init+0x14c>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8009e3a:	2340      	movs	r3, #64	; 0x40
 8009e3c:	613b      	str	r3, [r7, #16]
 8009e3e:	e00a      	b.n	8009e56 <HAL_SAI_Init+0x162>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e44:	2b08      	cmp	r3, #8
 8009e46:	d103      	bne.n	8009e50 <HAL_SAI_Init+0x15c>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8009e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e4c:	613b      	str	r3, [r7, #16]
 8009e4e:	e002      	b.n	8009e56 <HAL_SAI_Init+0x162>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e54:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009e56:	69ba      	ldr	r2, [r7, #24]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	005b      	lsls	r3, r3, #1
 8009e60:	4619      	mov	r1, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	69db      	ldr	r3, [r3, #28]
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	fb02 f303 	mul.w	r3, r2, r3
 8009e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e70:	617b      	str	r3, [r7, #20]
 8009e72:	e017      	b.n	8009ea4 <HAL_SAI_Init+0x1b0>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e7c:	d101      	bne.n	8009e82 <HAL_SAI_Init+0x18e>
 8009e7e:	2302      	movs	r3, #2
 8009e80:	e000      	b.n	8009e84 <HAL_SAI_Init+0x190>
 8009e82:	2301      	movs	r3, #1
 8009e84:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009e86:	69ba      	ldr	r2, [r7, #24]
 8009e88:	4613      	mov	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	005b      	lsls	r3, r3, #1
 8009e90:	4619      	mov	r1, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	69db      	ldr	r3, [r3, #28]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	fb02 f303 	mul.w	r3, r2, r3
 8009e9c:	021b      	lsls	r3, r3, #8
 8009e9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009ea2:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	4a20      	ldr	r2, [pc, #128]	; (8009f28 <HAL_SAI_Init+0x234>)
 8009ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8009eac:	08da      	lsrs	r2, r3, #3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009eb2:	6979      	ldr	r1, [r7, #20]
 8009eb4:	4b1c      	ldr	r3, [pc, #112]	; (8009f28 <HAL_SAI_Init+0x234>)
 8009eb6:	fba3 2301 	umull	r2, r3, r3, r1
 8009eba:	08da      	lsrs	r2, r3, #3
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	1aca      	subs	r2, r1, r3
 8009ec6:	2a08      	cmp	r2, #8
 8009ec8:	d904      	bls.n	8009ed4 <HAL_SAI_Init+0x1e0>
    {
      hsai->Init.Mckdiv += 1U;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a1b      	ldr	r3, [r3, #32]
 8009ece:	1c5a      	adds	r2, r3, #1
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed8:	2b04      	cmp	r3, #4
 8009eda:	d104      	bne.n	8009ee6 <HAL_SAI_Init+0x1f2>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a1b      	ldr	r3, [r3, #32]
 8009ee0:	085a      	lsrs	r2, r3, #1
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d003      	beq.n	8009ef6 <HAL_SAI_Init+0x202>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d109      	bne.n	8009f0a <HAL_SAI_Init+0x216>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d101      	bne.n	8009f02 <HAL_SAI_Init+0x20e>
 8009efe:	2300      	movs	r3, #0
 8009f00:	e001      	b.n	8009f06 <HAL_SAI_Init+0x212>
 8009f02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f06:	623b      	str	r3, [r7, #32]
 8009f08:	e012      	b.n	8009f30 <HAL_SAI_Init+0x23c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d10c      	bne.n	8009f2c <HAL_SAI_Init+0x238>
 8009f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f16:	e00a      	b.n	8009f2e <HAL_SAI_Init+0x23a>
 8009f18:	40015404 	.word	0x40015404
 8009f1c:	40015424 	.word	0x40015424
 8009f20:	40015400 	.word	0x40015400
 8009f24:	40015800 	.word	0x40015800
 8009f28:	cccccccd 	.word	0xcccccccd
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	6819      	ldr	r1, [r3, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	4b58      	ldr	r3, [pc, #352]	; (800a09c <HAL_SAI_Init+0x3a8>)
 8009f3c:	400b      	ands	r3, r1
 8009f3e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6819      	ldr	r1, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	685a      	ldr	r2, [r3, #4]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009f54:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	6a3b      	ldr	r3, [r7, #32]
 8009f5e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8009f68:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	691b      	ldr	r3, [r3, #16]
 8009f6e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009f74:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	051b      	lsls	r3, r3, #20
 8009f7c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009f82:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	430a      	orrs	r2, r1
 8009f8a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	6812      	ldr	r2, [r2, #0]
 8009f96:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009f9a:	f023 030f 	bic.w	r3, r3, #15
 8009f9e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6859      	ldr	r1, [r3, #4]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	699a      	ldr	r2, [r3, #24]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fae:	431a      	orrs	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb4:	431a      	orrs	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	6899      	ldr	r1, [r3, #8]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	4b35      	ldr	r3, [pc, #212]	; (800a0a0 <HAL_SAI_Init+0x3ac>)
 8009fca:	400b      	ands	r3, r1
 8009fcc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	6899      	ldr	r1, [r3, #8]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fd8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009fde:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8009fe4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 8009fea:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009ff4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68d9      	ldr	r1, [r3, #12]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a00c:	400b      	ands	r3, r1
 800a00e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68d9      	ldr	r1, [r3, #12]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a01e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a024:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a026:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a02c:	3b01      	subs	r3, #1
 800a02e:	021b      	lsls	r3, r3, #8
 800a030:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	430a      	orrs	r2, r1
 800a038:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a19      	ldr	r2, [pc, #100]	; (800a0a4 <HAL_SAI_Init+0x3b0>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d119      	bne.n	800a078 <HAL_SAI_Init+0x384>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a044:	4b18      	ldr	r3, [pc, #96]	; (800a0a8 <HAL_SAI_Init+0x3b4>)
 800a046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a048:	4a17      	ldr	r2, [pc, #92]	; (800a0a8 <HAL_SAI_Init+0x3b4>)
 800a04a:	f023 0301 	bic.w	r3, r3, #1
 800a04e:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a056:	2b01      	cmp	r3, #1
 800a058:	d10e      	bne.n	800a078 <HAL_SAI_Init+0x384>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a062:	3b01      	subs	r3, #1
 800a064:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a066:	4910      	ldr	r1, [pc, #64]	; (800a0a8 <HAL_SAI_Init+0x3b4>)
 800a068:	4313      	orrs	r3, r2
 800a06a:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800a06c:	4b0e      	ldr	r3, [pc, #56]	; (800a0a8 <HAL_SAI_Init+0x3b4>)
 800a06e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a070:	4a0d      	ldr	r2, [pc, #52]	; (800a0a8 <HAL_SAI_Init+0x3b4>)
 800a072:	f043 0301 	orr.w	r3, r3, #1
 800a076:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3728      	adds	r7, #40	; 0x28
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	f805c010 	.word	0xf805c010
 800a0a0:	fff88000 	.word	0xfff88000
 800a0a4:	40015404 	.word	0x40015404
 800a0a8:	40015400 	.word	0x40015400

0800a0ac <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a0b4:	4b18      	ldr	r3, [pc, #96]	; (800a118 <SAI_Disable+0x6c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a18      	ldr	r2, [pc, #96]	; (800a11c <SAI_Disable+0x70>)
 800a0ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a0be:	0b1b      	lsrs	r3, r3, #12
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a0d6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10a      	bne.n	800a0f4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	72fb      	strb	r3, [r7, #11]
      break;
 800a0f2:	e009      	b.n	800a108 <SAI_Disable+0x5c>
    }
    count--;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e7      	bne.n	800a0d8 <SAI_Disable+0x2c>

  return status;
 800a108:	7afb      	ldrb	r3, [r7, #11]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	20000000 	.word	0x20000000
 800a11c:	95cbec1b 	.word	0x95cbec1b

0800a120 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d101      	bne.n	800a132 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e0aa      	b.n	800a288 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a136:	2b00      	cmp	r3, #0
 800a138:	d106      	bne.n	800a148 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7f8 fbd0 	bl	80028e8 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2202      	movs	r2, #2
 800a14c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f022 0201 	bic.w	r2, r2, #1
 800a15c:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a16a:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	695a      	ldr	r2, [r3, #20]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a17a:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	695a      	ldr	r2, [r3, #20]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800a18a:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a194:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	689a      	ldr	r2, [r3, #8]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a1a4:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d012      	beq.n	800a1d4 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d107      	bne.n	800a1c6 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68da      	ldr	r2, [r3, #12]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1c2:	609a      	str	r2, [r3, #8]
 800a1c4:	e006      	b.n	800a1d4 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68da      	ldr	r2, [r3, #12]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a1d2:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d104      	bne.n	800a1e6 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	6812      	ldr	r2, [r2, #0]
 800a1f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a1f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | (hsmbus->Init.OwnAddress2Masks << 8U));
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	695a      	ldr	r2, [r3, #20]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	ea42 0103 	orr.w	r1, r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	021a      	lsls	r2, r3, #8
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	430a      	orrs	r2, r1
 800a212:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | hsmbus->Init.AnalogFilter);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a1a      	ldr	r2, [r3, #32]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21c:	431a      	orrs	r2, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a222:	431a      	orrs	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a228:	ea42 0103 	orr.w	r1, r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	430a      	orrs	r2, r1
 800a236:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a240:	d110      	bne.n	800a264 <HAL_SMBUS_Init+0x144>
      && ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a246:	2b00      	cmp	r3, #0
 800a248:	d004      	beq.n	800a254 <HAL_SMBUS_Init+0x134>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a252:	d107      	bne.n	800a264 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a262:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f042 0201 	orr.w	r2, r2, #1
 800a272:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2201      	movs	r2, #1
 800a27e:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800a2a6:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a2b0:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 800a2b2:	2180      	movs	r1, #128	; 0x80
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 fcc3 	bl	800ac40 <SMBUS_Enable_IRQ>

  return HAL_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <HAL_SMBUS_EV_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_EV_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Use a local variable to store the current ISR flags */
  /* This action will avoid a wrong treatment due to ISR flags change during interrupt handler */
  uint32_t tmpisrvalue = READ_REG(hsmbus->Instance->ISR);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr1value = READ_REG(hsmbus->Instance->CR1);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60bb      	str	r3, [r7, #8]

  /* SMBUS in mode Transmitter ---------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	f003 0372 	and.w	r3, r3, #114	; 0x72
 800a2e2:	2b72      	cmp	r3, #114	; 0x72
 800a2e4:	d132      	bne.n	800a34c <HAL_SMBUS_EV_IRQHandler+0x88>
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	085b      	lsrs	r3, r3, #1
 800a2ea:	f003 0301 	and.w	r3, r3, #1
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d117      	bne.n	800a322 <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	09db      	lsrs	r3, r3, #7
 800a2f6:	f003 0301 	and.w	r3, r3, #1
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d111      	bne.n	800a322 <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	099b      	lsrs	r3, r3, #6
 800a302:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10b      	bne.n	800a322 <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	095b      	lsrs	r3, r3, #5
 800a30e:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 800a312:	2b00      	cmp	r3, #0
 800a314:	d105      	bne.n	800a322 <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	091b      	lsrs	r3, r3, #4
 800a31a:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d014      	beq.n	800a34c <HAL_SMBUS_EV_IRQHandler+0x88>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a326:	f003 0332 	and.w	r3, r3, #50	; 0x32
 800a32a:	2b32      	cmp	r3, #50	; 0x32
 800a32c:	d104      	bne.n	800a338 <HAL_SMBUS_EV_IRQHandler+0x74>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 800a32e:	68f9      	ldr	r1, [r7, #12]
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 faa5 	bl	800a880 <SMBUS_Slave_ISR>
 800a336:	e009      	b.n	800a34c <HAL_SMBUS_EV_IRQHandler+0x88>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_TX) == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a33c:	f003 0312 	and.w	r3, r3, #18
 800a340:	2b12      	cmp	r3, #18
 800a342:	d103      	bne.n	800a34c <HAL_SMBUS_EV_IRQHandler+0x88>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 800a344:	68f9      	ldr	r1, [r7, #12]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f8c0 	bl	800a4cc <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Receiver ----------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	f003 0374 	and.w	r3, r3, #116	; 0x74
 800a352:	2b74      	cmp	r3, #116	; 0x74
 800a354:	d132      	bne.n	800a3bc <HAL_SMBUS_EV_IRQHandler+0xf8>
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	089b      	lsrs	r3, r3, #2
 800a35a:	f003 0301 	and.w	r3, r3, #1
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d117      	bne.n	800a392 <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	09db      	lsrs	r3, r3, #7
 800a366:	f003 0301 	and.w	r3, r3, #1
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d111      	bne.n	800a392 <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	099b      	lsrs	r3, r3, #6
 800a372:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10b      	bne.n	800a392 <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	095b      	lsrs	r3, r3, #5
 800a37e:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 800a382:	2b00      	cmp	r3, #0
 800a384:	d105      	bne.n	800a392 <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	091b      	lsrs	r3, r3, #4
 800a38a:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d014      	beq.n	800a3bc <HAL_SMBUS_EV_IRQHandler+0xf8>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a396:	f003 0342 	and.w	r3, r3, #66	; 0x42
 800a39a:	2b42      	cmp	r3, #66	; 0x42
 800a39c:	d104      	bne.n	800a3a8 <HAL_SMBUS_EV_IRQHandler+0xe4>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 800a39e:	68f9      	ldr	r1, [r7, #12]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 fa6d 	bl	800a880 <SMBUS_Slave_ISR>
 800a3a6:	e009      	b.n	800a3bc <HAL_SMBUS_EV_IRQHandler+0xf8>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_RX) == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3ac:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800a3b0:	2b22      	cmp	r3, #34	; 0x22
 800a3b2:	d103      	bne.n	800a3bc <HAL_SMBUS_EV_IRQHandler+0xf8>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 800a3b4:	68f9      	ldr	r1, [r7, #12]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f888 	bl	800a4cc <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Listener Only --------------------------------------------------*/
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	08db      	lsrs	r3, r3, #3
 800a3c0:	f003 0301 	and.w	r3, r3, #1
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10b      	bne.n	800a3e0 <HAL_SMBUS_EV_IRQHandler+0x11c>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	095b      	lsrs	r3, r3, #5
 800a3cc:	f003 0301 	and.w	r3, r3, #1
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d105      	bne.n	800a3e0 <HAL_SMBUS_EV_IRQHandler+0x11c>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	091b      	lsrs	r3, r3, #4
 800a3d8:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d01b      	beq.n	800a418 <HAL_SMBUS_EV_IRQHandler+0x154>
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	08db      	lsrs	r3, r3, #3
 800a3e4:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10b      	bne.n	800a404 <HAL_SMBUS_EV_IRQHandler+0x140>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	095b      	lsrs	r3, r3, #5
 800a3f0:	f003 0301 	and.w	r3, r3, #1
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d105      	bne.n	800a404 <HAL_SMBUS_EV_IRQHandler+0x140>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	091b      	lsrs	r3, r3, #4
 800a3fc:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800a400:	2b00      	cmp	r3, #0
 800a402:	d009      	beq.n	800a418 <HAL_SMBUS_EV_IRQHandler+0x154>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a408:	f003 0308 	and.w	r3, r3, #8
 800a40c:	2b08      	cmp	r3, #8
 800a40e:	d103      	bne.n	800a418 <HAL_SMBUS_EV_IRQHandler+0x154>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 800a410:	68f9      	ldr	r1, [r7, #12]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 fa34 	bl	800a880 <SMBUS_Slave_ISR>
    }
  }
}
 800a418:	bf00      	nop
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <HAL_SMBUS_ER_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_ER_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  SMBUS_ITErrorHandler(hsmbus);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fcbf 	bl	800adac <SMBUS_ITErrorHandler>
}
 800a42e:	bf00      	nop
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <HAL_SMBUS_MasterTxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_MasterTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800a436:	b480      	push	{r7}
 800a438:	b083      	sub	sp, #12
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_MasterTxCpltCallback() could be implemented in the user file
   */
}
 800a43e:	bf00      	nop
 800a440:	370c      	adds	r7, #12
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <HAL_SMBUS_MasterRxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_MasterRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b083      	sub	sp, #12
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_MasterRxCpltCallback() could be implemented in the user file
   */
}
 800a452:	bf00      	nop
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <HAL_SMBUS_SlaveTxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_SlaveTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800a45e:	b480      	push	{r7}
 800a460:	b083      	sub	sp, #12
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_SlaveTxCpltCallback() could be implemented in the user file
   */
}
 800a466:	bf00      	nop
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr

0800a472 <HAL_SMBUS_SlaveRxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_SlaveRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800a472:	b480      	push	{r7}
 800a474:	b083      	sub	sp, #12
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_SlaveRxCpltCallback() could be implemented in the user file
   */
}
 800a47a:	bf00      	nop
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <HAL_SMBUS_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read)
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_SMBUS_AddrCallback(SMBUS_HandleTypeDef *hsmbus, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a486:	b480      	push	{r7}
 800a488:	b083      	sub	sp, #12
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	460b      	mov	r3, r1
 800a490:	70fb      	strb	r3, [r7, #3]
 800a492:	4613      	mov	r3, r2
 800a494:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_AddrCallback() could be implemented in the user file
   */
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <HAL_SMBUS_ListenCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_ListenCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_ListenCpltCallback() could be implemented in the user file
   */
}
 800a4aa:	bf00      	nop
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <HAL_SMBUS_ErrorCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_ErrorCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b083      	sub	sp, #12
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_ErrorCallback() could be implemented in the user file
   */
}
 800a4be:	bf00      	nop
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
	...

0800a4cc <SMBUS_Master_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Master_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af02      	add	r7, sp, #8
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  uint16_t DevAddress;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d101      	bne.n	800a4e4 <SMBUS_Master_ISR+0x18>
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	e1c8      	b.n	800a876 <SMBUS_Master_ISR+0x3aa>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	091b      	lsrs	r3, r3, #4
 800a4f0:	f003 0301 	and.w	r3, r3, #1
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d011      	beq.n	800a51c <SMBUS_Master_ISR+0x50>
  {
    /* Clear NACK Flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2210      	movs	r2, #16
 800a4fe:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a504:	f043 0204 	orr.w	r2, r3, #4
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f7ff ffce 	bl	800a4b6 <HAL_SMBUS_ErrorCallback>
 800a51a:	e1a7      	b.n	800a86c <SMBUS_Master_ISR+0x3a0>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	095b      	lsrs	r3, r3, #5
 800a520:	f003 0301 	and.w	r3, r3, #1
 800a524:	2b00      	cmp	r3, #0
 800a526:	d07a      	beq.n	800a61e <SMBUS_Master_ISR+0x152>
  {
    /* Check and treat errors if errors occurs during STOP process */
    SMBUS_ITErrorHandler(hsmbus);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 fc3f 	bl	800adac <SMBUS_ITErrorHandler>

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a532:	2b12      	cmp	r3, #18
 800a534:	d12d      	bne.n	800a592 <SMBUS_Master_ISR+0xc6>
    {
      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800a536:	21f2      	movs	r1, #242	; 0xf2
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 fbba 	bl	800acb2 <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2220      	movs	r2, #32
 800a544:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	6859      	ldr	r1, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	4b92      	ldr	r3, [pc, #584]	; (800a79c <SMBUS_Master_ISR+0x2d0>)
 800a552:	400b      	ands	r3, r1
 800a554:	6053      	str	r3, [r2, #4]

      /* Flush remaining data in Fifo register in case of error occurs before TXEmpty */
      /* Disable the selected SMBUS peripheral */
      __HAL_SMBUS_DISABLE(hsmbus);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f022 0201 	bic.w	r2, r2, #1
 800a564:	601a      	str	r2, [r3, #0]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Re-enable the selected SMBUS peripheral */
      __HAL_SMBUS_ENABLE(hsmbus);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f042 0201 	orr.w	r2, r2, #1
 800a588:	601a      	str	r2, [r3, #0]

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7ff ff53 	bl	800a436 <HAL_SMBUS_MasterTxCpltCallback>
 800a590:	e16c      	b.n	800a86c <SMBUS_Master_ISR+0x3a0>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
    else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a596:	2b22      	cmp	r3, #34	; 0x22
 800a598:	f040 8168 	bne.w	800a86c <SMBUS_Master_ISR+0x3a0>
    {
      /* Store Last receive data if any */
      if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	089b      	lsrs	r3, r3, #2
 800a5a0:	f003 0301 	and.w	r3, r3, #1
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d01c      	beq.n	800a5e2 <SMBUS_Master_ISR+0x116>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b2:	b2d2      	uxtb	r2, r2
 800a5b4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ba:	1c5a      	adds	r2, r3, #1
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	635a      	str	r2, [r3, #52]	; 0x34

        if ((hsmbus->XferSize > 0U))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d00c      	beq.n	800a5e2 <SMBUS_Master_ISR+0x116>
        {
          hsmbus->XferSize--;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
      }

      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 800a5e2:	21d4      	movs	r1, #212	; 0xd4
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 fb64 	bl	800acb2 <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2220      	movs	r2, #32
 800a5f0:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6859      	ldr	r1, [r3, #4]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	4b67      	ldr	r3, [pc, #412]	; (800a79c <SMBUS_Master_ISR+0x2d0>)
 800a5fe:	400b      	ands	r3, r1
 800a600:	6053      	str	r3, [r2, #4]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterRxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f7ff ff17 	bl	800a44a <HAL_SMBUS_MasterRxCpltCallback>
 800a61c:	e126      	b.n	800a86c <SMBUS_Master_ISR+0x3a0>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	089b      	lsrs	r3, r3, #2
 800a622:	f003 0301 	and.w	r3, r3, #1
 800a626:	2b00      	cmp	r3, #0
 800a628:	d019      	beq.n	800a65e <SMBUS_Master_ISR+0x192>
  {
    /* Read data from RXDR */
    *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a634:	b2d2      	uxtb	r2, r2
 800a636:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63c:	1c5a      	adds	r2, r3, #1
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a646:	3b01      	subs	r3, #1
 800a648:	b29a      	uxth	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount--;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a652:	b29b      	uxth	r3, r3
 800a654:	3b01      	subs	r3, #1
 800a656:	b29a      	uxth	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	875a      	strh	r2, [r3, #58]	; 0x3a
 800a65c:	e106      	b.n	800a86c <SMBUS_Master_ISR+0x3a0>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	085b      	lsrs	r3, r3, #1
 800a662:	f003 0301 	and.w	r3, r3, #1
 800a666:	2b00      	cmp	r3, #0
 800a668:	d018      	beq.n	800a69c <SMBUS_Master_ISR+0x1d0>
  {
    /* Write data to TXDR */
    hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a66e:	781a      	ldrb	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67a:	1c5a      	adds	r2, r3, #1
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a684:	3b01      	subs	r3, #1
 800a686:	b29a      	uxth	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount--;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a690:	b29b      	uxth	r3, r3
 800a692:	3b01      	subs	r3, #1
 800a694:	b29a      	uxth	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	875a      	strh	r2, [r3, #58]	; 0x3a
 800a69a:	e0e7      	b.n	800a86c <SMBUS_Master_ISR+0x3a0>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	09db      	lsrs	r3, r3, #7
 800a6a0:	f003 0301 	and.w	r3, r3, #1
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f000 8092 	beq.w	800a7ce <SMBUS_Master_ISR+0x302>
  {
    if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d048      	beq.n	800a746 <SMBUS_Master_ISR+0x27a>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d144      	bne.n	800a746 <SMBUS_Master_ISR+0x27a>
    {
      DevAddress = (uint16_t)(hsmbus->Instance->CR2 & I2C_CR2_SADD);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6c8:	81fb      	strh	r3, [r7, #14]

      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	2bff      	cmp	r3, #255	; 0xff
 800a6d2:	d911      	bls.n	800a6f8 <SMBUS_Master_ISR+0x22c>
      {
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
                             (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)), SMBUS_NO_STARTSTOP);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
 800a6dc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800a6e0:	89f9      	ldrh	r1, [r7, #14]
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	22ff      	movs	r2, #255	; 0xff
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fc10 	bl	800af10 <SMBUS_TransferConfig>
        hsmbus->XferSize = MAX_NBYTE_SIZE;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	22ff      	movs	r2, #255	; 0xff
 800a6f4:	871a      	strh	r2, [r3, #56]	; 0x38
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800a6f6:	e0b8      	b.n	800a86a <SMBUS_Master_ISR+0x39e>
      }
      else
      {
        hsmbus->XferSize = hsmbus->XferCount;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	871a      	strh	r2, [r3, #56]	; 0x38
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a706:	b2da      	uxtb	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a70c:	89f9      	ldrh	r1, [r7, #14]
 800a70e:	2300      	movs	r3, #0
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	4603      	mov	r3, r0
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fbfb 	bl	800af10 <SMBUS_TransferConfig>
        /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
        /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
        if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a724:	2b00      	cmp	r3, #0
 800a726:	f000 80a0 	beq.w	800a86a <SMBUS_Master_ISR+0x39e>
        {
          hsmbus->XferSize--;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a72e:	3b01      	subs	r3, #1
 800a730:	b29a      	uxth	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	3b01      	subs	r3, #1
 800a73e:	b29a      	uxth	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	875a      	strh	r2, [r3, #58]	; 0x3a
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800a744:	e091      	b.n	800a86a <SMBUS_Master_ISR+0x39e>
        }
      }
    }
    else if ((hsmbus->XferCount == 0U) && (hsmbus->XferSize == 0U))
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f040 808d 	bne.w	800a86c <SMBUS_Master_ISR+0x3a0>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a756:	2b00      	cmp	r3, #0
 800a758:	f040 8088 	bne.w	800a86c <SMBUS_Master_ISR+0x3a0>
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a766:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a76a:	d07f      	beq.n	800a86c <SMBUS_Master_ISR+0x3a0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a770:	2b12      	cmp	r3, #18
 800a772:	d115      	bne.n	800a7a0 <SMBUS_Master_ISR+0x2d4>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800a774:	21f2      	movs	r1, #242	; 0xf2
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fa9b 	bl	800acb2 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7ff fe4f 	bl	800a436 <HAL_SMBUS_MasterTxCpltCallback>
 800a798:	e068      	b.n	800a86c <SMBUS_Master_ISR+0x3a0>
 800a79a:	bf00      	nop
 800a79c:	fe00e800 	.word	0xfe00e800
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7a4:	2b22      	cmp	r3, #34	; 0x22
 800a7a6:	d161      	bne.n	800a86c <SMBUS_Master_ISR+0x3a0>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 800a7a8:	21d4      	movs	r1, #212	; 0xd4
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 fa81 	bl	800acb2 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f7ff fe3f 	bl	800a44a <HAL_SMBUS_MasterRxCpltCallback>
 800a7cc:	e04e      	b.n	800a86c <SMBUS_Master_ISR+0x3a0>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TC) != RESET)
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	099b      	lsrs	r3, r3, #6
 800a7d2:	f003 0301 	and.w	r3, r3, #1
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d048      	beq.n	800a86c <SMBUS_Master_ISR+0x3a0>
  {
    if (hsmbus->XferCount == 0U)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d143      	bne.n	800a86c <SMBUS_Master_ISR+0x3a0>
    {
      /* Specific use case for Quick command */
      if (hsmbus->pBuffPtr == NULL)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d108      	bne.n	800a7fe <SMBUS_Master_ISR+0x332>
      {
        /* Generate a Stop command */
        hsmbus->Instance->CR2 |= I2C_CR2_STOP;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	685a      	ldr	r2, [r3, #4]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7fa:	605a      	str	r2, [r3, #4]
 800a7fc:	e036      	b.n	800a86c <SMBUS_Master_ISR+0x3a0>
      }
      /* Call TxCpltCallback() if no stop mode is set */
      else if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a80c:	d02e      	beq.n	800a86c <SMBUS_Master_ISR+0x3a0>
      {
        /* No Generate Stop, to permit restart mode */
        /* The stop will be done at the end of transfer, when SMBUS_AUTOEND_MODE enable */

        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a812:	2b12      	cmp	r3, #18
 800a814:	d112      	bne.n	800a83c <SMBUS_Master_ISR+0x370>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800a816:	21f2      	movs	r1, #242	; 0xf2
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 fa4a 	bl	800acb2 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2201      	movs	r2, #1
 800a82a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f7ff fdfe 	bl	800a436 <HAL_SMBUS_MasterTxCpltCallback>
 800a83a:	e017      	b.n	800a86c <SMBUS_Master_ISR+0x3a0>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a840:	2b22      	cmp	r3, #34	; 0x22
 800a842:	d113      	bne.n	800a86c <SMBUS_Master_ISR+0x3a0>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 800a844:	21d4      	movs	r1, #212	; 0xd4
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 fa33 	bl	800acb2 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f7ff fdf1 	bl	800a44a <HAL_SMBUS_MasterRxCpltCallback>
 800a868:	e000      	b.n	800a86c <SMBUS_Master_ISR+0x3a0>
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800a86a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop

0800a880 <SMBUS_Slave_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Slave_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af02      	add	r7, sp, #8
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection;
  uint16_t SlaveAddrCode;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a890:	2b01      	cmp	r3, #1
 800a892:	d101      	bne.n	800a898 <SMBUS_Slave_ISR+0x18>
 800a894:	2302      	movs	r3, #2
 800a896:	e1cc      	b.n	800ac32 <SMBUS_Slave_ISR+0x3b2>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	091b      	lsrs	r3, r3, #4
 800a8a4:	f003 0301 	and.w	r3, r3, #1
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d033      	beq.n	800a914 <SMBUS_Slave_ISR+0x94>
  {
    /* Check that SMBUS transfer finished */
    /* if yes, normal usecase, a NACK is sent by the HOST when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hsmbus->XferCount == 0U)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d108      	bne.n	800a8c8 <SMBUS_Slave_ISR+0x48>
    {
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2210      	movs	r2, #16
 800a8bc:	61da      	str	r2, [r3, #28]

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8c6:	e14e      	b.n	800ab66 <SMBUS_Slave_ISR+0x2e6>
    }
    else
    {
      /* if no, error usecase, a Non-Acknowledge of last Data is generated by the HOST*/
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2210      	movs	r2, #16
 800a8ce:	61da      	str	r2, [r3, #28]

      /* Set HAL State to "Idle" State, mean to LISTEN state */
      /* So reset Slave Busy state */
      hsmbus->PreviousState = hsmbus->State;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8dc:	f023 0232 	bic.w	r2, r3, #50	; 0x32
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	649a      	str	r2, [r3, #72]	; 0x48
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8e8:	f023 0242 	bic.w	r2, r3, #66	; 0x42
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	649a      	str	r2, [r3, #72]	; 0x48

      /* Disable RX/TX Interrupts, keep only ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 800a8f0:	21f6      	movs	r1, #246	; 0xf6
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 f9dd 	bl	800acb2 <SMBUS_Disable_IRQ>

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8fc:	f043 0204 	orr.w	r2, r3, #4
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ErrorCallback(hsmbus);
#else
      HAL_SMBUS_ErrorCallback(hsmbus);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7ff fdd2 	bl	800a4b6 <HAL_SMBUS_ErrorCallback>
 800a912:	e128      	b.n	800ab66 <SMBUS_Slave_ISR+0x2e6>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_ADDR) != RESET)
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	08db      	lsrs	r3, r3, #3
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d022      	beq.n	800a966 <SMBUS_Slave_ISR+0xe6>
  {
    TransferDirection = (uint8_t)(SMBUS_GET_DIR(hsmbus));
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	0c1b      	lsrs	r3, r3, #16
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	f003 0301 	and.w	r3, r3, #1
 800a92e:	73fb      	strb	r3, [r7, #15]
    SlaveAddrCode = (uint16_t)(SMBUS_GET_ADDR_MATCH(hsmbus));
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	0c5b      	lsrs	r3, r3, #17
 800a938:	b29b      	uxth	r3, r3
 800a93a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a93e:	81bb      	strh	r3, [r7, #12]

    /* Disable ADDR interrupt to prevent multiple ADDRInterrupt*/
    /* Other ADDRInterrupt will be treat in next Listen usecase */
    __HAL_SMBUS_DISABLE_IT(hsmbus, SMBUS_IT_ADDRI);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f022 0208 	bic.w	r2, r2, #8
 800a94e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Call Slave Addr callback */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
#else
    HAL_SMBUS_AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
 800a958:	89ba      	ldrh	r2, [r7, #12]
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
 800a95c:	4619      	mov	r1, r3
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7ff fd91 	bl	800a486 <HAL_SMBUS_AddrCallback>
 800a964:	e0ff      	b.n	800ab66 <SMBUS_Slave_ISR+0x2e6>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	089b      	lsrs	r3, r3, #2
 800a96a:	f003 0301 	and.w	r3, r3, #1
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d106      	bne.n	800a980 <SMBUS_Slave_ISR+0x100>
           (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET))
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	09db      	lsrs	r3, r3, #7
 800a976:	f003 0301 	and.w	r3, r3, #1
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f000 80b4 	beq.w	800aae8 <SMBUS_Slave_ISR+0x268>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a984:	f003 0342 	and.w	r3, r3, #66	; 0x42
 800a988:	2b42      	cmp	r3, #66	; 0x42
 800a98a:	d160      	bne.n	800aa4e <SMBUS_Slave_ISR+0x1ce>
    {
      /* Read data from RXDR */
      *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a996:	b2d2      	uxtb	r2, r2
 800a998:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a99e:	1c5a      	adds	r2, r3, #1
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	635a      	str	r2, [r3, #52]	; 0x34

      hsmbus->XferSize--;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	871a      	strh	r2, [r3, #56]	; 0x38
      hsmbus->XferCount--;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	875a      	strh	r2, [r3, #58]	; 0x3a

      if (hsmbus->XferCount == 1U)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d110      	bne.n	800a9ea <SMBUS_Slave_ISR+0x16a>
      {
        /* Receive last Byte, can be PEC byte in case of PEC BYTE enabled */
        /* or only the last Byte of Transfer */
        /* So reset the RELOAD bit mode */
        hsmbus->XferOptions &= ~SMBUS_RELOAD_MODE;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	63da      	str	r2, [r3, #60]	; 0x3c
        SMBUS_TransferConfig(hsmbus, 0, 1, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9d8:	2300      	movs	r3, #0
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	4613      	mov	r3, r2
 800a9de:	2201      	movs	r2, #1
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fa94 	bl	800af10 <SMBUS_TransferConfig>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800a9e8:	e0bc      	b.n	800ab64 <SMBUS_Slave_ISR+0x2e4>
      }
      else if (hsmbus->XferCount == 0U)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d115      	bne.n	800aa20 <SMBUS_Slave_ISR+0x1a0>
      {
        /* Last Byte is received, disable Interrupt */
        SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 800a9f4:	21d4      	movs	r1, #212	; 0xd4
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f95b 	bl	800acb2 <SMBUS_Disable_IRQ>

        /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_RX, keep only HAL_SMBUS_STATE_LISTEN */
        hsmbus->PreviousState = hsmbus->State;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa08:	f023 0242 	bic.w	r2, r3, #66	; 0x42
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	649a      	str	r2, [r3, #72]	; 0x48

        /* Process Unlocked */
        __HAL_UNLOCK(hsmbus);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
        hsmbus->SlaveRxCpltCallback(hsmbus);
#else
        HAL_SMBUS_SlaveRxCpltCallback(hsmbus);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f7ff fd2a 	bl	800a472 <HAL_SMBUS_SlaveRxCpltCallback>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800aa1e:	e0a1      	b.n	800ab64 <SMBUS_Slave_ISR+0x2e4>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
      }
      else
      {
        /* Set Reload for next Bytes */
        SMBUS_TransferConfig(hsmbus, 0, 1, SMBUS_RELOAD_MODE  | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE), SMBUS_NO_STARTSTOP);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa28:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	4613      	mov	r3, r2
 800aa32:	2201      	movs	r2, #1
 800aa34:	2100      	movs	r1, #0
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 fa6a 	bl	800af10 <SMBUS_TransferConfig>

        /* Ack last Byte Read */
        hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	685a      	ldr	r2, [r3, #4]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa4a:	605a      	str	r2, [r3, #4]
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800aa4c:	e08a      	b.n	800ab64 <SMBUS_Slave_ISR+0x2e4>
      }
    }
    else if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa52:	f003 0332 	and.w	r3, r3, #50	; 0x32
 800aa56:	2b32      	cmp	r3, #50	; 0x32
 800aa58:	f040 8084 	bne.w	800ab64 <SMBUS_Slave_ISR+0x2e4>
    {
      if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d07e      	beq.n	800ab64 <SMBUS_Slave_ISR+0x2e4>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d17a      	bne.n	800ab64 <SMBUS_Slave_ISR+0x2e4>
      {
        if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	2bff      	cmp	r3, #255	; 0xff
 800aa76:	d911      	bls.n	800aa9c <SMBUS_Slave_ISR+0x21c>
        {
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE, (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)),
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa80:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800aa84:	2300      	movs	r3, #0
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	4613      	mov	r3, r2
 800aa8a:	22ff      	movs	r2, #255	; 0xff
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fa3e 	bl	800af10 <SMBUS_TransferConfig>
                               SMBUS_NO_STARTSTOP);
          hsmbus->XferSize = MAX_NBYTE_SIZE;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	22ff      	movs	r2, #255	; 0xff
 800aa98:	871a      	strh	r2, [r3, #56]	; 0x38
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800aa9a:	e063      	b.n	800ab64 <SMBUS_Slave_ISR+0x2e4>
        }
        else
        {
          hsmbus->XferSize = hsmbus->XferCount;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	871a      	strh	r2, [r3, #56]	; 0x38
          SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800aaaa:	b2da      	uxtb	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800aab0:	2300      	movs	r3, #0
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	460b      	mov	r3, r1
 800aab6:	2100      	movs	r1, #0
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fa29 	bl	800af10 <SMBUS_TransferConfig>
          /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
          /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
          if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d04b      	beq.n	800ab64 <SMBUS_Slave_ISR+0x2e4>
          {
            hsmbus->XferSize--;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800aad0:	3b01      	subs	r3, #1
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	871a      	strh	r2, [r3, #56]	; 0x38
            hsmbus->XferCount--;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aadc:	b29b      	uxth	r3, r3
 800aade:	3b01      	subs	r3, #1
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	875a      	strh	r2, [r3, #58]	; 0x3a
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800aae6:	e03d      	b.n	800ab64 <SMBUS_Slave_ISR+0x2e4>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	085b      	lsrs	r3, r3, #1
 800aaec:	f003 0301 	and.w	r3, r3, #1
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d038      	beq.n	800ab66 <SMBUS_Slave_ISR+0x2e6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hsmbus->XferCount > 0U)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d017      	beq.n	800ab2e <SMBUS_Slave_ISR+0x2ae>
    {
      /* Write data to TXDR */
      hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab02:	781a      	ldrb	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab0e:	1c5a      	adds	r2, r3, #1
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	635a      	str	r2, [r3, #52]	; 0x34

      hsmbus->XferCount--;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	875a      	strh	r2, [r3, #58]	; 0x3a
      hsmbus->XferSize--;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ab26:	3b01      	subs	r3, #1
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	871a      	strh	r2, [r3, #56]	; 0x38
    }

    if (hsmbus->XferCount == 0U)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d116      	bne.n	800ab66 <SMBUS_Slave_ISR+0x2e6>
    {
      /* Last Byte is Transmitted */
      /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_TX, keep only HAL_SMBUS_STATE_LISTEN */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800ab38:	21f2      	movs	r1, #242	; 0xf2
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 f8b9 	bl	800acb2 <SMBUS_Disable_IRQ>
      hsmbus->PreviousState = hsmbus->State;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab4c:	f023 0232 	bic.w	r2, r3, #50	; 0x32
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->SlaveTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_SlaveTxCpltCallback(hsmbus);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f7ff fc7e 	bl	800a45e <HAL_SMBUS_SlaveTxCpltCallback>
 800ab62:	e000      	b.n	800ab66 <SMBUS_Slave_ISR+0x2e6>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800ab64:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	095b      	lsrs	r3, r3, #5
 800ab6a:	f003 0301 	and.w	r3, r3, #1
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d05a      	beq.n	800ac28 <SMBUS_Slave_ISR+0x3a8>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab76:	f003 0308 	and.w	r3, r3, #8
 800ab7a:	2b08      	cmp	r3, #8
 800ab7c:	d154      	bne.n	800ac28 <SMBUS_Slave_ISR+0x3a8>
    {
      /* Store Last receive data if any */
      if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_RXNE) != RESET)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	f003 0304 	and.w	r3, r3, #4
 800ab88:	2b04      	cmp	r3, #4
 800ab8a:	d11c      	bne.n	800abc6 <SMBUS_Slave_ISR+0x346>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab96:	b2d2      	uxtb	r2, r2
 800ab98:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	635a      	str	r2, [r3, #52]	; 0x34

        if ((hsmbus->XferSize > 0U))
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00c      	beq.n	800abc6 <SMBUS_Slave_ISR+0x346>
        {
          hsmbus->XferSize--;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800abb0:	3b01      	subs	r3, #1
 800abb2:	b29a      	uxth	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	3b01      	subs	r3, #1
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
      }

      /* Disable RX and TX Interrupts */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 800abc6:	21f6      	movs	r1, #246	; 0xf6
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 f872 	bl	800acb2 <SMBUS_Disable_IRQ>

      /* Disable ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR);
 800abce:	2138      	movs	r1, #56	; 0x38
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 f86e 	bl	800acb2 <SMBUS_Disable_IRQ>

      /* Disable Address Acknowledge */
      hsmbus->Instance->CR2 |= I2C_CR2_NACK;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	685a      	ldr	r2, [r3, #4]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800abe4:	605a      	str	r2, [r3, #4]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	6859      	ldr	r1, [r3, #4]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	4b12      	ldr	r3, [pc, #72]	; (800ac3c <SMBUS_Slave_ISR+0x3bc>)
 800abf2:	400b      	ands	r3, r1
 800abf4:	6053      	str	r3, [r2, #4]

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2220      	movs	r2, #32
 800abfc:	61da      	str	r2, [r3, #28]

      /* Clear ADDR flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ADDR);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2208      	movs	r2, #8
 800ac04:	61da      	str	r2, [r3, #28]

      hsmbus->XferOptions = 0;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	63da      	str	r2, [r3, #60]	; 0x3c
      hsmbus->PreviousState = hsmbus->State;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ListenCpltCallback(hsmbus);
#else
      HAL_SMBUS_ListenCpltCallback(hsmbus);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7ff fc3d 	bl	800a4a2 <HAL_SMBUS_ListenCpltCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	fe00e800 	.word	0xfe00e800

0800ac40 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d003      	beq.n	800ac60 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac5e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac66:	2b38      	cmp	r3, #56	; 0x38
 800ac68:	d103      	bne.n	800ac72 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ac70:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800ac78:	2bf2      	cmp	r3, #242	; 0xf2
 800ac7a:	d103      	bne.n	800ac84 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800ac82:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 800ac8a:	2bd4      	cmp	r3, #212	; 0xd4
 800ac8c:	d103      	bne.n	800ac96 <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800ac94:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	6819      	ldr	r1, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	430a      	orrs	r2, r1
 800aca4:	601a      	str	r2, [r3, #0]
}
 800aca6:	bf00      	nop
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <SMBUS_Disable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Disable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b085      	sub	sp, #20
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 800acbc:	2300      	movs	r3, #0
 800acbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpstate = hsmbus->State;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acc4:	60bb      	str	r3, [r7, #8]

  if ((tmpstate == HAL_SMBUS_STATE_READY) && ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT))
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d108      	bne.n	800acde <SMBUS_Disable_IRQ+0x2c>
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d003      	beq.n	800acde <SMBUS_Disable_IRQ+0x2c>
  {
    /* Disable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acdc:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800ace4:	2bf2      	cmp	r3, #242	; 0xf2
 800ace6:	d11c      	bne.n	800ad22 <SMBUS_Disable_IRQ+0x70>
  {
    /* Disable TC, STOP, NACK and TXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_TXI;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800acee:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d108      	bne.n	800ad10 <SMBUS_Disable_IRQ+0x5e>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	f003 0308 	and.w	r3, r3, #8
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d103      	bne.n	800ad10 <SMBUS_Disable_IRQ+0x5e>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad0e:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	f003 0308 	and.w	r3, r3, #8
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d103      	bne.n	800ad22 <SMBUS_Disable_IRQ+0x70>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800ad20:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 800ad28:	2bd4      	cmp	r3, #212	; 0xd4
 800ad2a:	d11c      	bne.n	800ad66 <SMBUS_Disable_IRQ+0xb4>
  {
    /* Disable TC, STOP, NACK and RXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_RXI;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800ad32:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d108      	bne.n	800ad54 <SMBUS_Disable_IRQ+0xa2>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	f003 0308 	and.w	r3, r3, #8
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d103      	bne.n	800ad54 <SMBUS_Disable_IRQ+0xa2>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad52:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	f003 0308 	and.w	r3, r3, #8
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d103      	bne.n	800ad66 <SMBUS_Disable_IRQ+0xb4>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800ad64:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad6c:	2b38      	cmp	r3, #56	; 0x38
 800ad6e:	d10e      	bne.n	800ad8e <SMBUS_Disable_IRQ+0xdc>
  {
    /* Disable ADDR, STOP and NACK interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800ad76:	60fb      	str	r3, [r7, #12]

    if (SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d103      	bne.n	800ad8e <SMBUS_Disable_IRQ+0xdc>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad8c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_SMBUS_DISABLE_IT(hsmbus, tmpisr);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6819      	ldr	r1, [r3, #0]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	43da      	mvns	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	400a      	ands	r2, r1
 800ad9e:	601a      	str	r2, [r3, #0]
}
 800ada0:	bf00      	nop
 800ada2:	3714      	adds	r7, #20
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <SMBUS_ITErrorHandler>:
  * @brief  SMBUS interrupts error handler.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_ITErrorHandler(SMBUS_HandleTypeDef *hsmbus)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hsmbus->Instance->ISR);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hsmbus->Instance->CR1);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	613b      	str	r3, [r7, #16]
  uint32_t tmpstate;
  uint32_t tmperror;

  /* SMBUS Bus error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00f      	beq.n	800adee <SMBUS_ITErrorHandler+0x42>
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00a      	beq.n	800adee <SMBUS_ITErrorHandler+0x42>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BERR;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800addc:	f043 0201 	orr.w	r2, r3, #1
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear BERR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_BERR);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800adec:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00f      	beq.n	800ae18 <SMBUS_ITErrorHandler+0x6c>
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00a      	beq.n	800ae18 <SMBUS_ITErrorHandler+0x6c>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_OVR;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae06:	f043 0208 	orr.w	r2, r3, #8
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear OVR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_OVR);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae16:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Arbitration Loss error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00f      	beq.n	800ae42 <SMBUS_ITErrorHandler+0x96>
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00a      	beq.n	800ae42 <SMBUS_ITErrorHandler+0x96>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ARLO;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae30:	f043 0202 	orr.w	r2, r3, #2
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear ARLO flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ARLO);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae40:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Timeout error interrupt occurred ---------------------------------------------*/
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00f      	beq.n	800ae6c <SMBUS_ITErrorHandler+0xc0>
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00a      	beq.n	800ae6c <SMBUS_ITErrorHandler+0xc0>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BUSTIMEOUT;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae5a:	f043 0220 	orr.w	r2, r3, #32
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear TIMEOUT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_TIMEOUT);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ae6a:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Alert error interrupt occurred -----------------------------------------------*/
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00f      	beq.n	800ae96 <SMBUS_ITErrorHandler+0xea>
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00a      	beq.n	800ae96 <SMBUS_ITErrorHandler+0xea>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ALERT;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear ALERT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ae94:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Packet Error Check error interrupt occurred ----------------------------------*/
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00f      	beq.n	800aec0 <SMBUS_ITErrorHandler+0x114>
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00a      	beq.n	800aec0 <SMBUS_ITErrorHandler+0x114>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_PECERR;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear PEC error flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_PECERR);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aebe:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hsmbus->State, misra rule */
  tmperror = hsmbus->ErrorCode;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aec4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror != HAL_SMBUS_ERROR_NONE) && (tmperror != HAL_SMBUS_ERROR_ACKF))
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d01d      	beq.n	800af08 <SMBUS_ITErrorHandler+0x15c>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2b04      	cmp	r3, #4
 800aed0:	d01a      	beq.n	800af08 <SMBUS_ITErrorHandler+0x15c>
  {
    /* Do not Reset the HAL state in case of ALERT error */
    if ((tmperror & HAL_SMBUS_ERROR_ALERT) != HAL_SMBUS_ERROR_ALERT)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d112      	bne.n	800af02 <SMBUS_ITErrorHandler+0x156>
    {
      /* Store current volatile hsmbus->State, misra rule */
      tmpstate = hsmbus->State;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aee0:	60bb      	str	r3, [r7, #8]

      if (((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	f003 0332 	and.w	r3, r3, #50	; 0x32
 800aee8:	2b32      	cmp	r3, #50	; 0x32
 800aeea:	d004      	beq.n	800aef6 <SMBUS_ITErrorHandler+0x14a>
          || ((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX))
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	f003 0342 	and.w	r3, r3, #66	; 0x42
 800aef2:	2b42      	cmp	r3, #66	; 0x42
 800aef4:	d105      	bne.n	800af02 <SMBUS_ITErrorHandler+0x156>
      {
        /* Reset only HAL_SMBUS_STATE_SLAVE_BUSY_XX */
        /* keep HAL_SMBUS_STATE_LISTEN if set */
        hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2201      	movs	r2, #1
 800aefa:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State = HAL_SMBUS_STATE_LISTEN;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2208      	movs	r2, #8
 800af00:	649a      	str	r2, [r3, #72]	; 0x48

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7ff fad7 	bl	800a4b6 <HAL_SMBUS_ErrorCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
}
 800af08:	bf00      	nop
 800af0a:	3718      	adds	r7, #24
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <SMBUS_TransferConfig>:
  *     @arg @ref SMBUS_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void SMBUS_TransferConfig(SMBUS_HandleTypeDef *hsmbus,  uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                                 uint32_t Request)
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	607b      	str	r3, [r7, #4]
 800af1a:	460b      	mov	r3, r1
 800af1c:	817b      	strh	r3, [r7, #10]
 800af1e:	4613      	mov	r3, r2
 800af20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_TRANSFER_MODE(Mode));
  assert_param(IS_SMBUS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hsmbus->Instance->CR2,
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	685a      	ldr	r2, [r3, #4]
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	0d5b      	lsrs	r3, r3, #21
 800af2c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800af30:	4b0d      	ldr	r3, [pc, #52]	; (800af68 <SMBUS_TransferConfig+0x58>)
 800af32:	430b      	orrs	r3, r1
 800af34:	43db      	mvns	r3, r3
 800af36:	ea02 0103 	and.w	r1, r2, r3
 800af3a:	897b      	ldrh	r3, [r7, #10]
 800af3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800af40:	7a7b      	ldrb	r3, [r7, #9]
 800af42:	041b      	lsls	r3, r3, #16
 800af44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af48:	431a      	orrs	r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	431a      	orrs	r2, r3
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	431a      	orrs	r2, r3
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	430a      	orrs	r2, r1
 800af58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31UL - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP  | I2C_CR2_PECBYTE)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800af5a:	bf00      	nop
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	07ff63ff 	.word	0x07ff63ff

0800af6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d101      	bne.n	800af7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af7a:	2301      	movs	r3, #1
 800af7c:	e095      	b.n	800b0aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af82:	2b00      	cmp	r3, #0
 800af84:	d108      	bne.n	800af98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af8e:	d009      	beq.n	800afa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	61da      	str	r2, [r3, #28]
 800af96:	e005      	b.n	800afa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d106      	bne.n	800afc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7f7 fd9c 	bl	8002afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2202      	movs	r2, #2
 800afc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800afe4:	d902      	bls.n	800afec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800afe6:	2300      	movs	r3, #0
 800afe8:	60fb      	str	r3, [r7, #12]
 800afea:	e002      	b.n	800aff2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800afec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aff0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800affa:	d007      	beq.n	800b00c <HAL_SPI_Init+0xa0>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b004:	d002      	beq.n	800b00c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b01c:	431a      	orrs	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	f003 0302 	and.w	r3, r3, #2
 800b026:	431a      	orrs	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	695b      	ldr	r3, [r3, #20]
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	431a      	orrs	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	699b      	ldr	r3, [r3, #24]
 800b036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b03a:	431a      	orrs	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	69db      	ldr	r3, [r3, #28]
 800b040:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b044:	431a      	orrs	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a1b      	ldr	r3, [r3, #32]
 800b04a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b04e:	ea42 0103 	orr.w	r1, r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b056:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	430a      	orrs	r2, r1
 800b060:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	699b      	ldr	r3, [r3, #24]
 800b066:	0c1b      	lsrs	r3, r3, #16
 800b068:	f003 0204 	and.w	r2, r3, #4
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b070:	f003 0310 	and.w	r3, r3, #16
 800b074:	431a      	orrs	r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b07a:	f003 0308 	and.w	r3, r3, #8
 800b07e:	431a      	orrs	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b088:	ea42 0103 	orr.w	r1, r2, r3
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	430a      	orrs	r2, r1
 800b098:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b082      	sub	sp, #8
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d101      	bne.n	800b0c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e049      	b.n	800b158 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d106      	bne.n	800b0de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f7f7 fe15 	bl	8002d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	f000 fb2b 	bl	800b74c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2201      	movs	r2, #1
 800b102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2201      	movs	r2, #1
 800b10a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2201      	movs	r2, #1
 800b112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2201      	movs	r2, #1
 800b12a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2201      	movs	r2, #1
 800b132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2201      	movs	r2, #1
 800b13a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2201      	movs	r2, #1
 800b142:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2201      	movs	r2, #1
 800b152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	2b01      	cmp	r3, #1
 800b172:	d001      	beq.n	800b178 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	e047      	b.n	800b208 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2202      	movs	r2, #2
 800b17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a23      	ldr	r2, [pc, #140]	; (800b214 <HAL_TIM_Base_Start+0xb4>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d01d      	beq.n	800b1c6 <HAL_TIM_Base_Start+0x66>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b192:	d018      	beq.n	800b1c6 <HAL_TIM_Base_Start+0x66>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a1f      	ldr	r2, [pc, #124]	; (800b218 <HAL_TIM_Base_Start+0xb8>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d013      	beq.n	800b1c6 <HAL_TIM_Base_Start+0x66>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a1e      	ldr	r2, [pc, #120]	; (800b21c <HAL_TIM_Base_Start+0xbc>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d00e      	beq.n	800b1c6 <HAL_TIM_Base_Start+0x66>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a1c      	ldr	r2, [pc, #112]	; (800b220 <HAL_TIM_Base_Start+0xc0>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d009      	beq.n	800b1c6 <HAL_TIM_Base_Start+0x66>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a1b      	ldr	r2, [pc, #108]	; (800b224 <HAL_TIM_Base_Start+0xc4>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d004      	beq.n	800b1c6 <HAL_TIM_Base_Start+0x66>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a19      	ldr	r2, [pc, #100]	; (800b228 <HAL_TIM_Base_Start+0xc8>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d115      	bne.n	800b1f2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	689a      	ldr	r2, [r3, #8]
 800b1cc:	4b17      	ldr	r3, [pc, #92]	; (800b22c <HAL_TIM_Base_Start+0xcc>)
 800b1ce:	4013      	ands	r3, r2
 800b1d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2b06      	cmp	r3, #6
 800b1d6:	d015      	beq.n	800b204 <HAL_TIM_Base_Start+0xa4>
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1de:	d011      	beq.n	800b204 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f042 0201 	orr.w	r2, r2, #1
 800b1ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1f0:	e008      	b.n	800b204 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f042 0201 	orr.w	r2, r2, #1
 800b200:	601a      	str	r2, [r3, #0]
 800b202:	e000      	b.n	800b206 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b204:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3714      	adds	r7, #20
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr
 800b214:	40012c00 	.word	0x40012c00
 800b218:	40000400 	.word	0x40000400
 800b21c:	40000800 	.word	0x40000800
 800b220:	40000c00 	.word	0x40000c00
 800b224:	40013400 	.word	0x40013400
 800b228:	40014000 	.word	0x40014000
 800b22c:	00010007 	.word	0x00010007

0800b230 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d101      	bne.n	800b242 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e049      	b.n	800b2d6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d106      	bne.n	800b25c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7f7 fd36 	bl	8002cc8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2202      	movs	r2, #2
 800b260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3304      	adds	r3, #4
 800b26c:	4619      	mov	r1, r3
 800b26e:	4610      	mov	r0, r2
 800b270:	f000 fa6c 	bl	800b74c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2201      	movs	r2, #1
 800b298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3708      	adds	r7, #8
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	b082      	sub	sp, #8
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d101      	bne.n	800b2f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e049      	b.n	800b384 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d106      	bne.n	800b30a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f7f7 fcc1 	bl	8002c8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2202      	movs	r2, #2
 800b30e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	3304      	adds	r3, #4
 800b31a:	4619      	mov	r1, r3
 800b31c:	4610      	mov	r0, r2
 800b31e:	f000 fa15 	bl	800b74c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2201      	movs	r2, #1
 800b326:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2201      	movs	r2, #1
 800b32e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2201      	movs	r2, #1
 800b336:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2201      	movs	r2, #1
 800b33e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2201      	movs	r2, #1
 800b346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2201      	movs	r2, #1
 800b356:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2201      	movs	r2, #1
 800b35e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2201      	movs	r2, #1
 800b366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2201      	movs	r2, #1
 800b36e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2201      	movs	r2, #1
 800b376:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2201      	movs	r2, #1
 800b37e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d101      	bne.n	800b3a0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b39c:	2301      	movs	r3, #1
 800b39e:	e041      	b.n	800b424 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d106      	bne.n	800b3ba <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 f839 	bl	800b42c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2202      	movs	r2, #2
 800b3be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	3304      	adds	r3, #4
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	f000 f9bd 	bl	800b74c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f022 0208 	bic.w	r2, r2, #8
 800b3e0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	6819      	ldr	r1, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	683a      	ldr	r2, [r7, #0]
 800b3ee:	430a      	orrs	r2, r1
 800b3f0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2201      	movs	r2, #1
 800b406:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2201      	movs	r2, #1
 800b40e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2201      	movs	r2, #1
 800b41e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b422:	2300      	movs	r3, #0
}
 800b424:	4618      	mov	r0, r3
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b434:	bf00      	nop
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b452:	2b01      	cmp	r3, #1
 800b454:	d101      	bne.n	800b45a <HAL_TIM_OC_ConfigChannel+0x1a>
 800b456:	2302      	movs	r3, #2
 800b458:	e064      	b.n	800b524 <HAL_TIM_OC_ConfigChannel+0xe4>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2b14      	cmp	r3, #20
 800b466:	d857      	bhi.n	800b518 <HAL_TIM_OC_ConfigChannel+0xd8>
 800b468:	a201      	add	r2, pc, #4	; (adr r2, 800b470 <HAL_TIM_OC_ConfigChannel+0x30>)
 800b46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b46e:	bf00      	nop
 800b470:	0800b4c5 	.word	0x0800b4c5
 800b474:	0800b519 	.word	0x0800b519
 800b478:	0800b519 	.word	0x0800b519
 800b47c:	0800b519 	.word	0x0800b519
 800b480:	0800b4d3 	.word	0x0800b4d3
 800b484:	0800b519 	.word	0x0800b519
 800b488:	0800b519 	.word	0x0800b519
 800b48c:	0800b519 	.word	0x0800b519
 800b490:	0800b4e1 	.word	0x0800b4e1
 800b494:	0800b519 	.word	0x0800b519
 800b498:	0800b519 	.word	0x0800b519
 800b49c:	0800b519 	.word	0x0800b519
 800b4a0:	0800b4ef 	.word	0x0800b4ef
 800b4a4:	0800b519 	.word	0x0800b519
 800b4a8:	0800b519 	.word	0x0800b519
 800b4ac:	0800b519 	.word	0x0800b519
 800b4b0:	0800b4fd 	.word	0x0800b4fd
 800b4b4:	0800b519 	.word	0x0800b519
 800b4b8:	0800b519 	.word	0x0800b519
 800b4bc:	0800b519 	.word	0x0800b519
 800b4c0:	0800b50b 	.word	0x0800b50b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68b9      	ldr	r1, [r7, #8]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f000 f9d8 	bl	800b880 <TIM_OC1_SetConfig>
      break;
 800b4d0:	e023      	b.n	800b51a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	68b9      	ldr	r1, [r7, #8]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f000 fa61 	bl	800b9a0 <TIM_OC2_SetConfig>
      break;
 800b4de:	e01c      	b.n	800b51a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68b9      	ldr	r1, [r7, #8]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 fae4 	bl	800bab4 <TIM_OC3_SetConfig>
      break;
 800b4ec:	e015      	b.n	800b51a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68b9      	ldr	r1, [r7, #8]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f000 fb65 	bl	800bbc4 <TIM_OC4_SetConfig>
      break;
 800b4fa:	e00e      	b.n	800b51a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	68b9      	ldr	r1, [r7, #8]
 800b502:	4618      	mov	r0, r3
 800b504:	f000 fbc8 	bl	800bc98 <TIM_OC5_SetConfig>
      break;
 800b508:	e007      	b.n	800b51a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	68b9      	ldr	r1, [r7, #8]
 800b510:	4618      	mov	r0, r3
 800b512:	f000 fc25 	bl	800bd60 <TIM_OC6_SetConfig>
      break;
 800b516:	e000      	b.n	800b51a <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800b518:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d101      	bne.n	800b546 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b542:	2302      	movs	r3, #2
 800b544:	e0fd      	b.n	800b742 <HAL_TIM_PWM_ConfigChannel+0x216>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2201      	movs	r2, #1
 800b54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2b14      	cmp	r3, #20
 800b552:	f200 80f0 	bhi.w	800b736 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b556:	a201      	add	r2, pc, #4	; (adr r2, 800b55c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b55c:	0800b5b1 	.word	0x0800b5b1
 800b560:	0800b737 	.word	0x0800b737
 800b564:	0800b737 	.word	0x0800b737
 800b568:	0800b737 	.word	0x0800b737
 800b56c:	0800b5f1 	.word	0x0800b5f1
 800b570:	0800b737 	.word	0x0800b737
 800b574:	0800b737 	.word	0x0800b737
 800b578:	0800b737 	.word	0x0800b737
 800b57c:	0800b633 	.word	0x0800b633
 800b580:	0800b737 	.word	0x0800b737
 800b584:	0800b737 	.word	0x0800b737
 800b588:	0800b737 	.word	0x0800b737
 800b58c:	0800b673 	.word	0x0800b673
 800b590:	0800b737 	.word	0x0800b737
 800b594:	0800b737 	.word	0x0800b737
 800b598:	0800b737 	.word	0x0800b737
 800b59c:	0800b6b5 	.word	0x0800b6b5
 800b5a0:	0800b737 	.word	0x0800b737
 800b5a4:	0800b737 	.word	0x0800b737
 800b5a8:	0800b737 	.word	0x0800b737
 800b5ac:	0800b6f5 	.word	0x0800b6f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	68b9      	ldr	r1, [r7, #8]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f000 f962 	bl	800b880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	699a      	ldr	r2, [r3, #24]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f042 0208 	orr.w	r2, r2, #8
 800b5ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	699a      	ldr	r2, [r3, #24]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f022 0204 	bic.w	r2, r2, #4
 800b5da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	6999      	ldr	r1, [r3, #24]
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	691a      	ldr	r2, [r3, #16]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	430a      	orrs	r2, r1
 800b5ec:	619a      	str	r2, [r3, #24]
      break;
 800b5ee:	e0a3      	b.n	800b738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68b9      	ldr	r1, [r7, #8]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f000 f9d2 	bl	800b9a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	699a      	ldr	r2, [r3, #24]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b60a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	699a      	ldr	r2, [r3, #24]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b61a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	6999      	ldr	r1, [r3, #24]
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	691b      	ldr	r3, [r3, #16]
 800b626:	021a      	lsls	r2, r3, #8
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	430a      	orrs	r2, r1
 800b62e:	619a      	str	r2, [r3, #24]
      break;
 800b630:	e082      	b.n	800b738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	68b9      	ldr	r1, [r7, #8]
 800b638:	4618      	mov	r0, r3
 800b63a:	f000 fa3b 	bl	800bab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	69da      	ldr	r2, [r3, #28]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f042 0208 	orr.w	r2, r2, #8
 800b64c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	69da      	ldr	r2, [r3, #28]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f022 0204 	bic.w	r2, r2, #4
 800b65c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	69d9      	ldr	r1, [r3, #28]
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	691a      	ldr	r2, [r3, #16]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	430a      	orrs	r2, r1
 800b66e:	61da      	str	r2, [r3, #28]
      break;
 800b670:	e062      	b.n	800b738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68b9      	ldr	r1, [r7, #8]
 800b678:	4618      	mov	r0, r3
 800b67a:	f000 faa3 	bl	800bbc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	69da      	ldr	r2, [r3, #28]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b68c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	69da      	ldr	r2, [r3, #28]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b69c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	69d9      	ldr	r1, [r3, #28]
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	021a      	lsls	r2, r3, #8
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	430a      	orrs	r2, r1
 800b6b0:	61da      	str	r2, [r3, #28]
      break;
 800b6b2:	e041      	b.n	800b738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68b9      	ldr	r1, [r7, #8]
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f000 faec 	bl	800bc98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f042 0208 	orr.w	r2, r2, #8
 800b6ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f022 0204 	bic.w	r2, r2, #4
 800b6de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	691a      	ldr	r2, [r3, #16]
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	430a      	orrs	r2, r1
 800b6f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b6f2:	e021      	b.n	800b738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	68b9      	ldr	r1, [r7, #8]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f000 fb30 	bl	800bd60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b70e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b71e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	021a      	lsls	r2, r3, #8
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	430a      	orrs	r2, r1
 800b732:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b734:	e000      	b.n	800b738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b736:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop

0800b74c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b085      	sub	sp, #20
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	4a40      	ldr	r2, [pc, #256]	; (800b860 <TIM_Base_SetConfig+0x114>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d013      	beq.n	800b78c <TIM_Base_SetConfig+0x40>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b76a:	d00f      	beq.n	800b78c <TIM_Base_SetConfig+0x40>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a3d      	ldr	r2, [pc, #244]	; (800b864 <TIM_Base_SetConfig+0x118>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d00b      	beq.n	800b78c <TIM_Base_SetConfig+0x40>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a3c      	ldr	r2, [pc, #240]	; (800b868 <TIM_Base_SetConfig+0x11c>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d007      	beq.n	800b78c <TIM_Base_SetConfig+0x40>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a3b      	ldr	r2, [pc, #236]	; (800b86c <TIM_Base_SetConfig+0x120>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d003      	beq.n	800b78c <TIM_Base_SetConfig+0x40>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a3a      	ldr	r2, [pc, #232]	; (800b870 <TIM_Base_SetConfig+0x124>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d108      	bne.n	800b79e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	4313      	orrs	r3, r2
 800b79c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4a2f      	ldr	r2, [pc, #188]	; (800b860 <TIM_Base_SetConfig+0x114>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d01f      	beq.n	800b7e6 <TIM_Base_SetConfig+0x9a>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ac:	d01b      	beq.n	800b7e6 <TIM_Base_SetConfig+0x9a>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	4a2c      	ldr	r2, [pc, #176]	; (800b864 <TIM_Base_SetConfig+0x118>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d017      	beq.n	800b7e6 <TIM_Base_SetConfig+0x9a>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	4a2b      	ldr	r2, [pc, #172]	; (800b868 <TIM_Base_SetConfig+0x11c>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d013      	beq.n	800b7e6 <TIM_Base_SetConfig+0x9a>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4a2a      	ldr	r2, [pc, #168]	; (800b86c <TIM_Base_SetConfig+0x120>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d00f      	beq.n	800b7e6 <TIM_Base_SetConfig+0x9a>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a29      	ldr	r2, [pc, #164]	; (800b870 <TIM_Base_SetConfig+0x124>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d00b      	beq.n	800b7e6 <TIM_Base_SetConfig+0x9a>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a28      	ldr	r2, [pc, #160]	; (800b874 <TIM_Base_SetConfig+0x128>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d007      	beq.n	800b7e6 <TIM_Base_SetConfig+0x9a>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a27      	ldr	r2, [pc, #156]	; (800b878 <TIM_Base_SetConfig+0x12c>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d003      	beq.n	800b7e6 <TIM_Base_SetConfig+0x9a>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a26      	ldr	r2, [pc, #152]	; (800b87c <TIM_Base_SetConfig+0x130>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d108      	bne.n	800b7f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	4313      	orrs	r3, r2
 800b804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	689a      	ldr	r2, [r3, #8]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	4a10      	ldr	r2, [pc, #64]	; (800b860 <TIM_Base_SetConfig+0x114>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d00f      	beq.n	800b844 <TIM_Base_SetConfig+0xf8>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a12      	ldr	r2, [pc, #72]	; (800b870 <TIM_Base_SetConfig+0x124>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d00b      	beq.n	800b844 <TIM_Base_SetConfig+0xf8>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4a11      	ldr	r2, [pc, #68]	; (800b874 <TIM_Base_SetConfig+0x128>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d007      	beq.n	800b844 <TIM_Base_SetConfig+0xf8>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4a10      	ldr	r2, [pc, #64]	; (800b878 <TIM_Base_SetConfig+0x12c>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d003      	beq.n	800b844 <TIM_Base_SetConfig+0xf8>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	4a0f      	ldr	r2, [pc, #60]	; (800b87c <TIM_Base_SetConfig+0x130>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d103      	bne.n	800b84c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	691a      	ldr	r2, [r3, #16]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	615a      	str	r2, [r3, #20]
}
 800b852:	bf00      	nop
 800b854:	3714      	adds	r7, #20
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	40012c00 	.word	0x40012c00
 800b864:	40000400 	.word	0x40000400
 800b868:	40000800 	.word	0x40000800
 800b86c:	40000c00 	.word	0x40000c00
 800b870:	40013400 	.word	0x40013400
 800b874:	40014000 	.word	0x40014000
 800b878:	40014400 	.word	0x40014400
 800b87c:	40014800 	.word	0x40014800

0800b880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b880:	b480      	push	{r7}
 800b882:	b087      	sub	sp, #28
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a1b      	ldr	r3, [r3, #32]
 800b88e:	f023 0201 	bic.w	r2, r3, #1
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a1b      	ldr	r3, [r3, #32]
 800b89a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	699b      	ldr	r3, [r3, #24]
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f023 0303 	bic.w	r3, r3, #3
 800b8ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	f023 0302 	bic.w	r3, r3, #2
 800b8cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a2c      	ldr	r2, [pc, #176]	; (800b98c <TIM_OC1_SetConfig+0x10c>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d00f      	beq.n	800b900 <TIM_OC1_SetConfig+0x80>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a2b      	ldr	r2, [pc, #172]	; (800b990 <TIM_OC1_SetConfig+0x110>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d00b      	beq.n	800b900 <TIM_OC1_SetConfig+0x80>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a2a      	ldr	r2, [pc, #168]	; (800b994 <TIM_OC1_SetConfig+0x114>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d007      	beq.n	800b900 <TIM_OC1_SetConfig+0x80>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a29      	ldr	r2, [pc, #164]	; (800b998 <TIM_OC1_SetConfig+0x118>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d003      	beq.n	800b900 <TIM_OC1_SetConfig+0x80>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a28      	ldr	r2, [pc, #160]	; (800b99c <TIM_OC1_SetConfig+0x11c>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d10c      	bne.n	800b91a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	f023 0308 	bic.w	r3, r3, #8
 800b906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	4313      	orrs	r3, r2
 800b910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	f023 0304 	bic.w	r3, r3, #4
 800b918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4a1b      	ldr	r2, [pc, #108]	; (800b98c <TIM_OC1_SetConfig+0x10c>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d00f      	beq.n	800b942 <TIM_OC1_SetConfig+0xc2>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4a1a      	ldr	r2, [pc, #104]	; (800b990 <TIM_OC1_SetConfig+0x110>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d00b      	beq.n	800b942 <TIM_OC1_SetConfig+0xc2>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a19      	ldr	r2, [pc, #100]	; (800b994 <TIM_OC1_SetConfig+0x114>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d007      	beq.n	800b942 <TIM_OC1_SetConfig+0xc2>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a18      	ldr	r2, [pc, #96]	; (800b998 <TIM_OC1_SetConfig+0x118>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d003      	beq.n	800b942 <TIM_OC1_SetConfig+0xc2>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a17      	ldr	r2, [pc, #92]	; (800b99c <TIM_OC1_SetConfig+0x11c>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d111      	bne.n	800b966 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	693a      	ldr	r2, [r7, #16]
 800b958:	4313      	orrs	r3, r2
 800b95a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	699b      	ldr	r3, [r3, #24]
 800b960:	693a      	ldr	r2, [r7, #16]
 800b962:	4313      	orrs	r3, r2
 800b964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	693a      	ldr	r2, [r7, #16]
 800b96a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	685a      	ldr	r2, [r3, #4]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	697a      	ldr	r2, [r7, #20]
 800b97e:	621a      	str	r2, [r3, #32]
}
 800b980:	bf00      	nop
 800b982:	371c      	adds	r7, #28
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr
 800b98c:	40012c00 	.word	0x40012c00
 800b990:	40013400 	.word	0x40013400
 800b994:	40014000 	.word	0x40014000
 800b998:	40014400 	.word	0x40014400
 800b99c:	40014800 	.word	0x40014800

0800b9a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b087      	sub	sp, #28
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	f023 0210 	bic.w	r2, r3, #16
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	699b      	ldr	r3, [r3, #24]
 800b9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	021b      	lsls	r3, r3, #8
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	f023 0320 	bic.w	r3, r3, #32
 800b9ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	011b      	lsls	r3, r3, #4
 800b9f6:	697a      	ldr	r2, [r7, #20]
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a28      	ldr	r2, [pc, #160]	; (800baa0 <TIM_OC2_SetConfig+0x100>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d003      	beq.n	800ba0c <TIM_OC2_SetConfig+0x6c>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a27      	ldr	r2, [pc, #156]	; (800baa4 <TIM_OC2_SetConfig+0x104>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d10d      	bne.n	800ba28 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	011b      	lsls	r3, r3, #4
 800ba1a:	697a      	ldr	r2, [r7, #20]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a1d      	ldr	r2, [pc, #116]	; (800baa0 <TIM_OC2_SetConfig+0x100>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d00f      	beq.n	800ba50 <TIM_OC2_SetConfig+0xb0>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4a1c      	ldr	r2, [pc, #112]	; (800baa4 <TIM_OC2_SetConfig+0x104>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d00b      	beq.n	800ba50 <TIM_OC2_SetConfig+0xb0>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4a1b      	ldr	r2, [pc, #108]	; (800baa8 <TIM_OC2_SetConfig+0x108>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d007      	beq.n	800ba50 <TIM_OC2_SetConfig+0xb0>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a1a      	ldr	r2, [pc, #104]	; (800baac <TIM_OC2_SetConfig+0x10c>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d003      	beq.n	800ba50 <TIM_OC2_SetConfig+0xb0>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a19      	ldr	r2, [pc, #100]	; (800bab0 <TIM_OC2_SetConfig+0x110>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d113      	bne.n	800ba78 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	695b      	ldr	r3, [r3, #20]
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	693a      	ldr	r2, [r7, #16]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	699b      	ldr	r3, [r3, #24]
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	693a      	ldr	r2, [r7, #16]
 800ba74:	4313      	orrs	r3, r2
 800ba76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	693a      	ldr	r2, [r7, #16]
 800ba7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	685a      	ldr	r2, [r3, #4]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	621a      	str	r2, [r3, #32]
}
 800ba92:	bf00      	nop
 800ba94:	371c      	adds	r7, #28
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	40012c00 	.word	0x40012c00
 800baa4:	40013400 	.word	0x40013400
 800baa8:	40014000 	.word	0x40014000
 800baac:	40014400 	.word	0x40014400
 800bab0:	40014800 	.word	0x40014800

0800bab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b087      	sub	sp, #28
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a1b      	ldr	r3, [r3, #32]
 800bac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a1b      	ldr	r3, [r3, #32]
 800bace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	69db      	ldr	r3, [r3, #28]
 800bada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f023 0303 	bic.w	r3, r3, #3
 800baee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	4313      	orrs	r3, r2
 800baf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	021b      	lsls	r3, r3, #8
 800bb08:	697a      	ldr	r2, [r7, #20]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4a27      	ldr	r2, [pc, #156]	; (800bbb0 <TIM_OC3_SetConfig+0xfc>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d003      	beq.n	800bb1e <TIM_OC3_SetConfig+0x6a>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4a26      	ldr	r2, [pc, #152]	; (800bbb4 <TIM_OC3_SetConfig+0x100>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d10d      	bne.n	800bb3a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	021b      	lsls	r3, r3, #8
 800bb2c:	697a      	ldr	r2, [r7, #20]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a1c      	ldr	r2, [pc, #112]	; (800bbb0 <TIM_OC3_SetConfig+0xfc>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d00f      	beq.n	800bb62 <TIM_OC3_SetConfig+0xae>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4a1b      	ldr	r2, [pc, #108]	; (800bbb4 <TIM_OC3_SetConfig+0x100>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d00b      	beq.n	800bb62 <TIM_OC3_SetConfig+0xae>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a1a      	ldr	r2, [pc, #104]	; (800bbb8 <TIM_OC3_SetConfig+0x104>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d007      	beq.n	800bb62 <TIM_OC3_SetConfig+0xae>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4a19      	ldr	r2, [pc, #100]	; (800bbbc <TIM_OC3_SetConfig+0x108>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d003      	beq.n	800bb62 <TIM_OC3_SetConfig+0xae>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a18      	ldr	r2, [pc, #96]	; (800bbc0 <TIM_OC3_SetConfig+0x10c>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d113      	bne.n	800bb8a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	695b      	ldr	r3, [r3, #20]
 800bb76:	011b      	lsls	r3, r3, #4
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	011b      	lsls	r3, r3, #4
 800bb84:	693a      	ldr	r2, [r7, #16]
 800bb86:	4313      	orrs	r3, r2
 800bb88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	693a      	ldr	r2, [r7, #16]
 800bb8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	685a      	ldr	r2, [r3, #4]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	621a      	str	r2, [r3, #32]
}
 800bba4:	bf00      	nop
 800bba6:	371c      	adds	r7, #28
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr
 800bbb0:	40012c00 	.word	0x40012c00
 800bbb4:	40013400 	.word	0x40013400
 800bbb8:	40014000 	.word	0x40014000
 800bbbc:	40014400 	.word	0x40014400
 800bbc0:	40014800 	.word	0x40014800

0800bbc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b087      	sub	sp, #28
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	69db      	ldr	r3, [r3, #28]
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bbf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	021b      	lsls	r3, r3, #8
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	031b      	lsls	r3, r3, #12
 800bc1a:	693a      	ldr	r2, [r7, #16]
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a18      	ldr	r2, [pc, #96]	; (800bc84 <TIM_OC4_SetConfig+0xc0>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d00f      	beq.n	800bc48 <TIM_OC4_SetConfig+0x84>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a17      	ldr	r2, [pc, #92]	; (800bc88 <TIM_OC4_SetConfig+0xc4>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d00b      	beq.n	800bc48 <TIM_OC4_SetConfig+0x84>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4a16      	ldr	r2, [pc, #88]	; (800bc8c <TIM_OC4_SetConfig+0xc8>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d007      	beq.n	800bc48 <TIM_OC4_SetConfig+0x84>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a15      	ldr	r2, [pc, #84]	; (800bc90 <TIM_OC4_SetConfig+0xcc>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d003      	beq.n	800bc48 <TIM_OC4_SetConfig+0x84>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a14      	ldr	r2, [pc, #80]	; (800bc94 <TIM_OC4_SetConfig+0xd0>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d109      	bne.n	800bc5c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	695b      	ldr	r3, [r3, #20]
 800bc54:	019b      	lsls	r3, r3, #6
 800bc56:	697a      	ldr	r2, [r7, #20]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	697a      	ldr	r2, [r7, #20]
 800bc60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	685a      	ldr	r2, [r3, #4]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	693a      	ldr	r2, [r7, #16]
 800bc74:	621a      	str	r2, [r3, #32]
}
 800bc76:	bf00      	nop
 800bc78:	371c      	adds	r7, #28
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	40012c00 	.word	0x40012c00
 800bc88:	40013400 	.word	0x40013400
 800bc8c:	40014000 	.word	0x40014000
 800bc90:	40014400 	.word	0x40014400
 800bc94:	40014800 	.word	0x40014800

0800bc98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b087      	sub	sp, #28
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6a1b      	ldr	r3, [r3, #32]
 800bca6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a1b      	ldr	r3, [r3, #32]
 800bcb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bcdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	041b      	lsls	r3, r3, #16
 800bce4:	693a      	ldr	r2, [r7, #16]
 800bce6:	4313      	orrs	r3, r2
 800bce8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4a17      	ldr	r2, [pc, #92]	; (800bd4c <TIM_OC5_SetConfig+0xb4>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d00f      	beq.n	800bd12 <TIM_OC5_SetConfig+0x7a>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a16      	ldr	r2, [pc, #88]	; (800bd50 <TIM_OC5_SetConfig+0xb8>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d00b      	beq.n	800bd12 <TIM_OC5_SetConfig+0x7a>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4a15      	ldr	r2, [pc, #84]	; (800bd54 <TIM_OC5_SetConfig+0xbc>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d007      	beq.n	800bd12 <TIM_OC5_SetConfig+0x7a>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a14      	ldr	r2, [pc, #80]	; (800bd58 <TIM_OC5_SetConfig+0xc0>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d003      	beq.n	800bd12 <TIM_OC5_SetConfig+0x7a>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a13      	ldr	r2, [pc, #76]	; (800bd5c <TIM_OC5_SetConfig+0xc4>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d109      	bne.n	800bd26 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	695b      	ldr	r3, [r3, #20]
 800bd1e:	021b      	lsls	r3, r3, #8
 800bd20:	697a      	ldr	r2, [r7, #20]
 800bd22:	4313      	orrs	r3, r2
 800bd24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	685a      	ldr	r2, [r3, #4]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	693a      	ldr	r2, [r7, #16]
 800bd3e:	621a      	str	r2, [r3, #32]
}
 800bd40:	bf00      	nop
 800bd42:	371c      	adds	r7, #28
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr
 800bd4c:	40012c00 	.word	0x40012c00
 800bd50:	40013400 	.word	0x40013400
 800bd54:	40014000 	.word	0x40014000
 800bd58:	40014400 	.word	0x40014400
 800bd5c:	40014800 	.word	0x40014800

0800bd60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b087      	sub	sp, #28
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a1b      	ldr	r3, [r3, #32]
 800bd6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a1b      	ldr	r3, [r3, #32]
 800bd7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	021b      	lsls	r3, r3, #8
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bda6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	051b      	lsls	r3, r3, #20
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a18      	ldr	r2, [pc, #96]	; (800be18 <TIM_OC6_SetConfig+0xb8>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d00f      	beq.n	800bddc <TIM_OC6_SetConfig+0x7c>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4a17      	ldr	r2, [pc, #92]	; (800be1c <TIM_OC6_SetConfig+0xbc>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d00b      	beq.n	800bddc <TIM_OC6_SetConfig+0x7c>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a16      	ldr	r2, [pc, #88]	; (800be20 <TIM_OC6_SetConfig+0xc0>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d007      	beq.n	800bddc <TIM_OC6_SetConfig+0x7c>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4a15      	ldr	r2, [pc, #84]	; (800be24 <TIM_OC6_SetConfig+0xc4>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d003      	beq.n	800bddc <TIM_OC6_SetConfig+0x7c>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a14      	ldr	r2, [pc, #80]	; (800be28 <TIM_OC6_SetConfig+0xc8>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d109      	bne.n	800bdf0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bde2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	695b      	ldr	r3, [r3, #20]
 800bde8:	029b      	lsls	r3, r3, #10
 800bdea:	697a      	ldr	r2, [r7, #20]
 800bdec:	4313      	orrs	r3, r2
 800bdee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	685a      	ldr	r2, [r3, #4]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	621a      	str	r2, [r3, #32]
}
 800be0a:	bf00      	nop
 800be0c:	371c      	adds	r7, #28
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	40012c00 	.word	0x40012c00
 800be1c:	40013400 	.word	0x40013400
 800be20:	40014000 	.word	0x40014000
 800be24:	40014400 	.word	0x40014400
 800be28:	40014800 	.word	0x40014800

0800be2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d101      	bne.n	800be44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be40:	2302      	movs	r3, #2
 800be42:	e068      	b.n	800bf16 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2201      	movs	r2, #1
 800be48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2202      	movs	r2, #2
 800be50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a2e      	ldr	r2, [pc, #184]	; (800bf24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d004      	beq.n	800be78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a2d      	ldr	r2, [pc, #180]	; (800bf28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d108      	bne.n	800be8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800be7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	4313      	orrs	r3, r2
 800be88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	4313      	orrs	r3, r2
 800be9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a1e      	ldr	r2, [pc, #120]	; (800bf24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d01d      	beq.n	800beea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beb6:	d018      	beq.n	800beea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a1b      	ldr	r2, [pc, #108]	; (800bf2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d013      	beq.n	800beea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a1a      	ldr	r2, [pc, #104]	; (800bf30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d00e      	beq.n	800beea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a18      	ldr	r2, [pc, #96]	; (800bf34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d009      	beq.n	800beea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a13      	ldr	r2, [pc, #76]	; (800bf28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d004      	beq.n	800beea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a14      	ldr	r2, [pc, #80]	; (800bf38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d10c      	bne.n	800bf04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	68ba      	ldr	r2, [r7, #8]
 800bef8:	4313      	orrs	r3, r2
 800befa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3714      	adds	r7, #20
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	40012c00 	.word	0x40012c00
 800bf28:	40013400 	.word	0x40013400
 800bf2c:	40000400 	.word	0x40000400
 800bf30:	40000800 	.word	0x40000800
 800bf34:	40000c00 	.word	0x40000c00
 800bf38:	40014000 	.word	0x40014000

0800bf3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d101      	bne.n	800bf4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	e042      	b.n	800bfd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d106      	bne.n	800bf66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f7f6 ff4d 	bl	8002e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2224      	movs	r2, #36	; 0x24
 800bf6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f022 0201 	bic.w	r2, r2, #1
 800bf7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 f82c 	bl	800bfdc <UART_SetConfig>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d101      	bne.n	800bf8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e022      	b.n	800bfd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d002      	beq.n	800bf9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 faf2 	bl	800c580 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	685a      	ldr	r2, [r3, #4]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bfaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	689a      	ldr	r2, [r3, #8]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bfba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f042 0201 	orr.w	r2, r2, #1
 800bfca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 fb79 	bl	800c6c4 <UART_CheckIdleState>
 800bfd2:	4603      	mov	r3, r0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3708      	adds	r7, #8
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfdc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800bfe0:	b088      	sub	sp, #32
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	689a      	ldr	r2, [r3, #8]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	691b      	ldr	r3, [r3, #16]
 800bff2:	431a      	orrs	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	695b      	ldr	r3, [r3, #20]
 800bff8:	431a      	orrs	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	69db      	ldr	r3, [r3, #28]
 800bffe:	4313      	orrs	r3, r2
 800c000:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c006:	69fa      	ldr	r2, [r7, #28]
 800c008:	4313      	orrs	r3, r2
 800c00a:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	4bb1      	ldr	r3, [pc, #708]	; (800c2d8 <UART_SetConfig+0x2fc>)
 800c014:	4013      	ands	r3, r2
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	6812      	ldr	r2, [r2, #0]
 800c01a:	69f9      	ldr	r1, [r7, #28]
 800c01c:	430b      	orrs	r3, r1
 800c01e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68da      	ldr	r2, [r3, #12]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	430a      	orrs	r2, r1
 800c034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	699b      	ldr	r3, [r3, #24]
 800c03a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4aa6      	ldr	r2, [pc, #664]	; (800c2dc <UART_SetConfig+0x300>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d004      	beq.n	800c050 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a1b      	ldr	r3, [r3, #32]
 800c04a:	69fa      	ldr	r2, [r7, #28]
 800c04c:	4313      	orrs	r3, r2
 800c04e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c05a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	6812      	ldr	r2, [r2, #0]
 800c062:	69f9      	ldr	r1, [r7, #28]
 800c064:	430b      	orrs	r3, r1
 800c066:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06e:	f023 010f 	bic.w	r1, r3, #15
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	430a      	orrs	r2, r1
 800c07c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a97      	ldr	r2, [pc, #604]	; (800c2e0 <UART_SetConfig+0x304>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d121      	bne.n	800c0cc <UART_SetConfig+0xf0>
 800c088:	4b96      	ldr	r3, [pc, #600]	; (800c2e4 <UART_SetConfig+0x308>)
 800c08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c08e:	f003 0303 	and.w	r3, r3, #3
 800c092:	2b03      	cmp	r3, #3
 800c094:	d816      	bhi.n	800c0c4 <UART_SetConfig+0xe8>
 800c096:	a201      	add	r2, pc, #4	; (adr r2, 800c09c <UART_SetConfig+0xc0>)
 800c098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c09c:	0800c0ad 	.word	0x0800c0ad
 800c0a0:	0800c0b9 	.word	0x0800c0b9
 800c0a4:	0800c0b3 	.word	0x0800c0b3
 800c0a8:	0800c0bf 	.word	0x0800c0bf
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	76fb      	strb	r3, [r7, #27]
 800c0b0:	e0e8      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	76fb      	strb	r3, [r7, #27]
 800c0b6:	e0e5      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c0b8:	2304      	movs	r3, #4
 800c0ba:	76fb      	strb	r3, [r7, #27]
 800c0bc:	e0e2      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c0be:	2308      	movs	r3, #8
 800c0c0:	76fb      	strb	r3, [r7, #27]
 800c0c2:	e0df      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c0c4:	2310      	movs	r3, #16
 800c0c6:	76fb      	strb	r3, [r7, #27]
 800c0c8:	bf00      	nop
 800c0ca:	e0db      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a85      	ldr	r2, [pc, #532]	; (800c2e8 <UART_SetConfig+0x30c>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d134      	bne.n	800c140 <UART_SetConfig+0x164>
 800c0d6:	4b83      	ldr	r3, [pc, #524]	; (800c2e4 <UART_SetConfig+0x308>)
 800c0d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0dc:	f003 030c 	and.w	r3, r3, #12
 800c0e0:	2b0c      	cmp	r3, #12
 800c0e2:	d829      	bhi.n	800c138 <UART_SetConfig+0x15c>
 800c0e4:	a201      	add	r2, pc, #4	; (adr r2, 800c0ec <UART_SetConfig+0x110>)
 800c0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ea:	bf00      	nop
 800c0ec:	0800c121 	.word	0x0800c121
 800c0f0:	0800c139 	.word	0x0800c139
 800c0f4:	0800c139 	.word	0x0800c139
 800c0f8:	0800c139 	.word	0x0800c139
 800c0fc:	0800c12d 	.word	0x0800c12d
 800c100:	0800c139 	.word	0x0800c139
 800c104:	0800c139 	.word	0x0800c139
 800c108:	0800c139 	.word	0x0800c139
 800c10c:	0800c127 	.word	0x0800c127
 800c110:	0800c139 	.word	0x0800c139
 800c114:	0800c139 	.word	0x0800c139
 800c118:	0800c139 	.word	0x0800c139
 800c11c:	0800c133 	.word	0x0800c133
 800c120:	2300      	movs	r3, #0
 800c122:	76fb      	strb	r3, [r7, #27]
 800c124:	e0ae      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c126:	2302      	movs	r3, #2
 800c128:	76fb      	strb	r3, [r7, #27]
 800c12a:	e0ab      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c12c:	2304      	movs	r3, #4
 800c12e:	76fb      	strb	r3, [r7, #27]
 800c130:	e0a8      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c132:	2308      	movs	r3, #8
 800c134:	76fb      	strb	r3, [r7, #27]
 800c136:	e0a5      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c138:	2310      	movs	r3, #16
 800c13a:	76fb      	strb	r3, [r7, #27]
 800c13c:	bf00      	nop
 800c13e:	e0a1      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a69      	ldr	r2, [pc, #420]	; (800c2ec <UART_SetConfig+0x310>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d120      	bne.n	800c18c <UART_SetConfig+0x1b0>
 800c14a:	4b66      	ldr	r3, [pc, #408]	; (800c2e4 <UART_SetConfig+0x308>)
 800c14c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c150:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c154:	2b10      	cmp	r3, #16
 800c156:	d00f      	beq.n	800c178 <UART_SetConfig+0x19c>
 800c158:	2b10      	cmp	r3, #16
 800c15a:	d802      	bhi.n	800c162 <UART_SetConfig+0x186>
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d005      	beq.n	800c16c <UART_SetConfig+0x190>
 800c160:	e010      	b.n	800c184 <UART_SetConfig+0x1a8>
 800c162:	2b20      	cmp	r3, #32
 800c164:	d005      	beq.n	800c172 <UART_SetConfig+0x196>
 800c166:	2b30      	cmp	r3, #48	; 0x30
 800c168:	d009      	beq.n	800c17e <UART_SetConfig+0x1a2>
 800c16a:	e00b      	b.n	800c184 <UART_SetConfig+0x1a8>
 800c16c:	2300      	movs	r3, #0
 800c16e:	76fb      	strb	r3, [r7, #27]
 800c170:	e088      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c172:	2302      	movs	r3, #2
 800c174:	76fb      	strb	r3, [r7, #27]
 800c176:	e085      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c178:	2304      	movs	r3, #4
 800c17a:	76fb      	strb	r3, [r7, #27]
 800c17c:	e082      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c17e:	2308      	movs	r3, #8
 800c180:	76fb      	strb	r3, [r7, #27]
 800c182:	e07f      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c184:	2310      	movs	r3, #16
 800c186:	76fb      	strb	r3, [r7, #27]
 800c188:	bf00      	nop
 800c18a:	e07b      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a57      	ldr	r2, [pc, #348]	; (800c2f0 <UART_SetConfig+0x314>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d120      	bne.n	800c1d8 <UART_SetConfig+0x1fc>
 800c196:	4b53      	ldr	r3, [pc, #332]	; (800c2e4 <UART_SetConfig+0x308>)
 800c198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c19c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c1a0:	2b40      	cmp	r3, #64	; 0x40
 800c1a2:	d00f      	beq.n	800c1c4 <UART_SetConfig+0x1e8>
 800c1a4:	2b40      	cmp	r3, #64	; 0x40
 800c1a6:	d802      	bhi.n	800c1ae <UART_SetConfig+0x1d2>
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d005      	beq.n	800c1b8 <UART_SetConfig+0x1dc>
 800c1ac:	e010      	b.n	800c1d0 <UART_SetConfig+0x1f4>
 800c1ae:	2b80      	cmp	r3, #128	; 0x80
 800c1b0:	d005      	beq.n	800c1be <UART_SetConfig+0x1e2>
 800c1b2:	2bc0      	cmp	r3, #192	; 0xc0
 800c1b4:	d009      	beq.n	800c1ca <UART_SetConfig+0x1ee>
 800c1b6:	e00b      	b.n	800c1d0 <UART_SetConfig+0x1f4>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	76fb      	strb	r3, [r7, #27]
 800c1bc:	e062      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c1be:	2302      	movs	r3, #2
 800c1c0:	76fb      	strb	r3, [r7, #27]
 800c1c2:	e05f      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c1c4:	2304      	movs	r3, #4
 800c1c6:	76fb      	strb	r3, [r7, #27]
 800c1c8:	e05c      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c1ca:	2308      	movs	r3, #8
 800c1cc:	76fb      	strb	r3, [r7, #27]
 800c1ce:	e059      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c1d0:	2310      	movs	r3, #16
 800c1d2:	76fb      	strb	r3, [r7, #27]
 800c1d4:	bf00      	nop
 800c1d6:	e055      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a45      	ldr	r2, [pc, #276]	; (800c2f4 <UART_SetConfig+0x318>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d124      	bne.n	800c22c <UART_SetConfig+0x250>
 800c1e2:	4b40      	ldr	r3, [pc, #256]	; (800c2e4 <UART_SetConfig+0x308>)
 800c1e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1f0:	d012      	beq.n	800c218 <UART_SetConfig+0x23c>
 800c1f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1f6:	d802      	bhi.n	800c1fe <UART_SetConfig+0x222>
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d007      	beq.n	800c20c <UART_SetConfig+0x230>
 800c1fc:	e012      	b.n	800c224 <UART_SetConfig+0x248>
 800c1fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c202:	d006      	beq.n	800c212 <UART_SetConfig+0x236>
 800c204:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c208:	d009      	beq.n	800c21e <UART_SetConfig+0x242>
 800c20a:	e00b      	b.n	800c224 <UART_SetConfig+0x248>
 800c20c:	2300      	movs	r3, #0
 800c20e:	76fb      	strb	r3, [r7, #27]
 800c210:	e038      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c212:	2302      	movs	r3, #2
 800c214:	76fb      	strb	r3, [r7, #27]
 800c216:	e035      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c218:	2304      	movs	r3, #4
 800c21a:	76fb      	strb	r3, [r7, #27]
 800c21c:	e032      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c21e:	2308      	movs	r3, #8
 800c220:	76fb      	strb	r3, [r7, #27]
 800c222:	e02f      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c224:	2310      	movs	r3, #16
 800c226:	76fb      	strb	r3, [r7, #27]
 800c228:	bf00      	nop
 800c22a:	e02b      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a2a      	ldr	r2, [pc, #168]	; (800c2dc <UART_SetConfig+0x300>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d124      	bne.n	800c280 <UART_SetConfig+0x2a4>
 800c236:	4b2b      	ldr	r3, [pc, #172]	; (800c2e4 <UART_SetConfig+0x308>)
 800c238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c23c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c244:	d012      	beq.n	800c26c <UART_SetConfig+0x290>
 800c246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c24a:	d802      	bhi.n	800c252 <UART_SetConfig+0x276>
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d007      	beq.n	800c260 <UART_SetConfig+0x284>
 800c250:	e012      	b.n	800c278 <UART_SetConfig+0x29c>
 800c252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c256:	d006      	beq.n	800c266 <UART_SetConfig+0x28a>
 800c258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c25c:	d009      	beq.n	800c272 <UART_SetConfig+0x296>
 800c25e:	e00b      	b.n	800c278 <UART_SetConfig+0x29c>
 800c260:	2300      	movs	r3, #0
 800c262:	76fb      	strb	r3, [r7, #27]
 800c264:	e00e      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c266:	2302      	movs	r3, #2
 800c268:	76fb      	strb	r3, [r7, #27]
 800c26a:	e00b      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c26c:	2304      	movs	r3, #4
 800c26e:	76fb      	strb	r3, [r7, #27]
 800c270:	e008      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c272:	2308      	movs	r3, #8
 800c274:	76fb      	strb	r3, [r7, #27]
 800c276:	e005      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c278:	2310      	movs	r3, #16
 800c27a:	76fb      	strb	r3, [r7, #27]
 800c27c:	bf00      	nop
 800c27e:	e001      	b.n	800c284 <UART_SetConfig+0x2a8>
 800c280:	2310      	movs	r3, #16
 800c282:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a14      	ldr	r2, [pc, #80]	; (800c2dc <UART_SetConfig+0x300>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	f040 80a1 	bne.w	800c3d2 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c290:	7efb      	ldrb	r3, [r7, #27]
 800c292:	2b08      	cmp	r3, #8
 800c294:	d836      	bhi.n	800c304 <UART_SetConfig+0x328>
 800c296:	a201      	add	r2, pc, #4	; (adr r2, 800c29c <UART_SetConfig+0x2c0>)
 800c298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29c:	0800c2c1 	.word	0x0800c2c1
 800c2a0:	0800c305 	.word	0x0800c305
 800c2a4:	0800c2c9 	.word	0x0800c2c9
 800c2a8:	0800c305 	.word	0x0800c305
 800c2ac:	0800c2cf 	.word	0x0800c2cf
 800c2b0:	0800c305 	.word	0x0800c305
 800c2b4:	0800c305 	.word	0x0800c305
 800c2b8:	0800c305 	.word	0x0800c305
 800c2bc:	0800c2fd 	.word	0x0800c2fd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2c0:	f7fb fdce 	bl	8007e60 <HAL_RCC_GetPCLK1Freq>
 800c2c4:	6178      	str	r0, [r7, #20]
        break;
 800c2c6:	e022      	b.n	800c30e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2c8:	4b0b      	ldr	r3, [pc, #44]	; (800c2f8 <UART_SetConfig+0x31c>)
 800c2ca:	617b      	str	r3, [r7, #20]
        break;
 800c2cc:	e01f      	b.n	800c30e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2ce:	f7fb fd33 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 800c2d2:	6178      	str	r0, [r7, #20]
        break;
 800c2d4:	e01b      	b.n	800c30e <UART_SetConfig+0x332>
 800c2d6:	bf00      	nop
 800c2d8:	cfff69f3 	.word	0xcfff69f3
 800c2dc:	40008000 	.word	0x40008000
 800c2e0:	40013800 	.word	0x40013800
 800c2e4:	40021000 	.word	0x40021000
 800c2e8:	40004400 	.word	0x40004400
 800c2ec:	40004800 	.word	0x40004800
 800c2f0:	40004c00 	.word	0x40004c00
 800c2f4:	40005000 	.word	0x40005000
 800c2f8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c300:	617b      	str	r3, [r7, #20]
        break;
 800c302:	e004      	b.n	800c30e <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 800c304:	2300      	movs	r3, #0
 800c306:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	76bb      	strb	r3, [r7, #26]
        break;
 800c30c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	2b00      	cmp	r3, #0
 800c312:	f000 811d 	beq.w	800c550 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31a:	4a97      	ldr	r2, [pc, #604]	; (800c578 <UART_SetConfig+0x59c>)
 800c31c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c320:	461a      	mov	r2, r3
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	fbb3 f3f2 	udiv	r3, r3, r2
 800c328:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	685a      	ldr	r2, [r3, #4]
 800c32e:	4613      	mov	r3, r2
 800c330:	005b      	lsls	r3, r3, #1
 800c332:	4413      	add	r3, r2
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	429a      	cmp	r2, r3
 800c338:	d305      	bcc.n	800c346 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c340:	68ba      	ldr	r2, [r7, #8]
 800c342:	429a      	cmp	r2, r3
 800c344:	d902      	bls.n	800c34c <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800c346:	2301      	movs	r3, #1
 800c348:	76bb      	strb	r3, [r7, #26]
 800c34a:	e101      	b.n	800c550 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	4618      	mov	r0, r3
 800c350:	f04f 0100 	mov.w	r1, #0
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c358:	4a87      	ldr	r2, [pc, #540]	; (800c578 <UART_SetConfig+0x59c>)
 800c35a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c35e:	b29b      	uxth	r3, r3
 800c360:	f04f 0400 	mov.w	r4, #0
 800c364:	461a      	mov	r2, r3
 800c366:	4623      	mov	r3, r4
 800c368:	f7f4 fc86 	bl	8000c78 <__aeabi_uldivmod>
 800c36c:	4603      	mov	r3, r0
 800c36e:	460c      	mov	r4, r1
 800c370:	4619      	mov	r1, r3
 800c372:	4622      	mov	r2, r4
 800c374:	f04f 0300 	mov.w	r3, #0
 800c378:	f04f 0400 	mov.w	r4, #0
 800c37c:	0214      	lsls	r4, r2, #8
 800c37e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c382:	020b      	lsls	r3, r1, #8
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	6852      	ldr	r2, [r2, #4]
 800c388:	0852      	lsrs	r2, r2, #1
 800c38a:	4611      	mov	r1, r2
 800c38c:	f04f 0200 	mov.w	r2, #0
 800c390:	eb13 0b01 	adds.w	fp, r3, r1
 800c394:	eb44 0c02 	adc.w	ip, r4, r2
 800c398:	4658      	mov	r0, fp
 800c39a:	4661      	mov	r1, ip
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	f04f 0400 	mov.w	r4, #0
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	4623      	mov	r3, r4
 800c3a8:	f7f4 fc66 	bl	8000c78 <__aeabi_uldivmod>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3b8:	d308      	bcc.n	800c3cc <UART_SetConfig+0x3f0>
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3c0:	d204      	bcs.n	800c3cc <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	693a      	ldr	r2, [r7, #16]
 800c3c8:	60da      	str	r2, [r3, #12]
 800c3ca:	e0c1      	b.n	800c550 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	76bb      	strb	r3, [r7, #26]
 800c3d0:	e0be      	b.n	800c550 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	69db      	ldr	r3, [r3, #28]
 800c3d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3da:	d164      	bne.n	800c4a6 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 800c3dc:	7efb      	ldrb	r3, [r7, #27]
 800c3de:	2b08      	cmp	r3, #8
 800c3e0:	d827      	bhi.n	800c432 <UART_SetConfig+0x456>
 800c3e2:	a201      	add	r2, pc, #4	; (adr r2, 800c3e8 <UART_SetConfig+0x40c>)
 800c3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e8:	0800c40d 	.word	0x0800c40d
 800c3ec:	0800c415 	.word	0x0800c415
 800c3f0:	0800c41d 	.word	0x0800c41d
 800c3f4:	0800c433 	.word	0x0800c433
 800c3f8:	0800c423 	.word	0x0800c423
 800c3fc:	0800c433 	.word	0x0800c433
 800c400:	0800c433 	.word	0x0800c433
 800c404:	0800c433 	.word	0x0800c433
 800c408:	0800c42b 	.word	0x0800c42b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c40c:	f7fb fd28 	bl	8007e60 <HAL_RCC_GetPCLK1Freq>
 800c410:	6178      	str	r0, [r7, #20]
        break;
 800c412:	e013      	b.n	800c43c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c414:	f7fb fd3a 	bl	8007e8c <HAL_RCC_GetPCLK2Freq>
 800c418:	6178      	str	r0, [r7, #20]
        break;
 800c41a:	e00f      	b.n	800c43c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c41c:	4b57      	ldr	r3, [pc, #348]	; (800c57c <UART_SetConfig+0x5a0>)
 800c41e:	617b      	str	r3, [r7, #20]
        break;
 800c420:	e00c      	b.n	800c43c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c422:	f7fb fc89 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 800c426:	6178      	str	r0, [r7, #20]
        break;
 800c428:	e008      	b.n	800c43c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c42a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c42e:	617b      	str	r3, [r7, #20]
        break;
 800c430:	e004      	b.n	800c43c <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800c432:	2300      	movs	r3, #0
 800c434:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c436:	2301      	movs	r3, #1
 800c438:	76bb      	strb	r3, [r7, #26]
        break;
 800c43a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	f000 8086 	beq.w	800c550 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c448:	4a4b      	ldr	r2, [pc, #300]	; (800c578 <UART_SetConfig+0x59c>)
 800c44a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c44e:	461a      	mov	r2, r3
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	fbb3 f3f2 	udiv	r3, r3, r2
 800c456:	005a      	lsls	r2, r3, #1
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	085b      	lsrs	r3, r3, #1
 800c45e:	441a      	add	r2, r3
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	fbb2 f3f3 	udiv	r3, r2, r3
 800c468:	b29b      	uxth	r3, r3
 800c46a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	2b0f      	cmp	r3, #15
 800c470:	d916      	bls.n	800c4a0 <UART_SetConfig+0x4c4>
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c478:	d212      	bcs.n	800c4a0 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	f023 030f 	bic.w	r3, r3, #15
 800c482:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	085b      	lsrs	r3, r3, #1
 800c488:	b29b      	uxth	r3, r3
 800c48a:	f003 0307 	and.w	r3, r3, #7
 800c48e:	b29a      	uxth	r2, r3
 800c490:	89fb      	ldrh	r3, [r7, #14]
 800c492:	4313      	orrs	r3, r2
 800c494:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	89fa      	ldrh	r2, [r7, #14]
 800c49c:	60da      	str	r2, [r3, #12]
 800c49e:	e057      	b.n	800c550 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	76bb      	strb	r3, [r7, #26]
 800c4a4:	e054      	b.n	800c550 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c4a6:	7efb      	ldrb	r3, [r7, #27]
 800c4a8:	2b08      	cmp	r3, #8
 800c4aa:	d828      	bhi.n	800c4fe <UART_SetConfig+0x522>
 800c4ac:	a201      	add	r2, pc, #4	; (adr r2, 800c4b4 <UART_SetConfig+0x4d8>)
 800c4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b2:	bf00      	nop
 800c4b4:	0800c4d9 	.word	0x0800c4d9
 800c4b8:	0800c4e1 	.word	0x0800c4e1
 800c4bc:	0800c4e9 	.word	0x0800c4e9
 800c4c0:	0800c4ff 	.word	0x0800c4ff
 800c4c4:	0800c4ef 	.word	0x0800c4ef
 800c4c8:	0800c4ff 	.word	0x0800c4ff
 800c4cc:	0800c4ff 	.word	0x0800c4ff
 800c4d0:	0800c4ff 	.word	0x0800c4ff
 800c4d4:	0800c4f7 	.word	0x0800c4f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4d8:	f7fb fcc2 	bl	8007e60 <HAL_RCC_GetPCLK1Freq>
 800c4dc:	6178      	str	r0, [r7, #20]
        break;
 800c4de:	e013      	b.n	800c508 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c4e0:	f7fb fcd4 	bl	8007e8c <HAL_RCC_GetPCLK2Freq>
 800c4e4:	6178      	str	r0, [r7, #20]
        break;
 800c4e6:	e00f      	b.n	800c508 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c4e8:	4b24      	ldr	r3, [pc, #144]	; (800c57c <UART_SetConfig+0x5a0>)
 800c4ea:	617b      	str	r3, [r7, #20]
        break;
 800c4ec:	e00c      	b.n	800c508 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c4ee:	f7fb fc23 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 800c4f2:	6178      	str	r0, [r7, #20]
        break;
 800c4f4:	e008      	b.n	800c508 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4fa:	617b      	str	r3, [r7, #20]
        break;
 800c4fc:	e004      	b.n	800c508 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800c4fe:	2300      	movs	r3, #0
 800c500:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c502:	2301      	movs	r3, #1
 800c504:	76bb      	strb	r3, [r7, #26]
        break;
 800c506:	bf00      	nop
    }

    if (pclk != 0U)
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d020      	beq.n	800c550 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c512:	4a19      	ldr	r2, [pc, #100]	; (800c578 <UART_SetConfig+0x59c>)
 800c514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c518:	461a      	mov	r2, r3
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	085b      	lsrs	r3, r3, #1
 800c526:	441a      	add	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c530:	b29b      	uxth	r3, r3
 800c532:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	2b0f      	cmp	r3, #15
 800c538:	d908      	bls.n	800c54c <UART_SetConfig+0x570>
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c540:	d204      	bcs.n	800c54c <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	693a      	ldr	r2, [r7, #16]
 800c548:	60da      	str	r2, [r3, #12]
 800c54a:	e001      	b.n	800c550 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800c54c:	2301      	movs	r3, #1
 800c54e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2201      	movs	r2, #1
 800c554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2201      	movs	r2, #1
 800c55c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c56c:	7ebb      	ldrb	r3, [r7, #26]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3720      	adds	r7, #32
 800c572:	46bd      	mov	sp, r7
 800c574:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800c578:	08015dd8 	.word	0x08015dd8
 800c57c:	00f42400 	.word	0x00f42400

0800c580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58c:	f003 0301 	and.w	r3, r3, #1
 800c590:	2b00      	cmp	r3, #0
 800c592:	d00a      	beq.n	800c5aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	430a      	orrs	r2, r1
 800c5a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ae:	f003 0302 	and.w	r3, r3, #2
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00a      	beq.n	800c5cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	430a      	orrs	r2, r1
 800c5ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5d0:	f003 0304 	and.w	r3, r3, #4
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d00a      	beq.n	800c5ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	430a      	orrs	r2, r1
 800c5ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f2:	f003 0308 	and.w	r3, r3, #8
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d00a      	beq.n	800c610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	430a      	orrs	r2, r1
 800c60e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c614:	f003 0310 	and.w	r3, r3, #16
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d00a      	beq.n	800c632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	689b      	ldr	r3, [r3, #8]
 800c622:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	430a      	orrs	r2, r1
 800c630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c636:	f003 0320 	and.w	r3, r3, #32
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d00a      	beq.n	800c654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	430a      	orrs	r2, r1
 800c652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d01a      	beq.n	800c696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	430a      	orrs	r2, r1
 800c674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c67a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c67e:	d10a      	bne.n	800c696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	430a      	orrs	r2, r1
 800c694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00a      	beq.n	800c6b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	685b      	ldr	r3, [r3, #4]
 800c6a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	430a      	orrs	r2, r1
 800c6b6:	605a      	str	r2, [r3, #4]
  }
}
 800c6b8:	bf00      	nop
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b086      	sub	sp, #24
 800c6c8:	af02      	add	r7, sp, #8
 800c6ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c6d4:	f7f6 fe56 	bl	8003384 <HAL_GetTick>
 800c6d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f003 0308 	and.w	r3, r3, #8
 800c6e4:	2b08      	cmp	r3, #8
 800c6e6:	d10e      	bne.n	800c706 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c6ec:	9300      	str	r3, [sp, #0]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f82c 	bl	800c754 <UART_WaitOnFlagUntilTimeout>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d001      	beq.n	800c706 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c702:	2303      	movs	r3, #3
 800c704:	e022      	b.n	800c74c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f003 0304 	and.w	r3, r3, #4
 800c710:	2b04      	cmp	r3, #4
 800c712:	d10e      	bne.n	800c732 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2200      	movs	r2, #0
 800c71e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 f816 	bl	800c754 <UART_WaitOnFlagUntilTimeout>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d001      	beq.n	800c732 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c72e:	2303      	movs	r3, #3
 800c730:	e00c      	b.n	800c74c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2220      	movs	r2, #32
 800c736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2220      	movs	r2, #32
 800c73e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	603b      	str	r3, [r7, #0]
 800c760:	4613      	mov	r3, r2
 800c762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c764:	e062      	b.n	800c82c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c76c:	d05e      	beq.n	800c82c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c76e:	f7f6 fe09 	bl	8003384 <HAL_GetTick>
 800c772:	4602      	mov	r2, r0
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	1ad3      	subs	r3, r2, r3
 800c778:	69ba      	ldr	r2, [r7, #24]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d302      	bcc.n	800c784 <UART_WaitOnFlagUntilTimeout+0x30>
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d11d      	bne.n	800c7c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c792:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	689a      	ldr	r2, [r3, #8]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f022 0201 	bic.w	r2, r2, #1
 800c7a2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2220      	movs	r2, #32
 800c7a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2220      	movs	r2, #32
 800c7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c7bc:	2303      	movs	r3, #3
 800c7be:	e045      	b.n	800c84c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f003 0304 	and.w	r3, r3, #4
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d02e      	beq.n	800c82c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	69db      	ldr	r3, [r3, #28]
 800c7d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c7d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7dc:	d126      	bne.n	800c82c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c7e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c7f6:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	689a      	ldr	r2, [r3, #8]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f022 0201 	bic.w	r2, r2, #1
 800c806:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2220      	movs	r2, #32
 800c80c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2220      	movs	r2, #32
 800c814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2220      	movs	r2, #32
 800c81c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800c828:	2303      	movs	r3, #3
 800c82a:	e00f      	b.n	800c84c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	69da      	ldr	r2, [r3, #28]
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	4013      	ands	r3, r2
 800c836:	68ba      	ldr	r2, [r7, #8]
 800c838:	429a      	cmp	r2, r3
 800c83a:	bf0c      	ite	eq
 800c83c:	2301      	moveq	r3, #1
 800c83e:	2300      	movne	r3, #0
 800c840:	b2db      	uxtb	r3, r3
 800c842:	461a      	mov	r2, r3
 800c844:	79fb      	ldrb	r3, [r7, #7]
 800c846:	429a      	cmp	r2, r3
 800c848:	d08d      	beq.n	800c766 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c84a:	2300      	movs	r3, #0
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3710      	adds	r7, #16
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c862:	2b01      	cmp	r3, #1
 800c864:	d101      	bne.n	800c86a <HAL_UARTEx_DisableFifoMode+0x16>
 800c866:	2302      	movs	r3, #2
 800c868:	e027      	b.n	800c8ba <HAL_UARTEx_DisableFifoMode+0x66>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2201      	movs	r2, #1
 800c86e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2224      	movs	r2, #36	; 0x24
 800c876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f022 0201 	bic.w	r2, r2, #1
 800c890:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c898:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2200      	movs	r2, #0
 800c89e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2220      	movs	r2, #32
 800c8ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c8b8:	2300      	movs	r3, #0
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3714      	adds	r7, #20
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr

0800c8c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b084      	sub	sp, #16
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
 800c8ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d101      	bne.n	800c8de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c8da:	2302      	movs	r3, #2
 800c8dc:	e02d      	b.n	800c93a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2224      	movs	r2, #36	; 0x24
 800c8ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f022 0201 	bic.w	r2, r2, #1
 800c904:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	683a      	ldr	r2, [r7, #0]
 800c916:	430a      	orrs	r2, r1
 800c918:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f850 	bl	800c9c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2220      	movs	r2, #32
 800c92c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c938:	2300      	movs	r3, #0
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3710      	adds	r7, #16
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b084      	sub	sp, #16
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
 800c94a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c952:	2b01      	cmp	r3, #1
 800c954:	d101      	bne.n	800c95a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c956:	2302      	movs	r3, #2
 800c958:	e02d      	b.n	800c9b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2201      	movs	r2, #1
 800c95e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2224      	movs	r2, #36	; 0x24
 800c966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f022 0201 	bic.w	r2, r2, #1
 800c980:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	683a      	ldr	r2, [r7, #0]
 800c992:	430a      	orrs	r2, r1
 800c994:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 f812 	bl	800c9c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2220      	movs	r2, #32
 800c9a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
	...

0800c9c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b089      	sub	sp, #36	; 0x24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c9c8:	4a2f      	ldr	r2, [pc, #188]	; (800ca88 <UARTEx_SetNbDataToProcess+0xc8>)
 800c9ca:	f107 0314 	add.w	r3, r7, #20
 800c9ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c9d2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c9d6:	4a2d      	ldr	r2, [pc, #180]	; (800ca8c <UARTEx_SetNbDataToProcess+0xcc>)
 800c9d8:	f107 030c 	add.w	r3, r7, #12
 800c9dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c9e0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d108      	bne.n	800c9fe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c9fc:	e03d      	b.n	800ca7a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c9fe:	2308      	movs	r3, #8
 800ca00:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ca02:	2308      	movs	r3, #8
 800ca04:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	0e5b      	lsrs	r3, r3, #25
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	f003 0307 	and.w	r3, r3, #7
 800ca14:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	0f5b      	lsrs	r3, r3, #29
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	f003 0307 	and.w	r3, r3, #7
 800ca24:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ca26:	7fbb      	ldrb	r3, [r7, #30]
 800ca28:	7f3a      	ldrb	r2, [r7, #28]
 800ca2a:	f107 0120 	add.w	r1, r7, #32
 800ca2e:	440a      	add	r2, r1
 800ca30:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ca34:	fb02 f303 	mul.w	r3, r2, r3
 800ca38:	7f3a      	ldrb	r2, [r7, #28]
 800ca3a:	f107 0120 	add.w	r1, r7, #32
 800ca3e:	440a      	add	r2, r1
 800ca40:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ca44:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca48:	b29a      	uxth	r2, r3
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ca50:	7ffb      	ldrb	r3, [r7, #31]
 800ca52:	7f7a      	ldrb	r2, [r7, #29]
 800ca54:	f107 0120 	add.w	r1, r7, #32
 800ca58:	440a      	add	r2, r1
 800ca5a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ca5e:	fb02 f303 	mul.w	r3, r2, r3
 800ca62:	7f7a      	ldrb	r2, [r7, #29]
 800ca64:	f107 0120 	add.w	r1, r7, #32
 800ca68:	440a      	add	r2, r1
 800ca6a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ca6e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca72:	b29a      	uxth	r2, r3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ca7a:	bf00      	nop
 800ca7c:	3724      	adds	r7, #36	; 0x24
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop
 800ca88:	08015b4c 	.word	0x08015b4c
 800ca8c:	08015b54 	.word	0x08015b54

0800ca90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca90:	b084      	sub	sp, #16
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b084      	sub	sp, #16
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
 800ca9a:	f107 001c 	add.w	r0, r7, #28
 800ca9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800caa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d122      	bne.n	800caee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800cabc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d105      	bne.n	800cae2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f001 f9da 	bl	800de9c <USB_CoreReset>
 800cae8:	4603      	mov	r3, r0
 800caea:	73fb      	strb	r3, [r7, #15]
 800caec:	e01a      	b.n	800cb24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f001 f9ce 	bl	800de9c <USB_CoreReset>
 800cb00:	4603      	mov	r3, r0
 800cb02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cb04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d106      	bne.n	800cb18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	639a      	str	r2, [r3, #56]	; 0x38
 800cb16:	e005      	b.n	800cb24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800cb24:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb30:	b004      	add	sp, #16
 800cb32:	4770      	bx	lr

0800cb34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b087      	sub	sp, #28
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cb42:	79fb      	ldrb	r3, [r7, #7]
 800cb44:	2b02      	cmp	r3, #2
 800cb46:	d165      	bne.n	800cc14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	4a3e      	ldr	r2, [pc, #248]	; (800cc44 <USB_SetTurnaroundTime+0x110>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d906      	bls.n	800cb5e <USB_SetTurnaroundTime+0x2a>
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	4a3d      	ldr	r2, [pc, #244]	; (800cc48 <USB_SetTurnaroundTime+0x114>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d802      	bhi.n	800cb5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cb58:	230f      	movs	r3, #15
 800cb5a:	617b      	str	r3, [r7, #20]
 800cb5c:	e05c      	b.n	800cc18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	4a39      	ldr	r2, [pc, #228]	; (800cc48 <USB_SetTurnaroundTime+0x114>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d906      	bls.n	800cb74 <USB_SetTurnaroundTime+0x40>
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	4a38      	ldr	r2, [pc, #224]	; (800cc4c <USB_SetTurnaroundTime+0x118>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d802      	bhi.n	800cb74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cb6e:	230e      	movs	r3, #14
 800cb70:	617b      	str	r3, [r7, #20]
 800cb72:	e051      	b.n	800cc18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	4a35      	ldr	r2, [pc, #212]	; (800cc4c <USB_SetTurnaroundTime+0x118>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d906      	bls.n	800cb8a <USB_SetTurnaroundTime+0x56>
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	4a34      	ldr	r2, [pc, #208]	; (800cc50 <USB_SetTurnaroundTime+0x11c>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d802      	bhi.n	800cb8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cb84:	230d      	movs	r3, #13
 800cb86:	617b      	str	r3, [r7, #20]
 800cb88:	e046      	b.n	800cc18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	4a30      	ldr	r2, [pc, #192]	; (800cc50 <USB_SetTurnaroundTime+0x11c>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d906      	bls.n	800cba0 <USB_SetTurnaroundTime+0x6c>
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	4a2f      	ldr	r2, [pc, #188]	; (800cc54 <USB_SetTurnaroundTime+0x120>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d802      	bhi.n	800cba0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cb9a:	230c      	movs	r3, #12
 800cb9c:	617b      	str	r3, [r7, #20]
 800cb9e:	e03b      	b.n	800cc18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	4a2c      	ldr	r2, [pc, #176]	; (800cc54 <USB_SetTurnaroundTime+0x120>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d906      	bls.n	800cbb6 <USB_SetTurnaroundTime+0x82>
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	4a2b      	ldr	r2, [pc, #172]	; (800cc58 <USB_SetTurnaroundTime+0x124>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d802      	bhi.n	800cbb6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cbb0:	230b      	movs	r3, #11
 800cbb2:	617b      	str	r3, [r7, #20]
 800cbb4:	e030      	b.n	800cc18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	4a27      	ldr	r2, [pc, #156]	; (800cc58 <USB_SetTurnaroundTime+0x124>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d906      	bls.n	800cbcc <USB_SetTurnaroundTime+0x98>
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	4a26      	ldr	r2, [pc, #152]	; (800cc5c <USB_SetTurnaroundTime+0x128>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d802      	bhi.n	800cbcc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cbc6:	230a      	movs	r3, #10
 800cbc8:	617b      	str	r3, [r7, #20]
 800cbca:	e025      	b.n	800cc18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	4a23      	ldr	r2, [pc, #140]	; (800cc5c <USB_SetTurnaroundTime+0x128>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d906      	bls.n	800cbe2 <USB_SetTurnaroundTime+0xae>
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	4a22      	ldr	r2, [pc, #136]	; (800cc60 <USB_SetTurnaroundTime+0x12c>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d802      	bhi.n	800cbe2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cbdc:	2309      	movs	r3, #9
 800cbde:	617b      	str	r3, [r7, #20]
 800cbe0:	e01a      	b.n	800cc18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	4a1e      	ldr	r2, [pc, #120]	; (800cc60 <USB_SetTurnaroundTime+0x12c>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d906      	bls.n	800cbf8 <USB_SetTurnaroundTime+0xc4>
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	4a1d      	ldr	r2, [pc, #116]	; (800cc64 <USB_SetTurnaroundTime+0x130>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d802      	bhi.n	800cbf8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cbf2:	2308      	movs	r3, #8
 800cbf4:	617b      	str	r3, [r7, #20]
 800cbf6:	e00f      	b.n	800cc18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	4a1a      	ldr	r2, [pc, #104]	; (800cc64 <USB_SetTurnaroundTime+0x130>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d906      	bls.n	800cc0e <USB_SetTurnaroundTime+0xda>
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	4a19      	ldr	r2, [pc, #100]	; (800cc68 <USB_SetTurnaroundTime+0x134>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d802      	bhi.n	800cc0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cc08:	2307      	movs	r3, #7
 800cc0a:	617b      	str	r3, [r7, #20]
 800cc0c:	e004      	b.n	800cc18 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cc0e:	2306      	movs	r3, #6
 800cc10:	617b      	str	r3, [r7, #20]
 800cc12:	e001      	b.n	800cc18 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cc14:	2309      	movs	r3, #9
 800cc16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	68da      	ldr	r2, [r3, #12]
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	029b      	lsls	r3, r3, #10
 800cc2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cc30:	431a      	orrs	r2, r3
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cc36:	2300      	movs	r3, #0
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	371c      	adds	r7, #28
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr
 800cc44:	00d8acbf 	.word	0x00d8acbf
 800cc48:	00e4e1bf 	.word	0x00e4e1bf
 800cc4c:	00f423ff 	.word	0x00f423ff
 800cc50:	0106737f 	.word	0x0106737f
 800cc54:	011a499f 	.word	0x011a499f
 800cc58:	01312cff 	.word	0x01312cff
 800cc5c:	014ca43f 	.word	0x014ca43f
 800cc60:	016e35ff 	.word	0x016e35ff
 800cc64:	01a6ab1f 	.word	0x01a6ab1f
 800cc68:	01e847ff 	.word	0x01e847ff

0800cc6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	f043 0201 	orr.w	r2, r3, #1
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cc80:	2300      	movs	r3, #0
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	370c      	adds	r7, #12
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr

0800cc8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc8e:	b480      	push	{r7}
 800cc90:	b083      	sub	sp, #12
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	f023 0201 	bic.w	r2, r3, #1
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cca2:	2300      	movs	r3, #0
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	460b      	mov	r3, r1
 800ccba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ccc8:	78fb      	ldrb	r3, [r7, #3]
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d106      	bne.n	800ccdc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	60da      	str	r2, [r3, #12]
 800ccda:	e00b      	b.n	800ccf4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ccdc:	78fb      	ldrb	r3, [r7, #3]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d106      	bne.n	800ccf0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	60da      	str	r2, [r3, #12]
 800ccee:	e001      	b.n	800ccf4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e003      	b.n	800ccfc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ccf4:	2032      	movs	r0, #50	; 0x32
 800ccf6:	f7f6 fb51 	bl	800339c <HAL_Delay>

  return HAL_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cd04:	b084      	sub	sp, #16
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b086      	sub	sp, #24
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
 800cd0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cd12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cd16:	2300      	movs	r3, #0
 800cd18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cd1e:	2300      	movs	r3, #0
 800cd20:	613b      	str	r3, [r7, #16]
 800cd22:	e009      	b.n	800cd38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	3340      	adds	r3, #64	; 0x40
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4413      	add	r3, r2
 800cd2e:	2200      	movs	r2, #0
 800cd30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	3301      	adds	r3, #1
 800cd36:	613b      	str	r3, [r7, #16]
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	2b0e      	cmp	r3, #14
 800cd3c:	d9f2      	bls.n	800cd24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cd3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d11c      	bne.n	800cd7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd52:	f043 0302 	orr.w	r3, r3, #2
 800cd56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	601a      	str	r2, [r3, #0]
 800cd7c:	e005      	b.n	800cd8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cd90:	461a      	mov	r2, r3
 800cd92:	2300      	movs	r3, #0
 800cd94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cda4:	461a      	mov	r2, r3
 800cda6:	680b      	ldr	r3, [r1, #0]
 800cda8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cdaa:	2103      	movs	r1, #3
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 f93d 	bl	800d02c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cdb2:	2110      	movs	r1, #16
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 f8f1 	bl	800cf9c <USB_FlushTxFifo>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d001      	beq.n	800cdc4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 f90f 	bl	800cfe8 <USB_FlushRxFifo>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d001      	beq.n	800cdd4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdda:	461a      	mov	r2, r3
 800cddc:	2300      	movs	r3, #0
 800cdde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cde6:	461a      	mov	r2, r3
 800cde8:	2300      	movs	r3, #0
 800cdea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	613b      	str	r3, [r7, #16]
 800cdfc:	e043      	b.n	800ce86 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	015a      	lsls	r2, r3, #5
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	4413      	add	r3, r2
 800ce06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce14:	d118      	bne.n	800ce48 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d10a      	bne.n	800ce32 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	015a      	lsls	r2, r3, #5
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	4413      	add	r3, r2
 800ce24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce28:	461a      	mov	r2, r3
 800ce2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ce2e:	6013      	str	r3, [r2, #0]
 800ce30:	e013      	b.n	800ce5a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	015a      	lsls	r2, r3, #5
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	4413      	add	r3, r2
 800ce3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce3e:	461a      	mov	r2, r3
 800ce40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ce44:	6013      	str	r3, [r2, #0]
 800ce46:	e008      	b.n	800ce5a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	015a      	lsls	r2, r3, #5
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	4413      	add	r3, r2
 800ce50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce54:	461a      	mov	r2, r3
 800ce56:	2300      	movs	r3, #0
 800ce58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	015a      	lsls	r2, r3, #5
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	4413      	add	r3, r2
 800ce62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce66:	461a      	mov	r2, r3
 800ce68:	2300      	movs	r3, #0
 800ce6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	015a      	lsls	r2, r3, #5
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	4413      	add	r3, r2
 800ce74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce78:	461a      	mov	r2, r3
 800ce7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ce7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	3301      	adds	r3, #1
 800ce84:	613b      	str	r3, [r7, #16]
 800ce86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce88:	693a      	ldr	r2, [r7, #16]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d3b7      	bcc.n	800cdfe <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce8e:	2300      	movs	r3, #0
 800ce90:	613b      	str	r3, [r7, #16]
 800ce92:	e043      	b.n	800cf1c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	015a      	lsls	r2, r3, #5
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ceaa:	d118      	bne.n	800cede <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d10a      	bne.n	800cec8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	015a      	lsls	r2, r3, #5
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	4413      	add	r3, r2
 800ceba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cebe:	461a      	mov	r2, r3
 800cec0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cec4:	6013      	str	r3, [r2, #0]
 800cec6:	e013      	b.n	800cef0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	015a      	lsls	r2, r3, #5
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	4413      	add	r3, r2
 800ced0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ced4:	461a      	mov	r2, r3
 800ced6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ceda:	6013      	str	r3, [r2, #0]
 800cedc:	e008      	b.n	800cef0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	015a      	lsls	r2, r3, #5
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	4413      	add	r3, r2
 800cee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceea:	461a      	mov	r2, r3
 800ceec:	2300      	movs	r3, #0
 800ceee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	015a      	lsls	r2, r3, #5
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	4413      	add	r3, r2
 800cef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cefc:	461a      	mov	r2, r3
 800cefe:	2300      	movs	r3, #0
 800cf00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	015a      	lsls	r2, r3, #5
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	4413      	add	r3, r2
 800cf0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf0e:	461a      	mov	r2, r3
 800cf10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cf14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	613b      	str	r3, [r7, #16]
 800cf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1e:	693a      	ldr	r2, [r7, #16]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d3b7      	bcc.n	800ce94 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	68fa      	ldr	r2, [r7, #12]
 800cf2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cf44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	699b      	ldr	r3, [r3, #24]
 800cf4a:	f043 0210 	orr.w	r2, r3, #16
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	699a      	ldr	r2, [r3, #24]
 800cf56:	4b10      	ldr	r3, [pc, #64]	; (800cf98 <USB_DevInit+0x294>)
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cf5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d005      	beq.n	800cf70 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	699b      	ldr	r3, [r3, #24]
 800cf68:	f043 0208 	orr.w	r2, r3, #8
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cf70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d107      	bne.n	800cf86 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	699b      	ldr	r3, [r3, #24]
 800cf7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf7e:	f043 0304 	orr.w	r3, r3, #4
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cf86:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3718      	adds	r7, #24
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf92:	b004      	add	sp, #16
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	803c3800 	.word	0x803c3800

0800cf9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b085      	sub	sp, #20
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	019b      	lsls	r3, r3, #6
 800cfae:	f043 0220 	orr.w	r2, r3, #32
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	60fb      	str	r3, [r7, #12]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	4a09      	ldr	r2, [pc, #36]	; (800cfe4 <USB_FlushTxFifo+0x48>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d901      	bls.n	800cfc8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cfc4:	2303      	movs	r3, #3
 800cfc6:	e006      	b.n	800cfd6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	691b      	ldr	r3, [r3, #16]
 800cfcc:	f003 0320 	and.w	r3, r3, #32
 800cfd0:	2b20      	cmp	r3, #32
 800cfd2:	d0f0      	beq.n	800cfb6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop
 800cfe4:	00030d40 	.word	0x00030d40

0800cfe8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b085      	sub	sp, #20
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cff0:	2300      	movs	r3, #0
 800cff2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2210      	movs	r2, #16
 800cff8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	3301      	adds	r3, #1
 800cffe:	60fb      	str	r3, [r7, #12]
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	4a09      	ldr	r2, [pc, #36]	; (800d028 <USB_FlushRxFifo+0x40>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d901      	bls.n	800d00c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d008:	2303      	movs	r3, #3
 800d00a:	e006      	b.n	800d01a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	691b      	ldr	r3, [r3, #16]
 800d010:	f003 0310 	and.w	r3, r3, #16
 800d014:	2b10      	cmp	r3, #16
 800d016:	d0f0      	beq.n	800cffa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3714      	adds	r7, #20
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	00030d40 	.word	0x00030d40

0800d02c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b085      	sub	sp, #20
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	460b      	mov	r3, r1
 800d036:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	78fb      	ldrb	r3, [r7, #3]
 800d046:	68f9      	ldr	r1, [r7, #12]
 800d048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d04c:	4313      	orrs	r3, r2
 800d04e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	3714      	adds	r7, #20
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr

0800d05e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d05e:	b480      	push	{r7}
 800d060:	b087      	sub	sp, #28
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	f003 0306 	and.w	r3, r3, #6
 800d076:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2b02      	cmp	r3, #2
 800d07c:	d002      	beq.n	800d084 <USB_GetDevSpeed+0x26>
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2b06      	cmp	r3, #6
 800d082:	d102      	bne.n	800d08a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d084:	2302      	movs	r3, #2
 800d086:	75fb      	strb	r3, [r7, #23]
 800d088:	e001      	b.n	800d08e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800d08a:	230f      	movs	r3, #15
 800d08c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d08e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d090:	4618      	mov	r0, r3
 800d092:	371c      	adds	r7, #28
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	785b      	ldrb	r3, [r3, #1]
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d13a      	bne.n	800d12e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0be:	69da      	ldr	r2, [r3, #28]
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	f003 030f 	and.w	r3, r3, #15
 800d0c8:	2101      	movs	r1, #1
 800d0ca:	fa01 f303 	lsl.w	r3, r1, r3
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	68f9      	ldr	r1, [r7, #12]
 800d0d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	015a      	lsls	r2, r3, #5
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d155      	bne.n	800d19c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	015a      	lsls	r2, r3, #5
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	4413      	add	r3, r2
 800d0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	689b      	ldr	r3, [r3, #8]
 800d102:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	78db      	ldrb	r3, [r3, #3]
 800d10a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d10c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	059b      	lsls	r3, r3, #22
 800d112:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d114:	4313      	orrs	r3, r2
 800d116:	68ba      	ldr	r2, [r7, #8]
 800d118:	0151      	lsls	r1, r2, #5
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	440a      	add	r2, r1
 800d11e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d12a:	6013      	str	r3, [r2, #0]
 800d12c:	e036      	b.n	800d19c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d134:	69da      	ldr	r2, [r3, #28]
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	f003 030f 	and.w	r3, r3, #15
 800d13e:	2101      	movs	r1, #1
 800d140:	fa01 f303 	lsl.w	r3, r1, r3
 800d144:	041b      	lsls	r3, r3, #16
 800d146:	68f9      	ldr	r1, [r7, #12]
 800d148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d14c:	4313      	orrs	r3, r2
 800d14e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	015a      	lsls	r2, r3, #5
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	4413      	add	r3, r2
 800d158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d162:	2b00      	cmp	r3, #0
 800d164:	d11a      	bne.n	800d19c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	015a      	lsls	r2, r3, #5
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	4413      	add	r3, r2
 800d16e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	689b      	ldr	r3, [r3, #8]
 800d178:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	78db      	ldrb	r3, [r3, #3]
 800d180:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d182:	430b      	orrs	r3, r1
 800d184:	4313      	orrs	r3, r2
 800d186:	68ba      	ldr	r2, [r7, #8]
 800d188:	0151      	lsls	r1, r2, #5
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	440a      	add	r2, r1
 800d18e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d19a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d19c:	2300      	movs	r3, #0
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3714      	adds	r7, #20
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr
	...

0800d1ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b085      	sub	sp, #20
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	785b      	ldrb	r3, [r3, #1]
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d161      	bne.n	800d28c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	015a      	lsls	r2, r3, #5
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1de:	d11f      	bne.n	800d220 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	015a      	lsls	r2, r3, #5
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	68ba      	ldr	r2, [r7, #8]
 800d1f0:	0151      	lsls	r1, r2, #5
 800d1f2:	68fa      	ldr	r2, [r7, #12]
 800d1f4:	440a      	add	r2, r1
 800d1f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d1fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	015a      	lsls	r2, r3, #5
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	4413      	add	r3, r2
 800d208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	68ba      	ldr	r2, [r7, #8]
 800d210:	0151      	lsls	r1, r2, #5
 800d212:	68fa      	ldr	r2, [r7, #12]
 800d214:	440a      	add	r2, r1
 800d216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d21a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d21e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	f003 030f 	and.w	r3, r3, #15
 800d230:	2101      	movs	r1, #1
 800d232:	fa01 f303 	lsl.w	r3, r1, r3
 800d236:	b29b      	uxth	r3, r3
 800d238:	43db      	mvns	r3, r3
 800d23a:	68f9      	ldr	r1, [r7, #12]
 800d23c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d240:	4013      	ands	r3, r2
 800d242:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d24a:	69da      	ldr	r2, [r3, #28]
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	f003 030f 	and.w	r3, r3, #15
 800d254:	2101      	movs	r1, #1
 800d256:	fa01 f303 	lsl.w	r3, r1, r3
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	43db      	mvns	r3, r3
 800d25e:	68f9      	ldr	r1, [r7, #12]
 800d260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d264:	4013      	ands	r3, r2
 800d266:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	015a      	lsls	r2, r3, #5
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	4413      	add	r3, r2
 800d270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	0159      	lsls	r1, r3, #5
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	440b      	add	r3, r1
 800d27e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d282:	4619      	mov	r1, r3
 800d284:	4b35      	ldr	r3, [pc, #212]	; (800d35c <USB_DeactivateEndpoint+0x1b0>)
 800d286:	4013      	ands	r3, r2
 800d288:	600b      	str	r3, [r1, #0]
 800d28a:	e060      	b.n	800d34e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	015a      	lsls	r2, r3, #5
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	4413      	add	r3, r2
 800d294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d29e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d2a2:	d11f      	bne.n	800d2e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	015a      	lsls	r2, r3, #5
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	68ba      	ldr	r2, [r7, #8]
 800d2b4:	0151      	lsls	r1, r2, #5
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	440a      	add	r2, r1
 800d2ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d2c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	015a      	lsls	r2, r3, #5
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	68ba      	ldr	r2, [r7, #8]
 800d2d4:	0151      	lsls	r1, r2, #5
 800d2d6:	68fa      	ldr	r2, [r7, #12]
 800d2d8:	440a      	add	r2, r1
 800d2da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d2e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	f003 030f 	and.w	r3, r3, #15
 800d2f4:	2101      	movs	r1, #1
 800d2f6:	fa01 f303 	lsl.w	r3, r1, r3
 800d2fa:	041b      	lsls	r3, r3, #16
 800d2fc:	43db      	mvns	r3, r3
 800d2fe:	68f9      	ldr	r1, [r7, #12]
 800d300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d304:	4013      	ands	r3, r2
 800d306:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d30e:	69da      	ldr	r2, [r3, #28]
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	f003 030f 	and.w	r3, r3, #15
 800d318:	2101      	movs	r1, #1
 800d31a:	fa01 f303 	lsl.w	r3, r1, r3
 800d31e:	041b      	lsls	r3, r3, #16
 800d320:	43db      	mvns	r3, r3
 800d322:	68f9      	ldr	r1, [r7, #12]
 800d324:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d328:	4013      	ands	r3, r2
 800d32a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	015a      	lsls	r2, r3, #5
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	4413      	add	r3, r2
 800d334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	0159      	lsls	r1, r3, #5
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	440b      	add	r3, r1
 800d342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d346:	4619      	mov	r1, r3
 800d348:	4b05      	ldr	r3, [pc, #20]	; (800d360 <USB_DeactivateEndpoint+0x1b4>)
 800d34a:	4013      	ands	r3, r2
 800d34c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d34e:	2300      	movs	r3, #0
}
 800d350:	4618      	mov	r0, r3
 800d352:	3714      	adds	r7, #20
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr
 800d35c:	ec337800 	.word	0xec337800
 800d360:	eff37800 	.word	0xeff37800

0800d364 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b086      	sub	sp, #24
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	785b      	ldrb	r3, [r3, #1]
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	f040 810a 	bne.w	800d596 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	695b      	ldr	r3, [r3, #20]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d132      	bne.n	800d3f0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	015a      	lsls	r2, r3, #5
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	4413      	add	r3, r2
 800d392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d396:	691b      	ldr	r3, [r3, #16]
 800d398:	693a      	ldr	r2, [r7, #16]
 800d39a:	0151      	lsls	r1, r2, #5
 800d39c:	697a      	ldr	r2, [r7, #20]
 800d39e:	440a      	add	r2, r1
 800d3a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d3a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d3ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	015a      	lsls	r2, r3, #5
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3ba:	691b      	ldr	r3, [r3, #16]
 800d3bc:	693a      	ldr	r2, [r7, #16]
 800d3be:	0151      	lsls	r1, r2, #5
 800d3c0:	697a      	ldr	r2, [r7, #20]
 800d3c2:	440a      	add	r2, r1
 800d3c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d3cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	015a      	lsls	r2, r3, #5
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	4413      	add	r3, r2
 800d3d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3da:	691b      	ldr	r3, [r3, #16]
 800d3dc:	693a      	ldr	r2, [r7, #16]
 800d3de:	0151      	lsls	r1, r2, #5
 800d3e0:	697a      	ldr	r2, [r7, #20]
 800d3e2:	440a      	add	r2, r1
 800d3e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3e8:	0cdb      	lsrs	r3, r3, #19
 800d3ea:	04db      	lsls	r3, r3, #19
 800d3ec:	6113      	str	r3, [r2, #16]
 800d3ee:	e074      	b.n	800d4da <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	015a      	lsls	r2, r3, #5
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3fc:	691b      	ldr	r3, [r3, #16]
 800d3fe:	693a      	ldr	r2, [r7, #16]
 800d400:	0151      	lsls	r1, r2, #5
 800d402:	697a      	ldr	r2, [r7, #20]
 800d404:	440a      	add	r2, r1
 800d406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d40a:	0cdb      	lsrs	r3, r3, #19
 800d40c:	04db      	lsls	r3, r3, #19
 800d40e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	015a      	lsls	r2, r3, #5
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	4413      	add	r3, r2
 800d418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d41c:	691b      	ldr	r3, [r3, #16]
 800d41e:	693a      	ldr	r2, [r7, #16]
 800d420:	0151      	lsls	r1, r2, #5
 800d422:	697a      	ldr	r2, [r7, #20]
 800d424:	440a      	add	r2, r1
 800d426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d42a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d42e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d432:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	015a      	lsls	r2, r3, #5
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	4413      	add	r3, r2
 800d43c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d440:	691a      	ldr	r2, [r3, #16]
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	6959      	ldr	r1, [r3, #20]
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	440b      	add	r3, r1
 800d44c:	1e59      	subs	r1, r3, #1
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	fbb1 f3f3 	udiv	r3, r1, r3
 800d456:	04d9      	lsls	r1, r3, #19
 800d458:	4baf      	ldr	r3, [pc, #700]	; (800d718 <USB_EPStartXfer+0x3b4>)
 800d45a:	400b      	ands	r3, r1
 800d45c:	6939      	ldr	r1, [r7, #16]
 800d45e:	0148      	lsls	r0, r1, #5
 800d460:	6979      	ldr	r1, [r7, #20]
 800d462:	4401      	add	r1, r0
 800d464:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d468:	4313      	orrs	r3, r2
 800d46a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	015a      	lsls	r2, r3, #5
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	4413      	add	r3, r2
 800d474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d478:	691a      	ldr	r2, [r3, #16]
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	695b      	ldr	r3, [r3, #20]
 800d47e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d482:	6939      	ldr	r1, [r7, #16]
 800d484:	0148      	lsls	r0, r1, #5
 800d486:	6979      	ldr	r1, [r7, #20]
 800d488:	4401      	add	r1, r0
 800d48a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d48e:	4313      	orrs	r3, r2
 800d490:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	78db      	ldrb	r3, [r3, #3]
 800d496:	2b01      	cmp	r3, #1
 800d498:	d11f      	bne.n	800d4da <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	015a      	lsls	r2, r3, #5
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4a6:	691b      	ldr	r3, [r3, #16]
 800d4a8:	693a      	ldr	r2, [r7, #16]
 800d4aa:	0151      	lsls	r1, r2, #5
 800d4ac:	697a      	ldr	r2, [r7, #20]
 800d4ae:	440a      	add	r2, r1
 800d4b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d4b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	015a      	lsls	r2, r3, #5
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4c6:	691b      	ldr	r3, [r3, #16]
 800d4c8:	693a      	ldr	r2, [r7, #16]
 800d4ca:	0151      	lsls	r1, r2, #5
 800d4cc:	697a      	ldr	r2, [r7, #20]
 800d4ce:	440a      	add	r2, r1
 800d4d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d4d8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	015a      	lsls	r2, r3, #5
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	693a      	ldr	r2, [r7, #16]
 800d4ea:	0151      	lsls	r1, r2, #5
 800d4ec:	697a      	ldr	r2, [r7, #20]
 800d4ee:	440a      	add	r2, r1
 800d4f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d4f8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	78db      	ldrb	r3, [r3, #3]
 800d4fe:	2b01      	cmp	r3, #1
 800d500:	d015      	beq.n	800d52e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	695b      	ldr	r3, [r3, #20]
 800d506:	2b00      	cmp	r3, #0
 800d508:	f000 8100 	beq.w	800d70c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	f003 030f 	and.w	r3, r3, #15
 800d51c:	2101      	movs	r1, #1
 800d51e:	fa01 f303 	lsl.w	r3, r1, r3
 800d522:	6979      	ldr	r1, [r7, #20]
 800d524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d528:	4313      	orrs	r3, r2
 800d52a:	634b      	str	r3, [r1, #52]	; 0x34
 800d52c:	e0ee      	b.n	800d70c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d110      	bne.n	800d560 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	015a      	lsls	r2, r3, #5
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	4413      	add	r3, r2
 800d546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	693a      	ldr	r2, [r7, #16]
 800d54e:	0151      	lsls	r1, r2, #5
 800d550:	697a      	ldr	r2, [r7, #20]
 800d552:	440a      	add	r2, r1
 800d554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d558:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d55c:	6013      	str	r3, [r2, #0]
 800d55e:	e00f      	b.n	800d580 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	015a      	lsls	r2, r3, #5
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	4413      	add	r3, r2
 800d568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	693a      	ldr	r2, [r7, #16]
 800d570:	0151      	lsls	r1, r2, #5
 800d572:	697a      	ldr	r2, [r7, #20]
 800d574:	440a      	add	r2, r1
 800d576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d57a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d57e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	68d9      	ldr	r1, [r3, #12]
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	781a      	ldrb	r2, [r3, #0]
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	695b      	ldr	r3, [r3, #20]
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 f9e2 	bl	800d958 <USB_WritePacket>
 800d594:	e0ba      	b.n	800d70c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	015a      	lsls	r2, r3, #5
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	4413      	add	r3, r2
 800d59e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5a2:	691b      	ldr	r3, [r3, #16]
 800d5a4:	693a      	ldr	r2, [r7, #16]
 800d5a6:	0151      	lsls	r1, r2, #5
 800d5a8:	697a      	ldr	r2, [r7, #20]
 800d5aa:	440a      	add	r2, r1
 800d5ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5b0:	0cdb      	lsrs	r3, r3, #19
 800d5b2:	04db      	lsls	r3, r3, #19
 800d5b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	015a      	lsls	r2, r3, #5
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	4413      	add	r3, r2
 800d5be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5c2:	691b      	ldr	r3, [r3, #16]
 800d5c4:	693a      	ldr	r2, [r7, #16]
 800d5c6:	0151      	lsls	r1, r2, #5
 800d5c8:	697a      	ldr	r2, [r7, #20]
 800d5ca:	440a      	add	r2, r1
 800d5cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d5d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d5d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	695b      	ldr	r3, [r3, #20]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d123      	bne.n	800d62a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	015a      	lsls	r2, r3, #5
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	4413      	add	r3, r2
 800d5ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ee:	691a      	ldr	r2, [r3, #16]
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d5f8:	6939      	ldr	r1, [r7, #16]
 800d5fa:	0148      	lsls	r0, r1, #5
 800d5fc:	6979      	ldr	r1, [r7, #20]
 800d5fe:	4401      	add	r1, r0
 800d600:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d604:	4313      	orrs	r3, r2
 800d606:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	015a      	lsls	r2, r3, #5
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	4413      	add	r3, r2
 800d610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	693a      	ldr	r2, [r7, #16]
 800d618:	0151      	lsls	r1, r2, #5
 800d61a:	697a      	ldr	r2, [r7, #20]
 800d61c:	440a      	add	r2, r1
 800d61e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d622:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d626:	6113      	str	r3, [r2, #16]
 800d628:	e033      	b.n	800d692 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	695a      	ldr	r2, [r3, #20]
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	689b      	ldr	r3, [r3, #8]
 800d632:	4413      	add	r3, r2
 800d634:	1e5a      	subs	r2, r3, #1
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d63e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	015a      	lsls	r2, r3, #5
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	4413      	add	r3, r2
 800d648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d64c:	691a      	ldr	r2, [r3, #16]
 800d64e:	89fb      	ldrh	r3, [r7, #14]
 800d650:	04d9      	lsls	r1, r3, #19
 800d652:	4b31      	ldr	r3, [pc, #196]	; (800d718 <USB_EPStartXfer+0x3b4>)
 800d654:	400b      	ands	r3, r1
 800d656:	6939      	ldr	r1, [r7, #16]
 800d658:	0148      	lsls	r0, r1, #5
 800d65a:	6979      	ldr	r1, [r7, #20]
 800d65c:	4401      	add	r1, r0
 800d65e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d662:	4313      	orrs	r3, r2
 800d664:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	015a      	lsls	r2, r3, #5
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	4413      	add	r3, r2
 800d66e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d672:	691a      	ldr	r2, [r3, #16]
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	89f9      	ldrh	r1, [r7, #14]
 800d67a:	fb01 f303 	mul.w	r3, r1, r3
 800d67e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d682:	6939      	ldr	r1, [r7, #16]
 800d684:	0148      	lsls	r0, r1, #5
 800d686:	6979      	ldr	r1, [r7, #20]
 800d688:	4401      	add	r1, r0
 800d68a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d68e:	4313      	orrs	r3, r2
 800d690:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	78db      	ldrb	r3, [r3, #3]
 800d696:	2b01      	cmp	r3, #1
 800d698:	d128      	bne.n	800d6ec <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6a0:	689b      	ldr	r3, [r3, #8]
 800d6a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d110      	bne.n	800d6cc <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	015a      	lsls	r2, r3, #5
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	693a      	ldr	r2, [r7, #16]
 800d6ba:	0151      	lsls	r1, r2, #5
 800d6bc:	697a      	ldr	r2, [r7, #20]
 800d6be:	440a      	add	r2, r1
 800d6c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d6c8:	6013      	str	r3, [r2, #0]
 800d6ca:	e00f      	b.n	800d6ec <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	015a      	lsls	r2, r3, #5
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	4413      	add	r3, r2
 800d6d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	693a      	ldr	r2, [r7, #16]
 800d6dc:	0151      	lsls	r1, r2, #5
 800d6de:	697a      	ldr	r2, [r7, #20]
 800d6e0:	440a      	add	r2, r1
 800d6e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d6e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	015a      	lsls	r2, r3, #5
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	4413      	add	r3, r2
 800d6f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	693a      	ldr	r2, [r7, #16]
 800d6fc:	0151      	lsls	r1, r2, #5
 800d6fe:	697a      	ldr	r2, [r7, #20]
 800d700:	440a      	add	r2, r1
 800d702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d706:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d70a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d70c:	2300      	movs	r3, #0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3718      	adds	r7, #24
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	1ff80000 	.word	0x1ff80000

0800d71c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b085      	sub	sp, #20
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	785b      	ldrb	r3, [r3, #1]
 800d734:	2b01      	cmp	r3, #1
 800d736:	f040 80ab 	bne.w	800d890 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	695b      	ldr	r3, [r3, #20]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d132      	bne.n	800d7a8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	015a      	lsls	r2, r3, #5
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	4413      	add	r3, r2
 800d74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d74e:	691b      	ldr	r3, [r3, #16]
 800d750:	68ba      	ldr	r2, [r7, #8]
 800d752:	0151      	lsls	r1, r2, #5
 800d754:	68fa      	ldr	r2, [r7, #12]
 800d756:	440a      	add	r2, r1
 800d758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d75c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d760:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d764:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	015a      	lsls	r2, r3, #5
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	4413      	add	r3, r2
 800d76e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d772:	691b      	ldr	r3, [r3, #16]
 800d774:	68ba      	ldr	r2, [r7, #8]
 800d776:	0151      	lsls	r1, r2, #5
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	440a      	add	r2, r1
 800d77c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d780:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d784:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	015a      	lsls	r2, r3, #5
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	4413      	add	r3, r2
 800d78e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d792:	691b      	ldr	r3, [r3, #16]
 800d794:	68ba      	ldr	r2, [r7, #8]
 800d796:	0151      	lsls	r1, r2, #5
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	440a      	add	r2, r1
 800d79c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7a0:	0cdb      	lsrs	r3, r3, #19
 800d7a2:	04db      	lsls	r3, r3, #19
 800d7a4:	6113      	str	r3, [r2, #16]
 800d7a6:	e04e      	b.n	800d846 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	015a      	lsls	r2, r3, #5
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	4413      	add	r3, r2
 800d7b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	68ba      	ldr	r2, [r7, #8]
 800d7b8:	0151      	lsls	r1, r2, #5
 800d7ba:	68fa      	ldr	r2, [r7, #12]
 800d7bc:	440a      	add	r2, r1
 800d7be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7c2:	0cdb      	lsrs	r3, r3, #19
 800d7c4:	04db      	lsls	r3, r3, #19
 800d7c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	015a      	lsls	r2, r3, #5
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	4413      	add	r3, r2
 800d7d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7d4:	691b      	ldr	r3, [r3, #16]
 800d7d6:	68ba      	ldr	r2, [r7, #8]
 800d7d8:	0151      	lsls	r1, r2, #5
 800d7da:	68fa      	ldr	r2, [r7, #12]
 800d7dc:	440a      	add	r2, r1
 800d7de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d7e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d7ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	695a      	ldr	r2, [r3, #20]
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	689b      	ldr	r3, [r3, #8]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d903      	bls.n	800d800 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	689a      	ldr	r2, [r3, #8]
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	015a      	lsls	r2, r3, #5
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	4413      	add	r3, r2
 800d808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d80c:	691b      	ldr	r3, [r3, #16]
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	0151      	lsls	r1, r2, #5
 800d812:	68fa      	ldr	r2, [r7, #12]
 800d814:	440a      	add	r2, r1
 800d816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d81a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d81e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	015a      	lsls	r2, r3, #5
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	4413      	add	r3, r2
 800d828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d82c:	691a      	ldr	r2, [r3, #16]
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d836:	68b9      	ldr	r1, [r7, #8]
 800d838:	0148      	lsls	r0, r1, #5
 800d83a:	68f9      	ldr	r1, [r7, #12]
 800d83c:	4401      	add	r1, r0
 800d83e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d842:	4313      	orrs	r3, r2
 800d844:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	015a      	lsls	r2, r3, #5
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	4413      	add	r3, r2
 800d84e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	68ba      	ldr	r2, [r7, #8]
 800d856:	0151      	lsls	r1, r2, #5
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	440a      	add	r2, r1
 800d85c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d860:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d864:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	695b      	ldr	r3, [r3, #20]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d06d      	beq.n	800d94a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	f003 030f 	and.w	r3, r3, #15
 800d87e:	2101      	movs	r1, #1
 800d880:	fa01 f303 	lsl.w	r3, r1, r3
 800d884:	68f9      	ldr	r1, [r7, #12]
 800d886:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d88a:	4313      	orrs	r3, r2
 800d88c:	634b      	str	r3, [r1, #52]	; 0x34
 800d88e:	e05c      	b.n	800d94a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	015a      	lsls	r2, r3, #5
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	4413      	add	r3, r2
 800d898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d89c:	691b      	ldr	r3, [r3, #16]
 800d89e:	68ba      	ldr	r2, [r7, #8]
 800d8a0:	0151      	lsls	r1, r2, #5
 800d8a2:	68fa      	ldr	r2, [r7, #12]
 800d8a4:	440a      	add	r2, r1
 800d8a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8aa:	0cdb      	lsrs	r3, r3, #19
 800d8ac:	04db      	lsls	r3, r3, #19
 800d8ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	015a      	lsls	r2, r3, #5
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8bc:	691b      	ldr	r3, [r3, #16]
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	0151      	lsls	r1, r2, #5
 800d8c2:	68fa      	ldr	r2, [r7, #12]
 800d8c4:	440a      	add	r2, r1
 800d8c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d8ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d8d2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	695b      	ldr	r3, [r3, #20]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d003      	beq.n	800d8e4 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	689a      	ldr	r2, [r3, #8]
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	015a      	lsls	r2, r3, #5
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	4413      	add	r3, r2
 800d8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8f0:	691b      	ldr	r3, [r3, #16]
 800d8f2:	68ba      	ldr	r2, [r7, #8]
 800d8f4:	0151      	lsls	r1, r2, #5
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	440a      	add	r2, r1
 800d8fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d902:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	015a      	lsls	r2, r3, #5
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	4413      	add	r3, r2
 800d90c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d910:	691a      	ldr	r2, [r3, #16]
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	689b      	ldr	r3, [r3, #8]
 800d916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d91a:	68b9      	ldr	r1, [r7, #8]
 800d91c:	0148      	lsls	r0, r1, #5
 800d91e:	68f9      	ldr	r1, [r7, #12]
 800d920:	4401      	add	r1, r0
 800d922:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d926:	4313      	orrs	r3, r2
 800d928:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	015a      	lsls	r2, r3, #5
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	4413      	add	r3, r2
 800d932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	68ba      	ldr	r2, [r7, #8]
 800d93a:	0151      	lsls	r1, r2, #5
 800d93c:	68fa      	ldr	r2, [r7, #12]
 800d93e:	440a      	add	r2, r1
 800d940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d944:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d948:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d94a:	2300      	movs	r3, #0
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3714      	adds	r7, #20
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr

0800d958 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800d958:	b480      	push	{r7}
 800d95a:	b089      	sub	sp, #36	; 0x24
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	4611      	mov	r1, r2
 800d964:	461a      	mov	r2, r3
 800d966:	460b      	mov	r3, r1
 800d968:	71fb      	strb	r3, [r7, #7]
 800d96a:	4613      	mov	r3, r2
 800d96c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800d976:	88bb      	ldrh	r3, [r7, #4]
 800d978:	3303      	adds	r3, #3
 800d97a:	089b      	lsrs	r3, r3, #2
 800d97c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800d97e:	2300      	movs	r3, #0
 800d980:	61bb      	str	r3, [r7, #24]
 800d982:	e00f      	b.n	800d9a4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d984:	79fb      	ldrb	r3, [r7, #7]
 800d986:	031a      	lsls	r2, r3, #12
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	4413      	add	r3, r2
 800d98c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d990:	461a      	mov	r2, r3
 800d992:	69fb      	ldr	r3, [r7, #28]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	6013      	str	r3, [r2, #0]
    pSrc++;
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	3304      	adds	r3, #4
 800d99c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	61bb      	str	r3, [r7, #24]
 800d9a4:	69ba      	ldr	r2, [r7, #24]
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d3eb      	bcc.n	800d984 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800d9ac:	2300      	movs	r3, #0
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3724      	adds	r7, #36	; 0x24
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr

0800d9ba <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d9ba:	b480      	push	{r7}
 800d9bc:	b089      	sub	sp, #36	; 0x24
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	60f8      	str	r0, [r7, #12]
 800d9c2:	60b9      	str	r1, [r7, #8]
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d9d0:	88fb      	ldrh	r3, [r7, #6]
 800d9d2:	3303      	adds	r3, #3
 800d9d4:	089b      	lsrs	r3, r3, #2
 800d9d6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d9d8:	2300      	movs	r3, #0
 800d9da:	61bb      	str	r3, [r7, #24]
 800d9dc:	e00b      	b.n	800d9f6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	69fb      	ldr	r3, [r7, #28]
 800d9e8:	601a      	str	r2, [r3, #0]
    pDest++;
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	3304      	adds	r3, #4
 800d9ee:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d9f0:	69bb      	ldr	r3, [r7, #24]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	61bb      	str	r3, [r7, #24]
 800d9f6:	69ba      	ldr	r2, [r7, #24]
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d3ef      	bcc.n	800d9de <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d9fe:	69fb      	ldr	r3, [r7, #28]
}
 800da00:	4618      	mov	r0, r3
 800da02:	3724      	adds	r7, #36	; 0x24
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b085      	sub	sp, #20
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	785b      	ldrb	r3, [r3, #1]
 800da24:	2b01      	cmp	r3, #1
 800da26:	d12c      	bne.n	800da82 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	015a      	lsls	r2, r3, #5
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	4413      	add	r3, r2
 800da30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	db12      	blt.n	800da60 <USB_EPSetStall+0x54>
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00f      	beq.n	800da60 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	015a      	lsls	r2, r3, #5
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	4413      	add	r3, r2
 800da48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	68ba      	ldr	r2, [r7, #8]
 800da50:	0151      	lsls	r1, r2, #5
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	440a      	add	r2, r1
 800da56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800da5e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	015a      	lsls	r2, r3, #5
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	4413      	add	r3, r2
 800da68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	68ba      	ldr	r2, [r7, #8]
 800da70:	0151      	lsls	r1, r2, #5
 800da72:	68fa      	ldr	r2, [r7, #12]
 800da74:	440a      	add	r2, r1
 800da76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	e02b      	b.n	800dada <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	015a      	lsls	r2, r3, #5
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	4413      	add	r3, r2
 800da8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	db12      	blt.n	800daba <USB_EPSetStall+0xae>
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d00f      	beq.n	800daba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	015a      	lsls	r2, r3, #5
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	4413      	add	r3, r2
 800daa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	68ba      	ldr	r2, [r7, #8]
 800daaa:	0151      	lsls	r1, r2, #5
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	440a      	add	r2, r1
 800dab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dab4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dab8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	015a      	lsls	r2, r3, #5
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	4413      	add	r3, r2
 800dac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	68ba      	ldr	r2, [r7, #8]
 800daca:	0151      	lsls	r1, r2, #5
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	440a      	add	r2, r1
 800dad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dad8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3714      	adds	r7, #20
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr

0800dae8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dae8:	b480      	push	{r7}
 800daea:	b085      	sub	sp, #20
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	785b      	ldrb	r3, [r3, #1]
 800db00:	2b01      	cmp	r3, #1
 800db02:	d128      	bne.n	800db56 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	015a      	lsls	r2, r3, #5
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	4413      	add	r3, r2
 800db0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	68ba      	ldr	r2, [r7, #8]
 800db14:	0151      	lsls	r1, r2, #5
 800db16:	68fa      	ldr	r2, [r7, #12]
 800db18:	440a      	add	r2, r1
 800db1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800db22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	78db      	ldrb	r3, [r3, #3]
 800db28:	2b03      	cmp	r3, #3
 800db2a:	d003      	beq.n	800db34 <USB_EPClearStall+0x4c>
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	78db      	ldrb	r3, [r3, #3]
 800db30:	2b02      	cmp	r3, #2
 800db32:	d138      	bne.n	800dba6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	015a      	lsls	r2, r3, #5
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	4413      	add	r3, r2
 800db3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	68ba      	ldr	r2, [r7, #8]
 800db44:	0151      	lsls	r1, r2, #5
 800db46:	68fa      	ldr	r2, [r7, #12]
 800db48:	440a      	add	r2, r1
 800db4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db52:	6013      	str	r3, [r2, #0]
 800db54:	e027      	b.n	800dba6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	015a      	lsls	r2, r3, #5
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	4413      	add	r3, r2
 800db5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	68ba      	ldr	r2, [r7, #8]
 800db66:	0151      	lsls	r1, r2, #5
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	440a      	add	r2, r1
 800db6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800db74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	78db      	ldrb	r3, [r3, #3]
 800db7a:	2b03      	cmp	r3, #3
 800db7c:	d003      	beq.n	800db86 <USB_EPClearStall+0x9e>
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	78db      	ldrb	r3, [r3, #3]
 800db82:	2b02      	cmp	r3, #2
 800db84:	d10f      	bne.n	800dba6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	015a      	lsls	r2, r3, #5
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	4413      	add	r3, r2
 800db8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	68ba      	ldr	r2, [r7, #8]
 800db96:	0151      	lsls	r1, r2, #5
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	440a      	add	r2, r1
 800db9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dba4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dba6:	2300      	movs	r3, #0
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3714      	adds	r7, #20
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr

0800dbb4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b085      	sub	sp, #20
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	68fa      	ldr	r2, [r7, #12]
 800dbce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dbd2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800dbd6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	78fb      	ldrb	r3, [r7, #3]
 800dbe2:	011b      	lsls	r3, r3, #4
 800dbe4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800dbe8:	68f9      	ldr	r1, [r7, #12]
 800dbea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3714      	adds	r7, #20
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b085      	sub	sp, #20
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	68fa      	ldr	r2, [r7, #12]
 800dc16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dc1a:	f023 0303 	bic.w	r3, r3, #3
 800dc1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	68fa      	ldr	r2, [r7, #12]
 800dc2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc2e:	f023 0302 	bic.w	r3, r3, #2
 800dc32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3714      	adds	r7, #20
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dc42:	b480      	push	{r7}
 800dc44:	b085      	sub	sp, #20
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	68fa      	ldr	r2, [r7, #12]
 800dc58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dc5c:	f023 0303 	bic.w	r3, r3, #3
 800dc60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	68fa      	ldr	r2, [r7, #12]
 800dc6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc70:	f043 0302 	orr.w	r3, r3, #2
 800dc74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3714      	adds	r7, #20
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr

0800dc84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b085      	sub	sp, #20
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	695b      	ldr	r3, [r3, #20]
 800dc90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	699b      	ldr	r3, [r3, #24]
 800dc96:	68fa      	ldr	r2, [r7, #12]
 800dc98:	4013      	ands	r3, r2
 800dc9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3714      	adds	r7, #20
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr

0800dcaa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dcaa:	b480      	push	{r7}
 800dcac:	b085      	sub	sp, #20
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcbc:	699b      	ldr	r3, [r3, #24]
 800dcbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcc6:	69db      	ldr	r3, [r3, #28]
 800dcc8:	68ba      	ldr	r2, [r7, #8]
 800dcca:	4013      	ands	r3, r2
 800dccc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	0c1b      	lsrs	r3, r3, #16
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3714      	adds	r7, #20
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr

0800dcde <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dcde:	b480      	push	{r7}
 800dce0:	b085      	sub	sp, #20
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcf0:	699b      	ldr	r3, [r3, #24]
 800dcf2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcfa:	69db      	ldr	r3, [r3, #28]
 800dcfc:	68ba      	ldr	r2, [r7, #8]
 800dcfe:	4013      	ands	r3, r2
 800dd00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	b29b      	uxth	r3, r3
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3714      	adds	r7, #20
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr

0800dd12 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dd12:	b480      	push	{r7}
 800dd14:	b085      	sub	sp, #20
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	6078      	str	r0, [r7, #4]
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dd22:	78fb      	ldrb	r3, [r7, #3]
 800dd24:	015a      	lsls	r2, r3, #5
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	4413      	add	r3, r2
 800dd2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd2e:	689b      	ldr	r3, [r3, #8]
 800dd30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd38:	695b      	ldr	r3, [r3, #20]
 800dd3a:	68ba      	ldr	r2, [r7, #8]
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dd40:	68bb      	ldr	r3, [r7, #8]
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3714      	adds	r7, #20
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr

0800dd4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dd4e:	b480      	push	{r7}
 800dd50:	b087      	sub	sp, #28
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]
 800dd56:	460b      	mov	r3, r1
 800dd58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd64:	691b      	ldr	r3, [r3, #16]
 800dd66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dd72:	78fb      	ldrb	r3, [r7, #3]
 800dd74:	f003 030f 	and.w	r3, r3, #15
 800dd78:	68fa      	ldr	r2, [r7, #12]
 800dd7a:	fa22 f303 	lsr.w	r3, r2, r3
 800dd7e:	01db      	lsls	r3, r3, #7
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	693a      	ldr	r2, [r7, #16]
 800dd84:	4313      	orrs	r3, r2
 800dd86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dd88:	78fb      	ldrb	r3, [r7, #3]
 800dd8a:	015a      	lsls	r2, r3, #5
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	4413      	add	r3, r2
 800dd90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	693a      	ldr	r2, [r7, #16]
 800dd98:	4013      	ands	r3, r2
 800dd9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dd9c:	68bb      	ldr	r3, [r7, #8]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	371c      	adds	r7, #28
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr

0800ddaa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ddaa:	b480      	push	{r7}
 800ddac:	b083      	sub	sp, #12
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	695b      	ldr	r3, [r3, #20]
 800ddb6:	f003 0301 	and.w	r3, r3, #1
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	370c      	adds	r7, #12
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr

0800ddc6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ddc6:	b480      	push	{r7}
 800ddc8:	b085      	sub	sp, #20
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	68fa      	ldr	r2, [r7, #12]
 800dddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dde0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dde4:	f023 0307 	bic.w	r3, r3, #7
 800dde8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	68fa      	ldr	r2, [r7, #12]
 800ddf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ddf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ddfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ddfe:	2300      	movs	r3, #0
}
 800de00:	4618      	mov	r0, r3
 800de02:	3714      	adds	r7, #20
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	333c      	adds	r3, #60	; 0x3c
 800de1e:	3304      	adds	r3, #4
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	4a1c      	ldr	r2, [pc, #112]	; (800de98 <USB_EP0_OutStart+0x8c>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d90a      	bls.n	800de42 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de3c:	d101      	bne.n	800de42 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800de3e:	2300      	movs	r3, #0
 800de40:	e024      	b.n	800de8c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de48:	461a      	mov	r2, r3
 800de4a:	2300      	movs	r3, #0
 800de4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de54:	691b      	ldr	r3, [r3, #16]
 800de56:	68fa      	ldr	r2, [r7, #12]
 800de58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800de60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de68:	691b      	ldr	r3, [r3, #16]
 800de6a:	68fa      	ldr	r2, [r7, #12]
 800de6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de70:	f043 0318 	orr.w	r3, r3, #24
 800de74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de7c:	691b      	ldr	r3, [r3, #16]
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800de88:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800de8a:	2300      	movs	r3, #0
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3714      	adds	r7, #20
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr
 800de98:	4f54300a 	.word	0x4f54300a

0800de9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800dea4:	2300      	movs	r3, #0
 800dea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	3301      	adds	r3, #1
 800deac:	60fb      	str	r3, [r7, #12]
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	4a13      	ldr	r2, [pc, #76]	; (800df00 <USB_CoreReset+0x64>)
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d901      	bls.n	800deba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800deb6:	2303      	movs	r3, #3
 800deb8:	e01b      	b.n	800def2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	691b      	ldr	r3, [r3, #16]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	daf2      	bge.n	800dea8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dec2:	2300      	movs	r3, #0
 800dec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	691b      	ldr	r3, [r3, #16]
 800deca:	f043 0201 	orr.w	r2, r3, #1
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	3301      	adds	r3, #1
 800ded6:	60fb      	str	r3, [r7, #12]
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	4a09      	ldr	r2, [pc, #36]	; (800df00 <USB_CoreReset+0x64>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d901      	bls.n	800dee4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dee0:	2303      	movs	r3, #3
 800dee2:	e006      	b.n	800def2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	691b      	ldr	r3, [r3, #16]
 800dee8:	f003 0301 	and.w	r3, r3, #1
 800deec:	2b01      	cmp	r3, #1
 800deee:	d0f0      	beq.n	800ded2 <USB_CoreReset+0x36>

  return HAL_OK;
 800def0:	2300      	movs	r3, #0
}
 800def2:	4618      	mov	r0, r3
 800def4:	3714      	adds	r7, #20
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr
 800defe:	bf00      	nop
 800df00:	00030d40 	.word	0x00030d40

0800df04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	460b      	mov	r3, r1
 800df0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800df10:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800df14:	f005 f850 	bl	8012fb8 <malloc>
 800df18:	4603      	mov	r3, r0
 800df1a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d105      	bne.n	800df2e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2200      	movs	r2, #0
 800df26:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800df2a:	2302      	movs	r3, #2
 800df2c:	e066      	b.n	800dffc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	68fa      	ldr	r2, [r7, #12]
 800df32:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	7c1b      	ldrb	r3, [r3, #16]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d119      	bne.n	800df72 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800df3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df42:	2202      	movs	r2, #2
 800df44:	2181      	movs	r1, #129	; 0x81
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f002 f812 	bl	800ff70 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2201      	movs	r2, #1
 800df50:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800df52:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df56:	2202      	movs	r2, #2
 800df58:	2101      	movs	r1, #1
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f002 f808 	bl	800ff70 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2201      	movs	r2, #1
 800df64:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2210      	movs	r2, #16
 800df6c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800df70:	e016      	b.n	800dfa0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800df72:	2340      	movs	r3, #64	; 0x40
 800df74:	2202      	movs	r2, #2
 800df76:	2181      	movs	r1, #129	; 0x81
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f001 fff9 	bl	800ff70 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2201      	movs	r2, #1
 800df82:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800df84:	2340      	movs	r3, #64	; 0x40
 800df86:	2202      	movs	r2, #2
 800df88:	2101      	movs	r1, #1
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f001 fff0 	bl	800ff70 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2201      	movs	r2, #1
 800df94:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2210      	movs	r2, #16
 800df9c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dfa0:	2308      	movs	r3, #8
 800dfa2:	2203      	movs	r2, #3
 800dfa4:	2182      	movs	r1, #130	; 0x82
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f001 ffe2 	bl	800ff70 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2201      	movs	r2, #1
 800dfb0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	7c1b      	ldrb	r3, [r3, #16]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d109      	bne.n	800dfea <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dfdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfe0:	2101      	movs	r1, #1
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f002 f93e 	bl	8010264 <USBD_LL_PrepareReceive>
 800dfe8:	e007      	b.n	800dffa <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dff0:	2340      	movs	r3, #64	; 0x40
 800dff2:	2101      	movs	r1, #1
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f002 f935 	bl	8010264 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dffa:	2300      	movs	r3, #0
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3710      	adds	r7, #16
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	460b      	mov	r3, r1
 800e00e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e010:	2181      	movs	r1, #129	; 0x81
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f001 ffea 	bl	800ffec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e01e:	2101      	movs	r1, #1
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f001 ffe3 	bl	800ffec <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2200      	movs	r2, #0
 800e02a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e02e:	2182      	movs	r1, #130	; 0x82
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f001 ffdb 	bl	800ffec <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2200      	movs	r2, #0
 800e03a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2200      	movs	r2, #0
 800e042:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d00e      	beq.n	800e06e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e060:	4618      	mov	r0, r3
 800e062:	f004 ffb1 	bl	8012fc8 <free>
    pdev->pClassData = NULL;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2200      	movs	r2, #0
 800e06a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e06e:	2300      	movs	r3, #0
}
 800e070:	4618      	mov	r0, r3
 800e072:	3708      	adds	r7, #8
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b086      	sub	sp, #24
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e088:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e08a:	2300      	movs	r3, #0
 800e08c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e08e:	2300      	movs	r3, #0
 800e090:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e092:	2300      	movs	r3, #0
 800e094:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d03a      	beq.n	800e118 <USBD_CDC_Setup+0xa0>
 800e0a2:	2b20      	cmp	r3, #32
 800e0a4:	f040 8097 	bne.w	800e1d6 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	88db      	ldrh	r3, [r3, #6]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d029      	beq.n	800e104 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	b25b      	sxtb	r3, r3
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	da11      	bge.n	800e0de <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0c0:	689b      	ldr	r3, [r3, #8]
 800e0c2:	683a      	ldr	r2, [r7, #0]
 800e0c4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e0c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e0c8:	683a      	ldr	r2, [r7, #0]
 800e0ca:	88d2      	ldrh	r2, [r2, #6]
 800e0cc:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e0ce:	6939      	ldr	r1, [r7, #16]
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	88db      	ldrh	r3, [r3, #6]
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f001 facf 	bl	800f67a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e0dc:	e082      	b.n	800e1e4 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	785a      	ldrb	r2, [r3, #1]
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	88db      	ldrh	r3, [r3, #6]
 800e0ec:	b2da      	uxtb	r2, r3
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e0f4:	6939      	ldr	r1, [r7, #16]
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	88db      	ldrh	r3, [r3, #6]
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f001 fae8 	bl	800f6d2 <USBD_CtlPrepareRx>
      break;
 800e102:	e06f      	b.n	800e1e4 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	683a      	ldr	r2, [r7, #0]
 800e10e:	7850      	ldrb	r0, [r2, #1]
 800e110:	2200      	movs	r2, #0
 800e112:	6839      	ldr	r1, [r7, #0]
 800e114:	4798      	blx	r3
      break;
 800e116:	e065      	b.n	800e1e4 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	785b      	ldrb	r3, [r3, #1]
 800e11c:	2b0b      	cmp	r3, #11
 800e11e:	d84f      	bhi.n	800e1c0 <USBD_CDC_Setup+0x148>
 800e120:	a201      	add	r2, pc, #4	; (adr r2, 800e128 <USBD_CDC_Setup+0xb0>)
 800e122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e126:	bf00      	nop
 800e128:	0800e159 	.word	0x0800e159
 800e12c:	0800e1cf 	.word	0x0800e1cf
 800e130:	0800e1c1 	.word	0x0800e1c1
 800e134:	0800e1c1 	.word	0x0800e1c1
 800e138:	0800e1c1 	.word	0x0800e1c1
 800e13c:	0800e1c1 	.word	0x0800e1c1
 800e140:	0800e1c1 	.word	0x0800e1c1
 800e144:	0800e1c1 	.word	0x0800e1c1
 800e148:	0800e1c1 	.word	0x0800e1c1
 800e14c:	0800e1c1 	.word	0x0800e1c1
 800e150:	0800e181 	.word	0x0800e181
 800e154:	0800e1a9 	.word	0x0800e1a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e15e:	2b03      	cmp	r3, #3
 800e160:	d107      	bne.n	800e172 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e162:	f107 030c 	add.w	r3, r7, #12
 800e166:	2202      	movs	r2, #2
 800e168:	4619      	mov	r1, r3
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f001 fa85 	bl	800f67a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e170:	e030      	b.n	800e1d4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800e172:	6839      	ldr	r1, [r7, #0]
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f001 fa0f 	bl	800f598 <USBD_CtlError>
            ret = USBD_FAIL;
 800e17a:	2303      	movs	r3, #3
 800e17c:	75fb      	strb	r3, [r7, #23]
          break;
 800e17e:	e029      	b.n	800e1d4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e186:	2b03      	cmp	r3, #3
 800e188:	d107      	bne.n	800e19a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e18a:	f107 030f 	add.w	r3, r7, #15
 800e18e:	2201      	movs	r2, #1
 800e190:	4619      	mov	r1, r3
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f001 fa71 	bl	800f67a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e198:	e01c      	b.n	800e1d4 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800e19a:	6839      	ldr	r1, [r7, #0]
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f001 f9fb 	bl	800f598 <USBD_CtlError>
            ret = USBD_FAIL;
 800e1a2:	2303      	movs	r3, #3
 800e1a4:	75fb      	strb	r3, [r7, #23]
          break;
 800e1a6:	e015      	b.n	800e1d4 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1ae:	2b03      	cmp	r3, #3
 800e1b0:	d00f      	beq.n	800e1d2 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800e1b2:	6839      	ldr	r1, [r7, #0]
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f001 f9ef 	bl	800f598 <USBD_CtlError>
            ret = USBD_FAIL;
 800e1ba:	2303      	movs	r3, #3
 800e1bc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e1be:	e008      	b.n	800e1d2 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e1c0:	6839      	ldr	r1, [r7, #0]
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f001 f9e8 	bl	800f598 <USBD_CtlError>
          ret = USBD_FAIL;
 800e1c8:	2303      	movs	r3, #3
 800e1ca:	75fb      	strb	r3, [r7, #23]
          break;
 800e1cc:	e002      	b.n	800e1d4 <USBD_CDC_Setup+0x15c>
          break;
 800e1ce:	bf00      	nop
 800e1d0:	e008      	b.n	800e1e4 <USBD_CDC_Setup+0x16c>
          break;
 800e1d2:	bf00      	nop
      }
      break;
 800e1d4:	e006      	b.n	800e1e4 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800e1d6:	6839      	ldr	r1, [r7, #0]
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f001 f9dd 	bl	800f598 <USBD_CtlError>
      ret = USBD_FAIL;
 800e1de:	2303      	movs	r3, #3
 800e1e0:	75fb      	strb	r3, [r7, #23]
      break;
 800e1e2:	bf00      	nop
  }

  return (uint8_t)ret;
 800e1e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3718      	adds	r7, #24
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop

0800e1f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b084      	sub	sp, #16
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e202:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d101      	bne.n	800e212 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e20e:	2303      	movs	r3, #3
 800e210:	e04f      	b.n	800e2b2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e218:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e21a:	78fa      	ldrb	r2, [r7, #3]
 800e21c:	6879      	ldr	r1, [r7, #4]
 800e21e:	4613      	mov	r3, r2
 800e220:	009b      	lsls	r3, r3, #2
 800e222:	4413      	add	r3, r2
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	440b      	add	r3, r1
 800e228:	3318      	adds	r3, #24
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d029      	beq.n	800e284 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e230:	78fa      	ldrb	r2, [r7, #3]
 800e232:	6879      	ldr	r1, [r7, #4]
 800e234:	4613      	mov	r3, r2
 800e236:	009b      	lsls	r3, r3, #2
 800e238:	4413      	add	r3, r2
 800e23a:	009b      	lsls	r3, r3, #2
 800e23c:	440b      	add	r3, r1
 800e23e:	3318      	adds	r3, #24
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	78f9      	ldrb	r1, [r7, #3]
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	460b      	mov	r3, r1
 800e248:	00db      	lsls	r3, r3, #3
 800e24a:	1a5b      	subs	r3, r3, r1
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	4403      	add	r3, r0
 800e250:	3344      	adds	r3, #68	; 0x44
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	fbb2 f1f3 	udiv	r1, r2, r3
 800e258:	fb03 f301 	mul.w	r3, r3, r1
 800e25c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d110      	bne.n	800e284 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e262:	78fa      	ldrb	r2, [r7, #3]
 800e264:	6879      	ldr	r1, [r7, #4]
 800e266:	4613      	mov	r3, r2
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	4413      	add	r3, r2
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	440b      	add	r3, r1
 800e270:	3318      	adds	r3, #24
 800e272:	2200      	movs	r2, #0
 800e274:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e276:	78f9      	ldrb	r1, [r7, #3]
 800e278:	2300      	movs	r3, #0
 800e27a:	2200      	movs	r2, #0
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f001 ffb9 	bl	80101f4 <USBD_LL_Transmit>
 800e282:	e015      	b.n	800e2b0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	2200      	movs	r2, #0
 800e288:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e292:	691b      	ldr	r3, [r3, #16]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d00b      	beq.n	800e2b0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e29e:	691b      	ldr	r3, [r3, #16]
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e2a6:	68ba      	ldr	r2, [r7, #8]
 800e2a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e2ac:	78fa      	ldrb	r2, [r7, #3]
 800e2ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e2b0:	2300      	movs	r3, #0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b084      	sub	sp, #16
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d101      	bne.n	800e2dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e2d8:	2303      	movs	r3, #3
 800e2da:	e015      	b.n	800e308 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e2dc:	78fb      	ldrb	r3, [r7, #3]
 800e2de:	4619      	mov	r1, r3
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f001 fff7 	bl	80102d4 <USBD_LL_GetRxDataSize>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2f4:	68db      	ldr	r3, [r3, #12]
 800e2f6:	68fa      	ldr	r2, [r7, #12]
 800e2f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e2fc:	68fa      	ldr	r2, [r7, #12]
 800e2fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e302:	4611      	mov	r1, r2
 800e304:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e306:	2300      	movs	r3, #0
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3710      	adds	r7, #16
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e31e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e326:	2b00      	cmp	r3, #0
 800e328:	d015      	beq.n	800e356 <USBD_CDC_EP0_RxReady+0x46>
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e330:	2bff      	cmp	r3, #255	; 0xff
 800e332:	d010      	beq.n	800e356 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e33a:	689b      	ldr	r3, [r3, #8]
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e342:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e344:	68fa      	ldr	r2, [r7, #12]
 800e346:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e34a:	b292      	uxth	r2, r2
 800e34c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	22ff      	movs	r2, #255	; 0xff
 800e352:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e356:	2300      	movs	r3, #0
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3710      	adds	r7, #16
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e360:	b480      	push	{r7}
 800e362:	b083      	sub	sp, #12
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2243      	movs	r2, #67	; 0x43
 800e36c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e36e:	4b03      	ldr	r3, [pc, #12]	; (800e37c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e370:	4618      	mov	r0, r3
 800e372:	370c      	adds	r7, #12
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr
 800e37c:	20000094 	.word	0x20000094

0800e380 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2243      	movs	r2, #67	; 0x43
 800e38c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e38e:	4b03      	ldr	r3, [pc, #12]	; (800e39c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e390:	4618      	mov	r0, r3
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr
 800e39c:	20000050 	.word	0x20000050

0800e3a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b083      	sub	sp, #12
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2243      	movs	r2, #67	; 0x43
 800e3ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e3ae:	4b03      	ldr	r3, [pc, #12]	; (800e3bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr
 800e3bc:	200000d8 	.word	0x200000d8

0800e3c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	220a      	movs	r2, #10
 800e3cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e3ce:	4b03      	ldr	r3, [pc, #12]	; (800e3dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	370c      	adds	r7, #12
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr
 800e3dc:	2000000c 	.word	0x2000000c

0800e3e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b083      	sub	sp, #12
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d101      	bne.n	800e3f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e3f0:	2303      	movs	r3, #3
 800e3f2:	e004      	b.n	800e3fe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	683a      	ldr	r2, [r7, #0]
 800e3f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e3fc:	2300      	movs	r3, #0
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	370c      	adds	r7, #12
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr

0800e40a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e40a:	b480      	push	{r7}
 800e40c:	b087      	sub	sp, #28
 800e40e:	af00      	add	r7, sp, #0
 800e410:	60f8      	str	r0, [r7, #12]
 800e412:	60b9      	str	r1, [r7, #8]
 800e414:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e41c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	68ba      	ldr	r2, [r7, #8]
 800e422:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	687a      	ldr	r2, [r7, #4]
 800e42a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e42e:	2300      	movs	r3, #0
}
 800e430:	4618      	mov	r0, r3
 800e432:	371c      	adds	r7, #28
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr

0800e43c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b085      	sub	sp, #20
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e44c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	683a      	ldr	r2, [r7, #0]
 800e452:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e456:	2300      	movs	r3, #0
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3714      	adds	r7, #20
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e472:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e474:	2301      	movs	r3, #1
 800e476:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d101      	bne.n	800e486 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e482:	2303      	movs	r3, #3
 800e484:	e01a      	b.n	800e4bc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d114      	bne.n	800e4ba <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	2201      	movs	r2, #1
 800e494:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e4ae:	2181      	movs	r1, #129	; 0x81
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f001 fe9f 	bl	80101f4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3710      	adds	r7, #16
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d101      	bne.n	800e4e2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e4de:	2303      	movs	r3, #3
 800e4e0:	e016      	b.n	800e510 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	7c1b      	ldrb	r3, [r3, #16]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d109      	bne.n	800e4fe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e4f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4f4:	2101      	movs	r1, #1
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f001 feb4 	bl	8010264 <USBD_LL_PrepareReceive>
 800e4fc:	e007      	b.n	800e50e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e504:	2340      	movs	r3, #64	; 0x40
 800e506:	2101      	movs	r1, #1
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f001 feab 	bl	8010264 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e50e:	2300      	movs	r3, #0
}
 800e510:	4618      	mov	r0, r3
 800e512:	3710      	adds	r7, #16
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b086      	sub	sp, #24
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	4613      	mov	r3, r2
 800e524:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d101      	bne.n	800e530 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e52c:	2303      	movs	r3, #3
 800e52e:	e01f      	b.n	800e570 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2200      	movs	r2, #0
 800e534:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2200      	movs	r2, #0
 800e53c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2200      	movs	r2, #0
 800e544:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d003      	beq.n	800e556 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	68ba      	ldr	r2, [r7, #8]
 800e552:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2201      	movs	r2, #1
 800e55a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	79fa      	ldrb	r2, [r7, #7]
 800e562:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e564:	68f8      	ldr	r0, [r7, #12]
 800e566:	f001 fc87 	bl	800fe78 <USBD_LL_Init>
 800e56a:	4603      	mov	r3, r0
 800e56c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e56e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e570:	4618      	mov	r0, r3
 800e572:	3718      	adds	r7, #24
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e582:	2300      	movs	r3, #0
 800e584:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d101      	bne.n	800e590 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e58c:	2303      	movs	r3, #3
 800e58e:	e016      	b.n	800e5be <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	683a      	ldr	r2, [r7, #0]
 800e594:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d00b      	beq.n	800e5bc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ac:	f107 020e 	add.w	r2, r7, #14
 800e5b0:	4610      	mov	r0, r2
 800e5b2:	4798      	blx	r3
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e5bc:	2300      	movs	r3, #0
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3710      	adds	r7, #16
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b082      	sub	sp, #8
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f001 fc9c 	bl	800ff0c <USBD_LL_Start>
 800e5d4:	4603      	mov	r3, r0
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3708      	adds	r7, #8
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}

0800e5de <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e5de:	b480      	push	{r7}
 800e5e0:	b083      	sub	sp, #12
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e5e6:	2300      	movs	r3, #0
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	370c      	adds	r7, #12
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e600:	2303      	movs	r3, #3
 800e602:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d009      	beq.n	800e622 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	78fa      	ldrb	r2, [r7, #3]
 800e618:	4611      	mov	r1, r2
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	4798      	blx	r3
 800e61e:	4603      	mov	r3, r0
 800e620:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e622:	7bfb      	ldrb	r3, [r7, #15]
}
 800e624:	4618      	mov	r0, r3
 800e626:	3710      	adds	r7, #16
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	460b      	mov	r3, r1
 800e636:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d007      	beq.n	800e652 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	78fa      	ldrb	r2, [r7, #3]
 800e64c:	4611      	mov	r1, r2
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	4798      	blx	r3
  }

  return USBD_OK;
 800e652:	2300      	movs	r3, #0
}
 800e654:	4618      	mov	r0, r3
 800e656:	3708      	adds	r7, #8
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e66c:	6839      	ldr	r1, [r7, #0]
 800e66e:	4618      	mov	r0, r3
 800e670:	f000 ff58 	bl	800f524 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2201      	movs	r2, #1
 800e678:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e682:	461a      	mov	r2, r3
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e690:	f003 031f 	and.w	r3, r3, #31
 800e694:	2b01      	cmp	r3, #1
 800e696:	d00e      	beq.n	800e6b6 <USBD_LL_SetupStage+0x5a>
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d302      	bcc.n	800e6a2 <USBD_LL_SetupStage+0x46>
 800e69c:	2b02      	cmp	r3, #2
 800e69e:	d014      	beq.n	800e6ca <USBD_LL_SetupStage+0x6e>
 800e6a0:	e01d      	b.n	800e6de <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 fa18 	bl	800eae0 <USBD_StdDevReq>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	73fb      	strb	r3, [r7, #15]
      break;
 800e6b4:	e020      	b.n	800e6f8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e6bc:	4619      	mov	r1, r3
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 fa7c 	bl	800ebbc <USBD_StdItfReq>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800e6c8:	e016      	b.n	800e6f8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 fab8 	bl	800ec48 <USBD_StdEPReq>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	73fb      	strb	r3, [r7, #15]
      break;
 800e6dc:	e00c      	b.n	800e6f8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e6e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f001 fcb3 	bl	8010058 <USBD_LL_StallEP>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	73fb      	strb	r3, [r7, #15]
      break;
 800e6f6:	bf00      	nop
  }

  return ret;
 800e6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3710      	adds	r7, #16
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}

0800e702 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e702:	b580      	push	{r7, lr}
 800e704:	b086      	sub	sp, #24
 800e706:	af00      	add	r7, sp, #0
 800e708:	60f8      	str	r0, [r7, #12]
 800e70a:	460b      	mov	r3, r1
 800e70c:	607a      	str	r2, [r7, #4]
 800e70e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e710:	7afb      	ldrb	r3, [r7, #11]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d137      	bne.n	800e786 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e71c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e724:	2b03      	cmp	r3, #3
 800e726:	d14a      	bne.n	800e7be <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	689a      	ldr	r2, [r3, #8]
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	68db      	ldr	r3, [r3, #12]
 800e730:	429a      	cmp	r2, r3
 800e732:	d913      	bls.n	800e75c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	689a      	ldr	r2, [r3, #8]
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	1ad2      	subs	r2, r2, r3
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	68da      	ldr	r2, [r3, #12]
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	689b      	ldr	r3, [r3, #8]
 800e74a:	4293      	cmp	r3, r2
 800e74c:	bf28      	it	cs
 800e74e:	4613      	movcs	r3, r2
 800e750:	461a      	mov	r2, r3
 800e752:	6879      	ldr	r1, [r7, #4]
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f000 ffd9 	bl	800f70c <USBD_CtlContinueRx>
 800e75a:	e030      	b.n	800e7be <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e762:	691b      	ldr	r3, [r3, #16]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d00a      	beq.n	800e77e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e76e:	2b03      	cmp	r3, #3
 800e770:	d105      	bne.n	800e77e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e778:	691b      	ldr	r3, [r3, #16]
 800e77a:	68f8      	ldr	r0, [r7, #12]
 800e77c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e77e:	68f8      	ldr	r0, [r7, #12]
 800e780:	f000 ffd5 	bl	800f72e <USBD_CtlSendStatus>
 800e784:	e01b      	b.n	800e7be <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e78c:	699b      	ldr	r3, [r3, #24]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d013      	beq.n	800e7ba <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e798:	2b03      	cmp	r3, #3
 800e79a:	d10e      	bne.n	800e7ba <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7a2:	699b      	ldr	r3, [r3, #24]
 800e7a4:	7afa      	ldrb	r2, [r7, #11]
 800e7a6:	4611      	mov	r1, r2
 800e7a8:	68f8      	ldr	r0, [r7, #12]
 800e7aa:	4798      	blx	r3
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e7b0:	7dfb      	ldrb	r3, [r7, #23]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d003      	beq.n	800e7be <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e7b6:	7dfb      	ldrb	r3, [r7, #23]
 800e7b8:	e002      	b.n	800e7c0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e7ba:	2303      	movs	r3, #3
 800e7bc:	e000      	b.n	800e7c0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e7be:	2300      	movs	r3, #0
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3718      	adds	r7, #24
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b086      	sub	sp, #24
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	607a      	str	r2, [r7, #4]
 800e7d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e7d6:	7afb      	ldrb	r3, [r7, #11]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d16a      	bne.n	800e8b2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	3314      	adds	r3, #20
 800e7e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e7e8:	2b02      	cmp	r3, #2
 800e7ea:	d155      	bne.n	800e898 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	689a      	ldr	r2, [r3, #8]
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	68db      	ldr	r3, [r3, #12]
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d914      	bls.n	800e822 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	689a      	ldr	r2, [r3, #8]
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	1ad2      	subs	r2, r2, r3
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	689b      	ldr	r3, [r3, #8]
 800e80a:	461a      	mov	r2, r3
 800e80c:	6879      	ldr	r1, [r7, #4]
 800e80e:	68f8      	ldr	r0, [r7, #12]
 800e810:	f000 ff4e 	bl	800f6b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e814:	2300      	movs	r3, #0
 800e816:	2200      	movs	r2, #0
 800e818:	2100      	movs	r1, #0
 800e81a:	68f8      	ldr	r0, [r7, #12]
 800e81c:	f001 fd22 	bl	8010264 <USBD_LL_PrepareReceive>
 800e820:	e03a      	b.n	800e898 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	68da      	ldr	r2, [r3, #12]
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	689b      	ldr	r3, [r3, #8]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d11c      	bne.n	800e868 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	685a      	ldr	r2, [r3, #4]
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e836:	429a      	cmp	r2, r3
 800e838:	d316      	bcc.n	800e868 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	685a      	ldr	r2, [r3, #4]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e844:	429a      	cmp	r2, r3
 800e846:	d20f      	bcs.n	800e868 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e848:	2200      	movs	r2, #0
 800e84a:	2100      	movs	r1, #0
 800e84c:	68f8      	ldr	r0, [r7, #12]
 800e84e:	f000 ff2f 	bl	800f6b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2200      	movs	r2, #0
 800e856:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e85a:	2300      	movs	r3, #0
 800e85c:	2200      	movs	r2, #0
 800e85e:	2100      	movs	r1, #0
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f001 fcff 	bl	8010264 <USBD_LL_PrepareReceive>
 800e866:	e017      	b.n	800e898 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00a      	beq.n	800e88a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e87a:	2b03      	cmp	r3, #3
 800e87c:	d105      	bne.n	800e88a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e884:	68db      	ldr	r3, [r3, #12]
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e88a:	2180      	movs	r1, #128	; 0x80
 800e88c:	68f8      	ldr	r0, [r7, #12]
 800e88e:	f001 fbe3 	bl	8010058 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e892:	68f8      	ldr	r0, [r7, #12]
 800e894:	f000 ff5e 	bl	800f754 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	d123      	bne.n	800e8ea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e8a2:	68f8      	ldr	r0, [r7, #12]
 800e8a4:	f7ff fe9b 	bl	800e5de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e8b0:	e01b      	b.n	800e8ea <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8b8:	695b      	ldr	r3, [r3, #20]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d013      	beq.n	800e8e6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e8c4:	2b03      	cmp	r3, #3
 800e8c6:	d10e      	bne.n	800e8e6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8ce:	695b      	ldr	r3, [r3, #20]
 800e8d0:	7afa      	ldrb	r2, [r7, #11]
 800e8d2:	4611      	mov	r1, r2
 800e8d4:	68f8      	ldr	r0, [r7, #12]
 800e8d6:	4798      	blx	r3
 800e8d8:	4603      	mov	r3, r0
 800e8da:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e8dc:	7dfb      	ldrb	r3, [r7, #23]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d003      	beq.n	800e8ea <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800e8e2:	7dfb      	ldrb	r3, [r7, #23]
 800e8e4:	e002      	b.n	800e8ec <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e8e6:	2303      	movs	r3, #3
 800e8e8:	e000      	b.n	800e8ec <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800e8ea:	2300      	movs	r3, #0
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3718      	adds	r7, #24
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2201      	movs	r2, #1
 800e900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2200      	movs	r2, #0
 800e908:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2200      	movs	r2, #0
 800e910:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2200      	movs	r2, #0
 800e916:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e920:	2b00      	cmp	r3, #0
 800e922:	d009      	beq.n	800e938 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	687a      	ldr	r2, [r7, #4]
 800e92e:	6852      	ldr	r2, [r2, #4]
 800e930:	b2d2      	uxtb	r2, r2
 800e932:	4611      	mov	r1, r2
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e938:	2340      	movs	r3, #64	; 0x40
 800e93a:	2200      	movs	r2, #0
 800e93c:	2100      	movs	r1, #0
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f001 fb16 	bl	800ff70 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2201      	movs	r2, #1
 800e948:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2240      	movs	r2, #64	; 0x40
 800e950:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e954:	2340      	movs	r3, #64	; 0x40
 800e956:	2200      	movs	r2, #0
 800e958:	2180      	movs	r1, #128	; 0x80
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f001 fb08 	bl	800ff70 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2201      	movs	r2, #1
 800e964:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2240      	movs	r2, #64	; 0x40
 800e96a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3708      	adds	r7, #8
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e976:	b480      	push	{r7}
 800e978:	b083      	sub	sp, #12
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
 800e97e:	460b      	mov	r3, r1
 800e980:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	78fa      	ldrb	r2, [r7, #3]
 800e986:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e988:	2300      	movs	r3, #0
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	370c      	adds	r7, #12
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr

0800e996 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e996:	b480      	push	{r7}
 800e998:	b083      	sub	sp, #12
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2204      	movs	r2, #4
 800e9ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e9b2:	2300      	movs	r3, #0
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	370c      	adds	r7, #12
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9be:	4770      	bx	lr

0800e9c0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9ce:	2b04      	cmp	r3, #4
 800e9d0:	d105      	bne.n	800e9de <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e9de:	2300      	movs	r3, #0
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	370c      	adds	r7, #12
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr

0800e9ec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9fa:	2b03      	cmp	r3, #3
 800e9fc:	d10b      	bne.n	800ea16 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea04:	69db      	ldr	r3, [r3, #28]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d005      	beq.n	800ea16 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea10:	69db      	ldr	r3, [r3, #28]
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ea16:	2300      	movs	r3, #0
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3708      	adds	r7, #8
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	460b      	mov	r3, r1
 800ea2a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ea2c:	2300      	movs	r3, #0
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	370c      	adds	r7, #12
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr

0800ea3a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ea3a:	b480      	push	{r7}
 800ea3c:	b083      	sub	sp, #12
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	6078      	str	r0, [r7, #4]
 800ea42:	460b      	mov	r3, r1
 800ea44:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ea46:	2300      	movs	r3, #0
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	370c      	adds	r7, #12
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr

0800ea54 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b083      	sub	sp, #12
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ea5c:	2300      	movs	r3, #0
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	370c      	adds	r7, #12
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr

0800ea6a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b082      	sub	sp, #8
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2201      	movs	r2, #1
 800ea76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d009      	beq.n	800ea98 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	6852      	ldr	r2, [r2, #4]
 800ea90:	b2d2      	uxtb	r2, r2
 800ea92:	4611      	mov	r1, r2
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	4798      	blx	r3
  }

  return USBD_OK;
 800ea98:	2300      	movs	r3, #0
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3708      	adds	r7, #8
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}

0800eaa2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800eaa2:	b480      	push	{r7}
 800eaa4:	b087      	sub	sp, #28
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	781b      	ldrb	r3, [r3, #0]
 800eab2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	3301      	adds	r3, #1
 800eab8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800eac0:	8a3b      	ldrh	r3, [r7, #16]
 800eac2:	021b      	lsls	r3, r3, #8
 800eac4:	b21a      	sxth	r2, r3
 800eac6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eaca:	4313      	orrs	r3, r2
 800eacc:	b21b      	sxth	r3, r3
 800eace:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ead0:	89fb      	ldrh	r3, [r7, #14]
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	371c      	adds	r7, #28
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr
	...

0800eae0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eaea:	2300      	movs	r3, #0
 800eaec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eaf6:	2b20      	cmp	r3, #32
 800eaf8:	d004      	beq.n	800eb04 <USBD_StdDevReq+0x24>
 800eafa:	2b40      	cmp	r3, #64	; 0x40
 800eafc:	d002      	beq.n	800eb04 <USBD_StdDevReq+0x24>
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d00a      	beq.n	800eb18 <USBD_StdDevReq+0x38>
 800eb02:	e050      	b.n	800eba6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	6839      	ldr	r1, [r7, #0]
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	4798      	blx	r3
 800eb12:	4603      	mov	r3, r0
 800eb14:	73fb      	strb	r3, [r7, #15]
    break;
 800eb16:	e04b      	b.n	800ebb0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	785b      	ldrb	r3, [r3, #1]
 800eb1c:	2b09      	cmp	r3, #9
 800eb1e:	d83c      	bhi.n	800eb9a <USBD_StdDevReq+0xba>
 800eb20:	a201      	add	r2, pc, #4	; (adr r2, 800eb28 <USBD_StdDevReq+0x48>)
 800eb22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb26:	bf00      	nop
 800eb28:	0800eb7d 	.word	0x0800eb7d
 800eb2c:	0800eb91 	.word	0x0800eb91
 800eb30:	0800eb9b 	.word	0x0800eb9b
 800eb34:	0800eb87 	.word	0x0800eb87
 800eb38:	0800eb9b 	.word	0x0800eb9b
 800eb3c:	0800eb5b 	.word	0x0800eb5b
 800eb40:	0800eb51 	.word	0x0800eb51
 800eb44:	0800eb9b 	.word	0x0800eb9b
 800eb48:	0800eb73 	.word	0x0800eb73
 800eb4c:	0800eb65 	.word	0x0800eb65
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800eb50:	6839      	ldr	r1, [r7, #0]
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 f9d0 	bl	800eef8 <USBD_GetDescriptor>
      break;
 800eb58:	e024      	b.n	800eba4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800eb5a:	6839      	ldr	r1, [r7, #0]
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f000 fb5f 	bl	800f220 <USBD_SetAddress>
      break;
 800eb62:	e01f      	b.n	800eba4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800eb64:	6839      	ldr	r1, [r7, #0]
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 fb9c 	bl	800f2a4 <USBD_SetConfig>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	73fb      	strb	r3, [r7, #15]
      break;
 800eb70:	e018      	b.n	800eba4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800eb72:	6839      	ldr	r1, [r7, #0]
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f000 fc39 	bl	800f3ec <USBD_GetConfig>
      break;
 800eb7a:	e013      	b.n	800eba4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800eb7c:	6839      	ldr	r1, [r7, #0]
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 fc68 	bl	800f454 <USBD_GetStatus>
      break;
 800eb84:	e00e      	b.n	800eba4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800eb86:	6839      	ldr	r1, [r7, #0]
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f000 fc96 	bl	800f4ba <USBD_SetFeature>
      break;
 800eb8e:	e009      	b.n	800eba4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800eb90:	6839      	ldr	r1, [r7, #0]
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f000 fca5 	bl	800f4e2 <USBD_ClrFeature>
      break;
 800eb98:	e004      	b.n	800eba4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800eb9a:	6839      	ldr	r1, [r7, #0]
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 fcfb 	bl	800f598 <USBD_CtlError>
      break;
 800eba2:	bf00      	nop
    }
    break;
 800eba4:	e004      	b.n	800ebb0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800eba6:	6839      	ldr	r1, [r7, #0]
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 fcf5 	bl	800f598 <USBD_CtlError>
    break;
 800ebae:	bf00      	nop
  }

  return ret;
 800ebb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3710      	adds	r7, #16
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	bf00      	nop

0800ebbc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ebd2:	2b20      	cmp	r3, #32
 800ebd4:	d003      	beq.n	800ebde <USBD_StdItfReq+0x22>
 800ebd6:	2b40      	cmp	r3, #64	; 0x40
 800ebd8:	d001      	beq.n	800ebde <USBD_StdItfReq+0x22>
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d12a      	bne.n	800ec34 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebe4:	3b01      	subs	r3, #1
 800ebe6:	2b02      	cmp	r3, #2
 800ebe8:	d81d      	bhi.n	800ec26 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	889b      	ldrh	r3, [r3, #4]
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d813      	bhi.n	800ec1c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebfa:	689b      	ldr	r3, [r3, #8]
 800ebfc:	6839      	ldr	r1, [r7, #0]
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	4798      	blx	r3
 800ec02:	4603      	mov	r3, r0
 800ec04:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	88db      	ldrh	r3, [r3, #6]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d110      	bne.n	800ec30 <USBD_StdItfReq+0x74>
 800ec0e:	7bfb      	ldrb	r3, [r7, #15]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d10d      	bne.n	800ec30 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f000 fd8a 	bl	800f72e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ec1a:	e009      	b.n	800ec30 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ec1c:	6839      	ldr	r1, [r7, #0]
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f000 fcba 	bl	800f598 <USBD_CtlError>
      break;
 800ec24:	e004      	b.n	800ec30 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ec26:	6839      	ldr	r1, [r7, #0]
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f000 fcb5 	bl	800f598 <USBD_CtlError>
      break;
 800ec2e:	e000      	b.n	800ec32 <USBD_StdItfReq+0x76>
      break;
 800ec30:	bf00      	nop
    }
    break;
 800ec32:	e004      	b.n	800ec3e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ec34:	6839      	ldr	r1, [r7, #0]
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f000 fcae 	bl	800f598 <USBD_CtlError>
    break;
 800ec3c:	bf00      	nop
  }

  return ret;
 800ec3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3710      	adds	r7, #16
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b084      	sub	sp, #16
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ec52:	2300      	movs	r3, #0
 800ec54:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	889b      	ldrh	r3, [r3, #4]
 800ec5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec64:	2b20      	cmp	r3, #32
 800ec66:	d004      	beq.n	800ec72 <USBD_StdEPReq+0x2a>
 800ec68:	2b40      	cmp	r3, #64	; 0x40
 800ec6a:	d002      	beq.n	800ec72 <USBD_StdEPReq+0x2a>
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d00a      	beq.n	800ec86 <USBD_StdEPReq+0x3e>
 800ec70:	e137      	b.n	800eee2 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec78:	689b      	ldr	r3, [r3, #8]
 800ec7a:	6839      	ldr	r1, [r7, #0]
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	4798      	blx	r3
 800ec80:	4603      	mov	r3, r0
 800ec82:	73fb      	strb	r3, [r7, #15]
    break;
 800ec84:	e132      	b.n	800eeec <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	785b      	ldrb	r3, [r3, #1]
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	d03e      	beq.n	800ed0c <USBD_StdEPReq+0xc4>
 800ec8e:	2b03      	cmp	r3, #3
 800ec90:	d002      	beq.n	800ec98 <USBD_StdEPReq+0x50>
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d079      	beq.n	800ed8a <USBD_StdEPReq+0x142>
 800ec96:	e11e      	b.n	800eed6 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec9e:	2b02      	cmp	r3, #2
 800eca0:	d002      	beq.n	800eca8 <USBD_StdEPReq+0x60>
 800eca2:	2b03      	cmp	r3, #3
 800eca4:	d015      	beq.n	800ecd2 <USBD_StdEPReq+0x8a>
 800eca6:	e02b      	b.n	800ed00 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eca8:	7bbb      	ldrb	r3, [r7, #14]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d00c      	beq.n	800ecc8 <USBD_StdEPReq+0x80>
 800ecae:	7bbb      	ldrb	r3, [r7, #14]
 800ecb0:	2b80      	cmp	r3, #128	; 0x80
 800ecb2:	d009      	beq.n	800ecc8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ecb4:	7bbb      	ldrb	r3, [r7, #14]
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f001 f9cd 	bl	8010058 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ecbe:	2180      	movs	r1, #128	; 0x80
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f001 f9c9 	bl	8010058 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ecc6:	e020      	b.n	800ed0a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ecc8:	6839      	ldr	r1, [r7, #0]
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f000 fc64 	bl	800f598 <USBD_CtlError>
        break;
 800ecd0:	e01b      	b.n	800ed0a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	885b      	ldrh	r3, [r3, #2]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d10e      	bne.n	800ecf8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ecda:	7bbb      	ldrb	r3, [r7, #14]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d00b      	beq.n	800ecf8 <USBD_StdEPReq+0xb0>
 800ece0:	7bbb      	ldrb	r3, [r7, #14]
 800ece2:	2b80      	cmp	r3, #128	; 0x80
 800ece4:	d008      	beq.n	800ecf8 <USBD_StdEPReq+0xb0>
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	88db      	ldrh	r3, [r3, #6]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d104      	bne.n	800ecf8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ecee:	7bbb      	ldrb	r3, [r7, #14]
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f001 f9b0 	bl	8010058 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 fd18 	bl	800f72e <USBD_CtlSendStatus>

        break;
 800ecfe:	e004      	b.n	800ed0a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ed00:	6839      	ldr	r1, [r7, #0]
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 fc48 	bl	800f598 <USBD_CtlError>
        break;
 800ed08:	bf00      	nop
      }
      break;
 800ed0a:	e0e9      	b.n	800eee0 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed12:	2b02      	cmp	r3, #2
 800ed14:	d002      	beq.n	800ed1c <USBD_StdEPReq+0xd4>
 800ed16:	2b03      	cmp	r3, #3
 800ed18:	d015      	beq.n	800ed46 <USBD_StdEPReq+0xfe>
 800ed1a:	e02f      	b.n	800ed7c <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed1c:	7bbb      	ldrb	r3, [r7, #14]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d00c      	beq.n	800ed3c <USBD_StdEPReq+0xf4>
 800ed22:	7bbb      	ldrb	r3, [r7, #14]
 800ed24:	2b80      	cmp	r3, #128	; 0x80
 800ed26:	d009      	beq.n	800ed3c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed28:	7bbb      	ldrb	r3, [r7, #14]
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f001 f993 	bl	8010058 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed32:	2180      	movs	r1, #128	; 0x80
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f001 f98f 	bl	8010058 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ed3a:	e025      	b.n	800ed88 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800ed3c:	6839      	ldr	r1, [r7, #0]
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f000 fc2a 	bl	800f598 <USBD_CtlError>
        break;
 800ed44:	e020      	b.n	800ed88 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	885b      	ldrh	r3, [r3, #2]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d11b      	bne.n	800ed86 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ed4e:	7bbb      	ldrb	r3, [r7, #14]
 800ed50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d004      	beq.n	800ed62 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ed58:	7bbb      	ldrb	r3, [r7, #14]
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f001 f9b1 	bl	80100c4 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f000 fce3 	bl	800f72e <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed6e:	689b      	ldr	r3, [r3, #8]
 800ed70:	6839      	ldr	r1, [r7, #0]
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	4798      	blx	r3
 800ed76:	4603      	mov	r3, r0
 800ed78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ed7a:	e004      	b.n	800ed86 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 800ed7c:	6839      	ldr	r1, [r7, #0]
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f000 fc0a 	bl	800f598 <USBD_CtlError>
        break;
 800ed84:	e000      	b.n	800ed88 <USBD_StdEPReq+0x140>
        break;
 800ed86:	bf00      	nop
      }
      break;
 800ed88:	e0aa      	b.n	800eee0 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed90:	2b02      	cmp	r3, #2
 800ed92:	d002      	beq.n	800ed9a <USBD_StdEPReq+0x152>
 800ed94:	2b03      	cmp	r3, #3
 800ed96:	d032      	beq.n	800edfe <USBD_StdEPReq+0x1b6>
 800ed98:	e097      	b.n	800eeca <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed9a:	7bbb      	ldrb	r3, [r7, #14]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d007      	beq.n	800edb0 <USBD_StdEPReq+0x168>
 800eda0:	7bbb      	ldrb	r3, [r7, #14]
 800eda2:	2b80      	cmp	r3, #128	; 0x80
 800eda4:	d004      	beq.n	800edb0 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800eda6:	6839      	ldr	r1, [r7, #0]
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f000 fbf5 	bl	800f598 <USBD_CtlError>
          break;
 800edae:	e091      	b.n	800eed4 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800edb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	da0b      	bge.n	800edd0 <USBD_StdEPReq+0x188>
 800edb8:	7bbb      	ldrb	r3, [r7, #14]
 800edba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800edbe:	4613      	mov	r3, r2
 800edc0:	009b      	lsls	r3, r3, #2
 800edc2:	4413      	add	r3, r2
 800edc4:	009b      	lsls	r3, r3, #2
 800edc6:	3310      	adds	r3, #16
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	4413      	add	r3, r2
 800edcc:	3304      	adds	r3, #4
 800edce:	e00b      	b.n	800ede8 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800edd0:	7bbb      	ldrb	r3, [r7, #14]
 800edd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800edd6:	4613      	mov	r3, r2
 800edd8:	009b      	lsls	r3, r3, #2
 800edda:	4413      	add	r3, r2
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	4413      	add	r3, r2
 800ede6:	3304      	adds	r3, #4
 800ede8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	2200      	movs	r2, #0
 800edee:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	2202      	movs	r2, #2
 800edf4:	4619      	mov	r1, r3
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f000 fc3f 	bl	800f67a <USBD_CtlSendData>
        break;
 800edfc:	e06a      	b.n	800eed4 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800edfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	da11      	bge.n	800ee2a <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ee06:	7bbb      	ldrb	r3, [r7, #14]
 800ee08:	f003 020f 	and.w	r2, r3, #15
 800ee0c:	6879      	ldr	r1, [r7, #4]
 800ee0e:	4613      	mov	r3, r2
 800ee10:	009b      	lsls	r3, r3, #2
 800ee12:	4413      	add	r3, r2
 800ee14:	009b      	lsls	r3, r3, #2
 800ee16:	440b      	add	r3, r1
 800ee18:	3324      	adds	r3, #36	; 0x24
 800ee1a:	881b      	ldrh	r3, [r3, #0]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d117      	bne.n	800ee50 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800ee20:	6839      	ldr	r1, [r7, #0]
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f000 fbb8 	bl	800f598 <USBD_CtlError>
            break;
 800ee28:	e054      	b.n	800eed4 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ee2a:	7bbb      	ldrb	r3, [r7, #14]
 800ee2c:	f003 020f 	and.w	r2, r3, #15
 800ee30:	6879      	ldr	r1, [r7, #4]
 800ee32:	4613      	mov	r3, r2
 800ee34:	009b      	lsls	r3, r3, #2
 800ee36:	4413      	add	r3, r2
 800ee38:	009b      	lsls	r3, r3, #2
 800ee3a:	440b      	add	r3, r1
 800ee3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ee40:	881b      	ldrh	r3, [r3, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d104      	bne.n	800ee50 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800ee46:	6839      	ldr	r1, [r7, #0]
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 fba5 	bl	800f598 <USBD_CtlError>
            break;
 800ee4e:	e041      	b.n	800eed4 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	da0b      	bge.n	800ee70 <USBD_StdEPReq+0x228>
 800ee58:	7bbb      	ldrb	r3, [r7, #14]
 800ee5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ee5e:	4613      	mov	r3, r2
 800ee60:	009b      	lsls	r3, r3, #2
 800ee62:	4413      	add	r3, r2
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	3310      	adds	r3, #16
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	3304      	adds	r3, #4
 800ee6e:	e00b      	b.n	800ee88 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ee70:	7bbb      	ldrb	r3, [r7, #14]
 800ee72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee76:	4613      	mov	r3, r2
 800ee78:	009b      	lsls	r3, r3, #2
 800ee7a:	4413      	add	r3, r2
 800ee7c:	009b      	lsls	r3, r3, #2
 800ee7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ee82:	687a      	ldr	r2, [r7, #4]
 800ee84:	4413      	add	r3, r2
 800ee86:	3304      	adds	r3, #4
 800ee88:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ee8a:	7bbb      	ldrb	r3, [r7, #14]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d002      	beq.n	800ee96 <USBD_StdEPReq+0x24e>
 800ee90:	7bbb      	ldrb	r3, [r7, #14]
 800ee92:	2b80      	cmp	r3, #128	; 0x80
 800ee94:	d103      	bne.n	800ee9e <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	2200      	movs	r2, #0
 800ee9a:	601a      	str	r2, [r3, #0]
 800ee9c:	e00e      	b.n	800eebc <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ee9e:	7bbb      	ldrb	r3, [r7, #14]
 800eea0:	4619      	mov	r1, r3
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f001 f944 	bl	8010130 <USBD_LL_IsStallEP>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d003      	beq.n	800eeb6 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	601a      	str	r2, [r3, #0]
 800eeb4:	e002      	b.n	800eebc <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	2202      	movs	r2, #2
 800eec0:	4619      	mov	r1, r3
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f000 fbd9 	bl	800f67a <USBD_CtlSendData>
          break;
 800eec8:	e004      	b.n	800eed4 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800eeca:	6839      	ldr	r1, [r7, #0]
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f000 fb63 	bl	800f598 <USBD_CtlError>
        break;
 800eed2:	bf00      	nop
      }
      break;
 800eed4:	e004      	b.n	800eee0 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800eed6:	6839      	ldr	r1, [r7, #0]
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f000 fb5d 	bl	800f598 <USBD_CtlError>
      break;
 800eede:	bf00      	nop
    }
    break;
 800eee0:	e004      	b.n	800eeec <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800eee2:	6839      	ldr	r1, [r7, #0]
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f000 fb57 	bl	800f598 <USBD_CtlError>
    break;
 800eeea:	bf00      	nop
  }

  return ret;
 800eeec:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3710      	adds	r7, #16
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
	...

0800eef8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ef02:	2300      	movs	r3, #0
 800ef04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ef06:	2300      	movs	r3, #0
 800ef08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	885b      	ldrh	r3, [r3, #2]
 800ef12:	0a1b      	lsrs	r3, r3, #8
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	3b01      	subs	r3, #1
 800ef18:	2b0e      	cmp	r3, #14
 800ef1a:	f200 8152 	bhi.w	800f1c2 <USBD_GetDescriptor+0x2ca>
 800ef1e:	a201      	add	r2, pc, #4	; (adr r2, 800ef24 <USBD_GetDescriptor+0x2c>)
 800ef20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef24:	0800ef95 	.word	0x0800ef95
 800ef28:	0800efad 	.word	0x0800efad
 800ef2c:	0800efed 	.word	0x0800efed
 800ef30:	0800f1c3 	.word	0x0800f1c3
 800ef34:	0800f1c3 	.word	0x0800f1c3
 800ef38:	0800f163 	.word	0x0800f163
 800ef3c:	0800f18f 	.word	0x0800f18f
 800ef40:	0800f1c3 	.word	0x0800f1c3
 800ef44:	0800f1c3 	.word	0x0800f1c3
 800ef48:	0800f1c3 	.word	0x0800f1c3
 800ef4c:	0800f1c3 	.word	0x0800f1c3
 800ef50:	0800f1c3 	.word	0x0800f1c3
 800ef54:	0800f1c3 	.word	0x0800f1c3
 800ef58:	0800f1c3 	.word	0x0800f1c3
 800ef5c:	0800ef61 	.word	0x0800ef61
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef66:	69db      	ldr	r3, [r3, #28]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d00b      	beq.n	800ef84 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef72:	69db      	ldr	r3, [r3, #28]
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	7c12      	ldrb	r2, [r2, #16]
 800ef78:	f107 0108 	add.w	r1, r7, #8
 800ef7c:	4610      	mov	r0, r2
 800ef7e:	4798      	blx	r3
 800ef80:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ef82:	e126      	b.n	800f1d2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ef84:	6839      	ldr	r1, [r7, #0]
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f000 fb06 	bl	800f598 <USBD_CtlError>
      err++;
 800ef8c:	7afb      	ldrb	r3, [r7, #11]
 800ef8e:	3301      	adds	r3, #1
 800ef90:	72fb      	strb	r3, [r7, #11]
    break;
 800ef92:	e11e      	b.n	800f1d2 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	7c12      	ldrb	r2, [r2, #16]
 800efa0:	f107 0108 	add.w	r1, r7, #8
 800efa4:	4610      	mov	r0, r2
 800efa6:	4798      	blx	r3
 800efa8:	60f8      	str	r0, [r7, #12]
    break;
 800efaa:	e112      	b.n	800f1d2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	7c1b      	ldrb	r3, [r3, #16]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d10d      	bne.n	800efd0 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efbc:	f107 0208 	add.w	r2, r7, #8
 800efc0:	4610      	mov	r0, r2
 800efc2:	4798      	blx	r3
 800efc4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	3301      	adds	r3, #1
 800efca:	2202      	movs	r2, #2
 800efcc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800efce:	e100      	b.n	800f1d2 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efd8:	f107 0208 	add.w	r2, r7, #8
 800efdc:	4610      	mov	r0, r2
 800efde:	4798      	blx	r3
 800efe0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	3301      	adds	r3, #1
 800efe6:	2202      	movs	r2, #2
 800efe8:	701a      	strb	r2, [r3, #0]
    break;
 800efea:	e0f2      	b.n	800f1d2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	885b      	ldrh	r3, [r3, #2]
 800eff0:	b2db      	uxtb	r3, r3
 800eff2:	2b05      	cmp	r3, #5
 800eff4:	f200 80ac 	bhi.w	800f150 <USBD_GetDescriptor+0x258>
 800eff8:	a201      	add	r2, pc, #4	; (adr r2, 800f000 <USBD_GetDescriptor+0x108>)
 800effa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800effe:	bf00      	nop
 800f000:	0800f019 	.word	0x0800f019
 800f004:	0800f04d 	.word	0x0800f04d
 800f008:	0800f081 	.word	0x0800f081
 800f00c:	0800f0b5 	.word	0x0800f0b5
 800f010:	0800f0e9 	.word	0x0800f0e9
 800f014:	0800f11d 	.word	0x0800f11d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d00b      	beq.n	800f03c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	7c12      	ldrb	r2, [r2, #16]
 800f030:	f107 0108 	add.w	r1, r7, #8
 800f034:	4610      	mov	r0, r2
 800f036:	4798      	blx	r3
 800f038:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f03a:	e091      	b.n	800f160 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f03c:	6839      	ldr	r1, [r7, #0]
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f000 faaa 	bl	800f598 <USBD_CtlError>
        err++;
 800f044:	7afb      	ldrb	r3, [r7, #11]
 800f046:	3301      	adds	r3, #1
 800f048:	72fb      	strb	r3, [r7, #11]
      break;
 800f04a:	e089      	b.n	800f160 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f052:	689b      	ldr	r3, [r3, #8]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d00b      	beq.n	800f070 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	687a      	ldr	r2, [r7, #4]
 800f062:	7c12      	ldrb	r2, [r2, #16]
 800f064:	f107 0108 	add.w	r1, r7, #8
 800f068:	4610      	mov	r0, r2
 800f06a:	4798      	blx	r3
 800f06c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f06e:	e077      	b.n	800f160 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f070:	6839      	ldr	r1, [r7, #0]
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 fa90 	bl	800f598 <USBD_CtlError>
        err++;
 800f078:	7afb      	ldrb	r3, [r7, #11]
 800f07a:	3301      	adds	r3, #1
 800f07c:	72fb      	strb	r3, [r7, #11]
      break;
 800f07e:	e06f      	b.n	800f160 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f086:	68db      	ldr	r3, [r3, #12]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d00b      	beq.n	800f0a4 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f092:	68db      	ldr	r3, [r3, #12]
 800f094:	687a      	ldr	r2, [r7, #4]
 800f096:	7c12      	ldrb	r2, [r2, #16]
 800f098:	f107 0108 	add.w	r1, r7, #8
 800f09c:	4610      	mov	r0, r2
 800f09e:	4798      	blx	r3
 800f0a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f0a2:	e05d      	b.n	800f160 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f0a4:	6839      	ldr	r1, [r7, #0]
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 fa76 	bl	800f598 <USBD_CtlError>
        err++;
 800f0ac:	7afb      	ldrb	r3, [r7, #11]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	72fb      	strb	r3, [r7, #11]
      break;
 800f0b2:	e055      	b.n	800f160 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0ba:	691b      	ldr	r3, [r3, #16]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d00b      	beq.n	800f0d8 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0c6:	691b      	ldr	r3, [r3, #16]
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	7c12      	ldrb	r2, [r2, #16]
 800f0cc:	f107 0108 	add.w	r1, r7, #8
 800f0d0:	4610      	mov	r0, r2
 800f0d2:	4798      	blx	r3
 800f0d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f0d6:	e043      	b.n	800f160 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f0d8:	6839      	ldr	r1, [r7, #0]
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f000 fa5c 	bl	800f598 <USBD_CtlError>
        err++;
 800f0e0:	7afb      	ldrb	r3, [r7, #11]
 800f0e2:	3301      	adds	r3, #1
 800f0e4:	72fb      	strb	r3, [r7, #11]
      break;
 800f0e6:	e03b      	b.n	800f160 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0ee:	695b      	ldr	r3, [r3, #20]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d00b      	beq.n	800f10c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0fa:	695b      	ldr	r3, [r3, #20]
 800f0fc:	687a      	ldr	r2, [r7, #4]
 800f0fe:	7c12      	ldrb	r2, [r2, #16]
 800f100:	f107 0108 	add.w	r1, r7, #8
 800f104:	4610      	mov	r0, r2
 800f106:	4798      	blx	r3
 800f108:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f10a:	e029      	b.n	800f160 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f10c:	6839      	ldr	r1, [r7, #0]
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f000 fa42 	bl	800f598 <USBD_CtlError>
        err++;
 800f114:	7afb      	ldrb	r3, [r7, #11]
 800f116:	3301      	adds	r3, #1
 800f118:	72fb      	strb	r3, [r7, #11]
      break;
 800f11a:	e021      	b.n	800f160 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f122:	699b      	ldr	r3, [r3, #24]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d00b      	beq.n	800f140 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f12e:	699b      	ldr	r3, [r3, #24]
 800f130:	687a      	ldr	r2, [r7, #4]
 800f132:	7c12      	ldrb	r2, [r2, #16]
 800f134:	f107 0108 	add.w	r1, r7, #8
 800f138:	4610      	mov	r0, r2
 800f13a:	4798      	blx	r3
 800f13c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f13e:	e00f      	b.n	800f160 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f140:	6839      	ldr	r1, [r7, #0]
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 fa28 	bl	800f598 <USBD_CtlError>
        err++;
 800f148:	7afb      	ldrb	r3, [r7, #11]
 800f14a:	3301      	adds	r3, #1
 800f14c:	72fb      	strb	r3, [r7, #11]
      break;
 800f14e:	e007      	b.n	800f160 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f150:	6839      	ldr	r1, [r7, #0]
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 fa20 	bl	800f598 <USBD_CtlError>
      err++;
 800f158:	7afb      	ldrb	r3, [r7, #11]
 800f15a:	3301      	adds	r3, #1
 800f15c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f15e:	bf00      	nop
    }
    break;
 800f160:	e037      	b.n	800f1d2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	7c1b      	ldrb	r3, [r3, #16]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d109      	bne.n	800f17e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f172:	f107 0208 	add.w	r2, r7, #8
 800f176:	4610      	mov	r0, r2
 800f178:	4798      	blx	r3
 800f17a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f17c:	e029      	b.n	800f1d2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f17e:	6839      	ldr	r1, [r7, #0]
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f000 fa09 	bl	800f598 <USBD_CtlError>
      err++;
 800f186:	7afb      	ldrb	r3, [r7, #11]
 800f188:	3301      	adds	r3, #1
 800f18a:	72fb      	strb	r3, [r7, #11]
    break;
 800f18c:	e021      	b.n	800f1d2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	7c1b      	ldrb	r3, [r3, #16]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d10d      	bne.n	800f1b2 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f19e:	f107 0208 	add.w	r2, r7, #8
 800f1a2:	4610      	mov	r0, r2
 800f1a4:	4798      	blx	r3
 800f1a6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	2207      	movs	r2, #7
 800f1ae:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f1b0:	e00f      	b.n	800f1d2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f1b2:	6839      	ldr	r1, [r7, #0]
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f000 f9ef 	bl	800f598 <USBD_CtlError>
      err++;
 800f1ba:	7afb      	ldrb	r3, [r7, #11]
 800f1bc:	3301      	adds	r3, #1
 800f1be:	72fb      	strb	r3, [r7, #11]
    break;
 800f1c0:	e007      	b.n	800f1d2 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800f1c2:	6839      	ldr	r1, [r7, #0]
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f000 f9e7 	bl	800f598 <USBD_CtlError>
    err++;
 800f1ca:	7afb      	ldrb	r3, [r7, #11]
 800f1cc:	3301      	adds	r3, #1
 800f1ce:	72fb      	strb	r3, [r7, #11]
    break;
 800f1d0:	bf00      	nop
  }

  if (err != 0U)
 800f1d2:	7afb      	ldrb	r3, [r7, #11]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d11e      	bne.n	800f216 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	88db      	ldrh	r3, [r3, #6]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d016      	beq.n	800f20e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800f1e0:	893b      	ldrh	r3, [r7, #8]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d00e      	beq.n	800f204 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	88da      	ldrh	r2, [r3, #6]
 800f1ea:	893b      	ldrh	r3, [r7, #8]
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	bf28      	it	cs
 800f1f0:	4613      	movcs	r3, r2
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f1f6:	893b      	ldrh	r3, [r7, #8]
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	68f9      	ldr	r1, [r7, #12]
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 fa3c 	bl	800f67a <USBD_CtlSendData>
 800f202:	e009      	b.n	800f218 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f204:	6839      	ldr	r1, [r7, #0]
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f000 f9c6 	bl	800f598 <USBD_CtlError>
 800f20c:	e004      	b.n	800f218 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f000 fa8d 	bl	800f72e <USBD_CtlSendStatus>
 800f214:	e000      	b.n	800f218 <USBD_GetDescriptor+0x320>
    return;
 800f216:	bf00      	nop
    }
  }
}
 800f218:	3710      	adds	r7, #16
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop

0800f220 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b084      	sub	sp, #16
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	889b      	ldrh	r3, [r3, #4]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d130      	bne.n	800f294 <USBD_SetAddress+0x74>
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	88db      	ldrh	r3, [r3, #6]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d12c      	bne.n	800f294 <USBD_SetAddress+0x74>
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	885b      	ldrh	r3, [r3, #2]
 800f23e:	2b7f      	cmp	r3, #127	; 0x7f
 800f240:	d828      	bhi.n	800f294 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	885b      	ldrh	r3, [r3, #2]
 800f246:	b2db      	uxtb	r3, r3
 800f248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f24c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f254:	2b03      	cmp	r3, #3
 800f256:	d104      	bne.n	800f262 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f258:	6839      	ldr	r1, [r7, #0]
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f000 f99c 	bl	800f598 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f260:	e01c      	b.n	800f29c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	7bfa      	ldrb	r2, [r7, #15]
 800f266:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f26a:	7bfb      	ldrb	r3, [r7, #15]
 800f26c:	4619      	mov	r1, r3
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f000 ff8a 	bl	8010188 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f000 fa5a 	bl	800f72e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f27a:	7bfb      	ldrb	r3, [r7, #15]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d004      	beq.n	800f28a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2202      	movs	r2, #2
 800f284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f288:	e008      	b.n	800f29c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2201      	movs	r2, #1
 800f28e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f292:	e003      	b.n	800f29c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f294:	6839      	ldr	r1, [r7, #0]
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f000 f97e 	bl	800f598 <USBD_CtlError>
  }
}
 800f29c:	bf00      	nop
 800f29e:	3710      	adds	r7, #16
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b084      	sub	sp, #16
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	885b      	ldrh	r3, [r3, #2]
 800f2b6:	b2da      	uxtb	r2, r3
 800f2b8:	4b4b      	ldr	r3, [pc, #300]	; (800f3e8 <USBD_SetConfig+0x144>)
 800f2ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f2bc:	4b4a      	ldr	r3, [pc, #296]	; (800f3e8 <USBD_SetConfig+0x144>)
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d905      	bls.n	800f2d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f2c4:	6839      	ldr	r1, [r7, #0]
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f000 f966 	bl	800f598 <USBD_CtlError>
    return USBD_FAIL;
 800f2cc:	2303      	movs	r3, #3
 800f2ce:	e087      	b.n	800f3e0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2d6:	2b02      	cmp	r3, #2
 800f2d8:	d002      	beq.n	800f2e0 <USBD_SetConfig+0x3c>
 800f2da:	2b03      	cmp	r3, #3
 800f2dc:	d025      	beq.n	800f32a <USBD_SetConfig+0x86>
 800f2de:	e071      	b.n	800f3c4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f2e0:	4b41      	ldr	r3, [pc, #260]	; (800f3e8 <USBD_SetConfig+0x144>)
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d01c      	beq.n	800f322 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f2e8:	4b3f      	ldr	r3, [pc, #252]	; (800f3e8 <USBD_SetConfig+0x144>)
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f2f2:	4b3d      	ldr	r3, [pc, #244]	; (800f3e8 <USBD_SetConfig+0x144>)
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	4619      	mov	r1, r3
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f7ff f97b 	bl	800e5f4 <USBD_SetClassConfig>
 800f2fe:	4603      	mov	r3, r0
 800f300:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f302:	7bfb      	ldrb	r3, [r7, #15]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d004      	beq.n	800f312 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f308:	6839      	ldr	r1, [r7, #0]
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f000 f944 	bl	800f598 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f310:	e065      	b.n	800f3de <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 fa0b 	bl	800f72e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2203      	movs	r2, #3
 800f31c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f320:	e05d      	b.n	800f3de <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 fa03 	bl	800f72e <USBD_CtlSendStatus>
    break;
 800f328:	e059      	b.n	800f3de <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f32a:	4b2f      	ldr	r3, [pc, #188]	; (800f3e8 <USBD_SetConfig+0x144>)
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d112      	bne.n	800f358 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2202      	movs	r2, #2
 800f336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f33a:	4b2b      	ldr	r3, [pc, #172]	; (800f3e8 <USBD_SetConfig+0x144>)
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	461a      	mov	r2, r3
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f344:	4b28      	ldr	r3, [pc, #160]	; (800f3e8 <USBD_SetConfig+0x144>)
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	4619      	mov	r1, r3
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f7ff f96e 	bl	800e62c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f000 f9ec 	bl	800f72e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f356:	e042      	b.n	800f3de <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f358:	4b23      	ldr	r3, [pc, #140]	; (800f3e8 <USBD_SetConfig+0x144>)
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	461a      	mov	r2, r3
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	429a      	cmp	r2, r3
 800f364:	d02a      	beq.n	800f3bc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	b2db      	uxtb	r3, r3
 800f36c:	4619      	mov	r1, r3
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f7ff f95c 	bl	800e62c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f374:	4b1c      	ldr	r3, [pc, #112]	; (800f3e8 <USBD_SetConfig+0x144>)
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	461a      	mov	r2, r3
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f37e:	4b1a      	ldr	r3, [pc, #104]	; (800f3e8 <USBD_SetConfig+0x144>)
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	4619      	mov	r1, r3
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f7ff f935 	bl	800e5f4 <USBD_SetClassConfig>
 800f38a:	4603      	mov	r3, r0
 800f38c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f38e:	7bfb      	ldrb	r3, [r7, #15]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d00f      	beq.n	800f3b4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f394:	6839      	ldr	r1, [r7, #0]
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f000 f8fe 	bl	800f598 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	685b      	ldr	r3, [r3, #4]
 800f3a0:	b2db      	uxtb	r3, r3
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7ff f941 	bl	800e62c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2202      	movs	r2, #2
 800f3ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f3b2:	e014      	b.n	800f3de <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f000 f9ba 	bl	800f72e <USBD_CtlSendStatus>
    break;
 800f3ba:	e010      	b.n	800f3de <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f000 f9b6 	bl	800f72e <USBD_CtlSendStatus>
    break;
 800f3c2:	e00c      	b.n	800f3de <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f3c4:	6839      	ldr	r1, [r7, #0]
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f000 f8e6 	bl	800f598 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f3cc:	4b06      	ldr	r3, [pc, #24]	; (800f3e8 <USBD_SetConfig+0x144>)
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f7ff f92a 	bl	800e62c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f3d8:	2303      	movs	r3, #3
 800f3da:	73fb      	strb	r3, [r7, #15]
    break;
 800f3dc:	bf00      	nop
  }

  return ret;
 800f3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3710      	adds	r7, #16
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	20000988 	.word	0x20000988

0800f3ec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	88db      	ldrh	r3, [r3, #6]
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	d004      	beq.n	800f408 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f3fe:	6839      	ldr	r1, [r7, #0]
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f000 f8c9 	bl	800f598 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f406:	e021      	b.n	800f44c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f40e:	2b01      	cmp	r3, #1
 800f410:	db17      	blt.n	800f442 <USBD_GetConfig+0x56>
 800f412:	2b02      	cmp	r3, #2
 800f414:	dd02      	ble.n	800f41c <USBD_GetConfig+0x30>
 800f416:	2b03      	cmp	r3, #3
 800f418:	d00b      	beq.n	800f432 <USBD_GetConfig+0x46>
 800f41a:	e012      	b.n	800f442 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2200      	movs	r2, #0
 800f420:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	3308      	adds	r3, #8
 800f426:	2201      	movs	r2, #1
 800f428:	4619      	mov	r1, r3
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f000 f925 	bl	800f67a <USBD_CtlSendData>
      break;
 800f430:	e00c      	b.n	800f44c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	3304      	adds	r3, #4
 800f436:	2201      	movs	r2, #1
 800f438:	4619      	mov	r1, r3
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f000 f91d 	bl	800f67a <USBD_CtlSendData>
      break;
 800f440:	e004      	b.n	800f44c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f442:	6839      	ldr	r1, [r7, #0]
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 f8a7 	bl	800f598 <USBD_CtlError>
      break;
 800f44a:	bf00      	nop
}
 800f44c:	bf00      	nop
 800f44e:	3708      	adds	r7, #8
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f464:	3b01      	subs	r3, #1
 800f466:	2b02      	cmp	r3, #2
 800f468:	d81e      	bhi.n	800f4a8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	88db      	ldrh	r3, [r3, #6]
 800f46e:	2b02      	cmp	r3, #2
 800f470:	d004      	beq.n	800f47c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f472:	6839      	ldr	r1, [r7, #0]
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f000 f88f 	bl	800f598 <USBD_CtlError>
      break;
 800f47a:	e01a      	b.n	800f4b2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2201      	movs	r2, #1
 800f480:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d005      	beq.n	800f498 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	68db      	ldr	r3, [r3, #12]
 800f490:	f043 0202 	orr.w	r2, r3, #2
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	330c      	adds	r3, #12
 800f49c:	2202      	movs	r2, #2
 800f49e:	4619      	mov	r1, r3
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f000 f8ea 	bl	800f67a <USBD_CtlSendData>
    break;
 800f4a6:	e004      	b.n	800f4b2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f4a8:	6839      	ldr	r1, [r7, #0]
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 f874 	bl	800f598 <USBD_CtlError>
    break;
 800f4b0:	bf00      	nop
  }
}
 800f4b2:	bf00      	nop
 800f4b4:	3708      	adds	r7, #8
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}

0800f4ba <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4ba:	b580      	push	{r7, lr}
 800f4bc:	b082      	sub	sp, #8
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	6078      	str	r0, [r7, #4]
 800f4c2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	885b      	ldrh	r3, [r3, #2]
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	d106      	bne.n	800f4da <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f000 f92a 	bl	800f72e <USBD_CtlSendStatus>
  }
}
 800f4da:	bf00      	nop
 800f4dc:	3708      	adds	r7, #8
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b082      	sub	sp, #8
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	6078      	str	r0, [r7, #4]
 800f4ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	2b02      	cmp	r3, #2
 800f4f6:	d80b      	bhi.n	800f510 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	885b      	ldrh	r3, [r3, #2]
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	d10c      	bne.n	800f51a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2200      	movs	r2, #0
 800f504:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f000 f910 	bl	800f72e <USBD_CtlSendStatus>
      }
      break;
 800f50e:	e004      	b.n	800f51a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f510:	6839      	ldr	r1, [r7, #0]
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f000 f840 	bl	800f598 <USBD_CtlError>
      break;
 800f518:	e000      	b.n	800f51c <USBD_ClrFeature+0x3a>
      break;
 800f51a:	bf00      	nop
  }
}
 800f51c:	bf00      	nop
 800f51e:	3708      	adds	r7, #8
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	781a      	ldrb	r2, [r3, #0]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	3301      	adds	r3, #1
 800f53e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	781a      	ldrb	r2, [r3, #0]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	3301      	adds	r3, #1
 800f54c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f54e:	68f8      	ldr	r0, [r7, #12]
 800f550:	f7ff faa7 	bl	800eaa2 <SWAPBYTE>
 800f554:	4603      	mov	r3, r0
 800f556:	461a      	mov	r2, r3
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	3301      	adds	r3, #1
 800f560:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	3301      	adds	r3, #1
 800f566:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f568:	68f8      	ldr	r0, [r7, #12]
 800f56a:	f7ff fa9a 	bl	800eaa2 <SWAPBYTE>
 800f56e:	4603      	mov	r3, r0
 800f570:	461a      	mov	r2, r3
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	3301      	adds	r3, #1
 800f57a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	3301      	adds	r3, #1
 800f580:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f582:	68f8      	ldr	r0, [r7, #12]
 800f584:	f7ff fa8d 	bl	800eaa2 <SWAPBYTE>
 800f588:	4603      	mov	r3, r0
 800f58a:	461a      	mov	r2, r3
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	80da      	strh	r2, [r3, #6]
}
 800f590:	bf00      	nop
 800f592:	3710      	adds	r7, #16
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b082      	sub	sp, #8
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f5a2:	2180      	movs	r1, #128	; 0x80
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f000 fd57 	bl	8010058 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f5aa:	2100      	movs	r1, #0
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f000 fd53 	bl	8010058 <USBD_LL_StallEP>
}
 800f5b2:	bf00      	nop
 800f5b4:	3708      	adds	r7, #8
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}

0800f5ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f5ba:	b580      	push	{r7, lr}
 800f5bc:	b086      	sub	sp, #24
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	60f8      	str	r0, [r7, #12]
 800f5c2:	60b9      	str	r1, [r7, #8]
 800f5c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d036      	beq.n	800f63e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f5d4:	6938      	ldr	r0, [r7, #16]
 800f5d6:	f000 f836 	bl	800f646 <USBD_GetLen>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	3301      	adds	r3, #1
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	005b      	lsls	r3, r3, #1
 800f5e2:	b29a      	uxth	r2, r3
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f5e8:	7dfb      	ldrb	r3, [r7, #23]
 800f5ea:	68ba      	ldr	r2, [r7, #8]
 800f5ec:	4413      	add	r3, r2
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	7812      	ldrb	r2, [r2, #0]
 800f5f2:	701a      	strb	r2, [r3, #0]
  idx++;
 800f5f4:	7dfb      	ldrb	r3, [r7, #23]
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f5fa:	7dfb      	ldrb	r3, [r7, #23]
 800f5fc:	68ba      	ldr	r2, [r7, #8]
 800f5fe:	4413      	add	r3, r2
 800f600:	2203      	movs	r2, #3
 800f602:	701a      	strb	r2, [r3, #0]
  idx++;
 800f604:	7dfb      	ldrb	r3, [r7, #23]
 800f606:	3301      	adds	r3, #1
 800f608:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f60a:	e013      	b.n	800f634 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f60c:	7dfb      	ldrb	r3, [r7, #23]
 800f60e:	68ba      	ldr	r2, [r7, #8]
 800f610:	4413      	add	r3, r2
 800f612:	693a      	ldr	r2, [r7, #16]
 800f614:	7812      	ldrb	r2, [r2, #0]
 800f616:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	3301      	adds	r3, #1
 800f61c:	613b      	str	r3, [r7, #16]
    idx++;
 800f61e:	7dfb      	ldrb	r3, [r7, #23]
 800f620:	3301      	adds	r3, #1
 800f622:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f624:	7dfb      	ldrb	r3, [r7, #23]
 800f626:	68ba      	ldr	r2, [r7, #8]
 800f628:	4413      	add	r3, r2
 800f62a:	2200      	movs	r2, #0
 800f62c:	701a      	strb	r2, [r3, #0]
    idx++;
 800f62e:	7dfb      	ldrb	r3, [r7, #23]
 800f630:	3301      	adds	r3, #1
 800f632:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d1e7      	bne.n	800f60c <USBD_GetString+0x52>
 800f63c:	e000      	b.n	800f640 <USBD_GetString+0x86>
    return;
 800f63e:	bf00      	nop
  }
}
 800f640:	3718      	adds	r7, #24
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}

0800f646 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f646:	b480      	push	{r7}
 800f648:	b085      	sub	sp, #20
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f64e:	2300      	movs	r3, #0
 800f650:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f656:	e005      	b.n	800f664 <USBD_GetLen+0x1e>
  {
    len++;
 800f658:	7bfb      	ldrb	r3, [r7, #15]
 800f65a:	3301      	adds	r3, #1
 800f65c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	3301      	adds	r3, #1
 800f662:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d1f5      	bne.n	800f658 <USBD_GetLen+0x12>
  }

  return len;
 800f66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3714      	adds	r7, #20
 800f672:	46bd      	mov	sp, r7
 800f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f678:	4770      	bx	lr

0800f67a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f67a:	b580      	push	{r7, lr}
 800f67c:	b084      	sub	sp, #16
 800f67e:	af00      	add	r7, sp, #0
 800f680:	60f8      	str	r0, [r7, #12]
 800f682:	60b9      	str	r1, [r7, #8]
 800f684:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2202      	movs	r2, #2
 800f68a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	687a      	ldr	r2, [r7, #4]
 800f692:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	68ba      	ldr	r2, [r7, #8]
 800f69e:	2100      	movs	r1, #0
 800f6a0:	68f8      	ldr	r0, [r7, #12]
 800f6a2:	f000 fda7 	bl	80101f4 <USBD_LL_Transmit>

  return USBD_OK;
 800f6a6:	2300      	movs	r3, #0
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3710      	adds	r7, #16
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}

0800f6b0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b084      	sub	sp, #16
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	60f8      	str	r0, [r7, #12]
 800f6b8:	60b9      	str	r1, [r7, #8]
 800f6ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	68ba      	ldr	r2, [r7, #8]
 800f6c0:	2100      	movs	r1, #0
 800f6c2:	68f8      	ldr	r0, [r7, #12]
 800f6c4:	f000 fd96 	bl	80101f4 <USBD_LL_Transmit>

  return USBD_OK;
 800f6c8:	2300      	movs	r3, #0
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3710      	adds	r7, #16
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}

0800f6d2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b084      	sub	sp, #16
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	60f8      	str	r0, [r7, #12]
 800f6da:	60b9      	str	r1, [r7, #8]
 800f6dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	2203      	movs	r2, #3
 800f6e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	687a      	ldr	r2, [r7, #4]
 800f6ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	687a      	ldr	r2, [r7, #4]
 800f6f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	68ba      	ldr	r2, [r7, #8]
 800f6fa:	2100      	movs	r1, #0
 800f6fc:	68f8      	ldr	r0, [r7, #12]
 800f6fe:	f000 fdb1 	bl	8010264 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f702:	2300      	movs	r3, #0
}
 800f704:	4618      	mov	r0, r3
 800f706:	3710      	adds	r7, #16
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b084      	sub	sp, #16
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	60b9      	str	r1, [r7, #8]
 800f716:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	68ba      	ldr	r2, [r7, #8]
 800f71c:	2100      	movs	r1, #0
 800f71e:	68f8      	ldr	r0, [r7, #12]
 800f720:	f000 fda0 	bl	8010264 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f724:	2300      	movs	r3, #0
}
 800f726:	4618      	mov	r0, r3
 800f728:	3710      	adds	r7, #16
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}

0800f72e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f72e:	b580      	push	{r7, lr}
 800f730:	b082      	sub	sp, #8
 800f732:	af00      	add	r7, sp, #0
 800f734:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2204      	movs	r2, #4
 800f73a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f73e:	2300      	movs	r3, #0
 800f740:	2200      	movs	r2, #0
 800f742:	2100      	movs	r1, #0
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f000 fd55 	bl	80101f4 <USBD_LL_Transmit>

  return USBD_OK;
 800f74a:	2300      	movs	r3, #0
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3708      	adds	r7, #8
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2205      	movs	r2, #5
 800f760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f764:	2300      	movs	r3, #0
 800f766:	2200      	movs	r2, #0
 800f768:	2100      	movs	r1, #0
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 fd7a 	bl	8010264 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f770:	2300      	movs	r3, #0
}
 800f772:	4618      	mov	r0, r3
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
	...

0800f77c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f780:	2200      	movs	r2, #0
 800f782:	4912      	ldr	r1, [pc, #72]	; (800f7cc <MX_USB_DEVICE_Init+0x50>)
 800f784:	4812      	ldr	r0, [pc, #72]	; (800f7d0 <MX_USB_DEVICE_Init+0x54>)
 800f786:	f7fe fec7 	bl	800e518 <USBD_Init>
 800f78a:	4603      	mov	r3, r0
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d001      	beq.n	800f794 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f790:	f7f2 feb0 	bl	80024f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f794:	490f      	ldr	r1, [pc, #60]	; (800f7d4 <MX_USB_DEVICE_Init+0x58>)
 800f796:	480e      	ldr	r0, [pc, #56]	; (800f7d0 <MX_USB_DEVICE_Init+0x54>)
 800f798:	f7fe feee 	bl	800e578 <USBD_RegisterClass>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d001      	beq.n	800f7a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f7a2:	f7f2 fea7 	bl	80024f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f7a6:	490c      	ldr	r1, [pc, #48]	; (800f7d8 <MX_USB_DEVICE_Init+0x5c>)
 800f7a8:	4809      	ldr	r0, [pc, #36]	; (800f7d0 <MX_USB_DEVICE_Init+0x54>)
 800f7aa:	f7fe fe19 	bl	800e3e0 <USBD_CDC_RegisterInterface>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d001      	beq.n	800f7b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f7b4:	f7f2 fe9e 	bl	80024f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f7b8:	4805      	ldr	r0, [pc, #20]	; (800f7d0 <MX_USB_DEVICE_Init+0x54>)
 800f7ba:	f7fe ff04 	bl	800e5c6 <USBD_Start>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d001      	beq.n	800f7c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f7c4:	f7f2 fe96 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f7c8:	bf00      	nop
 800f7ca:	bd80      	pop	{r7, pc}
 800f7cc:	20000130 	.word	0x20000130
 800f7d0:	200012d4 	.word	0x200012d4
 800f7d4:	20000018 	.word	0x20000018
 800f7d8:	2000011c 	.word	0x2000011c

0800f7dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	4905      	ldr	r1, [pc, #20]	; (800f7f8 <CDC_Init_FS+0x1c>)
 800f7e4:	4805      	ldr	r0, [pc, #20]	; (800f7fc <CDC_Init_FS+0x20>)
 800f7e6:	f7fe fe10 	bl	800e40a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f7ea:	4905      	ldr	r1, [pc, #20]	; (800f800 <CDC_Init_FS+0x24>)
 800f7ec:	4803      	ldr	r0, [pc, #12]	; (800f7fc <CDC_Init_FS+0x20>)
 800f7ee:	f7fe fe25 	bl	800e43c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f7f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	20001da4 	.word	0x20001da4
 800f7fc:	200012d4 	.word	0x200012d4
 800f800:	200015a4 	.word	0x200015a4

0800f804 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f804:	b480      	push	{r7}
 800f806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f808:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr

0800f814 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
 800f81a:	4603      	mov	r3, r0
 800f81c:	6039      	str	r1, [r7, #0]
 800f81e:	71fb      	strb	r3, [r7, #7]
 800f820:	4613      	mov	r3, r2
 800f822:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f824:	79fb      	ldrb	r3, [r7, #7]
 800f826:	2b23      	cmp	r3, #35	; 0x23
 800f828:	d84a      	bhi.n	800f8c0 <CDC_Control_FS+0xac>
 800f82a:	a201      	add	r2, pc, #4	; (adr r2, 800f830 <CDC_Control_FS+0x1c>)
 800f82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f830:	0800f8c1 	.word	0x0800f8c1
 800f834:	0800f8c1 	.word	0x0800f8c1
 800f838:	0800f8c1 	.word	0x0800f8c1
 800f83c:	0800f8c1 	.word	0x0800f8c1
 800f840:	0800f8c1 	.word	0x0800f8c1
 800f844:	0800f8c1 	.word	0x0800f8c1
 800f848:	0800f8c1 	.word	0x0800f8c1
 800f84c:	0800f8c1 	.word	0x0800f8c1
 800f850:	0800f8c1 	.word	0x0800f8c1
 800f854:	0800f8c1 	.word	0x0800f8c1
 800f858:	0800f8c1 	.word	0x0800f8c1
 800f85c:	0800f8c1 	.word	0x0800f8c1
 800f860:	0800f8c1 	.word	0x0800f8c1
 800f864:	0800f8c1 	.word	0x0800f8c1
 800f868:	0800f8c1 	.word	0x0800f8c1
 800f86c:	0800f8c1 	.word	0x0800f8c1
 800f870:	0800f8c1 	.word	0x0800f8c1
 800f874:	0800f8c1 	.word	0x0800f8c1
 800f878:	0800f8c1 	.word	0x0800f8c1
 800f87c:	0800f8c1 	.word	0x0800f8c1
 800f880:	0800f8c1 	.word	0x0800f8c1
 800f884:	0800f8c1 	.word	0x0800f8c1
 800f888:	0800f8c1 	.word	0x0800f8c1
 800f88c:	0800f8c1 	.word	0x0800f8c1
 800f890:	0800f8c1 	.word	0x0800f8c1
 800f894:	0800f8c1 	.word	0x0800f8c1
 800f898:	0800f8c1 	.word	0x0800f8c1
 800f89c:	0800f8c1 	.word	0x0800f8c1
 800f8a0:	0800f8c1 	.word	0x0800f8c1
 800f8a4:	0800f8c1 	.word	0x0800f8c1
 800f8a8:	0800f8c1 	.word	0x0800f8c1
 800f8ac:	0800f8c1 	.word	0x0800f8c1
 800f8b0:	0800f8c1 	.word	0x0800f8c1
 800f8b4:	0800f8c1 	.word	0x0800f8c1
 800f8b8:	0800f8c1 	.word	0x0800f8c1
 800f8bc:	0800f8c1 	.word	0x0800f8c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f8c0:	bf00      	nop
  }

  return (USBD_OK);
 800f8c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	370c      	adds	r7, #12
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ce:	4770      	bx	lr

0800f8d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b082      	sub	sp, #8
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f8da:	6879      	ldr	r1, [r7, #4]
 800f8dc:	4805      	ldr	r0, [pc, #20]	; (800f8f4 <CDC_Receive_FS+0x24>)
 800f8de:	f7fe fdad 	bl	800e43c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f8e2:	4804      	ldr	r0, [pc, #16]	; (800f8f4 <CDC_Receive_FS+0x24>)
 800f8e4:	f7fe fdee 	bl	800e4c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f8e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3708      	adds	r7, #8
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}
 800f8f2:	bf00      	nop
 800f8f4:	200012d4 	.word	0x200012d4

0800f8f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	460b      	mov	r3, r1
 800f902:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f904:	2300      	movs	r3, #0
 800f906:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f908:	4b0d      	ldr	r3, [pc, #52]	; (800f940 <CDC_Transmit_FS+0x48>)
 800f90a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f90e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f916:	2b00      	cmp	r3, #0
 800f918:	d001      	beq.n	800f91e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f91a:	2301      	movs	r3, #1
 800f91c:	e00b      	b.n	800f936 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f91e:	887b      	ldrh	r3, [r7, #2]
 800f920:	461a      	mov	r2, r3
 800f922:	6879      	ldr	r1, [r7, #4]
 800f924:	4806      	ldr	r0, [pc, #24]	; (800f940 <CDC_Transmit_FS+0x48>)
 800f926:	f7fe fd70 	bl	800e40a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f92a:	4805      	ldr	r0, [pc, #20]	; (800f940 <CDC_Transmit_FS+0x48>)
 800f92c:	f7fe fd9a 	bl	800e464 <USBD_CDC_TransmitPacket>
 800f930:	4603      	mov	r3, r0
 800f932:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f934:	7bfb      	ldrb	r3, [r7, #15]
}
 800f936:	4618      	mov	r0, r3
 800f938:	3710      	adds	r7, #16
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	bf00      	nop
 800f940:	200012d4 	.word	0x200012d4

0800f944 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f944:	b480      	push	{r7}
 800f946:	b087      	sub	sp, #28
 800f948:	af00      	add	r7, sp, #0
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	60b9      	str	r1, [r7, #8]
 800f94e:	4613      	mov	r3, r2
 800f950:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f952:	2300      	movs	r3, #0
 800f954:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f956:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	371c      	adds	r7, #28
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr
	...

0800f968 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f968:	b480      	push	{r7}
 800f96a:	b083      	sub	sp, #12
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	4603      	mov	r3, r0
 800f970:	6039      	str	r1, [r7, #0]
 800f972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	2212      	movs	r2, #18
 800f978:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f97a:	4b03      	ldr	r3, [pc, #12]	; (800f988 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	370c      	adds	r7, #12
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr
 800f988:	20000150 	.word	0x20000150

0800f98c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b083      	sub	sp, #12
 800f990:	af00      	add	r7, sp, #0
 800f992:	4603      	mov	r3, r0
 800f994:	6039      	str	r1, [r7, #0]
 800f996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	2204      	movs	r2, #4
 800f99c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f99e:	4b03      	ldr	r3, [pc, #12]	; (800f9ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	370c      	adds	r7, #12
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9aa:	4770      	bx	lr
 800f9ac:	20000170 	.word	0x20000170

0800f9b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	6039      	str	r1, [r7, #0]
 800f9ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f9bc:	79fb      	ldrb	r3, [r7, #7]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d105      	bne.n	800f9ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f9c2:	683a      	ldr	r2, [r7, #0]
 800f9c4:	4907      	ldr	r1, [pc, #28]	; (800f9e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f9c6:	4808      	ldr	r0, [pc, #32]	; (800f9e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f9c8:	f7ff fdf7 	bl	800f5ba <USBD_GetString>
 800f9cc:	e004      	b.n	800f9d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f9ce:	683a      	ldr	r2, [r7, #0]
 800f9d0:	4904      	ldr	r1, [pc, #16]	; (800f9e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f9d2:	4805      	ldr	r0, [pc, #20]	; (800f9e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f9d4:	f7ff fdf1 	bl	800f5ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800f9d8:	4b02      	ldr	r3, [pc, #8]	; (800f9e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3708      	adds	r7, #8
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	200025a4 	.word	0x200025a4
 800f9e8:	08015b5c 	.word	0x08015b5c

0800f9ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	6039      	str	r1, [r7, #0]
 800f9f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f9f8:	683a      	ldr	r2, [r7, #0]
 800f9fa:	4904      	ldr	r1, [pc, #16]	; (800fa0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f9fc:	4804      	ldr	r0, [pc, #16]	; (800fa10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f9fe:	f7ff fddc 	bl	800f5ba <USBD_GetString>
  return USBD_StrDesc;
 800fa02:	4b02      	ldr	r3, [pc, #8]	; (800fa0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3708      	adds	r7, #8
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	200025a4 	.word	0x200025a4
 800fa10:	08015b74 	.word	0x08015b74

0800fa14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	6039      	str	r1, [r7, #0]
 800fa1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	221a      	movs	r2, #26
 800fa24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fa26:	f000 f855 	bl	800fad4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fa2a:	4b02      	ldr	r3, [pc, #8]	; (800fa34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3708      	adds	r7, #8
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}
 800fa34:	20000174 	.word	0x20000174

0800fa38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b082      	sub	sp, #8
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	4603      	mov	r3, r0
 800fa40:	6039      	str	r1, [r7, #0]
 800fa42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fa44:	79fb      	ldrb	r3, [r7, #7]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d105      	bne.n	800fa56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fa4a:	683a      	ldr	r2, [r7, #0]
 800fa4c:	4907      	ldr	r1, [pc, #28]	; (800fa6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800fa4e:	4808      	ldr	r0, [pc, #32]	; (800fa70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fa50:	f7ff fdb3 	bl	800f5ba <USBD_GetString>
 800fa54:	e004      	b.n	800fa60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fa56:	683a      	ldr	r2, [r7, #0]
 800fa58:	4904      	ldr	r1, [pc, #16]	; (800fa6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800fa5a:	4805      	ldr	r0, [pc, #20]	; (800fa70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fa5c:	f7ff fdad 	bl	800f5ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa60:	4b02      	ldr	r3, [pc, #8]	; (800fa6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3708      	adds	r7, #8
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	200025a4 	.word	0x200025a4
 800fa70:	08015b88 	.word	0x08015b88

0800fa74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	6039      	str	r1, [r7, #0]
 800fa7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fa80:	79fb      	ldrb	r3, [r7, #7]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d105      	bne.n	800fa92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fa86:	683a      	ldr	r2, [r7, #0]
 800fa88:	4907      	ldr	r1, [pc, #28]	; (800faa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fa8a:	4808      	ldr	r0, [pc, #32]	; (800faac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fa8c:	f7ff fd95 	bl	800f5ba <USBD_GetString>
 800fa90:	e004      	b.n	800fa9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fa92:	683a      	ldr	r2, [r7, #0]
 800fa94:	4904      	ldr	r1, [pc, #16]	; (800faa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fa96:	4805      	ldr	r0, [pc, #20]	; (800faac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fa98:	f7ff fd8f 	bl	800f5ba <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa9c:	4b02      	ldr	r3, [pc, #8]	; (800faa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop
 800faa8:	200025a4 	.word	0x200025a4
 800faac:	08015b94 	.word	0x08015b94

0800fab0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fab0:	b480      	push	{r7}
 800fab2:	b083      	sub	sp, #12
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	4603      	mov	r3, r0
 800fab8:	6039      	str	r1, [r7, #0]
 800faba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	220c      	movs	r2, #12
 800fac0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800fac2:	4b03      	ldr	r3, [pc, #12]	; (800fad0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	370c      	adds	r7, #12
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr
 800fad0:	20000164 	.word	0x20000164

0800fad4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b084      	sub	sp, #16
 800fad8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fada:	4b0f      	ldr	r3, [pc, #60]	; (800fb18 <Get_SerialNum+0x44>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fae0:	4b0e      	ldr	r3, [pc, #56]	; (800fb1c <Get_SerialNum+0x48>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fae6:	4b0e      	ldr	r3, [pc, #56]	; (800fb20 <Get_SerialNum+0x4c>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800faec:	68fa      	ldr	r2, [r7, #12]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4413      	add	r3, r2
 800faf2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d009      	beq.n	800fb0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fafa:	2208      	movs	r2, #8
 800fafc:	4909      	ldr	r1, [pc, #36]	; (800fb24 <Get_SerialNum+0x50>)
 800fafe:	68f8      	ldr	r0, [r7, #12]
 800fb00:	f000 f814 	bl	800fb2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fb04:	2204      	movs	r2, #4
 800fb06:	4908      	ldr	r1, [pc, #32]	; (800fb28 <Get_SerialNum+0x54>)
 800fb08:	68b8      	ldr	r0, [r7, #8]
 800fb0a:	f000 f80f 	bl	800fb2c <IntToUnicode>
  }
}
 800fb0e:	bf00      	nop
 800fb10:	3710      	adds	r7, #16
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}
 800fb16:	bf00      	nop
 800fb18:	1fff7590 	.word	0x1fff7590
 800fb1c:	1fff7594 	.word	0x1fff7594
 800fb20:	1fff7598 	.word	0x1fff7598
 800fb24:	20000176 	.word	0x20000176
 800fb28:	20000186 	.word	0x20000186

0800fb2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b087      	sub	sp, #28
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	4613      	mov	r3, r2
 800fb38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fb3e:	2300      	movs	r3, #0
 800fb40:	75fb      	strb	r3, [r7, #23]
 800fb42:	e027      	b.n	800fb94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	0f1b      	lsrs	r3, r3, #28
 800fb48:	2b09      	cmp	r3, #9
 800fb4a:	d80b      	bhi.n	800fb64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	0f1b      	lsrs	r3, r3, #28
 800fb50:	b2da      	uxtb	r2, r3
 800fb52:	7dfb      	ldrb	r3, [r7, #23]
 800fb54:	005b      	lsls	r3, r3, #1
 800fb56:	4619      	mov	r1, r3
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	440b      	add	r3, r1
 800fb5c:	3230      	adds	r2, #48	; 0x30
 800fb5e:	b2d2      	uxtb	r2, r2
 800fb60:	701a      	strb	r2, [r3, #0]
 800fb62:	e00a      	b.n	800fb7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	0f1b      	lsrs	r3, r3, #28
 800fb68:	b2da      	uxtb	r2, r3
 800fb6a:	7dfb      	ldrb	r3, [r7, #23]
 800fb6c:	005b      	lsls	r3, r3, #1
 800fb6e:	4619      	mov	r1, r3
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	440b      	add	r3, r1
 800fb74:	3237      	adds	r2, #55	; 0x37
 800fb76:	b2d2      	uxtb	r2, r2
 800fb78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	011b      	lsls	r3, r3, #4
 800fb7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fb80:	7dfb      	ldrb	r3, [r7, #23]
 800fb82:	005b      	lsls	r3, r3, #1
 800fb84:	3301      	adds	r3, #1
 800fb86:	68ba      	ldr	r2, [r7, #8]
 800fb88:	4413      	add	r3, r2
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fb8e:	7dfb      	ldrb	r3, [r7, #23]
 800fb90:	3301      	adds	r3, #1
 800fb92:	75fb      	strb	r3, [r7, #23]
 800fb94:	7dfa      	ldrb	r2, [r7, #23]
 800fb96:	79fb      	ldrb	r3, [r7, #7]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d3d3      	bcc.n	800fb44 <IntToUnicode+0x18>
  }
}
 800fb9c:	bf00      	nop
 800fb9e:	371c      	adds	r7, #28
 800fba0:	46bd      	mov	sp, r7
 800fba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba6:	4770      	bx	lr

0800fba8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b08a      	sub	sp, #40	; 0x28
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fbb0:	f107 0314 	add.w	r3, r7, #20
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	601a      	str	r2, [r3, #0]
 800fbb8:	605a      	str	r2, [r3, #4]
 800fbba:	609a      	str	r2, [r3, #8]
 800fbbc:	60da      	str	r2, [r3, #12]
 800fbbe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fbc8:	d14e      	bne.n	800fc68 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fbca:	4b29      	ldr	r3, [pc, #164]	; (800fc70 <HAL_PCD_MspInit+0xc8>)
 800fbcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fbce:	4a28      	ldr	r2, [pc, #160]	; (800fc70 <HAL_PCD_MspInit+0xc8>)
 800fbd0:	f043 0301 	orr.w	r3, r3, #1
 800fbd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fbd6:	4b26      	ldr	r3, [pc, #152]	; (800fc70 <HAL_PCD_MspInit+0xc8>)
 800fbd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fbda:	f003 0301 	and.w	r3, r3, #1
 800fbde:	613b      	str	r3, [r7, #16]
 800fbe0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 800fbe2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fbe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fbe8:	2302      	movs	r3, #2
 800fbea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fbec:	2300      	movs	r3, #0
 800fbee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fbf0:	2303      	movs	r3, #3
 800fbf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fbf4:	230a      	movs	r3, #10
 800fbf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fbf8:	f107 0314 	add.w	r3, r7, #20
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fc02:	f7f5 fbb9 	bl	8005378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fc06:	4b1a      	ldr	r3, [pc, #104]	; (800fc70 <HAL_PCD_MspInit+0xc8>)
 800fc08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc0a:	4a19      	ldr	r2, [pc, #100]	; (800fc70 <HAL_PCD_MspInit+0xc8>)
 800fc0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fc10:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fc12:	4b17      	ldr	r3, [pc, #92]	; (800fc70 <HAL_PCD_MspInit+0xc8>)
 800fc14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fc1a:	60fb      	str	r3, [r7, #12]
 800fc1c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fc1e:	4b14      	ldr	r3, [pc, #80]	; (800fc70 <HAL_PCD_MspInit+0xc8>)
 800fc20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d114      	bne.n	800fc54 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fc2a:	4b11      	ldr	r3, [pc, #68]	; (800fc70 <HAL_PCD_MspInit+0xc8>)
 800fc2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc2e:	4a10      	ldr	r2, [pc, #64]	; (800fc70 <HAL_PCD_MspInit+0xc8>)
 800fc30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc34:	6593      	str	r3, [r2, #88]	; 0x58
 800fc36:	4b0e      	ldr	r3, [pc, #56]	; (800fc70 <HAL_PCD_MspInit+0xc8>)
 800fc38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc3e:	60bb      	str	r3, [r7, #8]
 800fc40:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800fc42:	f7f7 fb07 	bl	8007254 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800fc46:	4b0a      	ldr	r3, [pc, #40]	; (800fc70 <HAL_PCD_MspInit+0xc8>)
 800fc48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc4a:	4a09      	ldr	r2, [pc, #36]	; (800fc70 <HAL_PCD_MspInit+0xc8>)
 800fc4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fc50:	6593      	str	r3, [r2, #88]	; 0x58
 800fc52:	e001      	b.n	800fc58 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800fc54:	f7f7 fafe 	bl	8007254 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fc58:	2200      	movs	r2, #0
 800fc5a:	2100      	movs	r1, #0
 800fc5c:	2043      	movs	r0, #67	; 0x43
 800fc5e:	f7f4 fb7e 	bl	800435e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fc62:	2043      	movs	r0, #67	; 0x43
 800fc64:	f7f4 fb97 	bl	8004396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fc68:	bf00      	nop
 800fc6a:	3728      	adds	r7, #40	; 0x28
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}
 800fc70:	40021000 	.word	0x40021000

0800fc74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fc88:	4619      	mov	r1, r3
 800fc8a:	4610      	mov	r0, r2
 800fc8c:	f7fe fce6 	bl	800e65c <USBD_LL_SetupStage>
}
 800fc90:	bf00      	nop
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	460b      	mov	r3, r1
 800fca2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fcaa:	78fa      	ldrb	r2, [r7, #3]
 800fcac:	6879      	ldr	r1, [r7, #4]
 800fcae:	4613      	mov	r3, r2
 800fcb0:	00db      	lsls	r3, r3, #3
 800fcb2:	1a9b      	subs	r3, r3, r2
 800fcb4:	009b      	lsls	r3, r3, #2
 800fcb6:	440b      	add	r3, r1
 800fcb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fcbc:	681a      	ldr	r2, [r3, #0]
 800fcbe:	78fb      	ldrb	r3, [r7, #3]
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	f7fe fd1e 	bl	800e702 <USBD_LL_DataOutStage>
}
 800fcc6:	bf00      	nop
 800fcc8:	3708      	adds	r7, #8
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}

0800fcce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcce:	b580      	push	{r7, lr}
 800fcd0:	b082      	sub	sp, #8
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	6078      	str	r0, [r7, #4]
 800fcd6:	460b      	mov	r3, r1
 800fcd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fce0:	78fa      	ldrb	r2, [r7, #3]
 800fce2:	6879      	ldr	r1, [r7, #4]
 800fce4:	4613      	mov	r3, r2
 800fce6:	00db      	lsls	r3, r3, #3
 800fce8:	1a9b      	subs	r3, r3, r2
 800fcea:	009b      	lsls	r3, r3, #2
 800fcec:	440b      	add	r3, r1
 800fcee:	3348      	adds	r3, #72	; 0x48
 800fcf0:	681a      	ldr	r2, [r3, #0]
 800fcf2:	78fb      	ldrb	r3, [r7, #3]
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	f7fe fd67 	bl	800e7c8 <USBD_LL_DataInStage>
}
 800fcfa:	bf00      	nop
 800fcfc:	3708      	adds	r7, #8
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}

0800fd02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd02:	b580      	push	{r7, lr}
 800fd04:	b082      	sub	sp, #8
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fd10:	4618      	mov	r0, r3
 800fd12:	f7fe fe6b 	bl	800e9ec <USBD_LL_SOF>
}
 800fd16:	bf00      	nop
 800fd18:	3708      	adds	r7, #8
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}

0800fd1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd1e:	b580      	push	{r7, lr}
 800fd20:	b084      	sub	sp, #16
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fd26:	2301      	movs	r3, #1
 800fd28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	68db      	ldr	r3, [r3, #12]
 800fd2e:	2b02      	cmp	r3, #2
 800fd30:	d001      	beq.n	800fd36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800fd32:	f7f2 fbdf 	bl	80024f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fd3c:	7bfa      	ldrb	r2, [r7, #15]
 800fd3e:	4611      	mov	r1, r2
 800fd40:	4618      	mov	r0, r3
 800fd42:	f7fe fe18 	bl	800e976 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7fe fdd1 	bl	800e8f4 <USBD_LL_Reset>
}
 800fd52:	bf00      	nop
 800fd54:	3710      	adds	r7, #16
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
	...

0800fd5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b082      	sub	sp, #8
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	687a      	ldr	r2, [r7, #4]
 800fd70:	6812      	ldr	r2, [r2, #0]
 800fd72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fd76:	f043 0301 	orr.w	r3, r3, #1
 800fd7a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7fe fe07 	bl	800e996 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6a1b      	ldr	r3, [r3, #32]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d005      	beq.n	800fd9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fd90:	4b04      	ldr	r3, [pc, #16]	; (800fda4 <HAL_PCD_SuspendCallback+0x48>)
 800fd92:	691b      	ldr	r3, [r3, #16]
 800fd94:	4a03      	ldr	r2, [pc, #12]	; (800fda4 <HAL_PCD_SuspendCallback+0x48>)
 800fd96:	f043 0306 	orr.w	r3, r3, #6
 800fd9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fd9c:	bf00      	nop
 800fd9e:	3708      	adds	r7, #8
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	e000ed00 	.word	0xe000ed00

0800fda8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b082      	sub	sp, #8
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	6812      	ldr	r2, [r2, #0]
 800fdbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fdc2:	f023 0301 	bic.w	r3, r3, #1
 800fdc6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6a1b      	ldr	r3, [r3, #32]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d007      	beq.n	800fde0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fdd0:	4b08      	ldr	r3, [pc, #32]	; (800fdf4 <HAL_PCD_ResumeCallback+0x4c>)
 800fdd2:	691b      	ldr	r3, [r3, #16]
 800fdd4:	4a07      	ldr	r2, [pc, #28]	; (800fdf4 <HAL_PCD_ResumeCallback+0x4c>)
 800fdd6:	f023 0306 	bic.w	r3, r3, #6
 800fdda:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800fddc:	f000 fadc 	bl	8010398 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fe fdea 	bl	800e9c0 <USBD_LL_Resume>
}
 800fdec:	bf00      	nop
 800fdee:	3708      	adds	r7, #8
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	e000ed00 	.word	0xe000ed00

0800fdf8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b082      	sub	sp, #8
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
 800fe00:	460b      	mov	r3, r1
 800fe02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe0a:	78fa      	ldrb	r2, [r7, #3]
 800fe0c:	4611      	mov	r1, r2
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fe fe13 	bl	800ea3a <USBD_LL_IsoOUTIncomplete>
}
 800fe14:	bf00      	nop
 800fe16:	3708      	adds	r7, #8
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	460b      	mov	r3, r1
 800fe26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe2e:	78fa      	ldrb	r2, [r7, #3]
 800fe30:	4611      	mov	r1, r2
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7fe fdf4 	bl	800ea20 <USBD_LL_IsoINIncomplete>
}
 800fe38:	bf00      	nop
 800fe3a:	3708      	adds	r7, #8
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}

0800fe40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7fe fe00 	bl	800ea54 <USBD_LL_DevConnected>
}
 800fe54:	bf00      	nop
 800fe56:	3708      	adds	r7, #8
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fe fdfd 	bl	800ea6a <USBD_LL_DevDisconnected>
}
 800fe70:	bf00      	nop
 800fe72:	3708      	adds	r7, #8
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d139      	bne.n	800fefc <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fe88:	4a1f      	ldr	r2, [pc, #124]	; (800ff08 <USBD_LL_Init+0x90>)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	4a1d      	ldr	r2, [pc, #116]	; (800ff08 <USBD_LL_Init+0x90>)
 800fe94:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fe98:	4b1b      	ldr	r3, [pc, #108]	; (800ff08 <USBD_LL_Init+0x90>)
 800fe9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fe9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800fea0:	4b19      	ldr	r3, [pc, #100]	; (800ff08 <USBD_LL_Init+0x90>)
 800fea2:	2206      	movs	r2, #6
 800fea4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fea6:	4b18      	ldr	r3, [pc, #96]	; (800ff08 <USBD_LL_Init+0x90>)
 800fea8:	2202      	movs	r2, #2
 800feaa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800feac:	4b16      	ldr	r3, [pc, #88]	; (800ff08 <USBD_LL_Init+0x90>)
 800feae:	2200      	movs	r2, #0
 800feb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800feb2:	4b15      	ldr	r3, [pc, #84]	; (800ff08 <USBD_LL_Init+0x90>)
 800feb4:	2200      	movs	r2, #0
 800feb6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800feb8:	4b13      	ldr	r3, [pc, #76]	; (800ff08 <USBD_LL_Init+0x90>)
 800feba:	2200      	movs	r2, #0
 800febc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800febe:	4b12      	ldr	r3, [pc, #72]	; (800ff08 <USBD_LL_Init+0x90>)
 800fec0:	2200      	movs	r2, #0
 800fec2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fec4:	4b10      	ldr	r3, [pc, #64]	; (800ff08 <USBD_LL_Init+0x90>)
 800fec6:	2200      	movs	r2, #0
 800fec8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800feca:	4b0f      	ldr	r3, [pc, #60]	; (800ff08 <USBD_LL_Init+0x90>)
 800fecc:	2200      	movs	r2, #0
 800fece:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fed0:	480d      	ldr	r0, [pc, #52]	; (800ff08 <USBD_LL_Init+0x90>)
 800fed2:	f7f6 f84c 	bl	8005f6e <HAL_PCD_Init>
 800fed6:	4603      	mov	r3, r0
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d001      	beq.n	800fee0 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800fedc:	f7f2 fb0a 	bl	80024f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fee0:	2180      	movs	r1, #128	; 0x80
 800fee2:	4809      	ldr	r0, [pc, #36]	; (800ff08 <USBD_LL_Init+0x90>)
 800fee4:	f7f7 f8ad 	bl	8007042 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fee8:	2240      	movs	r2, #64	; 0x40
 800feea:	2100      	movs	r1, #0
 800feec:	4806      	ldr	r0, [pc, #24]	; (800ff08 <USBD_LL_Init+0x90>)
 800feee:	f7f7 f861 	bl	8006fb4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fef2:	2280      	movs	r2, #128	; 0x80
 800fef4:	2101      	movs	r1, #1
 800fef6:	4804      	ldr	r0, [pc, #16]	; (800ff08 <USBD_LL_Init+0x90>)
 800fef8:	f7f7 f85c 	bl	8006fb4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fefc:	2300      	movs	r3, #0
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3708      	adds	r7, #8
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}
 800ff06:	bf00      	nop
 800ff08:	200027a4 	.word	0x200027a4

0800ff0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b084      	sub	sp, #16
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff14:	2300      	movs	r3, #0
 800ff16:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7f6 f947 	bl	80061b6 <HAL_PCD_Start>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ff2c:	7bbb      	ldrb	r3, [r7, #14]
 800ff2e:	2b03      	cmp	r3, #3
 800ff30:	d816      	bhi.n	800ff60 <USBD_LL_Start+0x54>
 800ff32:	a201      	add	r2, pc, #4	; (adr r2, 800ff38 <USBD_LL_Start+0x2c>)
 800ff34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff38:	0800ff49 	.word	0x0800ff49
 800ff3c:	0800ff4f 	.word	0x0800ff4f
 800ff40:	0800ff55 	.word	0x0800ff55
 800ff44:	0800ff5b 	.word	0x0800ff5b
    case HAL_OK :
      usb_status = USBD_OK;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ff4c:	e00b      	b.n	800ff66 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ff4e:	2303      	movs	r3, #3
 800ff50:	73fb      	strb	r3, [r7, #15]
    break;
 800ff52:	e008      	b.n	800ff66 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ff54:	2301      	movs	r3, #1
 800ff56:	73fb      	strb	r3, [r7, #15]
    break;
 800ff58:	e005      	b.n	800ff66 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ff5a:	2303      	movs	r3, #3
 800ff5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ff5e:	e002      	b.n	800ff66 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ff60:	2303      	movs	r3, #3
 800ff62:	73fb      	strb	r3, [r7, #15]
    break;
 800ff64:	bf00      	nop
  }
  return usb_status;
 800ff66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3710      	adds	r7, #16
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b084      	sub	sp, #16
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	4608      	mov	r0, r1
 800ff7a:	4611      	mov	r1, r2
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	4603      	mov	r3, r0
 800ff80:	70fb      	strb	r3, [r7, #3]
 800ff82:	460b      	mov	r3, r1
 800ff84:	70bb      	strb	r3, [r7, #2]
 800ff86:	4613      	mov	r3, r2
 800ff88:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ff98:	78bb      	ldrb	r3, [r7, #2]
 800ff9a:	883a      	ldrh	r2, [r7, #0]
 800ff9c:	78f9      	ldrb	r1, [r7, #3]
 800ff9e:	f7f6 fd02 	bl	80069a6 <HAL_PCD_EP_Open>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ffa6:	7bbb      	ldrb	r3, [r7, #14]
 800ffa8:	2b03      	cmp	r3, #3
 800ffaa:	d817      	bhi.n	800ffdc <USBD_LL_OpenEP+0x6c>
 800ffac:	a201      	add	r2, pc, #4	; (adr r2, 800ffb4 <USBD_LL_OpenEP+0x44>)
 800ffae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffb2:	bf00      	nop
 800ffb4:	0800ffc5 	.word	0x0800ffc5
 800ffb8:	0800ffcb 	.word	0x0800ffcb
 800ffbc:	0800ffd1 	.word	0x0800ffd1
 800ffc0:	0800ffd7 	.word	0x0800ffd7
    case HAL_OK :
      usb_status = USBD_OK;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	73fb      	strb	r3, [r7, #15]
    break;
 800ffc8:	e00b      	b.n	800ffe2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ffca:	2303      	movs	r3, #3
 800ffcc:	73fb      	strb	r3, [r7, #15]
    break;
 800ffce:	e008      	b.n	800ffe2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	73fb      	strb	r3, [r7, #15]
    break;
 800ffd4:	e005      	b.n	800ffe2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ffd6:	2303      	movs	r3, #3
 800ffd8:	73fb      	strb	r3, [r7, #15]
    break;
 800ffda:	e002      	b.n	800ffe2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800ffdc:	2303      	movs	r3, #3
 800ffde:	73fb      	strb	r3, [r7, #15]
    break;
 800ffe0:	bf00      	nop
  }
  return usb_status;
 800ffe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3710      	adds	r7, #16
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}

0800ffec <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b084      	sub	sp, #16
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	460b      	mov	r3, r1
 800fff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fff8:	2300      	movs	r3, #0
 800fffa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fffc:	2300      	movs	r3, #0
 800fffe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010006:	78fa      	ldrb	r2, [r7, #3]
 8010008:	4611      	mov	r1, r2
 801000a:	4618      	mov	r0, r3
 801000c:	f7f6 fd33 	bl	8006a76 <HAL_PCD_EP_Close>
 8010010:	4603      	mov	r3, r0
 8010012:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010014:	7bbb      	ldrb	r3, [r7, #14]
 8010016:	2b03      	cmp	r3, #3
 8010018:	d816      	bhi.n	8010048 <USBD_LL_CloseEP+0x5c>
 801001a:	a201      	add	r2, pc, #4	; (adr r2, 8010020 <USBD_LL_CloseEP+0x34>)
 801001c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010020:	08010031 	.word	0x08010031
 8010024:	08010037 	.word	0x08010037
 8010028:	0801003d 	.word	0x0801003d
 801002c:	08010043 	.word	0x08010043
    case HAL_OK :
      usb_status = USBD_OK;
 8010030:	2300      	movs	r3, #0
 8010032:	73fb      	strb	r3, [r7, #15]
    break;
 8010034:	e00b      	b.n	801004e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010036:	2303      	movs	r3, #3
 8010038:	73fb      	strb	r3, [r7, #15]
    break;
 801003a:	e008      	b.n	801004e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801003c:	2301      	movs	r3, #1
 801003e:	73fb      	strb	r3, [r7, #15]
    break;
 8010040:	e005      	b.n	801004e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010042:	2303      	movs	r3, #3
 8010044:	73fb      	strb	r3, [r7, #15]
    break;
 8010046:	e002      	b.n	801004e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010048:	2303      	movs	r3, #3
 801004a:	73fb      	strb	r3, [r7, #15]
    break;
 801004c:	bf00      	nop
  }
  return usb_status;
 801004e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010050:	4618      	mov	r0, r3
 8010052:	3710      	adds	r7, #16
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}

08010058 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b084      	sub	sp, #16
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	460b      	mov	r3, r1
 8010062:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010064:	2300      	movs	r3, #0
 8010066:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010068:	2300      	movs	r3, #0
 801006a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010072:	78fa      	ldrb	r2, [r7, #3]
 8010074:	4611      	mov	r1, r2
 8010076:	4618      	mov	r0, r3
 8010078:	f7f6 fdda 	bl	8006c30 <HAL_PCD_EP_SetStall>
 801007c:	4603      	mov	r3, r0
 801007e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010080:	7bbb      	ldrb	r3, [r7, #14]
 8010082:	2b03      	cmp	r3, #3
 8010084:	d816      	bhi.n	80100b4 <USBD_LL_StallEP+0x5c>
 8010086:	a201      	add	r2, pc, #4	; (adr r2, 801008c <USBD_LL_StallEP+0x34>)
 8010088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801008c:	0801009d 	.word	0x0801009d
 8010090:	080100a3 	.word	0x080100a3
 8010094:	080100a9 	.word	0x080100a9
 8010098:	080100af 	.word	0x080100af
    case HAL_OK :
      usb_status = USBD_OK;
 801009c:	2300      	movs	r3, #0
 801009e:	73fb      	strb	r3, [r7, #15]
    break;
 80100a0:	e00b      	b.n	80100ba <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80100a2:	2303      	movs	r3, #3
 80100a4:	73fb      	strb	r3, [r7, #15]
    break;
 80100a6:	e008      	b.n	80100ba <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80100a8:	2301      	movs	r3, #1
 80100aa:	73fb      	strb	r3, [r7, #15]
    break;
 80100ac:	e005      	b.n	80100ba <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80100ae:	2303      	movs	r3, #3
 80100b0:	73fb      	strb	r3, [r7, #15]
    break;
 80100b2:	e002      	b.n	80100ba <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80100b4:	2303      	movs	r3, #3
 80100b6:	73fb      	strb	r3, [r7, #15]
    break;
 80100b8:	bf00      	nop
  }
  return usb_status;
 80100ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3710      	adds	r7, #16
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b084      	sub	sp, #16
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	460b      	mov	r3, r1
 80100ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100d0:	2300      	movs	r3, #0
 80100d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100d4:	2300      	movs	r3, #0
 80100d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80100de:	78fa      	ldrb	r2, [r7, #3]
 80100e0:	4611      	mov	r1, r2
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7f6 fe06 	bl	8006cf4 <HAL_PCD_EP_ClrStall>
 80100e8:	4603      	mov	r3, r0
 80100ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80100ec:	7bbb      	ldrb	r3, [r7, #14]
 80100ee:	2b03      	cmp	r3, #3
 80100f0:	d816      	bhi.n	8010120 <USBD_LL_ClearStallEP+0x5c>
 80100f2:	a201      	add	r2, pc, #4	; (adr r2, 80100f8 <USBD_LL_ClearStallEP+0x34>)
 80100f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f8:	08010109 	.word	0x08010109
 80100fc:	0801010f 	.word	0x0801010f
 8010100:	08010115 	.word	0x08010115
 8010104:	0801011b 	.word	0x0801011b
    case HAL_OK :
      usb_status = USBD_OK;
 8010108:	2300      	movs	r3, #0
 801010a:	73fb      	strb	r3, [r7, #15]
    break;
 801010c:	e00b      	b.n	8010126 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801010e:	2303      	movs	r3, #3
 8010110:	73fb      	strb	r3, [r7, #15]
    break;
 8010112:	e008      	b.n	8010126 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010114:	2301      	movs	r3, #1
 8010116:	73fb      	strb	r3, [r7, #15]
    break;
 8010118:	e005      	b.n	8010126 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801011a:	2303      	movs	r3, #3
 801011c:	73fb      	strb	r3, [r7, #15]
    break;
 801011e:	e002      	b.n	8010126 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010120:	2303      	movs	r3, #3
 8010122:	73fb      	strb	r3, [r7, #15]
    break;
 8010124:	bf00      	nop
  }
  return usb_status;
 8010126:	7bfb      	ldrb	r3, [r7, #15]
}
 8010128:	4618      	mov	r0, r3
 801012a:	3710      	adds	r7, #16
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}

08010130 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010130:	b480      	push	{r7}
 8010132:	b085      	sub	sp, #20
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	460b      	mov	r3, r1
 801013a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010142:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010148:	2b00      	cmp	r3, #0
 801014a:	da0b      	bge.n	8010164 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801014c:	78fb      	ldrb	r3, [r7, #3]
 801014e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010152:	68f9      	ldr	r1, [r7, #12]
 8010154:	4613      	mov	r3, r2
 8010156:	00db      	lsls	r3, r3, #3
 8010158:	1a9b      	subs	r3, r3, r2
 801015a:	009b      	lsls	r3, r3, #2
 801015c:	440b      	add	r3, r1
 801015e:	333e      	adds	r3, #62	; 0x3e
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	e00b      	b.n	801017c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010164:	78fb      	ldrb	r3, [r7, #3]
 8010166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801016a:	68f9      	ldr	r1, [r7, #12]
 801016c:	4613      	mov	r3, r2
 801016e:	00db      	lsls	r3, r3, #3
 8010170:	1a9b      	subs	r3, r3, r2
 8010172:	009b      	lsls	r3, r3, #2
 8010174:	440b      	add	r3, r1
 8010176:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801017a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801017c:	4618      	mov	r0, r3
 801017e:	3714      	adds	r7, #20
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	460b      	mov	r3, r1
 8010192:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010194:	2300      	movs	r3, #0
 8010196:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010198:	2300      	movs	r3, #0
 801019a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80101a2:	78fa      	ldrb	r2, [r7, #3]
 80101a4:	4611      	mov	r1, r2
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7f6 fbd8 	bl	800695c <HAL_PCD_SetAddress>
 80101ac:	4603      	mov	r3, r0
 80101ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80101b0:	7bbb      	ldrb	r3, [r7, #14]
 80101b2:	2b03      	cmp	r3, #3
 80101b4:	d816      	bhi.n	80101e4 <USBD_LL_SetUSBAddress+0x5c>
 80101b6:	a201      	add	r2, pc, #4	; (adr r2, 80101bc <USBD_LL_SetUSBAddress+0x34>)
 80101b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101bc:	080101cd 	.word	0x080101cd
 80101c0:	080101d3 	.word	0x080101d3
 80101c4:	080101d9 	.word	0x080101d9
 80101c8:	080101df 	.word	0x080101df
    case HAL_OK :
      usb_status = USBD_OK;
 80101cc:	2300      	movs	r3, #0
 80101ce:	73fb      	strb	r3, [r7, #15]
    break;
 80101d0:	e00b      	b.n	80101ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80101d2:	2303      	movs	r3, #3
 80101d4:	73fb      	strb	r3, [r7, #15]
    break;
 80101d6:	e008      	b.n	80101ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80101d8:	2301      	movs	r3, #1
 80101da:	73fb      	strb	r3, [r7, #15]
    break;
 80101dc:	e005      	b.n	80101ea <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80101de:	2303      	movs	r3, #3
 80101e0:	73fb      	strb	r3, [r7, #15]
    break;
 80101e2:	e002      	b.n	80101ea <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80101e4:	2303      	movs	r3, #3
 80101e6:	73fb      	strb	r3, [r7, #15]
    break;
 80101e8:	bf00      	nop
  }
  return usb_status;
 80101ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3710      	adds	r7, #16
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b086      	sub	sp, #24
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	60f8      	str	r0, [r7, #12]
 80101fc:	607a      	str	r2, [r7, #4]
 80101fe:	603b      	str	r3, [r7, #0]
 8010200:	460b      	mov	r3, r1
 8010202:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010204:	2300      	movs	r3, #0
 8010206:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010208:	2300      	movs	r3, #0
 801020a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010212:	7af9      	ldrb	r1, [r7, #11]
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	687a      	ldr	r2, [r7, #4]
 8010218:	f7f6 fccd 	bl	8006bb6 <HAL_PCD_EP_Transmit>
 801021c:	4603      	mov	r3, r0
 801021e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010220:	7dbb      	ldrb	r3, [r7, #22]
 8010222:	2b03      	cmp	r3, #3
 8010224:	d816      	bhi.n	8010254 <USBD_LL_Transmit+0x60>
 8010226:	a201      	add	r2, pc, #4	; (adr r2, 801022c <USBD_LL_Transmit+0x38>)
 8010228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801022c:	0801023d 	.word	0x0801023d
 8010230:	08010243 	.word	0x08010243
 8010234:	08010249 	.word	0x08010249
 8010238:	0801024f 	.word	0x0801024f
    case HAL_OK :
      usb_status = USBD_OK;
 801023c:	2300      	movs	r3, #0
 801023e:	75fb      	strb	r3, [r7, #23]
    break;
 8010240:	e00b      	b.n	801025a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010242:	2303      	movs	r3, #3
 8010244:	75fb      	strb	r3, [r7, #23]
    break;
 8010246:	e008      	b.n	801025a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010248:	2301      	movs	r3, #1
 801024a:	75fb      	strb	r3, [r7, #23]
    break;
 801024c:	e005      	b.n	801025a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801024e:	2303      	movs	r3, #3
 8010250:	75fb      	strb	r3, [r7, #23]
    break;
 8010252:	e002      	b.n	801025a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8010254:	2303      	movs	r3, #3
 8010256:	75fb      	strb	r3, [r7, #23]
    break;
 8010258:	bf00      	nop
  }
  return usb_status;
 801025a:	7dfb      	ldrb	r3, [r7, #23]
}
 801025c:	4618      	mov	r0, r3
 801025e:	3718      	adds	r7, #24
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}

08010264 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b086      	sub	sp, #24
 8010268:	af00      	add	r7, sp, #0
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	607a      	str	r2, [r7, #4]
 801026e:	603b      	str	r3, [r7, #0]
 8010270:	460b      	mov	r3, r1
 8010272:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010274:	2300      	movs	r3, #0
 8010276:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010278:	2300      	movs	r3, #0
 801027a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010282:	7af9      	ldrb	r1, [r7, #11]
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	687a      	ldr	r2, [r7, #4]
 8010288:	f7f6 fc3f 	bl	8006b0a <HAL_PCD_EP_Receive>
 801028c:	4603      	mov	r3, r0
 801028e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010290:	7dbb      	ldrb	r3, [r7, #22]
 8010292:	2b03      	cmp	r3, #3
 8010294:	d816      	bhi.n	80102c4 <USBD_LL_PrepareReceive+0x60>
 8010296:	a201      	add	r2, pc, #4	; (adr r2, 801029c <USBD_LL_PrepareReceive+0x38>)
 8010298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801029c:	080102ad 	.word	0x080102ad
 80102a0:	080102b3 	.word	0x080102b3
 80102a4:	080102b9 	.word	0x080102b9
 80102a8:	080102bf 	.word	0x080102bf
    case HAL_OK :
      usb_status = USBD_OK;
 80102ac:	2300      	movs	r3, #0
 80102ae:	75fb      	strb	r3, [r7, #23]
    break;
 80102b0:	e00b      	b.n	80102ca <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80102b2:	2303      	movs	r3, #3
 80102b4:	75fb      	strb	r3, [r7, #23]
    break;
 80102b6:	e008      	b.n	80102ca <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80102b8:	2301      	movs	r3, #1
 80102ba:	75fb      	strb	r3, [r7, #23]
    break;
 80102bc:	e005      	b.n	80102ca <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80102be:	2303      	movs	r3, #3
 80102c0:	75fb      	strb	r3, [r7, #23]
    break;
 80102c2:	e002      	b.n	80102ca <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80102c4:	2303      	movs	r3, #3
 80102c6:	75fb      	strb	r3, [r7, #23]
    break;
 80102c8:	bf00      	nop
  }
  return usb_status;
 80102ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3718      	adds	r7, #24
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	460b      	mov	r3, r1
 80102de:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80102e6:	78fa      	ldrb	r2, [r7, #3]
 80102e8:	4611      	mov	r1, r2
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7f6 fc4b 	bl	8006b86 <HAL_PCD_EP_GetRxCount>
 80102f0:	4603      	mov	r3, r0
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3708      	adds	r7, #8
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}
	...

080102fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	460b      	mov	r3, r1
 8010306:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010308:	78fb      	ldrb	r3, [r7, #3]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d002      	beq.n	8010314 <HAL_PCDEx_LPM_Callback+0x18>
 801030e:	2b01      	cmp	r3, #1
 8010310:	d01f      	beq.n	8010352 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010312:	e03b      	b.n	801038c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6a1b      	ldr	r3, [r3, #32]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d007      	beq.n	801032c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801031c:	f000 f83c 	bl	8010398 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010320:	4b1c      	ldr	r3, [pc, #112]	; (8010394 <HAL_PCDEx_LPM_Callback+0x98>)
 8010322:	691b      	ldr	r3, [r3, #16]
 8010324:	4a1b      	ldr	r2, [pc, #108]	; (8010394 <HAL_PCDEx_LPM_Callback+0x98>)
 8010326:	f023 0306 	bic.w	r3, r3, #6
 801032a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	687a      	ldr	r2, [r7, #4]
 8010338:	6812      	ldr	r2, [r2, #0]
 801033a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801033e:	f023 0301 	bic.w	r3, r3, #1
 8010342:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801034a:	4618      	mov	r0, r3
 801034c:	f7fe fb38 	bl	800e9c0 <USBD_LL_Resume>
    break;
 8010350:	e01c      	b.n	801038c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	687a      	ldr	r2, [r7, #4]
 801035e:	6812      	ldr	r2, [r2, #0]
 8010360:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010364:	f043 0301 	orr.w	r3, r3, #1
 8010368:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010370:	4618      	mov	r0, r3
 8010372:	f7fe fb10 	bl	800e996 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6a1b      	ldr	r3, [r3, #32]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d005      	beq.n	801038a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801037e:	4b05      	ldr	r3, [pc, #20]	; (8010394 <HAL_PCDEx_LPM_Callback+0x98>)
 8010380:	691b      	ldr	r3, [r3, #16]
 8010382:	4a04      	ldr	r2, [pc, #16]	; (8010394 <HAL_PCDEx_LPM_Callback+0x98>)
 8010384:	f043 0306 	orr.w	r3, r3, #6
 8010388:	6113      	str	r3, [r2, #16]
    break;
 801038a:	bf00      	nop
}
 801038c:	bf00      	nop
 801038e:	3708      	adds	r7, #8
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}
 8010394:	e000ed00 	.word	0xe000ed00

08010398 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801039c:	f7f0 ffb2 	bl	8001304 <SystemClock_Config>
}
 80103a0:	bf00      	nop
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_SINE_MODEL_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 0 */
  if (fct)
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d009      	beq.n	80103c8 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 80103b4:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80103b6:	461a      	mov	r2, r3
        err.type, err.code);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80103be:	6839      	ldr	r1, [r7, #0]
 80103c0:	4806      	ldr	r0, [pc, #24]	; (80103dc <ai_log_err+0x38>)
 80103c2:	f003 fb21 	bl	8013a08 <iprintf>
 80103c6:	e008      	b.n	80103da <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80103c8:	793b      	ldrb	r3, [r7, #4]
 80103ca:	4619      	mov	r1, r3
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80103d2:	461a      	mov	r2, r3
 80103d4:	4802      	ldr	r0, [pc, #8]	; (80103e0 <ai_log_err+0x3c>)
 80103d6:	f003 fb17 	bl	8013a08 <iprintf>

  do {} while (1);
 80103da:	e7fe      	b.n	80103da <ai_log_err+0x36>
 80103dc:	08015ba4 	.word	0x08015ba4
 80103e0:	08015bd8 	.word	0x08015bd8

080103e4 <ai_boostrap>:
  /* USER CODE END 0 */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b090      	sub	sp, #64	; 0x40
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 80103ee:	2100      	movs	r1, #0
 80103f0:	4837      	ldr	r0, [pc, #220]	; (80104d0 <ai_boostrap+0xec>)
 80103f2:	f000 f9b7 	bl	8010764 <ai_sine_model_create>
 80103f6:	4603      	mov	r3, r0
 80103f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 80103fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d006      	beq.n	8010410 <ai_boostrap+0x2c>
    ai_log_err(err, "ai_sine_model_create");
 8010402:	4934      	ldr	r1, [pc, #208]	; (80104d4 <ai_boostrap+0xf0>)
 8010404:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010406:	f7ff ffcd 	bl	80103a4 <ai_log_err>
    return -1;
 801040a:	f04f 33ff 	mov.w	r3, #4294967295
 801040e:	e05b      	b.n	80104c8 <ai_boostrap+0xe4>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = {
 8010410:	4b31      	ldr	r3, [pc, #196]	; (80104d8 <ai_boostrap+0xf4>)
 8010412:	60fb      	str	r3, [r7, #12]
 8010414:	2301      	movs	r3, #1
 8010416:	823b      	strh	r3, [r7, #16]
 8010418:	2301      	movs	r3, #1
 801041a:	827b      	strh	r3, [r7, #18]
 801041c:	2301      	movs	r3, #1
 801041e:	82bb      	strh	r3, [r7, #20]
 8010420:	f240 5304 	movw	r3, #1284	; 0x504
 8010424:	61bb      	str	r3, [r7, #24]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	61fb      	str	r3, [r7, #28]
 801042a:	2300      	movs	r3, #0
 801042c:	623b      	str	r3, [r7, #32]
 801042e:	4b2b      	ldr	r3, [pc, #172]	; (80104dc <ai_boostrap+0xf8>)
 8010430:	627b      	str	r3, [r7, #36]	; 0x24
 8010432:	2301      	movs	r3, #1
 8010434:	853b      	strh	r3, [r7, #40]	; 0x28
 8010436:	2301      	movs	r3, #1
 8010438:	857b      	strh	r3, [r7, #42]	; 0x2a
 801043a:	2301      	movs	r3, #1
 801043c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801043e:	2380      	movs	r3, #128	; 0x80
 8010440:	633b      	str	r3, [r7, #48]	; 0x30
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	637b      	str	r3, [r7, #52]	; 0x34
 8010446:	2300      	movs	r3, #0
 8010448:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_SINE_MODEL_DATA_WEIGHTS(w_addr),
      AI_SINE_MODEL_DATA_ACTIVATIONS(act_addr) };

  if (!ai_sine_model_init(sine_model, &params)) {
 801044a:	4b21      	ldr	r3, [pc, #132]	; (80104d0 <ai_boostrap+0xec>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	f107 020c 	add.w	r2, r7, #12
 8010452:	4611      	mov	r1, r2
 8010454:	4618      	mov	r0, r3
 8010456:	f000 f9a7 	bl	80107a8 <ai_sine_model_init>
 801045a:	4603      	mov	r3, r0
 801045c:	f083 0301 	eor.w	r3, r3, #1
 8010460:	b2db      	uxtb	r3, r3
 8010462:	2b00      	cmp	r3, #0
 8010464:	d00d      	beq.n	8010482 <ai_boostrap+0x9e>
      err = ai_sine_model_get_error(sine_model);
 8010466:	4b1a      	ldr	r3, [pc, #104]	; (80104d0 <ai_boostrap+0xec>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	4618      	mov	r0, r3
 801046c:	f000 f96e 	bl	801074c <ai_sine_model_get_error>
 8010470:	4603      	mov	r3, r0
 8010472:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_sine_model_init");
 8010474:	491a      	ldr	r1, [pc, #104]	; (80104e0 <ai_boostrap+0xfc>)
 8010476:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010478:	f7ff ff94 	bl	80103a4 <ai_log_err>
      return -1;
 801047c:	f04f 33ff 	mov.w	r3, #4294967295
 8010480:	e022      	b.n	80104c8 <ai_boostrap+0xe4>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_sine_model_get_info(sine_model, &sine_model_info)) {
 8010482:	4b13      	ldr	r3, [pc, #76]	; (80104d0 <ai_boostrap+0xec>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	4917      	ldr	r1, [pc, #92]	; (80104e4 <ai_boostrap+0x100>)
 8010488:	4618      	mov	r0, r3
 801048a:	f000 f8f9 	bl	8010680 <ai_sine_model_get_info>
 801048e:	4603      	mov	r3, r0
 8010490:	f083 0301 	eor.w	r3, r3, #1
 8010494:	b2db      	uxtb	r3, r3
 8010496:	2b00      	cmp	r3, #0
 8010498:	d015      	beq.n	80104c6 <ai_boostrap+0xe2>
    err = ai_sine_model_get_error(sine_model);
 801049a:	4b0d      	ldr	r3, [pc, #52]	; (80104d0 <ai_boostrap+0xec>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4618      	mov	r0, r3
 80104a0:	f000 f954 	bl	801074c <ai_sine_model_get_error>
 80104a4:	4603      	mov	r3, r0
 80104a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_sine_model_get_error");
 80104a8:	490f      	ldr	r1, [pc, #60]	; (80104e8 <ai_boostrap+0x104>)
 80104aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80104ac:	f7ff ff7a 	bl	80103a4 <ai_log_err>
    ai_sine_model_destroy(sine_model);
 80104b0:	4b07      	ldr	r3, [pc, #28]	; (80104d0 <ai_boostrap+0xec>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4618      	mov	r0, r3
 80104b6:	f000 f96b 	bl	8010790 <ai_sine_model_destroy>
    sine_model = AI_HANDLE_NULL;
 80104ba:	4b05      	ldr	r3, [pc, #20]	; (80104d0 <ai_boostrap+0xec>)
 80104bc:	2200      	movs	r2, #0
 80104be:	601a      	str	r2, [r3, #0]
    return -3;
 80104c0:	f06f 0302 	mvn.w	r3, #2
 80104c4:	e000      	b.n	80104c8 <ai_boostrap+0xe4>
  }

  return 0;
 80104c6:	2300      	movs	r3, #0
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3740      	adds	r7, #64	; 0x40
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	2000098c 	.word	0x2000098c
 80104d4:	08015c08 	.word	0x08015c08
 80104d8:	40040440 	.word	0x40040440
 80104dc:	00040440 	.word	0x00040440
 80104e0:	08015c20 	.word	0x08015c20
 80104e4:	20000990 	.word	0x20000990
 80104e8:	08015c34 	.word	0x08015c34

080104ec <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
  printf("\r\nTEMPLATE - initialization\r\n");
 80104f0:	4805      	ldr	r0, [pc, #20]	; (8010508 <MX_X_CUBE_AI_Init+0x1c>)
 80104f2:	f003 fafd 	bl	8013af0 <puts>

  ai_boostrap(ai_sine_model_data_weights_get(), activations);
 80104f6:	f000 f9a7 	bl	8010848 <ai_sine_model_data_weights_get>
 80104fa:	4603      	mov	r3, r0
 80104fc:	4903      	ldr	r1, [pc, #12]	; (801050c <MX_X_CUBE_AI_Init+0x20>)
 80104fe:	4618      	mov	r0, r3
 8010500:	f7ff ff70 	bl	80103e4 <ai_boostrap>
    /* USER CODE END 3 */
}
 8010504:	bf00      	nop
 8010506:	bd80      	pop	{r7, pc}
 8010508:	08015c60 	.word	0x08015c60
 801050c:	20000a04 	.word	0x20000a04

08010510 <sine_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8010510:	b480      	push	{r7}
 8010512:	b085      	sub	sp, #20
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_SINE_MODEL_ACTIVATIONS_ALIGNMENT));
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	691b      	ldr	r3, [r3, #16]
 801051e:	3303      	adds	r3, #3
 8010520:	f023 0303 	bic.w	r3, r3, #3
 8010524:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    dense_input_output_array.data = AI_PTR(NULL);
 8010526:	4b16      	ldr	r3, [pc, #88]	; (8010580 <sine_model_configure_activations+0x70>)
 8010528:	2200      	movs	r2, #0
 801052a:	609a      	str	r2, [r3, #8]
    dense_input_output_array.data_start = AI_PTR(NULL);
 801052c:	4b14      	ldr	r3, [pc, #80]	; (8010580 <sine_model_configure_activations+0x70>)
 801052e:	2200      	movs	r2, #0
 8010530:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 8010532:	4a14      	ldr	r2, [pc, #80]	; (8010584 <sine_model_configure_activations+0x74>)
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 8010538:	4a12      	ldr	r2, [pc, #72]	; (8010584 <sine_model_configure_activations+0x74>)
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 801053e:	4a12      	ldr	r2, [pc, #72]	; (8010588 <sine_model_configure_activations+0x78>)
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 8010544:	4a10      	ldr	r2, [pc, #64]	; (8010588 <sine_model_configure_activations+0x78>)
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 64);
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	3340      	adds	r3, #64	; 0x40
 801054e:	4a0f      	ldr	r2, [pc, #60]	; (801058c <sine_model_configure_activations+0x7c>)
 8010550:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 64);
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	3340      	adds	r3, #64	; 0x40
 8010556:	4a0d      	ldr	r2, [pc, #52]	; (801058c <sine_model_configure_activations+0x7c>)
 8010558:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 801055a:	4a0d      	ldr	r2, [pc, #52]	; (8010590 <sine_model_configure_activations+0x80>)
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 8010560:	4a0b      	ldr	r2, [pc, #44]	; (8010590 <sine_model_configure_activations+0x80>)
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(NULL);
 8010566:	4b0b      	ldr	r3, [pc, #44]	; (8010594 <sine_model_configure_activations+0x84>)
 8010568:	2200      	movs	r2, #0
 801056a:	609a      	str	r2, [r3, #8]
    dense_2_output_array.data_start = AI_PTR(NULL);
 801056c:	4b09      	ldr	r3, [pc, #36]	; (8010594 <sine_model_configure_activations+0x84>)
 801056e:	2200      	movs	r2, #0
 8010570:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8010572:	2301      	movs	r3, #1
}
 8010574:	4618      	mov	r0, r3
 8010576:	3714      	adds	r7, #20
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr
 8010580:	20000250 	.word	0x20000250
 8010584:	20000260 	.word	0x20000260
 8010588:	20000270 	.word	0x20000270
 801058c:	20000280 	.word	0x20000280
 8010590:	20000290 	.word	0x20000290
 8010594:	200002a0 	.word	0x200002a0

08010598 <sine_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8010598:	b480      	push	{r7}
 801059a:	b085      	sub	sp, #20
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	691b      	ldr	r3, [r3, #16]
 80105a6:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80105a8:	4b2f      	ldr	r3, [pc, #188]	; (8010668 <sine_model_configure_weights+0xd0>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105b0:	4a2d      	ldr	r2, [pc, #180]	; (8010668 <sine_model_configure_weights+0xd0>)
 80105b2:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 1280);
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80105ba:	4a2b      	ldr	r2, [pc, #172]	; (8010668 <sine_model_configure_weights+0xd0>)
 80105bc:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 1280);
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80105c4:	4a28      	ldr	r2, [pc, #160]	; (8010668 <sine_model_configure_weights+0xd0>)
 80105c6:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80105c8:	4b28      	ldr	r3, [pc, #160]	; (801066c <sine_model_configure_weights+0xd4>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105d0:	4a26      	ldr	r2, [pc, #152]	; (801066c <sine_model_configure_weights+0xd4>)
 80105d2:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 1216);
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80105da:	4a24      	ldr	r2, [pc, #144]	; (801066c <sine_model_configure_weights+0xd4>)
 80105dc:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 1216);
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80105e4:	4a21      	ldr	r2, [pc, #132]	; (801066c <sine_model_configure_weights+0xd4>)
 80105e6:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80105e8:	4b21      	ldr	r3, [pc, #132]	; (8010670 <sine_model_configure_weights+0xd8>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80105f0:	4a1f      	ldr	r2, [pc, #124]	; (8010670 <sine_model_configure_weights+0xd8>)
 80105f2:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1152);
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80105fa:	4a1d      	ldr	r2, [pc, #116]	; (8010670 <sine_model_configure_weights+0xd8>)
 80105fc:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 1152);
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8010604:	4a1a      	ldr	r2, [pc, #104]	; (8010670 <sine_model_configure_weights+0xd8>)
 8010606:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8010608:	4b1a      	ldr	r3, [pc, #104]	; (8010674 <sine_model_configure_weights+0xdc>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010610:	4a18      	ldr	r2, [pc, #96]	; (8010674 <sine_model_configure_weights+0xdc>)
 8010612:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 128);
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	3380      	adds	r3, #128	; 0x80
 8010618:	4a16      	ldr	r2, [pc, #88]	; (8010674 <sine_model_configure_weights+0xdc>)
 801061a:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 128);
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	3380      	adds	r3, #128	; 0x80
 8010620:	4a14      	ldr	r2, [pc, #80]	; (8010674 <sine_model_configure_weights+0xdc>)
 8010622:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8010624:	4b14      	ldr	r3, [pc, #80]	; (8010678 <sine_model_configure_weights+0xe0>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801062c:	4a12      	ldr	r2, [pc, #72]	; (8010678 <sine_model_configure_weights+0xe0>)
 801062e:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 64);
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	3340      	adds	r3, #64	; 0x40
 8010634:	4a10      	ldr	r2, [pc, #64]	; (8010678 <sine_model_configure_weights+0xe0>)
 8010636:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 64);
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	3340      	adds	r3, #64	; 0x40
 801063c:	4a0e      	ldr	r2, [pc, #56]	; (8010678 <sine_model_configure_weights+0xe0>)
 801063e:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8010640:	4b0e      	ldr	r3, [pc, #56]	; (801067c <sine_model_configure_weights+0xe4>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010648:	4a0c      	ldr	r2, [pc, #48]	; (801067c <sine_model_configure_weights+0xe4>)
 801064a:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 801064c:	4a0b      	ldr	r2, [pc, #44]	; (801067c <sine_model_configure_weights+0xe4>)
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 8010652:	4a0a      	ldr	r2, [pc, #40]	; (801067c <sine_model_configure_weights+0xe4>)
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8010658:	2301      	movs	r3, #1
}
 801065a:	4618      	mov	r0, r3
 801065c:	3714      	adds	r7, #20
 801065e:	46bd      	mov	sp, r7
 8010660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010664:	4770      	bx	lr
 8010666:	bf00      	nop
 8010668:	200001f0 	.word	0x200001f0
 801066c:	20000200 	.word	0x20000200
 8010670:	20000210 	.word	0x20000210
 8010674:	20000220 	.word	0x20000220
 8010678:	20000230 	.word	0x20000230
 801067c:	20000240 	.word	0x20000240

08010680 <ai_sine_model_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_sine_model_get_info(
  ai_handle network, ai_network_report* report)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b0a0      	sub	sp, #128	; 0x80
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f000 fa12 	bl	8010ab4 <ai_platform_context_acquire>
 8010690:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d04a      	beq.n	801072e <ai_sine_model_get_info+0xae>
 8010698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801069a:	2b00      	cmp	r3, #0
 801069c:	d047      	beq.n	801072e <ai_sine_model_get_info+0xae>
  {
    ai_network_report r = {
 801069e:	f107 0308 	add.w	r3, r7, #8
 80106a2:	2274      	movs	r2, #116	; 0x74
 80106a4:	2100      	movs	r1, #0
 80106a6:	4618      	mov	r0, r3
 80106a8:	f002 fca1 	bl	8012fee <memset>
 80106ac:	4b22      	ldr	r3, [pc, #136]	; (8010738 <ai_sine_model_get_info+0xb8>)
 80106ae:	60bb      	str	r3, [r7, #8]
 80106b0:	4b22      	ldr	r3, [pc, #136]	; (801073c <ai_sine_model_get_info+0xbc>)
 80106b2:	60fb      	str	r3, [r7, #12]
 80106b4:	4b22      	ldr	r3, [pc, #136]	; (8010740 <ai_sine_model_get_info+0xc0>)
 80106b6:	613b      	str	r3, [r7, #16]
 80106b8:	4b22      	ldr	r3, [pc, #136]	; (8010744 <ai_sine_model_get_info+0xc4>)
 80106ba:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_SINE_MODEL_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80106bc:	f000 f93c 	bl	8010938 <ai_platform_runtime_get_revision>
 80106c0:	4603      	mov	r3, r0
    ai_network_report r = {
 80106c2:	61bb      	str	r3, [r7, #24]
 80106c4:	f000 f95a 	bl	801097c <ai_platform_runtime_get_version>
 80106c8:	4603      	mov	r3, r0
 80106ca:	61fb      	str	r3, [r7, #28]
 80106cc:	4b1e      	ldr	r3, [pc, #120]	; (8010748 <ai_sine_model_get_info+0xc8>)
 80106ce:	623b      	str	r3, [r7, #32]
 80106d0:	2305      	movs	r3, #5
 80106d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80106d6:	2302      	movs	r3, #2
 80106d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80106dc:	2301      	movs	r3, #1
 80106de:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80106e2:	2303      	movs	r3, #3
 80106e4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80106e8:	f000 f97c 	bl	80109e4 <ai_platform_api_get_version>
 80106ec:	4603      	mov	r3, r0
 80106ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106f0:	f000 f9ac 	bl	8010a4c <ai_platform_interface_api_get_version>
 80106f4:	4603      	mov	r3, r0
 80106f6:	633b      	str	r3, [r7, #48]	; 0x30
 80106f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80106fc:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 80106fe:	f107 0308 	add.w	r3, r7, #8
 8010702:	4619      	mov	r1, r3
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f000 fa31 	bl	8010b6c <ai_platform_api_get_network_report>
 801070a:	4603      	mov	r3, r0
 801070c:	f083 0301 	eor.w	r3, r3, #1
 8010710:	b2db      	uxtb	r3, r3
 8010712:	2b00      	cmp	r3, #0
 8010714:	d001      	beq.n	801071a <ai_sine_model_get_info+0x9a>
 8010716:	2300      	movs	r3, #0
 8010718:	e00a      	b.n	8010730 <ai_sine_model_get_info+0xb0>

    *report = r;
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	4618      	mov	r0, r3
 801071e:	f107 0308 	add.w	r3, r7, #8
 8010722:	2274      	movs	r2, #116	; 0x74
 8010724:	4619      	mov	r1, r3
 8010726:	f002 fc57 	bl	8012fd8 <memcpy>
    return true;
 801072a:	2301      	movs	r3, #1
 801072c:	e000      	b.n	8010730 <ai_sine_model_get_info+0xb0>
  }

  return false;
 801072e:	2300      	movs	r3, #0
}
 8010730:	4618      	mov	r0, r3
 8010732:	3780      	adds	r7, #128	; 0x80
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	08015d1c 	.word	0x08015d1c
 801073c:	08015d28 	.word	0x08015d28
 8010740:	08015d4c 	.word	0x08015d4c
 8010744:	08015d68 	.word	0x08015d68
 8010748:	08015d80 	.word	0x08015d80

0801074c <ai_sine_model_get_error>:

AI_API_ENTRY
ai_error ai_sine_model_get_error(ai_handle network)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f000 f9d7 	bl	8010b08 <ai_platform_network_get_error>
 801075a:	4603      	mov	r3, r0
}
 801075c:	4618      	mov	r0, r3
 801075e:	3708      	adds	r7, #8
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}

08010764 <ai_sine_model_create>:

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b084      	sub	sp, #16
 8010768:	af02      	add	r7, sp, #8
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 801076e:	2300      	movs	r3, #0
 8010770:	9301      	str	r3, [sp, #4]
 8010772:	2303      	movs	r3, #3
 8010774:	9300      	str	r3, [sp, #0]
 8010776:	2301      	movs	r3, #1
 8010778:	4a04      	ldr	r2, [pc, #16]	; (801078c <ai_sine_model_create+0x28>)
 801077a:	6839      	ldr	r1, [r7, #0]
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f000 fadf 	bl	8010d40 <ai_platform_network_create>
 8010782:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8010784:	4618      	mov	r0, r3
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	20000190 	.word	0x20000190

08010790 <ai_sine_model_destroy>:

AI_API_ENTRY
ai_handle ai_sine_model_destroy(ai_handle network)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	f000 fb29 	bl	8010df0 <ai_platform_network_destroy>
 801079e:	4603      	mov	r3, r0
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3708      	adds	r7, #8
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <ai_sine_model_init>:

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80107b2:	6839      	ldr	r1, [r7, #0]
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f000 fb4b 	bl	8010e50 <ai_platform_network_init>
 80107ba:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d101      	bne.n	80107c6 <ai_sine_model_init+0x1e>
 80107c2:	2300      	movs	r3, #0
 80107c4:	e02b      	b.n	801081e <ai_sine_model_init+0x76>

  ai_bool ok = true;
 80107c6:	2301      	movs	r3, #1
 80107c8:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, &params->params);
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	4619      	mov	r1, r3
 80107ce:	68f8      	ldr	r0, [r7, #12]
 80107d0:	f7ff fee2 	bl	8010598 <sine_model_configure_weights>
 80107d4:	4603      	mov	r3, r0
 80107d6:	461a      	mov	r2, r3
 80107d8:	7afb      	ldrb	r3, [r7, #11]
 80107da:	4013      	ands	r3, r2
 80107dc:	2b00      	cmp	r3, #0
 80107de:	bf14      	ite	ne
 80107e0:	2301      	movne	r3, #1
 80107e2:	2300      	moveq	r3, #0
 80107e4:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, &params->activations);
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	3318      	adds	r3, #24
 80107ea:	4619      	mov	r1, r3
 80107ec:	68f8      	ldr	r0, [r7, #12]
 80107ee:	f7ff fe8f 	bl	8010510 <sine_model_configure_activations>
 80107f2:	4603      	mov	r3, r0
 80107f4:	461a      	mov	r2, r3
 80107f6:	7afb      	ldrb	r3, [r7, #11]
 80107f8:	4013      	ands	r3, r2
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	bf14      	ite	ne
 80107fe:	2301      	movne	r3, #1
 8010800:	2300      	moveq	r3, #0
 8010802:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f000 fba1 	bl	8010f4c <ai_platform_network_post_init>
 801080a:	4603      	mov	r3, r0
 801080c:	461a      	mov	r2, r3
 801080e:	7afb      	ldrb	r3, [r7, #11]
 8010810:	4013      	ands	r3, r2
 8010812:	2b00      	cmp	r3, #0
 8010814:	bf14      	ite	ne
 8010816:	2301      	movne	r3, #1
 8010818:	2300      	moveq	r3, #0
 801081a:	72fb      	strb	r3, [r7, #11]

  return ok;
 801081c:	7afb      	ldrb	r3, [r7, #11]
}
 801081e:	4618      	mov	r0, r3
 8010820:	3710      	adds	r7, #16
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}

08010826 <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8010826:	b580      	push	{r7, lr}
 8010828:	b084      	sub	sp, #16
 801082a:	af00      	add	r7, sp, #0
 801082c:	60f8      	str	r0, [r7, #12]
 801082e:	60b9      	str	r1, [r7, #8]
 8010830:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8010832:	687a      	ldr	r2, [r7, #4]
 8010834:	68b9      	ldr	r1, [r7, #8]
 8010836:	68f8      	ldr	r0, [r7, #12]
 8010838:	f000 fbd0 	bl	8010fdc <ai_platform_network_process>
 801083c:	4603      	mov	r3, r0
}
 801083e:	4618      	mov	r0, r3
 8010840:	3710      	adds	r7, #16
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}
	...

08010848 <ai_sine_model_data_weights_get>:
#include "sine_model_data.h"

ai_handle ai_sine_model_data_weights_get(void)
{
 8010848:	b480      	push	{r7}
 801084a:	af00      	add	r7, sp, #0
    0x8c, 0xd9, 0xbe, 0xc5, 0xd8, 0x13, 0x3f, 0x60, 0x4f,
    0x01, 0x3f, 0x14, 0x55, 0x83, 0xbf, 0x7c, 0x6f, 0xd7,
    0x3f, 0x80, 0xad, 0xab, 0xbc, 0x77, 0xf6, 0x84, 0xbe
  };

  return AI_HANDLE_PTR(s_sine_model_weights);
 801084c:	4b02      	ldr	r3, [pc, #8]	; (8010858 <ai_sine_model_data_weights_get+0x10>)

}
 801084e:	4618      	mov	r0, r3
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr
 8010858:	08015e18 	.word	0x08015e18

0801085c <_ai_platform_get_io_buffers_info>:
 801085c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010860:	2400      	movs	r4, #0
 8010862:	b083      	sub	sp, #12
 8010864:	4606      	mov	r6, r0
 8010866:	4688      	mov	r8, r1
 8010868:	46a3      	mov	fp, r4
 801086a:	f04f 0a18 	mov.w	sl, #24
 801086e:	f04f 0901 	mov.w	r9, #1
 8010872:	b2a0      	uxth	r0, r4
 8010874:	b936      	cbnz	r6, 8010884 <_ai_platform_get_io_buffers_info+0x28>
 8010876:	2800      	cmp	r0, #0
 8010878:	d03b      	beq.n	80108f2 <_ai_platform_get_io_buffers_info+0x96>
 801087a:	68b3      	ldr	r3, [r6, #8]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	f8c8 3000 	str.w	r3, [r8]
 8010882:	e036      	b.n	80108f2 <_ai_platform_get_io_buffers_info+0x96>
 8010884:	8833      	ldrh	r3, [r6, #0]
 8010886:	429c      	cmp	r4, r3
 8010888:	d2f5      	bcs.n	8010876 <_ai_platform_get_io_buffers_info+0x1a>
 801088a:	6873      	ldr	r3, [r6, #4]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d0f2      	beq.n	8010876 <_ai_platform_get_io_buffers_info+0x1a>
 8010890:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8010894:	2d00      	cmp	r5, #0
 8010896:	d0ee      	beq.n	8010876 <_ai_platform_get_io_buffers_info+0x1a>
 8010898:	68b3      	ldr	r3, [r6, #8]
 801089a:	69aa      	ldr	r2, [r5, #24]
 801089c:	6859      	ldr	r1, [r3, #4]
 801089e:	6810      	ldr	r0, [r2, #0]
 80108a0:	689f      	ldr	r7, [r3, #8]
 80108a2:	9101      	str	r1, [sp, #4]
 80108a4:	f001 fadc 	bl	8011e60 <ai_array_to_buffer_fmt>
 80108a8:	9901      	ldr	r1, [sp, #4]
 80108aa:	fb0a f304 	mul.w	r3, sl, r4
 80108ae:	18ca      	adds	r2, r1, r3
 80108b0:	50c8      	str	r0, [r1, r3]
 80108b2:	f8a2 9004 	strh.w	r9, [r2, #4]
 80108b6:	68eb      	ldr	r3, [r5, #12]
 80108b8:	68db      	ldr	r3, [r3, #12]
 80108ba:	80d3      	strh	r3, [r2, #6]
 80108bc:	68eb      	ldr	r3, [r5, #12]
 80108be:	689b      	ldr	r3, [r3, #8]
 80108c0:	8113      	strh	r3, [r2, #8]
 80108c2:	68eb      	ldr	r3, [r5, #12]
 80108c4:	685b      	ldr	r3, [r3, #4]
 80108c6:	60d3      	str	r3, [r2, #12]
 80108c8:	69ab      	ldr	r3, [r5, #24]
 80108ca:	00e1      	lsls	r1, r4, #3
 80108cc:	689b      	ldr	r3, [r3, #8]
 80108ce:	6113      	str	r3, [r2, #16]
 80108d0:	1878      	adds	r0, r7, r1
 80108d2:	b150      	cbz	r0, 80108ea <_ai_platform_get_io_buffers_info+0x8e>
 80108d4:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 80108d8:	682b      	ldr	r3, [r5, #0]
 80108da:	6043      	str	r3, [r0, #4]
 80108dc:	b11b      	cbz	r3, 80108e6 <_ai_platform_get_io_buffers_info+0x8a>
 80108de:	885b      	ldrh	r3, [r3, #2]
 80108e0:	3300      	adds	r3, #0
 80108e2:	bf18      	it	ne
 80108e4:	2301      	movne	r3, #1
 80108e6:	507b      	str	r3, [r7, r1]
 80108e8:	b903      	cbnz	r3, 80108ec <_ai_platform_get_io_buffers_info+0x90>
 80108ea:	2000      	movs	r0, #0
 80108ec:	6150      	str	r0, [r2, #20]
 80108ee:	3401      	adds	r4, #1
 80108f0:	e7bf      	b.n	8010872 <_ai_platform_get_io_buffers_info+0x16>
 80108f2:	b003      	add	sp, #12
 80108f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080108f8 <_platform_network_state_setup.isra.1>:
 80108f8:	b430      	push	{r4, r5}
 80108fa:	68dd      	ldr	r5, [r3, #12]
 80108fc:	695c      	ldr	r4, [r3, #20]
 80108fe:	68ed      	ldr	r5, [r5, #12]
 8010900:	68e4      	ldr	r4, [r4, #12]
 8010902:	fb04 f405 	mul.w	r4, r4, r5
 8010906:	6084      	str	r4, [r0, #8]
 8010908:	8809      	ldrh	r1, [r1, #0]
 801090a:	fb04 f401 	mul.w	r4, r4, r1
 801090e:	60c4      	str	r4, [r0, #12]
 8010910:	6811      	ldr	r1, [r2, #0]
 8010912:	6041      	str	r1, [r0, #4]
 8010914:	6812      	ldr	r2, [r2, #0]
 8010916:	4414      	add	r4, r2
 8010918:	6004      	str	r4, [r0, #0]
 801091a:	699a      	ldr	r2, [r3, #24]
 801091c:	6814      	ldr	r4, [r2, #0]
 801091e:	00a4      	lsls	r4, r4, #2
 8010920:	d407      	bmi.n	8010932 <_platform_network_state_setup.isra.1+0x3a>
 8010922:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8010926:	1b64      	subs	r4, r4, r5
 8010928:	4421      	add	r1, r4
 801092a:	6091      	str	r1, [r2, #8]
 801092c:	699b      	ldr	r3, [r3, #24]
 801092e:	6842      	ldr	r2, [r0, #4]
 8010930:	60da      	str	r2, [r3, #12]
 8010932:	bc30      	pop	{r4, r5}
 8010934:	4770      	bx	lr
	...

08010938 <ai_platform_runtime_get_revision>:
 8010938:	490a      	ldr	r1, [pc, #40]	; (8010964 <ai_platform_runtime_get_revision+0x2c>)
 801093a:	4a0b      	ldr	r2, [pc, #44]	; (8010968 <ai_platform_runtime_get_revision+0x30>)
 801093c:	680b      	ldr	r3, [r1, #0]
 801093e:	2001      	movs	r0, #1
 8010940:	f023 0301 	bic.w	r3, r3, #1
 8010944:	600b      	str	r3, [r1, #0]
 8010946:	4613      	mov	r3, r2
 8010948:	6010      	str	r0, [r2, #0]
 801094a:	681a      	ldr	r2, [r3, #0]
 801094c:	2a00      	cmp	r2, #0
 801094e:	d1fc      	bne.n	801094a <ai_platform_runtime_get_revision+0x12>
 8010950:	4b06      	ldr	r3, [pc, #24]	; (801096c <ai_platform_runtime_get_revision+0x34>)
 8010952:	4a07      	ldr	r2, [pc, #28]	; (8010970 <ai_platform_runtime_get_revision+0x38>)
 8010954:	601a      	str	r2, [r3, #0]
 8010956:	681a      	ldr	r2, [r3, #0]
 8010958:	4b06      	ldr	r3, [pc, #24]	; (8010974 <ai_platform_runtime_get_revision+0x3c>)
 801095a:	429a      	cmp	r2, r3
 801095c:	d000      	beq.n	8010960 <ai_platform_runtime_get_revision+0x28>
 801095e:	e7fe      	b.n	801095e <ai_platform_runtime_get_revision+0x26>
 8010960:	4805      	ldr	r0, [pc, #20]	; (8010978 <ai_platform_runtime_get_revision+0x40>)
 8010962:	4770      	bx	lr
 8010964:	e0002000 	.word	0xe0002000
 8010968:	40023008 	.word	0x40023008
 801096c:	40023000 	.word	0x40023000
 8010970:	f407a5c2 	.word	0xf407a5c2
 8010974:	b5e8b5cd 	.word	0xb5e8b5cd
 8010978:	0801631c 	.word	0x0801631c

0801097c <ai_platform_runtime_get_version>:
 801097c:	4913      	ldr	r1, [pc, #76]	; (80109cc <ai_platform_runtime_get_version+0x50>)
 801097e:	4a14      	ldr	r2, [pc, #80]	; (80109d0 <ai_platform_runtime_get_version+0x54>)
 8010980:	680b      	ldr	r3, [r1, #0]
 8010982:	2001      	movs	r0, #1
 8010984:	f023 0301 	bic.w	r3, r3, #1
 8010988:	600b      	str	r3, [r1, #0]
 801098a:	b082      	sub	sp, #8
 801098c:	4613      	mov	r3, r2
 801098e:	6010      	str	r0, [r2, #0]
 8010990:	6818      	ldr	r0, [r3, #0]
 8010992:	2800      	cmp	r0, #0
 8010994:	d1fc      	bne.n	8010990 <ai_platform_runtime_get_version+0x14>
 8010996:	4b0f      	ldr	r3, [pc, #60]	; (80109d4 <ai_platform_runtime_get_version+0x58>)
 8010998:	4a0f      	ldr	r2, [pc, #60]	; (80109d8 <ai_platform_runtime_get_version+0x5c>)
 801099a:	601a      	str	r2, [r3, #0]
 801099c:	681a      	ldr	r2, [r3, #0]
 801099e:	4b0f      	ldr	r3, [pc, #60]	; (80109dc <ai_platform_runtime_get_version+0x60>)
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d000      	beq.n	80109a6 <ai_platform_runtime_get_version+0x2a>
 80109a4:	e7fe      	b.n	80109a4 <ai_platform_runtime_get_version+0x28>
 80109a6:	4b0e      	ldr	r3, [pc, #56]	; (80109e0 <ai_platform_runtime_get_version+0x64>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	b2da      	uxtb	r2, r3
 80109ac:	f362 0007 	bfi	r0, r2, #0, #8
 80109b0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80109b4:	f362 200f 	bfi	r0, r2, #8, #8
 80109b8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80109bc:	f362 4017 	bfi	r0, r2, #16, #8
 80109c0:	0e1b      	lsrs	r3, r3, #24
 80109c2:	f363 601f 	bfi	r0, r3, #24, #8
 80109c6:	b002      	add	sp, #8
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop
 80109cc:	e0002000 	.word	0xe0002000
 80109d0:	40023008 	.word	0x40023008
 80109d4:	40023000 	.word	0x40023000
 80109d8:	f407a5c2 	.word	0xf407a5c2
 80109dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80109e0:	08016320 	.word	0x08016320

080109e4 <ai_platform_api_get_version>:
 80109e4:	4913      	ldr	r1, [pc, #76]	; (8010a34 <ai_platform_api_get_version+0x50>)
 80109e6:	4a14      	ldr	r2, [pc, #80]	; (8010a38 <ai_platform_api_get_version+0x54>)
 80109e8:	680b      	ldr	r3, [r1, #0]
 80109ea:	2001      	movs	r0, #1
 80109ec:	f023 0301 	bic.w	r3, r3, #1
 80109f0:	600b      	str	r3, [r1, #0]
 80109f2:	b082      	sub	sp, #8
 80109f4:	4613      	mov	r3, r2
 80109f6:	6010      	str	r0, [r2, #0]
 80109f8:	6818      	ldr	r0, [r3, #0]
 80109fa:	2800      	cmp	r0, #0
 80109fc:	d1fc      	bne.n	80109f8 <ai_platform_api_get_version+0x14>
 80109fe:	4b0f      	ldr	r3, [pc, #60]	; (8010a3c <ai_platform_api_get_version+0x58>)
 8010a00:	4a0f      	ldr	r2, [pc, #60]	; (8010a40 <ai_platform_api_get_version+0x5c>)
 8010a02:	601a      	str	r2, [r3, #0]
 8010a04:	681a      	ldr	r2, [r3, #0]
 8010a06:	4b0f      	ldr	r3, [pc, #60]	; (8010a44 <ai_platform_api_get_version+0x60>)
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d000      	beq.n	8010a0e <ai_platform_api_get_version+0x2a>
 8010a0c:	e7fe      	b.n	8010a0c <ai_platform_api_get_version+0x28>
 8010a0e:	4b0e      	ldr	r3, [pc, #56]	; (8010a48 <ai_platform_api_get_version+0x64>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	b2da      	uxtb	r2, r3
 8010a14:	f362 0007 	bfi	r0, r2, #0, #8
 8010a18:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010a1c:	f362 200f 	bfi	r0, r2, #8, #8
 8010a20:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010a24:	f362 4017 	bfi	r0, r2, #16, #8
 8010a28:	0e1b      	lsrs	r3, r3, #24
 8010a2a:	f363 601f 	bfi	r0, r3, #24, #8
 8010a2e:	b002      	add	sp, #8
 8010a30:	4770      	bx	lr
 8010a32:	bf00      	nop
 8010a34:	e0002000 	.word	0xe0002000
 8010a38:	40023008 	.word	0x40023008
 8010a3c:	40023000 	.word	0x40023000
 8010a40:	f407a5c2 	.word	0xf407a5c2
 8010a44:	b5e8b5cd 	.word	0xb5e8b5cd
 8010a48:	08016324 	.word	0x08016324

08010a4c <ai_platform_interface_api_get_version>:
 8010a4c:	4913      	ldr	r1, [pc, #76]	; (8010a9c <ai_platform_interface_api_get_version+0x50>)
 8010a4e:	4a14      	ldr	r2, [pc, #80]	; (8010aa0 <ai_platform_interface_api_get_version+0x54>)
 8010a50:	680b      	ldr	r3, [r1, #0]
 8010a52:	2001      	movs	r0, #1
 8010a54:	f023 0301 	bic.w	r3, r3, #1
 8010a58:	600b      	str	r3, [r1, #0]
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	4613      	mov	r3, r2
 8010a5e:	6010      	str	r0, [r2, #0]
 8010a60:	6818      	ldr	r0, [r3, #0]
 8010a62:	2800      	cmp	r0, #0
 8010a64:	d1fc      	bne.n	8010a60 <ai_platform_interface_api_get_version+0x14>
 8010a66:	4b0f      	ldr	r3, [pc, #60]	; (8010aa4 <ai_platform_interface_api_get_version+0x58>)
 8010a68:	4a0f      	ldr	r2, [pc, #60]	; (8010aa8 <ai_platform_interface_api_get_version+0x5c>)
 8010a6a:	601a      	str	r2, [r3, #0]
 8010a6c:	681a      	ldr	r2, [r3, #0]
 8010a6e:	4b0f      	ldr	r3, [pc, #60]	; (8010aac <ai_platform_interface_api_get_version+0x60>)
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d000      	beq.n	8010a76 <ai_platform_interface_api_get_version+0x2a>
 8010a74:	e7fe      	b.n	8010a74 <ai_platform_interface_api_get_version+0x28>
 8010a76:	4b0e      	ldr	r3, [pc, #56]	; (8010ab0 <ai_platform_interface_api_get_version+0x64>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	b2da      	uxtb	r2, r3
 8010a7c:	f362 0007 	bfi	r0, r2, #0, #8
 8010a80:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010a84:	f362 200f 	bfi	r0, r2, #8, #8
 8010a88:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010a8c:	f362 4017 	bfi	r0, r2, #16, #8
 8010a90:	0e1b      	lsrs	r3, r3, #24
 8010a92:	f363 601f 	bfi	r0, r3, #24, #8
 8010a96:	b002      	add	sp, #8
 8010a98:	4770      	bx	lr
 8010a9a:	bf00      	nop
 8010a9c:	e0002000 	.word	0xe0002000
 8010aa0:	40023008 	.word	0x40023008
 8010aa4:	40023000 	.word	0x40023000
 8010aa8:	f407a5c2 	.word	0xf407a5c2
 8010aac:	b5e8b5cd 	.word	0xb5e8b5cd
 8010ab0:	08016328 	.word	0x08016328

08010ab4 <ai_platform_context_acquire>:
 8010ab4:	b410      	push	{r4}
 8010ab6:	b120      	cbz	r0, 8010ac2 <ai_platform_context_acquire+0xe>
 8010ab8:	4b0d      	ldr	r3, [pc, #52]	; (8010af0 <ai_platform_context_acquire+0x3c>)
 8010aba:	6802      	ldr	r2, [r0, #0]
 8010abc:	429a      	cmp	r2, r3
 8010abe:	bf18      	it	ne
 8010ac0:	2000      	movne	r0, #0
 8010ac2:	490c      	ldr	r1, [pc, #48]	; (8010af4 <ai_platform_context_acquire+0x40>)
 8010ac4:	4a0c      	ldr	r2, [pc, #48]	; (8010af8 <ai_platform_context_acquire+0x44>)
 8010ac6:	680b      	ldr	r3, [r1, #0]
 8010ac8:	2401      	movs	r4, #1
 8010aca:	f023 0301 	bic.w	r3, r3, #1
 8010ace:	600b      	str	r3, [r1, #0]
 8010ad0:	4613      	mov	r3, r2
 8010ad2:	6014      	str	r4, [r2, #0]
 8010ad4:	681a      	ldr	r2, [r3, #0]
 8010ad6:	2a00      	cmp	r2, #0
 8010ad8:	d1fc      	bne.n	8010ad4 <ai_platform_context_acquire+0x20>
 8010ada:	4b08      	ldr	r3, [pc, #32]	; (8010afc <ai_platform_context_acquire+0x48>)
 8010adc:	4a08      	ldr	r2, [pc, #32]	; (8010b00 <ai_platform_context_acquire+0x4c>)
 8010ade:	601a      	str	r2, [r3, #0]
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	4b08      	ldr	r3, [pc, #32]	; (8010b04 <ai_platform_context_acquire+0x50>)
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d000      	beq.n	8010aea <ai_platform_context_acquire+0x36>
 8010ae8:	e7fe      	b.n	8010ae8 <ai_platform_context_acquire+0x34>
 8010aea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010aee:	4770      	bx	lr
 8010af0:	a1c00100 	.word	0xa1c00100
 8010af4:	e0002000 	.word	0xe0002000
 8010af8:	40023008 	.word	0x40023008
 8010afc:	40023000 	.word	0x40023000
 8010b00:	f407a5c2 	.word	0xf407a5c2
 8010b04:	b5e8b5cd 	.word	0xb5e8b5cd

08010b08 <ai_platform_network_get_error>:
 8010b08:	b410      	push	{r4}
 8010b0a:	b120      	cbz	r0, 8010b16 <ai_platform_network_get_error+0xe>
 8010b0c:	4b11      	ldr	r3, [pc, #68]	; (8010b54 <ai_platform_network_get_error+0x4c>)
 8010b0e:	6802      	ldr	r2, [r0, #0]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	bf18      	it	ne
 8010b14:	2000      	movne	r0, #0
 8010b16:	4910      	ldr	r1, [pc, #64]	; (8010b58 <ai_platform_network_get_error+0x50>)
 8010b18:	4a10      	ldr	r2, [pc, #64]	; (8010b5c <ai_platform_network_get_error+0x54>)
 8010b1a:	680b      	ldr	r3, [r1, #0]
 8010b1c:	2401      	movs	r4, #1
 8010b1e:	f023 0301 	bic.w	r3, r3, #1
 8010b22:	600b      	str	r3, [r1, #0]
 8010b24:	4613      	mov	r3, r2
 8010b26:	6014      	str	r4, [r2, #0]
 8010b28:	681a      	ldr	r2, [r3, #0]
 8010b2a:	2a00      	cmp	r2, #0
 8010b2c:	d1fc      	bne.n	8010b28 <ai_platform_network_get_error+0x20>
 8010b2e:	4b0c      	ldr	r3, [pc, #48]	; (8010b60 <ai_platform_network_get_error+0x58>)
 8010b30:	4a0c      	ldr	r2, [pc, #48]	; (8010b64 <ai_platform_network_get_error+0x5c>)
 8010b32:	601a      	str	r2, [r3, #0]
 8010b34:	681a      	ldr	r2, [r3, #0]
 8010b36:	4b0c      	ldr	r3, [pc, #48]	; (8010b68 <ai_platform_network_get_error+0x60>)
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d000      	beq.n	8010b3e <ai_platform_network_get_error+0x36>
 8010b3c:	e7fe      	b.n	8010b3c <ai_platform_network_get_error+0x34>
 8010b3e:	b120      	cbz	r0, 8010b4a <ai_platform_network_get_error+0x42>
 8010b40:	3010      	adds	r0, #16
 8010b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b46:	f000 bc55 	b.w	80113f4 <core_get_error>
 8010b4a:	f241 0010 	movw	r0, #4112	; 0x1010
 8010b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b52:	4770      	bx	lr
 8010b54:	a1c00100 	.word	0xa1c00100
 8010b58:	e0002000 	.word	0xe0002000
 8010b5c:	40023008 	.word	0x40023008
 8010b60:	40023000 	.word	0x40023000
 8010b64:	f407a5c2 	.word	0xf407a5c2
 8010b68:	b5e8b5cd 	.word	0xb5e8b5cd

08010b6c <ai_platform_api_get_network_report>:
 8010b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b6e:	460e      	mov	r6, r1
 8010b70:	4604      	mov	r4, r0
 8010b72:	b120      	cbz	r0, 8010b7e <ai_platform_api_get_network_report+0x12>
 8010b74:	4b6b      	ldr	r3, [pc, #428]	; (8010d24 <ai_platform_api_get_network_report+0x1b8>)
 8010b76:	6802      	ldr	r2, [r0, #0]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	bf18      	it	ne
 8010b7c:	2400      	movne	r4, #0
 8010b7e:	496a      	ldr	r1, [pc, #424]	; (8010d28 <ai_platform_api_get_network_report+0x1bc>)
 8010b80:	4a6a      	ldr	r2, [pc, #424]	; (8010d2c <ai_platform_api_get_network_report+0x1c0>)
 8010b82:	680b      	ldr	r3, [r1, #0]
 8010b84:	2001      	movs	r0, #1
 8010b86:	f023 0301 	bic.w	r3, r3, #1
 8010b8a:	600b      	str	r3, [r1, #0]
 8010b8c:	4611      	mov	r1, r2
 8010b8e:	6010      	str	r0, [r2, #0]
 8010b90:	680b      	ldr	r3, [r1, #0]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d1fc      	bne.n	8010b90 <ai_platform_api_get_network_report+0x24>
 8010b96:	4a66      	ldr	r2, [pc, #408]	; (8010d30 <ai_platform_api_get_network_report+0x1c4>)
 8010b98:	4966      	ldr	r1, [pc, #408]	; (8010d34 <ai_platform_api_get_network_report+0x1c8>)
 8010b9a:	6011      	str	r1, [r2, #0]
 8010b9c:	6811      	ldr	r1, [r2, #0]
 8010b9e:	4a66      	ldr	r2, [pc, #408]	; (8010d38 <ai_platform_api_get_network_report+0x1cc>)
 8010ba0:	4291      	cmp	r1, r2
 8010ba2:	d000      	beq.n	8010ba6 <ai_platform_api_get_network_report+0x3a>
 8010ba4:	e7fe      	b.n	8010ba4 <ai_platform_api_get_network_report+0x38>
 8010ba6:	2c00      	cmp	r4, #0
 8010ba8:	d061      	beq.n	8010c6e <ai_platform_api_get_network_report+0x102>
 8010baa:	2e00      	cmp	r6, #0
 8010bac:	d061      	beq.n	8010c72 <ai_platform_api_get_network_report+0x106>
 8010bae:	66f3      	str	r3, [r6, #108]	; 0x6c
 8010bb0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010bb2:	2a00      	cmp	r2, #0
 8010bb4:	d055      	beq.n	8010c62 <ai_platform_api_get_network_report+0xf6>
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	66f3      	str	r3, [r6, #108]	; 0x6c
 8010bba:	68d3      	ldr	r3, [r2, #12]
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d00c      	beq.n	8010bda <ai_platform_api_get_network_report+0x6e>
 8010bc0:	b15b      	cbz	r3, 8010bda <ai_platform_api_get_network_report+0x6e>
 8010bc2:	2202      	movs	r2, #2
 8010bc4:	e003      	b.n	8010bce <ai_platform_api_get_network_report+0x62>
 8010bc6:	1c50      	adds	r0, r2, #1
 8010bc8:	460b      	mov	r3, r1
 8010bca:	b121      	cbz	r1, 8010bd6 <ai_platform_api_get_network_report+0x6a>
 8010bcc:	4602      	mov	r2, r0
 8010bce:	66f2      	str	r2, [r6, #108]	; 0x6c
 8010bd0:	68d9      	ldr	r1, [r3, #12]
 8010bd2:	4299      	cmp	r1, r3
 8010bd4:	d1f7      	bne.n	8010bc6 <ai_platform_api_get_network_report+0x5a>
 8010bd6:	2a00      	cmp	r2, #0
 8010bd8:	d043      	beq.n	8010c62 <ai_platform_api_get_network_report+0xf6>
 8010bda:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8010bde:	b100      	cbz	r0, 8010be2 <ai_platform_api_get_network_report+0x76>
 8010be0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8010be2:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8010be6:	f7ff fe39 	bl	801085c <_ai_platform_get_io_buffers_info>
 8010bea:	4605      	mov	r5, r0
 8010bec:	8630      	strh	r0, [r6, #48]	; 0x30
 8010bee:	2800      	cmp	r0, #0
 8010bf0:	d05e      	beq.n	8010cb0 <ai_platform_api_get_network_report+0x144>
 8010bf2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8010bf6:	2b01      	cmp	r3, #1
 8010bf8:	bf8a      	itet	hi
 8010bfa:	6ce0      	ldrhi	r0, [r4, #76]	; 0x4c
 8010bfc:	2000      	movls	r0, #0
 8010bfe:	300c      	addhi	r0, #12
 8010c00:	f106 0138 	add.w	r1, r6, #56	; 0x38
 8010c04:	f7ff fe2a 	bl	801085c <_ai_platform_get_io_buffers_info>
 8010c08:	4605      	mov	r5, r0
 8010c0a:	8670      	strh	r0, [r6, #50]	; 0x32
 8010c0c:	2800      	cmp	r0, #0
 8010c0e:	d047      	beq.n	8010ca0 <ai_platform_api_get_network_report+0x134>
 8010c10:	6863      	ldr	r3, [r4, #4]
 8010c12:	6733      	str	r3, [r6, #112]	; 0x70
 8010c14:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8010c18:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010c1a:	f106 053c 	add.w	r5, r6, #60	; 0x3c
 8010c1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010c20:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010c24:	e885 0003 	stmia.w	r5, {r0, r1}
 8010c28:	3418      	adds	r4, #24
 8010c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c2c:	f106 0554 	add.w	r5, r6, #84	; 0x54
 8010c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010c32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010c36:	e885 0003 	stmia.w	r5, {r0, r1}
 8010c3a:	4a3b      	ldr	r2, [pc, #236]	; (8010d28 <ai_platform_api_get_network_report+0x1bc>)
 8010c3c:	493b      	ldr	r1, [pc, #236]	; (8010d2c <ai_platform_api_get_network_report+0x1c0>)
 8010c3e:	6813      	ldr	r3, [r2, #0]
 8010c40:	2001      	movs	r0, #1
 8010c42:	f023 0301 	bic.w	r3, r3, #1
 8010c46:	6013      	str	r3, [r2, #0]
 8010c48:	460a      	mov	r2, r1
 8010c4a:	6008      	str	r0, [r1, #0]
 8010c4c:	6813      	ldr	r3, [r2, #0]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d1fc      	bne.n	8010c4c <ai_platform_api_get_network_report+0xe0>
 8010c52:	4b37      	ldr	r3, [pc, #220]	; (8010d30 <ai_platform_api_get_network_report+0x1c4>)
 8010c54:	4937      	ldr	r1, [pc, #220]	; (8010d34 <ai_platform_api_get_network_report+0x1c8>)
 8010c56:	6019      	str	r1, [r3, #0]
 8010c58:	6819      	ldr	r1, [r3, #0]
 8010c5a:	4b37      	ldr	r3, [pc, #220]	; (8010d38 <ai_platform_api_get_network_report+0x1cc>)
 8010c5c:	4299      	cmp	r1, r3
 8010c5e:	d00a      	beq.n	8010c76 <ai_platform_api_get_network_report+0x10a>
 8010c60:	e7fe      	b.n	8010c60 <ai_platform_api_get_network_report+0xf4>
 8010c62:	f104 0010 	add.w	r0, r4, #16
 8010c66:	2218      	movs	r2, #24
 8010c68:	2111      	movs	r1, #17
 8010c6a:	f000 fbc9 	bl	8011400 <core_set_error>
 8010c6e:	2000      	movs	r0, #0
 8010c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c72:	4630      	mov	r0, r6
 8010c74:	e7fc      	b.n	8010c70 <ai_platform_api_get_network_report+0x104>
 8010c76:	4b31      	ldr	r3, [pc, #196]	; (8010d3c <ai_platform_api_get_network_report+0x1d0>)
 8010c78:	482b      	ldr	r0, [pc, #172]	; (8010d28 <ai_platform_api_get_network_report+0x1bc>)
 8010c7a:	6133      	str	r3, [r6, #16]
 8010c7c:	6803      	ldr	r3, [r0, #0]
 8010c7e:	492b      	ldr	r1, [pc, #172]	; (8010d2c <ai_platform_api_get_network_report+0x1c0>)
 8010c80:	f023 0301 	bic.w	r3, r3, #1
 8010c84:	2401      	movs	r4, #1
 8010c86:	6003      	str	r3, [r0, #0]
 8010c88:	6014      	str	r4, [r2, #0]
 8010c8a:	680b      	ldr	r3, [r1, #0]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d1fc      	bne.n	8010c8a <ai_platform_api_get_network_report+0x11e>
 8010c90:	4b27      	ldr	r3, [pc, #156]	; (8010d30 <ai_platform_api_get_network_report+0x1c4>)
 8010c92:	4a28      	ldr	r2, [pc, #160]	; (8010d34 <ai_platform_api_get_network_report+0x1c8>)
 8010c94:	601a      	str	r2, [r3, #0]
 8010c96:	681a      	ldr	r2, [r3, #0]
 8010c98:	4b27      	ldr	r3, [pc, #156]	; (8010d38 <ai_platform_api_get_network_report+0x1cc>)
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d010      	beq.n	8010cc0 <ai_platform_api_get_network_report+0x154>
 8010c9e:	e7fe      	b.n	8010c9e <ai_platform_api_get_network_report+0x132>
 8010ca0:	f104 0010 	add.w	r0, r4, #16
 8010ca4:	2218      	movs	r2, #24
 8010ca6:	2113      	movs	r1, #19
 8010ca8:	f000 fbaa 	bl	8011400 <core_set_error>
 8010cac:	4628      	mov	r0, r5
 8010cae:	e7df      	b.n	8010c70 <ai_platform_api_get_network_report+0x104>
 8010cb0:	f104 0010 	add.w	r0, r4, #16
 8010cb4:	2218      	movs	r2, #24
 8010cb6:	2112      	movs	r1, #18
 8010cb8:	f000 fba2 	bl	8011400 <core_set_error>
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	e7d7      	b.n	8010c70 <ai_platform_api_get_network_report+0x104>
 8010cc0:	f240 2305 	movw	r3, #517	; 0x205
 8010cc4:	4818      	ldr	r0, [pc, #96]	; (8010d28 <ai_platform_api_get_network_report+0x1bc>)
 8010cc6:	6173      	str	r3, [r6, #20]
 8010cc8:	6803      	ldr	r3, [r0, #0]
 8010cca:	4a18      	ldr	r2, [pc, #96]	; (8010d2c <ai_platform_api_get_network_report+0x1c0>)
 8010ccc:	f023 0301 	bic.w	r3, r3, #1
 8010cd0:	2401      	movs	r4, #1
 8010cd2:	6003      	str	r3, [r0, #0]
 8010cd4:	600c      	str	r4, [r1, #0]
 8010cd6:	6813      	ldr	r3, [r2, #0]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d1fc      	bne.n	8010cd6 <ai_platform_api_get_network_report+0x16a>
 8010cdc:	4b14      	ldr	r3, [pc, #80]	; (8010d30 <ai_platform_api_get_network_report+0x1c4>)
 8010cde:	4915      	ldr	r1, [pc, #84]	; (8010d34 <ai_platform_api_get_network_report+0x1c8>)
 8010ce0:	6019      	str	r1, [r3, #0]
 8010ce2:	6819      	ldr	r1, [r3, #0]
 8010ce4:	4b14      	ldr	r3, [pc, #80]	; (8010d38 <ai_platform_api_get_network_report+0x1cc>)
 8010ce6:	4299      	cmp	r1, r3
 8010ce8:	d000      	beq.n	8010cec <ai_platform_api_get_network_report+0x180>
 8010cea:	e7fe      	b.n	8010cea <ai_platform_api_get_network_report+0x17e>
 8010cec:	f240 1301 	movw	r3, #257	; 0x101
 8010cf0:	490d      	ldr	r1, [pc, #52]	; (8010d28 <ai_platform_api_get_network_report+0x1bc>)
 8010cf2:	6273      	str	r3, [r6, #36]	; 0x24
 8010cf4:	680b      	ldr	r3, [r1, #0]
 8010cf6:	4c0d      	ldr	r4, [pc, #52]	; (8010d2c <ai_platform_api_get_network_report+0x1c0>)
 8010cf8:	f023 0301 	bic.w	r3, r3, #1
 8010cfc:	2001      	movs	r0, #1
 8010cfe:	600b      	str	r3, [r1, #0]
 8010d00:	6010      	str	r0, [r2, #0]
 8010d02:	6823      	ldr	r3, [r4, #0]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d1fc      	bne.n	8010d02 <ai_platform_api_get_network_report+0x196>
 8010d08:	4b09      	ldr	r3, [pc, #36]	; (8010d30 <ai_platform_api_get_network_report+0x1c4>)
 8010d0a:	4a0a      	ldr	r2, [pc, #40]	; (8010d34 <ai_platform_api_get_network_report+0x1c8>)
 8010d0c:	601a      	str	r2, [r3, #0]
 8010d0e:	681a      	ldr	r2, [r3, #0]
 8010d10:	4b09      	ldr	r3, [pc, #36]	; (8010d38 <ai_platform_api_get_network_report+0x1cc>)
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d000      	beq.n	8010d18 <ai_platform_api_get_network_report+0x1ac>
 8010d16:	e7fe      	b.n	8010d16 <ai_platform_api_get_network_report+0x1aa>
 8010d18:	f240 4301 	movw	r3, #1025	; 0x401
 8010d1c:	62b3      	str	r3, [r6, #40]	; 0x28
 8010d1e:	2001      	movs	r0, #1
 8010d20:	e7a6      	b.n	8010c70 <ai_platform_api_get_network_report+0x104>
 8010d22:	bf00      	nop
 8010d24:	a1c00100 	.word	0xa1c00100
 8010d28:	e0002000 	.word	0xe0002000
 8010d2c:	40023008 	.word	0x40023008
 8010d30:	40023000 	.word	0x40023000
 8010d34:	f407a5c2 	.word	0xf407a5c2
 8010d38:	b5e8b5cd 	.word	0xb5e8b5cd
 8010d3c:	0801631c 	.word	0x0801631c

08010d40 <ai_platform_network_create>:
 8010d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d44:	4e23      	ldr	r6, [pc, #140]	; (8010dd4 <ai_platform_network_create+0x94>)
 8010d46:	4924      	ldr	r1, [pc, #144]	; (8010dd8 <ai_platform_network_create+0x98>)
 8010d48:	6835      	ldr	r5, [r6, #0]
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	f025 0501 	bic.w	r5, r5, #1
 8010d50:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8010d54:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8010d58:	6035      	str	r5, [r6, #0]
 8010d5a:	2501      	movs	r5, #1
 8010d5c:	600d      	str	r5, [r1, #0]
 8010d5e:	680d      	ldr	r5, [r1, #0]
 8010d60:	2d00      	cmp	r5, #0
 8010d62:	d1fc      	bne.n	8010d5e <ai_platform_network_create+0x1e>
 8010d64:	491d      	ldr	r1, [pc, #116]	; (8010ddc <ai_platform_network_create+0x9c>)
 8010d66:	4e1e      	ldr	r6, [pc, #120]	; (8010de0 <ai_platform_network_create+0xa0>)
 8010d68:	600e      	str	r6, [r1, #0]
 8010d6a:	680e      	ldr	r6, [r1, #0]
 8010d6c:	491d      	ldr	r1, [pc, #116]	; (8010de4 <ai_platform_network_create+0xa4>)
 8010d6e:	428e      	cmp	r6, r1
 8010d70:	d000      	beq.n	8010d74 <ai_platform_network_create+0x34>
 8010d72:	e7fe      	b.n	8010d72 <ai_platform_network_create+0x32>
 8010d74:	b1d0      	cbz	r0, 8010dac <ai_platform_network_create+0x6c>
 8010d76:	4698      	mov	r8, r3
 8010d78:	4613      	mov	r3, r2
 8010d7a:	4a1b      	ldr	r2, [pc, #108]	; (8010de8 <ai_platform_network_create+0xa8>)
 8010d7c:	601a      	str	r2, [r3, #0]
 8010d7e:	6003      	str	r3, [r0, #0]
 8010d80:	4606      	mov	r6, r0
 8010d82:	f000 fb35 	bl	80113f0 <core_init>
 8010d86:	b1b0      	cbz	r0, 8010db6 <ai_platform_network_create+0x76>
 8010d88:	0223      	lsls	r3, r4, #8
 8010d8a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010d8e:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8010d92:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8010d96:	d910      	bls.n	8010dba <ai_platform_network_create+0x7a>
 8010d98:	2201      	movs	r2, #1
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	6033      	str	r3, [r6, #0]
 8010d9e:	2310      	movs	r3, #16
 8010da0:	2000      	movs	r0, #0
 8010da2:	f362 0007 	bfi	r0, r2, #0, #8
 8010da6:	f363 201f 	bfi	r0, r3, #8, #24
 8010daa:	e001      	b.n	8010db0 <ai_platform_network_create+0x70>
 8010dac:	f241 0010 	movw	r0, #4112	; 0x1010
 8010db0:	b002      	add	sp, #8
 8010db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010db6:	2230      	movs	r2, #48	; 0x30
 8010db8:	e7ef      	b.n	8010d9a <ai_platform_network_create+0x5a>
 8010dba:	a802      	add	r0, sp, #8
 8010dbc:	4b0b      	ldr	r3, [pc, #44]	; (8010dec <ai_platform_network_create+0xac>)
 8010dbe:	f840 3d04 	str.w	r3, [r0, #-4]!
 8010dc2:	f000 ffe9 	bl	8011d98 <ai_check_custom_types>
 8010dc6:	b110      	cbz	r0, 8010dce <ai_platform_network_create+0x8e>
 8010dc8:	462b      	mov	r3, r5
 8010dca:	462a      	mov	r2, r5
 8010dcc:	e7e8      	b.n	8010da0 <ai_platform_network_create+0x60>
 8010dce:	2202      	movs	r2, #2
 8010dd0:	e7e3      	b.n	8010d9a <ai_platform_network_create+0x5a>
 8010dd2:	bf00      	nop
 8010dd4:	e0002000 	.word	0xe0002000
 8010dd8:	40023008 	.word	0x40023008
 8010ddc:	40023000 	.word	0x40023000
 8010de0:	f407a5c2 	.word	0xf407a5c2
 8010de4:	b5e8b5cd 	.word	0xb5e8b5cd
 8010de8:	a1c00100 	.word	0xa1c00100
 8010dec:	84048403 	.word	0x84048403

08010df0 <ai_platform_network_destroy>:
 8010df0:	b430      	push	{r4, r5}
 8010df2:	b1f0      	cbz	r0, 8010e32 <ai_platform_network_destroy+0x42>
 8010df4:	4a10      	ldr	r2, [pc, #64]	; (8010e38 <ai_platform_network_destroy+0x48>)
 8010df6:	6803      	ldr	r3, [r0, #0]
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	bf0c      	ite	eq
 8010dfc:	4603      	moveq	r3, r0
 8010dfe:	2300      	movne	r3, #0
 8010e00:	4c0e      	ldr	r4, [pc, #56]	; (8010e3c <ai_platform_network_destroy+0x4c>)
 8010e02:	490f      	ldr	r1, [pc, #60]	; (8010e40 <ai_platform_network_destroy+0x50>)
 8010e04:	6822      	ldr	r2, [r4, #0]
 8010e06:	2501      	movs	r5, #1
 8010e08:	f022 0201 	bic.w	r2, r2, #1
 8010e0c:	6022      	str	r2, [r4, #0]
 8010e0e:	460a      	mov	r2, r1
 8010e10:	600d      	str	r5, [r1, #0]
 8010e12:	6811      	ldr	r1, [r2, #0]
 8010e14:	2900      	cmp	r1, #0
 8010e16:	d1fc      	bne.n	8010e12 <ai_platform_network_destroy+0x22>
 8010e18:	4a0a      	ldr	r2, [pc, #40]	; (8010e44 <ai_platform_network_destroy+0x54>)
 8010e1a:	490b      	ldr	r1, [pc, #44]	; (8010e48 <ai_platform_network_destroy+0x58>)
 8010e1c:	6011      	str	r1, [r2, #0]
 8010e1e:	6811      	ldr	r1, [r2, #0]
 8010e20:	4a0a      	ldr	r2, [pc, #40]	; (8010e4c <ai_platform_network_destroy+0x5c>)
 8010e22:	4291      	cmp	r1, r2
 8010e24:	d000      	beq.n	8010e28 <ai_platform_network_destroy+0x38>
 8010e26:	e7fe      	b.n	8010e26 <ai_platform_network_destroy+0x36>
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	bf18      	it	ne
 8010e2c:	2000      	movne	r0, #0
 8010e2e:	bc30      	pop	{r4, r5}
 8010e30:	4770      	bx	lr
 8010e32:	4603      	mov	r3, r0
 8010e34:	e7e4      	b.n	8010e00 <ai_platform_network_destroy+0x10>
 8010e36:	bf00      	nop
 8010e38:	a1c00100 	.word	0xa1c00100
 8010e3c:	e0002000 	.word	0xe0002000
 8010e40:	40023008 	.word	0x40023008
 8010e44:	40023000 	.word	0x40023000
 8010e48:	f407a5c2 	.word	0xf407a5c2
 8010e4c:	b5e8b5cd 	.word	0xb5e8b5cd

08010e50 <ai_platform_network_init>:
 8010e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e52:	460c      	mov	r4, r1
 8010e54:	4605      	mov	r5, r0
 8010e56:	b120      	cbz	r0, 8010e62 <ai_platform_network_init+0x12>
 8010e58:	4b36      	ldr	r3, [pc, #216]	; (8010f34 <ai_platform_network_init+0xe4>)
 8010e5a:	6802      	ldr	r2, [r0, #0]
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	bf18      	it	ne
 8010e60:	2500      	movne	r5, #0
 8010e62:	4935      	ldr	r1, [pc, #212]	; (8010f38 <ai_platform_network_init+0xe8>)
 8010e64:	4a35      	ldr	r2, [pc, #212]	; (8010f3c <ai_platform_network_init+0xec>)
 8010e66:	680b      	ldr	r3, [r1, #0]
 8010e68:	2001      	movs	r0, #1
 8010e6a:	f023 0301 	bic.w	r3, r3, #1
 8010e6e:	600b      	str	r3, [r1, #0]
 8010e70:	4613      	mov	r3, r2
 8010e72:	6010      	str	r0, [r2, #0]
 8010e74:	681a      	ldr	r2, [r3, #0]
 8010e76:	2a00      	cmp	r2, #0
 8010e78:	d1fc      	bne.n	8010e74 <ai_platform_network_init+0x24>
 8010e7a:	4b31      	ldr	r3, [pc, #196]	; (8010f40 <ai_platform_network_init+0xf0>)
 8010e7c:	4a31      	ldr	r2, [pc, #196]	; (8010f44 <ai_platform_network_init+0xf4>)
 8010e7e:	601a      	str	r2, [r3, #0]
 8010e80:	681a      	ldr	r2, [r3, #0]
 8010e82:	4b31      	ldr	r3, [pc, #196]	; (8010f48 <ai_platform_network_init+0xf8>)
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d000      	beq.n	8010e8a <ai_platform_network_init+0x3a>
 8010e88:	e7fe      	b.n	8010e88 <ai_platform_network_init+0x38>
 8010e8a:	b33d      	cbz	r5, 8010edc <ai_platform_network_init+0x8c>
 8010e8c:	b344      	cbz	r4, 8010ee0 <ai_platform_network_init+0x90>
 8010e8e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8010e90:	6926      	ldr	r6, [r4, #16]
 8010e92:	2f00      	cmp	r7, #0
 8010e94:	d03d      	beq.n	8010f12 <ai_platform_network_init+0xc2>
 8010e96:	b35e      	cbz	r6, 8010ef0 <ai_platform_network_init+0xa0>
 8010e98:	4627      	mov	r7, r4
 8010e9a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010e9c:	f105 0618 	add.w	r6, r5, #24
 8010ea0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010ea2:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010ea6:	e886 0003 	stmia.w	r6, {r0, r1}
 8010eaa:	3418      	adds	r4, #24
 8010eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010eae:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8010eb2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010eb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010eb8:	e886 0003 	stmia.w	r6, {r0, r1}
 8010ebc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8010ebe:	2303      	movs	r3, #3
 8010ec0:	60eb      	str	r3, [r5, #12]
 8010ec2:	b15a      	cbz	r2, 8010edc <ai_platform_network_init+0x8c>
 8010ec4:	68d3      	ldr	r3, [r2, #12]
 8010ec6:	6095      	str	r5, [r2, #8]
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d007      	beq.n	8010edc <ai_platform_network_init+0x8c>
 8010ecc:	b133      	cbz	r3, 8010edc <ai_platform_network_init+0x8c>
 8010ece:	68da      	ldr	r2, [r3, #12]
 8010ed0:	609d      	str	r5, [r3, #8]
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	d002      	beq.n	8010edc <ai_platform_network_init+0x8c>
 8010ed6:	4613      	mov	r3, r2
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d1f8      	bne.n	8010ece <ai_platform_network_init+0x7e>
 8010edc:	4628      	mov	r0, r5
 8010ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ee0:	f105 0010 	add.w	r0, r5, #16
 8010ee4:	2211      	movs	r2, #17
 8010ee6:	2110      	movs	r1, #16
 8010ee8:	f000 fa8a 	bl	8011400 <core_set_error>
 8010eec:	4625      	mov	r5, r4
 8010eee:	e7f5      	b.n	8010edc <ai_platform_network_init+0x8c>
 8010ef0:	8921      	ldrh	r1, [r4, #8]
 8010ef2:	88e2      	ldrh	r2, [r4, #6]
 8010ef4:	68e3      	ldr	r3, [r4, #12]
 8010ef6:	fb02 f201 	mul.w	r2, r2, r1
 8010efa:	fb03 f302 	mul.w	r3, r3, r2
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d0ca      	beq.n	8010e98 <ai_platform_network_init+0x48>
 8010f02:	f105 0010 	add.w	r0, r5, #16
 8010f06:	2212      	movs	r2, #18
 8010f08:	2110      	movs	r1, #16
 8010f0a:	f000 fa79 	bl	8011400 <core_set_error>
 8010f0e:	4635      	mov	r5, r6
 8010f10:	e7e4      	b.n	8010edc <ai_platform_network_init+0x8c>
 8010f12:	8c21      	ldrh	r1, [r4, #32]
 8010f14:	8be2      	ldrh	r2, [r4, #30]
 8010f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f18:	fb02 f201 	mul.w	r2, r2, r1
 8010f1c:	fb03 f302 	mul.w	r3, r3, r2
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d0b8      	beq.n	8010e96 <ai_platform_network_init+0x46>
 8010f24:	f105 0010 	add.w	r0, r5, #16
 8010f28:	2213      	movs	r2, #19
 8010f2a:	2110      	movs	r1, #16
 8010f2c:	f000 fa68 	bl	8011400 <core_set_error>
 8010f30:	463d      	mov	r5, r7
 8010f32:	e7d3      	b.n	8010edc <ai_platform_network_init+0x8c>
 8010f34:	a1c00100 	.word	0xa1c00100
 8010f38:	e0002000 	.word	0xe0002000
 8010f3c:	40023008 	.word	0x40023008
 8010f40:	40023000 	.word	0x40023000
 8010f44:	f407a5c2 	.word	0xf407a5c2
 8010f48:	b5e8b5cd 	.word	0xb5e8b5cd

08010f4c <ai_platform_network_post_init>:
 8010f4c:	b538      	push	{r3, r4, r5, lr}
 8010f4e:	4604      	mov	r4, r0
 8010f50:	b120      	cbz	r0, 8010f5c <ai_platform_network_post_init+0x10>
 8010f52:	4b1c      	ldr	r3, [pc, #112]	; (8010fc4 <ai_platform_network_post_init+0x78>)
 8010f54:	6802      	ldr	r2, [r0, #0]
 8010f56:	429a      	cmp	r2, r3
 8010f58:	bf18      	it	ne
 8010f5a:	2400      	movne	r4, #0
 8010f5c:	491a      	ldr	r1, [pc, #104]	; (8010fc8 <ai_platform_network_post_init+0x7c>)
 8010f5e:	4a1b      	ldr	r2, [pc, #108]	; (8010fcc <ai_platform_network_post_init+0x80>)
 8010f60:	680b      	ldr	r3, [r1, #0]
 8010f62:	2001      	movs	r0, #1
 8010f64:	f023 0301 	bic.w	r3, r3, #1
 8010f68:	600b      	str	r3, [r1, #0]
 8010f6a:	4613      	mov	r3, r2
 8010f6c:	6010      	str	r0, [r2, #0]
 8010f6e:	681a      	ldr	r2, [r3, #0]
 8010f70:	2a00      	cmp	r2, #0
 8010f72:	d1fc      	bne.n	8010f6e <ai_platform_network_post_init+0x22>
 8010f74:	4b16      	ldr	r3, [pc, #88]	; (8010fd0 <ai_platform_network_post_init+0x84>)
 8010f76:	4a17      	ldr	r2, [pc, #92]	; (8010fd4 <ai_platform_network_post_init+0x88>)
 8010f78:	601a      	str	r2, [r3, #0]
 8010f7a:	681a      	ldr	r2, [r3, #0]
 8010f7c:	4b16      	ldr	r3, [pc, #88]	; (8010fd8 <ai_platform_network_post_init+0x8c>)
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d000      	beq.n	8010f84 <ai_platform_network_post_init+0x38>
 8010f82:	e7fe      	b.n	8010f82 <ai_platform_network_post_init+0x36>
 8010f84:	b1a4      	cbz	r4, 8010fb0 <ai_platform_network_post_init+0x64>
 8010f86:	68e3      	ldr	r3, [r4, #12]
 8010f88:	f013 0502 	ands.w	r5, r3, #2
 8010f8c:	d012      	beq.n	8010fb4 <ai_platform_network_post_init+0x68>
 8010f8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010f90:	b163      	cbz	r3, 8010fac <ai_platform_network_post_init+0x60>
 8010f92:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8010f94:	b91d      	cbnz	r5, 8010f9e <ai_platform_network_post_init+0x52>
 8010f96:	e009      	b.n	8010fac <ai_platform_network_post_init+0x60>
 8010f98:	461d      	mov	r5, r3
 8010f9a:	b13b      	cbz	r3, 8010fac <ai_platform_network_post_init+0x60>
 8010f9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010f9e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8010fa0:	4629      	mov	r1, r5
 8010fa2:	2000      	movs	r0, #0
 8010fa4:	4798      	blx	r3
 8010fa6:	68eb      	ldr	r3, [r5, #12]
 8010fa8:	42ab      	cmp	r3, r5
 8010faa:	d1f5      	bne.n	8010f98 <ai_platform_network_post_init+0x4c>
 8010fac:	2001      	movs	r0, #1
 8010fae:	bd38      	pop	{r3, r4, r5, pc}
 8010fb0:	4620      	mov	r0, r4
 8010fb2:	bd38      	pop	{r3, r4, r5, pc}
 8010fb4:	f104 0010 	add.w	r0, r4, #16
 8010fb8:	2210      	movs	r2, #16
 8010fba:	2111      	movs	r1, #17
 8010fbc:	f000 fa20 	bl	8011400 <core_set_error>
 8010fc0:	4628      	mov	r0, r5
 8010fc2:	bd38      	pop	{r3, r4, r5, pc}
 8010fc4:	a1c00100 	.word	0xa1c00100
 8010fc8:	e0002000 	.word	0xe0002000
 8010fcc:	40023008 	.word	0x40023008
 8010fd0:	40023000 	.word	0x40023000
 8010fd4:	f407a5c2 	.word	0xf407a5c2
 8010fd8:	b5e8b5cd 	.word	0xb5e8b5cd

08010fdc <ai_platform_network_process>:
 8010fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe0:	b083      	sub	sp, #12
 8010fe2:	4604      	mov	r4, r0
 8010fe4:	9201      	str	r2, [sp, #4]
 8010fe6:	b120      	cbz	r0, 8010ff2 <ai_platform_network_process+0x16>
 8010fe8:	4ba5      	ldr	r3, [pc, #660]	; (8011280 <ai_platform_network_process+0x2a4>)
 8010fea:	6802      	ldr	r2, [r0, #0]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	bf18      	it	ne
 8010ff0:	2400      	movne	r4, #0
 8010ff2:	48a4      	ldr	r0, [pc, #656]	; (8011284 <ai_platform_network_process+0x2a8>)
 8010ff4:	4ba4      	ldr	r3, [pc, #656]	; (8011288 <ai_platform_network_process+0x2ac>)
 8010ff6:	6802      	ldr	r2, [r0, #0]
 8010ff8:	f022 0201 	bic.w	r2, r2, #1
 8010ffc:	6002      	str	r2, [r0, #0]
 8010ffe:	2201      	movs	r2, #1
 8011000:	601a      	str	r2, [r3, #0]
 8011002:	681a      	ldr	r2, [r3, #0]
 8011004:	2a00      	cmp	r2, #0
 8011006:	d1fc      	bne.n	8011002 <ai_platform_network_process+0x26>
 8011008:	4ba0      	ldr	r3, [pc, #640]	; (801128c <ai_platform_network_process+0x2b0>)
 801100a:	4aa1      	ldr	r2, [pc, #644]	; (8011290 <ai_platform_network_process+0x2b4>)
 801100c:	601a      	str	r2, [r3, #0]
 801100e:	681a      	ldr	r2, [r3, #0]
 8011010:	4ba0      	ldr	r3, [pc, #640]	; (8011294 <ai_platform_network_process+0x2b8>)
 8011012:	429a      	cmp	r2, r3
 8011014:	d000      	beq.n	8011018 <ai_platform_network_process+0x3c>
 8011016:	e7fe      	b.n	8011016 <ai_platform_network_process+0x3a>
 8011018:	2c00      	cmp	r4, #0
 801101a:	d066      	beq.n	80110ea <ai_platform_network_process+0x10e>
 801101c:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8011020:	b107      	cbz	r7, 8011024 <ai_platform_network_process+0x48>
 8011022:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8011024:	68e3      	ldr	r3, [r4, #12]
 8011026:	f003 0303 	and.w	r3, r3, #3
 801102a:	2600      	movs	r6, #0
 801102c:	2b03      	cmp	r3, #3
 801102e:	6166      	str	r6, [r4, #20]
 8011030:	f040 80fe 	bne.w	8011230 <ai_platform_network_process+0x254>
 8011034:	2900      	cmp	r1, #0
 8011036:	d07f      	beq.n	8011138 <ai_platform_network_process+0x15c>
 8011038:	2f00      	cmp	r7, #0
 801103a:	d07d      	beq.n	8011138 <ai_platform_network_process+0x15c>
 801103c:	883b      	ldrh	r3, [r7, #0]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d07a      	beq.n	8011138 <ai_platform_network_process+0x15c>
 8011042:	460d      	mov	r5, r1
 8011044:	46a0      	mov	r8, r4
 8011046:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 801104a:	429e      	cmp	r6, r3
 801104c:	d27d      	bcs.n	801114a <ai_platform_network_process+0x16e>
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d07a      	beq.n	801114a <ai_platform_network_process+0x16e>
 8011054:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8011058:	2c00      	cmp	r4, #0
 801105a:	d076      	beq.n	801114a <ai_platform_network_process+0x16e>
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8011064:	d067      	beq.n	8011136 <ai_platform_network_process+0x15a>
 8011066:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801106a:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 801106e:	69a0      	ldr	r0, [r4, #24]
 8011070:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8011074:	6841      	ldr	r1, [r0, #4]
 8011076:	fb0b f30e 	mul.w	r3, fp, lr
 801107a:	fb0c f303 	mul.w	r3, ip, r3
 801107e:	4299      	cmp	r1, r3
 8011080:	d350      	bcc.n	8011124 <ai_platform_network_process+0x148>
 8011082:	68e3      	ldr	r3, [r4, #12]
 8011084:	68da      	ldr	r2, [r3, #12]
 8011086:	455a      	cmp	r2, fp
 8011088:	d14c      	bne.n	8011124 <ai_platform_network_process+0x148>
 801108a:	689a      	ldr	r2, [r3, #8]
 801108c:	4572      	cmp	r2, lr
 801108e:	d149      	bne.n	8011124 <ai_platform_network_process+0x148>
 8011090:	685b      	ldr	r3, [r3, #4]
 8011092:	459c      	cmp	ip, r3
 8011094:	d146      	bne.n	8011124 <ai_platform_network_process+0x148>
 8011096:	6800      	ldr	r0, [r0, #0]
 8011098:	f000 ff2e 	bl	8011ef8 <ai_array_get_byte_size>
 801109c:	68e2      	ldr	r2, [r4, #12]
 801109e:	6963      	ldr	r3, [r4, #20]
 80110a0:	68d2      	ldr	r2, [r2, #12]
 80110a2:	68db      	ldr	r3, [r3, #12]
 80110a4:	fb03 f302 	mul.w	r3, r3, r2
 80110a8:	4298      	cmp	r0, r3
 80110aa:	d33b      	bcc.n	8011124 <ai_platform_network_process+0x148>
 80110ac:	69a3      	ldr	r3, [r4, #24]
 80110ae:	6818      	ldr	r0, [r3, #0]
 80110b0:	f000 fed6 	bl	8011e60 <ai_array_to_buffer_fmt>
 80110b4:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80110b8:	4043      	eors	r3, r0
 80110ba:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80110be:	d128      	bne.n	8011112 <ai_platform_network_process+0x136>
 80110c0:	68eb      	ldr	r3, [r5, #12]
 80110c2:	b1f3      	cbz	r3, 8011102 <ai_platform_network_process+0x126>
 80110c4:	f8b5 b000 	ldrh.w	fp, [r5]
 80110c8:	f1bb 0f00 	cmp.w	fp, #0
 80110cc:	d012      	beq.n	80110f4 <ai_platform_network_process+0x118>
 80110ce:	4623      	mov	r3, r4
 80110d0:	f105 020c 	add.w	r2, r5, #12
 80110d4:	4629      	mov	r1, r5
 80110d6:	4650      	mov	r0, sl
 80110d8:	f7ff fc0e 	bl	80108f8 <_platform_network_state_setup.isra.1>
 80110dc:	45d9      	cmp	r9, fp
 80110de:	883b      	ldrh	r3, [r7, #0]
 80110e0:	bf38      	it	cc
 80110e2:	46d9      	movcc	r9, fp
 80110e4:	3601      	adds	r6, #1
 80110e6:	3518      	adds	r5, #24
 80110e8:	e7af      	b.n	801104a <ai_platform_network_process+0x6e>
 80110ea:	46a3      	mov	fp, r4
 80110ec:	4658      	mov	r0, fp
 80110ee:	b003      	add	sp, #12
 80110f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110f4:	f108 0010 	add.w	r0, r8, #16
 80110f8:	2221      	movs	r2, #33	; 0x21
 80110fa:	2112      	movs	r1, #18
 80110fc:	f000 f980 	bl	8011400 <core_set_error>
 8011100:	e7f4      	b.n	80110ec <ai_platform_network_process+0x110>
 8011102:	f108 0010 	add.w	r0, r8, #16
 8011106:	2217      	movs	r2, #23
 8011108:	2112      	movs	r1, #18
 801110a:	469b      	mov	fp, r3
 801110c:	f000 f978 	bl	8011400 <core_set_error>
 8011110:	e7ec      	b.n	80110ec <ai_platform_network_process+0x110>
 8011112:	f108 0010 	add.w	r0, r8, #16
 8011116:	2219      	movs	r2, #25
 8011118:	2112      	movs	r1, #18
 801111a:	f000 f971 	bl	8011400 <core_set_error>
 801111e:	f04f 0b00 	mov.w	fp, #0
 8011122:	e7e3      	b.n	80110ec <ai_platform_network_process+0x110>
 8011124:	f108 0010 	add.w	r0, r8, #16
 8011128:	2218      	movs	r2, #24
 801112a:	2112      	movs	r1, #18
 801112c:	f000 f968 	bl	8011400 <core_set_error>
 8011130:	f04f 0b00 	mov.w	fp, #0
 8011134:	e7da      	b.n	80110ec <ai_platform_network_process+0x110>
 8011136:	4644      	mov	r4, r8
 8011138:	f104 0010 	add.w	r0, r4, #16
 801113c:	2217      	movs	r2, #23
 801113e:	2112      	movs	r1, #18
 8011140:	f000 f95e 	bl	8011400 <core_set_error>
 8011144:	f04f 0b00 	mov.w	fp, #0
 8011148:	e7d0      	b.n	80110ec <ai_platform_network_process+0x110>
 801114a:	9a01      	ldr	r2, [sp, #4]
 801114c:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8011150:	4644      	mov	r4, r8
 8011152:	2a00      	cmp	r2, #0
 8011154:	f000 80a4 	beq.w	80112a0 <ai_platform_network_process+0x2c4>
 8011158:	2b01      	cmp	r3, #1
 801115a:	f240 8140 	bls.w	80113de <ai_platform_network_process+0x402>
 801115e:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8011162:	f118 0f0c 	cmn.w	r8, #12
 8011166:	f000 813a 	beq.w	80113de <ai_platform_network_process+0x402>
 801116a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801116e:	2b00      	cmp	r3, #0
 8011170:	f000 8135 	beq.w	80113de <ai_platform_network_process+0x402>
 8011174:	3204      	adds	r2, #4
 8011176:	4615      	mov	r5, r2
 8011178:	2700      	movs	r7, #0
 801117a:	429f      	cmp	r7, r3
 801117c:	f080 808c 	bcs.w	8011298 <ai_platform_network_process+0x2bc>
 8011180:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011184:	2b00      	cmp	r3, #0
 8011186:	f000 8087 	beq.w	8011298 <ai_platform_network_process+0x2bc>
 801118a:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 801118e:	2e00      	cmp	r6, #0
 8011190:	f000 8082 	beq.w	8011298 <ai_platform_network_process+0x2bc>
 8011194:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 801119e:	d067      	beq.n	8011270 <ai_platform_network_process+0x294>
 80111a0:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80111a4:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80111a8:	69b0      	ldr	r0, [r6, #24]
 80111aa:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80111ae:	6841      	ldr	r1, [r0, #4]
 80111b0:	fb0b f30e 	mul.w	r3, fp, lr
 80111b4:	fb0c f303 	mul.w	r3, ip, r3
 80111b8:	4299      	cmp	r1, r3
 80111ba:	f0c0 8110 	bcc.w	80113de <ai_platform_network_process+0x402>
 80111be:	68f3      	ldr	r3, [r6, #12]
 80111c0:	68da      	ldr	r2, [r3, #12]
 80111c2:	455a      	cmp	r2, fp
 80111c4:	f040 810b 	bne.w	80113de <ai_platform_network_process+0x402>
 80111c8:	689a      	ldr	r2, [r3, #8]
 80111ca:	4572      	cmp	r2, lr
 80111cc:	f040 8107 	bne.w	80113de <ai_platform_network_process+0x402>
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	459c      	cmp	ip, r3
 80111d4:	f040 8103 	bne.w	80113de <ai_platform_network_process+0x402>
 80111d8:	6800      	ldr	r0, [r0, #0]
 80111da:	f000 fe8d 	bl	8011ef8 <ai_array_get_byte_size>
 80111de:	68f2      	ldr	r2, [r6, #12]
 80111e0:	6973      	ldr	r3, [r6, #20]
 80111e2:	68d2      	ldr	r2, [r2, #12]
 80111e4:	68db      	ldr	r3, [r3, #12]
 80111e6:	fb03 f302 	mul.w	r3, r3, r2
 80111ea:	4298      	cmp	r0, r3
 80111ec:	f0c0 80f7 	bcc.w	80113de <ai_platform_network_process+0x402>
 80111f0:	69b3      	ldr	r3, [r6, #24]
 80111f2:	6818      	ldr	r0, [r3, #0]
 80111f4:	f000 fe34 	bl	8011e60 <ai_array_to_buffer_fmt>
 80111f8:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80111fc:	4043      	eors	r3, r0
 80111fe:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8011202:	d12c      	bne.n	801125e <ai_platform_network_process+0x282>
 8011204:	68eb      	ldr	r3, [r5, #12]
 8011206:	b313      	cbz	r3, 801124e <ai_platform_network_process+0x272>
 8011208:	f8b5 b000 	ldrh.w	fp, [r5]
 801120c:	f1bb 0f00 	cmp.w	fp, #0
 8011210:	d016      	beq.n	8011240 <ai_platform_network_process+0x264>
 8011212:	4633      	mov	r3, r6
 8011214:	f105 020c 	add.w	r2, r5, #12
 8011218:	4629      	mov	r1, r5
 801121a:	4650      	mov	r0, sl
 801121c:	f7ff fb6c 	bl	80108f8 <_platform_network_state_setup.isra.1>
 8011220:	45d9      	cmp	r9, fp
 8011222:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8011226:	bf38      	it	cc
 8011228:	46d9      	movcc	r9, fp
 801122a:	3701      	adds	r7, #1
 801122c:	3518      	adds	r5, #24
 801122e:	e7a4      	b.n	801117a <ai_platform_network_process+0x19e>
 8011230:	f104 0010 	add.w	r0, r4, #16
 8011234:	2230      	movs	r2, #48	; 0x30
 8011236:	2111      	movs	r1, #17
 8011238:	f000 f8e2 	bl	8011400 <core_set_error>
 801123c:	46b3      	mov	fp, r6
 801123e:	e755      	b.n	80110ec <ai_platform_network_process+0x110>
 8011240:	f104 0010 	add.w	r0, r4, #16
 8011244:	2221      	movs	r2, #33	; 0x21
 8011246:	2113      	movs	r1, #19
 8011248:	f000 f8da 	bl	8011400 <core_set_error>
 801124c:	e74e      	b.n	80110ec <ai_platform_network_process+0x110>
 801124e:	f104 0010 	add.w	r0, r4, #16
 8011252:	2217      	movs	r2, #23
 8011254:	2113      	movs	r1, #19
 8011256:	469b      	mov	fp, r3
 8011258:	f000 f8d2 	bl	8011400 <core_set_error>
 801125c:	e746      	b.n	80110ec <ai_platform_network_process+0x110>
 801125e:	f104 0010 	add.w	r0, r4, #16
 8011262:	2219      	movs	r2, #25
 8011264:	2113      	movs	r1, #19
 8011266:	f000 f8cb 	bl	8011400 <core_set_error>
 801126a:	f04f 0b00 	mov.w	fp, #0
 801126e:	e73d      	b.n	80110ec <ai_platform_network_process+0x110>
 8011270:	f104 0010 	add.w	r0, r4, #16
 8011274:	2217      	movs	r2, #23
 8011276:	2113      	movs	r1, #19
 8011278:	f000 f8c2 	bl	8011400 <core_set_error>
 801127c:	46d3      	mov	fp, sl
 801127e:	e735      	b.n	80110ec <ai_platform_network_process+0x110>
 8011280:	a1c00100 	.word	0xa1c00100
 8011284:	e0002000 	.word	0xe0002000
 8011288:	40023008 	.word	0x40023008
 801128c:	40023000 	.word	0x40023000
 8011290:	f407a5c2 	.word	0xf407a5c2
 8011294:	b5e8b5cd 	.word	0xb5e8b5cd
 8011298:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801129c:	f8a4 9014 	strh.w	r9, [r4, #20]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	f000 8099 	beq.w	80113d8 <ai_platform_network_process+0x3fc>
 80112a6:	2b01      	cmp	r3, #1
 80112a8:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80112aa:	f240 8093 	bls.w	80113d4 <ai_platform_network_process+0x3f8>
 80112ae:	f105 070c 	add.w	r7, r5, #12
 80112b2:	8ae0      	ldrh	r0, [r4, #22]
 80112b4:	8aa3      	ldrh	r3, [r4, #20]
 80112b6:	4283      	cmp	r3, r0
 80112b8:	d977      	bls.n	80113aa <ai_platform_network_process+0x3ce>
 80112ba:	46a3      	mov	fp, r4
 80112bc:	2d00      	cmp	r5, #0
 80112be:	d032      	beq.n	8011326 <ai_platform_network_process+0x34a>
 80112c0:	882b      	ldrh	r3, [r5, #0]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d02f      	beq.n	8011326 <ai_platform_network_process+0x34a>
 80112c6:	686b      	ldr	r3, [r5, #4]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d02c      	beq.n	8011326 <ai_platform_network_process+0x34a>
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f04f 0800 	mov.w	r8, #0
 80112d2:	b343      	cbz	r3, 8011326 <ai_platform_network_process+0x34a>
 80112d4:	68a9      	ldr	r1, [r5, #8]
 80112d6:	699a      	ldr	r2, [r3, #24]
 80112d8:	f8d1 a000 	ldr.w	sl, [r1]
 80112dc:	6814      	ldr	r4, [r2, #0]
 80112de:	6890      	ldr	r0, [r2, #8]
 80112e0:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80112e4:	eb0a 0609 	add.w	r6, sl, r9
 80112e8:	00a4      	lsls	r4, r4, #2
 80112ea:	6871      	ldr	r1, [r6, #4]
 80112ec:	d45f      	bmi.n	80113ae <ai_platform_network_process+0x3d2>
 80112ee:	68d4      	ldr	r4, [r2, #12]
 80112f0:	1b00      	subs	r0, r0, r4
 80112f2:	4401      	add	r1, r0
 80112f4:	6091      	str	r1, [r2, #8]
 80112f6:	699b      	ldr	r3, [r3, #24]
 80112f8:	6872      	ldr	r2, [r6, #4]
 80112fa:	60da      	str	r2, [r3, #12]
 80112fc:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8011300:	f85a 2009 	ldr.w	r2, [sl, r9]
 8011304:	440b      	add	r3, r1
 8011306:	4293      	cmp	r3, r2
 8011308:	bf24      	itt	cs
 801130a:	68f3      	ldrcs	r3, [r6, #12]
 801130c:	1ad3      	subcs	r3, r2, r3
 801130e:	6073      	str	r3, [r6, #4]
 8011310:	882b      	ldrh	r3, [r5, #0]
 8011312:	f108 0801 	add.w	r8, r8, #1
 8011316:	4598      	cmp	r8, r3
 8011318:	d205      	bcs.n	8011326 <ai_platform_network_process+0x34a>
 801131a:	686b      	ldr	r3, [r5, #4]
 801131c:	b11b      	cbz	r3, 8011326 <ai_platform_network_process+0x34a>
 801131e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d1d6      	bne.n	80112d4 <ai_platform_network_process+0x2f8>
 8011326:	4658      	mov	r0, fp
 8011328:	f000 fd60 	bl	8011dec <ai_layers_forward_all>
 801132c:	2f00      	cmp	r7, #0
 801132e:	d032      	beq.n	8011396 <ai_platform_network_process+0x3ba>
 8011330:	883b      	ldrh	r3, [r7, #0]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d02f      	beq.n	8011396 <ai_platform_network_process+0x3ba>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	b36b      	cbz	r3, 8011396 <ai_platform_network_process+0x3ba>
 801133a:	6818      	ldr	r0, [r3, #0]
 801133c:	b358      	cbz	r0, 8011396 <ai_platform_network_process+0x3ba>
 801133e:	f04f 0800 	mov.w	r8, #0
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	6981      	ldr	r1, [r0, #24]
 8011346:	f8d3 a000 	ldr.w	sl, [r3]
 801134a:	680c      	ldr	r4, [r1, #0]
 801134c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8011350:	eb0a 0609 	add.w	r6, sl, r9
 8011354:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8011358:	00a4      	lsls	r4, r4, #2
 801135a:	eb0c 0302 	add.w	r3, ip, r2
 801135e:	d42a      	bmi.n	80113b6 <ai_platform_network_process+0x3da>
 8011360:	f85a 2009 	ldr.w	r2, [sl, r9]
 8011364:	4293      	cmp	r3, r2
 8011366:	bf24      	itt	cs
 8011368:	68f3      	ldrcs	r3, [r6, #12]
 801136a:	1ad3      	subcs	r3, r2, r3
 801136c:	6073      	str	r3, [r6, #4]
 801136e:	6981      	ldr	r1, [r0, #24]
 8011370:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8011374:	1b12      	subs	r2, r2, r4
 8011376:	4413      	add	r3, r2
 8011378:	608b      	str	r3, [r1, #8]
 801137a:	6983      	ldr	r3, [r0, #24]
 801137c:	6872      	ldr	r2, [r6, #4]
 801137e:	60da      	str	r2, [r3, #12]
 8011380:	883b      	ldrh	r3, [r7, #0]
 8011382:	f108 0801 	add.w	r8, r8, #1
 8011386:	4598      	cmp	r8, r3
 8011388:	d205      	bcs.n	8011396 <ai_platform_network_process+0x3ba>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	b11b      	cbz	r3, 8011396 <ai_platform_network_process+0x3ba>
 801138e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011392:	2800      	cmp	r0, #0
 8011394:	d1d5      	bne.n	8011342 <ai_platform_network_process+0x366>
 8011396:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 801139a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 801139e:	3001      	adds	r0, #1
 80113a0:	b280      	uxth	r0, r0
 80113a2:	4283      	cmp	r3, r0
 80113a4:	f8ab 0016 	strh.w	r0, [fp, #22]
 80113a8:	d888      	bhi.n	80112bc <ai_platform_network_process+0x2e0>
 80113aa:	4683      	mov	fp, r0
 80113ac:	e69e      	b.n	80110ec <ai_platform_network_process+0x110>
 80113ae:	68b2      	ldr	r2, [r6, #8]
 80113b0:	f001 fe12 	bl	8012fd8 <memcpy>
 80113b4:	e7a2      	b.n	80112fc <ai_platform_network_process+0x320>
 80113b6:	6889      	ldr	r1, [r1, #8]
 80113b8:	4660      	mov	r0, ip
 80113ba:	f001 fe0d 	bl	8012fd8 <memcpy>
 80113be:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80113c2:	f85a 2009 	ldr.w	r2, [sl, r9]
 80113c6:	440b      	add	r3, r1
 80113c8:	4293      	cmp	r3, r2
 80113ca:	bf24      	itt	cs
 80113cc:	68f3      	ldrcs	r3, [r6, #12]
 80113ce:	1ad3      	subcs	r3, r2, r3
 80113d0:	6073      	str	r3, [r6, #4]
 80113d2:	e7d5      	b.n	8011380 <ai_platform_network_process+0x3a4>
 80113d4:	2700      	movs	r7, #0
 80113d6:	e76c      	b.n	80112b2 <ai_platform_network_process+0x2d6>
 80113d8:	461d      	mov	r5, r3
 80113da:	461f      	mov	r7, r3
 80113dc:	e769      	b.n	80112b2 <ai_platform_network_process+0x2d6>
 80113de:	f104 0010 	add.w	r0, r4, #16
 80113e2:	2218      	movs	r2, #24
 80113e4:	2113      	movs	r1, #19
 80113e6:	f000 f80b 	bl	8011400 <core_set_error>
 80113ea:	f04f 0b00 	mov.w	fp, #0
 80113ee:	e67d      	b.n	80110ec <ai_platform_network_process+0x110>

080113f0 <core_init>:
 80113f0:	2001      	movs	r0, #1
 80113f2:	4770      	bx	lr

080113f4 <core_get_error>:
 80113f4:	4603      	mov	r3, r0
 80113f6:	2200      	movs	r2, #0
 80113f8:	6800      	ldr	r0, [r0, #0]
 80113fa:	601a      	str	r2, [r3, #0]
 80113fc:	4770      	bx	lr
 80113fe:	bf00      	nop

08011400 <core_set_error>:
 8011400:	7803      	ldrb	r3, [r0, #0]
 8011402:	b933      	cbnz	r3, 8011412 <core_set_error+0x12>
 8011404:	7001      	strb	r1, [r0, #0]
 8011406:	6803      	ldr	r3, [r0, #0]
 8011408:	f362 231f 	bfi	r3, r2, #8, #24
 801140c:	6003      	str	r3, [r0, #0]
 801140e:	2001      	movs	r0, #1
 8011410:	4770      	bx	lr
 8011412:	2000      	movs	r0, #0
 8011414:	4770      	bx	lr
 8011416:	bf00      	nop

08011418 <ai_dict8_dot_array_f32>:
 8011418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801141c:	f8dd c020 	ldr.w	ip, [sp, #32]
 8011420:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8011424:	f000 80c0 	beq.w	80115a8 <ai_dict8_dot_array_f32+0x190>
 8011428:	f101 0408 	add.w	r4, r1, #8
 801142c:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8011430:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80115b0 <ai_dict8_dot_array_f32+0x198>
 8011434:	eb04 0e09 	add.w	lr, r4, r9
 8011438:	f103 0520 	add.w	r5, r3, #32
 801143c:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8011440:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8011444:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8011448:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 801144c:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8011450:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8011454:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8011458:	ed55 3a04 	vldr	s7, [r5, #-16]
 801145c:	ed55 4a03 	vldr	s9, [r5, #-12]
 8011460:	ed55 5a02 	vldr	s11, [r5, #-8]
 8011464:	ed55 6a01 	vldr	s13, [r5, #-4]
 8011468:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801146c:	edd6 7a00 	vldr	s15, [r6]
 8011470:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8011474:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8011478:	ee67 7a83 	vmul.f32	s15, s15, s6
 801147c:	ed9a 3a00 	vldr	s6, [sl]
 8011480:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8011484:	eee3 7a05 	vfma.f32	s15, s6, s10
 8011488:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801148c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011490:	ed97 3a00 	vldr	s6, [r7]
 8011494:	ed96 5a00 	vldr	s10, [r6]
 8011498:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 801149c:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 80114a0:	eee3 7a04 	vfma.f32	s15, s6, s8
 80114a4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80114a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80114ac:	ed9a 3a00 	vldr	s6, [sl]
 80114b0:	ed96 4a00 	vldr	s8, [r6]
 80114b4:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80114b8:	eee5 7a06 	vfma.f32	s15, s10, s12
 80114bc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80114c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80114c4:	ed97 5a00 	vldr	s10, [r7]
 80114c8:	ed96 6a00 	vldr	s12, [r6]
 80114cc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80114d0:	3408      	adds	r4, #8
 80114d2:	45a6      	cmp	lr, r4
 80114d4:	f105 0520 	add.w	r5, r5, #32
 80114d8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80114dc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80114e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80114e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80114e8:	d1a8      	bne.n	801143c <ai_dict8_dot_array_f32+0x24>
 80114ea:	4449      	add	r1, r9
 80114ec:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80114f0:	f01c 0c07 	ands.w	ip, ip, #7
 80114f4:	d050      	beq.n	8011598 <ai_dict8_dot_array_f32+0x180>
 80114f6:	780c      	ldrb	r4, [r1, #0]
 80114f8:	edd3 6a00 	vldr	s13, [r3]
 80114fc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8011500:	edd4 7a00 	vldr	s15, [r4]
 8011504:	f1bc 0f01 	cmp.w	ip, #1
 8011508:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801150c:	d044      	beq.n	8011598 <ai_dict8_dot_array_f32+0x180>
 801150e:	784c      	ldrb	r4, [r1, #1]
 8011510:	edd3 6a01 	vldr	s13, [r3, #4]
 8011514:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8011518:	edd4 7a00 	vldr	s15, [r4]
 801151c:	f1bc 0f02 	cmp.w	ip, #2
 8011520:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011524:	d038      	beq.n	8011598 <ai_dict8_dot_array_f32+0x180>
 8011526:	788c      	ldrb	r4, [r1, #2]
 8011528:	edd3 6a02 	vldr	s13, [r3, #8]
 801152c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8011530:	edd4 7a00 	vldr	s15, [r4]
 8011534:	f1bc 0f03 	cmp.w	ip, #3
 8011538:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801153c:	d02c      	beq.n	8011598 <ai_dict8_dot_array_f32+0x180>
 801153e:	78cc      	ldrb	r4, [r1, #3]
 8011540:	edd3 6a03 	vldr	s13, [r3, #12]
 8011544:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8011548:	edd4 7a00 	vldr	s15, [r4]
 801154c:	f1bc 0f04 	cmp.w	ip, #4
 8011550:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011554:	d020      	beq.n	8011598 <ai_dict8_dot_array_f32+0x180>
 8011556:	790c      	ldrb	r4, [r1, #4]
 8011558:	edd3 6a04 	vldr	s13, [r3, #16]
 801155c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8011560:	edd4 7a00 	vldr	s15, [r4]
 8011564:	f1bc 0f05 	cmp.w	ip, #5
 8011568:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801156c:	d014      	beq.n	8011598 <ai_dict8_dot_array_f32+0x180>
 801156e:	794c      	ldrb	r4, [r1, #5]
 8011570:	edd3 6a05 	vldr	s13, [r3, #20]
 8011574:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8011578:	edd4 7a00 	vldr	s15, [r4]
 801157c:	f1bc 0f06 	cmp.w	ip, #6
 8011580:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011584:	d008      	beq.n	8011598 <ai_dict8_dot_array_f32+0x180>
 8011586:	7989      	ldrb	r1, [r1, #6]
 8011588:	edd3 7a06 	vldr	s15, [r3, #24]
 801158c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011590:	edd2 6a00 	vldr	s13, [r2]
 8011594:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011598:	edd0 7a00 	vldr	s15, [r0]
 801159c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80115a0:	ed80 7a00 	vstr	s14, [r0]
 80115a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115a8:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80115b0 <ai_dict8_dot_array_f32+0x198>
 80115ac:	e7a0      	b.n	80114f0 <ai_dict8_dot_array_f32+0xd8>
 80115ae:	bf00      	nop
 80115b0:	00000000 	.word	0x00000000

080115b4 <ai_dict4_dot_array_f32>:
 80115b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80115ba:	f027 0c01 	bic.w	ip, r7, #1
 80115be:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 80115c2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80115c6:	f000 80ae 	beq.w	8011726 <ai_dict4_dot_array_f32+0x172>
 80115ca:	1d0d      	adds	r5, r1, #4
 80115cc:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80115d0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 801172c <ai_dict4_dot_array_f32+0x178>
 80115d4:	eb05 0e09 	add.w	lr, r5, r9
 80115d8:	f103 0420 	add.w	r4, r3, #32
 80115dc:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 80115e0:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 80115e4:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 80115e8:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 80115ec:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 80115f0:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 80115f4:	ed14 5a04 	vldr	s10, [r4, #-16]
 80115f8:	ed54 5a03 	vldr	s11, [r4, #-12]
 80115fc:	ed14 6a02 	vldr	s12, [r4, #-8]
 8011600:	ed54 6a01 	vldr	s13, [r4, #-4]
 8011604:	f006 0a0f 	and.w	sl, r6, #15
 8011608:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 801160c:	edda 7a00 	vldr	s15, [sl]
 8011610:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8011614:	0936      	lsrs	r6, r6, #4
 8011616:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801161a:	ee67 7a83 	vmul.f32	s15, s15, s6
 801161e:	ed96 3a00 	vldr	s6, [r6]
 8011622:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8011626:	eee3 7a23 	vfma.f32	s15, s6, s7
 801162a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801162e:	f00b 0b0f 	and.w	fp, fp, #15
 8011632:	edd6 3a00 	vldr	s7, [r6]
 8011636:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 801163a:	eee3 7a84 	vfma.f32	s15, s7, s8
 801163e:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8011642:	3504      	adds	r5, #4
 8011644:	ed9b 4a00 	vldr	s8, [fp]
 8011648:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 801164c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011650:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8011654:	f00a 0a0f 	and.w	sl, sl, #15
 8011658:	eddb 4a00 	vldr	s9, [fp]
 801165c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011660:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8011664:	45ae      	cmp	lr, r5
 8011666:	ed9a 5a00 	vldr	s10, [sl]
 801166a:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 801166e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011672:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8011676:	f006 060f 	and.w	r6, r6, #15
 801167a:	edda 5a00 	vldr	s11, [sl]
 801167e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011682:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011686:	f104 0420 	add.w	r4, r4, #32
 801168a:	ed96 6a00 	vldr	s12, [r6]
 801168e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011692:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011696:	d1a1      	bne.n	80115dc <ai_dict4_dot_array_f32+0x28>
 8011698:	4449      	add	r1, r9
 801169a:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 801169e:	459c      	cmp	ip, r3
 80116a0:	d92d      	bls.n	80116fe <ai_dict4_dot_array_f32+0x14a>
 80116a2:	f10c 0c07 	add.w	ip, ip, #7
 80116a6:	f103 0508 	add.w	r5, r3, #8
 80116aa:	ebac 0c05 	sub.w	ip, ip, r5
 80116ae:	f02c 0407 	bic.w	r4, ip, #7
 80116b2:	f103 0810 	add.w	r8, r3, #16
 80116b6:	44a0      	add	r8, r4
 80116b8:	f101 3eff 	add.w	lr, r1, #4294967295
 80116bc:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80116c0:	ed15 6a01 	vldr	s12, [r5, #-4]
 80116c4:	ed55 6a02 	vldr	s13, [r5, #-8]
 80116c8:	f004 060f 	and.w	r6, r4, #15
 80116cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80116d0:	0924      	lsrs	r4, r4, #4
 80116d2:	edd6 7a00 	vldr	s15, [r6]
 80116d6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80116da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80116de:	ed94 6a00 	vldr	s12, [r4]
 80116e2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80116e6:	3508      	adds	r5, #8
 80116e8:	45a8      	cmp	r8, r5
 80116ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80116ee:	d1e5      	bne.n	80116bc <ai_dict4_dot_array_f32+0x108>
 80116f0:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80116f4:	f10c 0c01 	add.w	ip, ip, #1
 80116f8:	4461      	add	r1, ip
 80116fa:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80116fe:	07fc      	lsls	r4, r7, #31
 8011700:	d509      	bpl.n	8011716 <ai_dict4_dot_array_f32+0x162>
 8011702:	7809      	ldrb	r1, [r1, #0]
 8011704:	edd3 7a00 	vldr	s15, [r3]
 8011708:	090b      	lsrs	r3, r1, #4
 801170a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801170e:	edd2 6a00 	vldr	s13, [r2]
 8011712:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011716:	edd0 7a00 	vldr	s15, [r0]
 801171a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801171e:	ed80 7a00 	vstr	s14, [r0]
 8011722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011726:	ed9f 7a01 	vldr	s14, [pc, #4]	; 801172c <ai_dict4_dot_array_f32+0x178>
 801172a:	e7b8      	b.n	801169e <ai_dict4_dot_array_f32+0xea>
 801172c:	00000000 	.word	0x00000000

08011730 <forward_dense>:
 8011730:	6942      	ldr	r2, [r0, #20]
 8011732:	8813      	ldrh	r3, [r2, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	f000 81ca 	beq.w	8011ace <forward_dense+0x39e>
 801173a:	6852      	ldr	r2, [r2, #4]
 801173c:	6850      	ldr	r0, [r2, #4]
 801173e:	b100      	cbz	r0, 8011742 <forward_dense+0x12>
 8011740:	6800      	ldr	r0, [r0, #0]
 8011742:	2b01      	cmp	r3, #1
 8011744:	f240 81c0 	bls.w	8011ac8 <forward_dense+0x398>
 8011748:	6911      	ldr	r1, [r2, #16]
 801174a:	b101      	cbz	r1, 801174e <forward_dense+0x1e>
 801174c:	6809      	ldr	r1, [r1, #0]
 801174e:	2b02      	cmp	r3, #2
 8011750:	f000 81bf 	beq.w	8011ad2 <forward_dense+0x3a2>
 8011754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011758:	ed2d 8b10 	vpush	{d8-d15}
 801175c:	69d3      	ldr	r3, [r2, #28]
 801175e:	b091      	sub	sp, #68	; 0x44
 8011760:	2b00      	cmp	r3, #0
 8011762:	f000 820b 	beq.w	8011b7c <forward_dense+0x44c>
 8011766:	681c      	ldr	r4, [r3, #0]
 8011768:	9408      	str	r4, [sp, #32]
 801176a:	f112 0418 	adds.w	r4, r2, #24
 801176e:	f000 81df 	beq.w	8011b30 <forward_dense+0x400>
 8011772:	8b12      	ldrh	r2, [r2, #24]
 8011774:	2a01      	cmp	r2, #1
 8011776:	f240 81fe 	bls.w	8011b76 <forward_dense+0x446>
 801177a:	2b00      	cmp	r3, #0
 801177c:	f000 81da 	beq.w	8011b34 <forward_dense+0x404>
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	9306      	str	r3, [sp, #24]
 8011784:	9b08      	ldr	r3, [sp, #32]
 8011786:	68cc      	ldr	r4, [r1, #12]
 8011788:	699b      	ldr	r3, [r3, #24]
 801178a:	68c5      	ldr	r5, [r0, #12]
 801178c:	681a      	ldr	r2, [r3, #0]
 801178e:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8011792:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011796:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 801179a:	f3c2 5541 	ubfx	r5, r2, #21, #2
 801179e:	fa4c f505 	asr.w	r5, ip, r5
 80117a2:	f3c2 4243 	ubfx	r2, r2, #17, #4
 80117a6:	950b      	str	r5, [sp, #44]	; 0x2c
 80117a8:	2a04      	cmp	r2, #4
 80117aa:	fb07 f506 	mul.w	r5, r7, r6
 80117ae:	6864      	ldr	r4, [r4, #4]
 80117b0:	9507      	str	r5, [sp, #28]
 80117b2:	f000 81dd 	beq.w	8011b70 <forward_dense+0x440>
 80117b6:	2a08      	cmp	r2, #8
 80117b8:	f000 81da 	beq.w	8011b70 <forward_dense+0x440>
 80117bc:	f04f 0a00 	mov.w	sl, #0
 80117c0:	698a      	ldr	r2, [r1, #24]
 80117c2:	6981      	ldr	r1, [r0, #24]
 80117c4:	6890      	ldr	r0, [r2, #8]
 80117c6:	9a08      	ldr	r2, [sp, #32]
 80117c8:	9004      	str	r0, [sp, #16]
 80117ca:	6952      	ldr	r2, [r2, #20]
 80117cc:	688f      	ldr	r7, [r1, #8]
 80117ce:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80117d2:	00a2      	lsls	r2, r4, #2
 80117d4:	9209      	str	r2, [sp, #36]	; 0x24
 80117d6:	1886      	adds	r6, r0, r2
 80117d8:	9a07      	ldr	r2, [sp, #28]
 80117da:	2a00      	cmp	r2, #0
 80117dc:	f000 81c3 	beq.w	8011b66 <forward_dense+0x436>
 80117e0:	f1a8 0210 	sub.w	r2, r8, #16
 80117e4:	0912      	lsrs	r2, r2, #4
 80117e6:	3201      	adds	r2, #1
 80117e8:	0192      	lsls	r2, r2, #6
 80117ea:	920c      	str	r2, [sp, #48]	; 0x30
 80117ec:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80117f0:	920a      	str	r2, [sp, #40]	; 0x28
 80117f2:	689d      	ldr	r5, [r3, #8]
 80117f4:	9b06      	ldr	r3, [sp, #24]
 80117f6:	eddf aad0 	vldr	s21, [pc, #832]	; 8011b38 <forward_dense+0x408>
 80117fa:	2200      	movs	r2, #0
 80117fc:	9205      	str	r2, [sp, #20]
 80117fe:	f008 020f 	and.w	r2, r8, #15
 8011802:	920d      	str	r2, [sp, #52]	; 0x34
 8011804:	2b00      	cmp	r3, #0
 8011806:	d043      	beq.n	8011890 <forward_dense+0x160>
 8011808:	699b      	ldr	r3, [r3, #24]
 801180a:	689c      	ldr	r4, [r3, #8]
 801180c:	9b04      	ldr	r3, [sp, #16]
 801180e:	f1ba 0f00 	cmp.w	sl, #0
 8011812:	d042      	beq.n	801189a <forward_dense+0x16a>
 8011814:	42b3      	cmp	r3, r6
 8011816:	d22a      	bcs.n	801186e <forward_dense+0x13e>
 8011818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801181a:	469b      	mov	fp, r3
 801181c:	ab0f      	add	r3, sp, #60	; 0x3c
 801181e:	9303      	str	r3, [sp, #12]
 8011820:	2a04      	cmp	r2, #4
 8011822:	4633      	mov	r3, r6
 8011824:	4646      	mov	r6, r8
 8011826:	4698      	mov	r8, r3
 8011828:	f000 8156 	beq.w	8011ad8 <forward_dense+0x3a8>
 801182c:	2c00      	cmp	r4, #0
 801182e:	f000 8185 	beq.w	8011b3c <forward_dense+0x40c>
 8011832:	f8d4 c000 	ldr.w	ip, [r4]
 8011836:	9803      	ldr	r0, [sp, #12]
 8011838:	9600      	str	r6, [sp, #0]
 801183a:	463b      	mov	r3, r7
 801183c:	4629      	mov	r1, r5
 801183e:	4652      	mov	r2, sl
 8011840:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8011844:	f7ff fde8 	bl	8011418 <ai_dict8_dot_array_f32>
 8011848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801184a:	f84b 3b04 	str.w	r3, [fp], #4
 801184e:	45c3      	cmp	fp, r8
 8011850:	f104 0404 	add.w	r4, r4, #4
 8011854:	444d      	add	r5, r9
 8011856:	d3e9      	bcc.n	801182c <forward_dense+0xfc>
 8011858:	4643      	mov	r3, r8
 801185a:	46b0      	mov	r8, r6
 801185c:	461e      	mov	r6, r3
 801185e:	9a04      	ldr	r2, [sp, #16]
 8011860:	43d3      	mvns	r3, r2
 8011862:	4433      	add	r3, r6
 8011864:	f023 0303 	bic.w	r3, r3, #3
 8011868:	3304      	adds	r3, #4
 801186a:	18d3      	adds	r3, r2, r3
 801186c:	9304      	str	r3, [sp, #16]
 801186e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011870:	9b05      	ldr	r3, [sp, #20]
 8011872:	4417      	add	r7, r2
 8011874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011876:	4416      	add	r6, r2
 8011878:	9a07      	ldr	r2, [sp, #28]
 801187a:	3301      	adds	r3, #1
 801187c:	4293      	cmp	r3, r2
 801187e:	9305      	str	r3, [sp, #20]
 8011880:	f000 8171 	beq.w	8011b66 <forward_dense+0x436>
 8011884:	9b08      	ldr	r3, [sp, #32]
 8011886:	699b      	ldr	r3, [r3, #24]
 8011888:	689d      	ldr	r5, [r3, #8]
 801188a:	9b06      	ldr	r3, [sp, #24]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d1bb      	bne.n	8011808 <forward_dense+0xd8>
 8011890:	461c      	mov	r4, r3
 8011892:	9b04      	ldr	r3, [sp, #16]
 8011894:	f1ba 0f00 	cmp.w	sl, #0
 8011898:	d1bc      	bne.n	8011814 <forward_dense+0xe4>
 801189a:	42b3      	cmp	r3, r6
 801189c:	d2e7      	bcs.n	801186e <forward_dense+0x13e>
 801189e:	4618      	mov	r0, r3
 80118a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118a2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80118a6:	eb07 0c03 	add.w	ip, r7, r3
 80118aa:	469e      	mov	lr, r3
 80118ac:	2c00      	cmp	r4, #0
 80118ae:	f000 80ff 	beq.w	8011ab0 <forward_dense+0x380>
 80118b2:	f1b8 0f0f 	cmp.w	r8, #15
 80118b6:	edd4 fa00 	vldr	s31, [r4]
 80118ba:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8011b38 <forward_dense+0x408>
 80118be:	f104 0404 	add.w	r4, r4, #4
 80118c2:	f240 80fd 	bls.w	8011ac0 <forward_dense+0x390>
 80118c6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80118ca:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80118ce:	4641      	mov	r1, r8
 80118d0:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 80118d4:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80118d8:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 80118dc:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 80118e0:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 80118e4:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 80118e8:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 80118ec:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 80118f0:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 80118f4:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 80118f8:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 80118fc:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8011900:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8011904:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8011908:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 801190c:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8011910:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8011914:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8011918:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 801191c:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8011920:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8011924:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8011928:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 801192c:	ed13 4a04 	vldr	s8, [r3, #-16]
 8011930:	ed52 4a04 	vldr	s9, [r2, #-16]
 8011934:	ed12 5a03 	vldr	s10, [r2, #-12]
 8011938:	ed53 5a03 	vldr	s11, [r3, #-12]
 801193c:	ed12 6a02 	vldr	s12, [r2, #-8]
 8011940:	ed13 7a02 	vldr	s14, [r3, #-8]
 8011944:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8011948:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 801194c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8011950:	3910      	subs	r1, #16
 8011952:	290f      	cmp	r1, #15
 8011954:	ed53 ea01 	vldr	s29, [r3, #-4]
 8011958:	ed12 ea01 	vldr	s28, [r2, #-4]
 801195c:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8011960:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8011964:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8011968:	eeed 7a2c 	vfma.f32	s15, s26, s25
 801196c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8011970:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8011974:	eee9 7a89 	vfma.f32	s15, s19, s18
 8011978:	eee8 7a88 	vfma.f32	s15, s17, s16
 801197c:	eee0 7a20 	vfma.f32	s15, s0, s1
 8011980:	eee1 7a21 	vfma.f32	s15, s2, s3
 8011984:	eee2 7a22 	vfma.f32	s15, s4, s5
 8011988:	eee3 7a23 	vfma.f32	s15, s6, s7
 801198c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011990:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011994:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011998:	eeee 7a8e 	vfma.f32	s15, s29, s28
 801199c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80119a0:	d896      	bhi.n	80118d0 <forward_dense+0x1a0>
 80119a2:	eb05 010e 	add.w	r1, r5, lr
 80119a6:	465b      	mov	r3, fp
 80119a8:	4662      	mov	r2, ip
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d075      	beq.n	8011a9a <forward_dense+0x36a>
 80119ae:	ed91 7a00 	vldr	s14, [r1]
 80119b2:	edd2 7a00 	vldr	s15, [r2]
 80119b6:	2b01      	cmp	r3, #1
 80119b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80119bc:	d06d      	beq.n	8011a9a <forward_dense+0x36a>
 80119be:	ed91 7a01 	vldr	s14, [r1, #4]
 80119c2:	edd2 7a01 	vldr	s15, [r2, #4]
 80119c6:	2b02      	cmp	r3, #2
 80119c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80119cc:	d065      	beq.n	8011a9a <forward_dense+0x36a>
 80119ce:	ed91 7a02 	vldr	s14, [r1, #8]
 80119d2:	edd2 7a02 	vldr	s15, [r2, #8]
 80119d6:	2b03      	cmp	r3, #3
 80119d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80119dc:	d05d      	beq.n	8011a9a <forward_dense+0x36a>
 80119de:	ed91 7a03 	vldr	s14, [r1, #12]
 80119e2:	edd2 7a03 	vldr	s15, [r2, #12]
 80119e6:	2b04      	cmp	r3, #4
 80119e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80119ec:	d055      	beq.n	8011a9a <forward_dense+0x36a>
 80119ee:	ed91 7a04 	vldr	s14, [r1, #16]
 80119f2:	edd2 7a04 	vldr	s15, [r2, #16]
 80119f6:	2b05      	cmp	r3, #5
 80119f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80119fc:	d04d      	beq.n	8011a9a <forward_dense+0x36a>
 80119fe:	ed91 7a05 	vldr	s14, [r1, #20]
 8011a02:	edd2 7a05 	vldr	s15, [r2, #20]
 8011a06:	2b06      	cmp	r3, #6
 8011a08:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a0c:	d045      	beq.n	8011a9a <forward_dense+0x36a>
 8011a0e:	ed91 7a06 	vldr	s14, [r1, #24]
 8011a12:	edd2 7a06 	vldr	s15, [r2, #24]
 8011a16:	2b07      	cmp	r3, #7
 8011a18:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a1c:	d03d      	beq.n	8011a9a <forward_dense+0x36a>
 8011a1e:	ed91 7a07 	vldr	s14, [r1, #28]
 8011a22:	edd2 7a07 	vldr	s15, [r2, #28]
 8011a26:	2b08      	cmp	r3, #8
 8011a28:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a2c:	d035      	beq.n	8011a9a <forward_dense+0x36a>
 8011a2e:	ed91 7a08 	vldr	s14, [r1, #32]
 8011a32:	edd2 7a08 	vldr	s15, [r2, #32]
 8011a36:	2b09      	cmp	r3, #9
 8011a38:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a3c:	d02d      	beq.n	8011a9a <forward_dense+0x36a>
 8011a3e:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8011a42:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8011a46:	2b0a      	cmp	r3, #10
 8011a48:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a4c:	d025      	beq.n	8011a9a <forward_dense+0x36a>
 8011a4e:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8011a52:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8011a56:	2b0b      	cmp	r3, #11
 8011a58:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a5c:	d01d      	beq.n	8011a9a <forward_dense+0x36a>
 8011a5e:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8011a62:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8011a66:	2b0c      	cmp	r3, #12
 8011a68:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a6c:	d015      	beq.n	8011a9a <forward_dense+0x36a>
 8011a6e:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8011a72:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8011a76:	2b0d      	cmp	r3, #13
 8011a78:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a7c:	d00d      	beq.n	8011a9a <forward_dense+0x36a>
 8011a7e:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8011a82:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8011a86:	2b0e      	cmp	r3, #14
 8011a88:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a8c:	d005      	beq.n	8011a9a <forward_dense+0x36a>
 8011a8e:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8011a92:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8011a96:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a9a:	444d      	add	r5, r9
 8011a9c:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8011aa0:	ece0 6a01 	vstmia	r0!, {s13}
 8011aa4:	42b0      	cmp	r0, r6
 8011aa6:	f4bf aeda 	bcs.w	801185e <forward_dense+0x12e>
 8011aaa:	2c00      	cmp	r4, #0
 8011aac:	f47f af01 	bne.w	80118b2 <forward_dense+0x182>
 8011ab0:	f1b8 0f0f 	cmp.w	r8, #15
 8011ab4:	eef0 fa6a 	vmov.f32	s31, s21
 8011ab8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8011b38 <forward_dense+0x408>
 8011abc:	f63f af03 	bhi.w	80118c6 <forward_dense+0x196>
 8011ac0:	4643      	mov	r3, r8
 8011ac2:	4629      	mov	r1, r5
 8011ac4:	463a      	mov	r2, r7
 8011ac6:	e770      	b.n	80119aa <forward_dense+0x27a>
 8011ac8:	2300      	movs	r3, #0
 8011aca:	685b      	ldr	r3, [r3, #4]
 8011acc:	deff      	udf	#255	; 0xff
 8011ace:	685b      	ldr	r3, [r3, #4]
 8011ad0:	deff      	udf	#255	; 0xff
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	685b      	ldr	r3, [r3, #4]
 8011ad6:	deff      	udf	#255	; 0xff
 8011ad8:	b1ac      	cbz	r4, 8011b06 <forward_dense+0x3d6>
 8011ada:	f8d4 c000 	ldr.w	ip, [r4]
 8011ade:	9803      	ldr	r0, [sp, #12]
 8011ae0:	9600      	str	r6, [sp, #0]
 8011ae2:	463b      	mov	r3, r7
 8011ae4:	4629      	mov	r1, r5
 8011ae6:	4652      	mov	r2, sl
 8011ae8:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8011aec:	f7ff fd62 	bl	80115b4 <ai_dict4_dot_array_f32>
 8011af0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011af2:	f84b 3b04 	str.w	r3, [fp], #4
 8011af6:	45c3      	cmp	fp, r8
 8011af8:	f104 0404 	add.w	r4, r4, #4
 8011afc:	444d      	add	r5, r9
 8011afe:	f4bf aeab 	bcs.w	8011858 <forward_dense+0x128>
 8011b02:	2c00      	cmp	r4, #0
 8011b04:	d1e9      	bne.n	8011ada <forward_dense+0x3aa>
 8011b06:	4634      	mov	r4, r6
 8011b08:	4646      	mov	r6, r8
 8011b0a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011b0e:	9400      	str	r4, [sp, #0]
 8011b10:	463b      	mov	r3, r7
 8011b12:	4629      	mov	r1, r5
 8011b14:	4652      	mov	r2, sl
 8011b16:	4640      	mov	r0, r8
 8011b18:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8011b1c:	f7ff fd4a 	bl	80115b4 <ai_dict4_dot_array_f32>
 8011b20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b22:	f84b 3b04 	str.w	r3, [fp], #4
 8011b26:	45b3      	cmp	fp, r6
 8011b28:	444d      	add	r5, r9
 8011b2a:	d3f0      	bcc.n	8011b0e <forward_dense+0x3de>
 8011b2c:	46a0      	mov	r8, r4
 8011b2e:	e696      	b.n	801185e <forward_dense+0x12e>
 8011b30:	9406      	str	r4, [sp, #24]
 8011b32:	e627      	b.n	8011784 <forward_dense+0x54>
 8011b34:	9306      	str	r3, [sp, #24]
 8011b36:	e625      	b.n	8011784 <forward_dense+0x54>
 8011b38:	00000000 	.word	0x00000000
 8011b3c:	4634      	mov	r4, r6
 8011b3e:	4646      	mov	r6, r8
 8011b40:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011b44:	9400      	str	r4, [sp, #0]
 8011b46:	463b      	mov	r3, r7
 8011b48:	4629      	mov	r1, r5
 8011b4a:	4652      	mov	r2, sl
 8011b4c:	4640      	mov	r0, r8
 8011b4e:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8011b52:	f7ff fc61 	bl	8011418 <ai_dict8_dot_array_f32>
 8011b56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b58:	f84b 3b04 	str.w	r3, [fp], #4
 8011b5c:	45b3      	cmp	fp, r6
 8011b5e:	444d      	add	r5, r9
 8011b60:	d3f0      	bcc.n	8011b44 <forward_dense+0x414>
 8011b62:	46a0      	mov	r8, r4
 8011b64:	e67b      	b.n	801185e <forward_dense+0x12e>
 8011b66:	b011      	add	sp, #68	; 0x44
 8011b68:	ecbd 8b10 	vpop	{d8-d15}
 8011b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b70:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8011b74:	e624      	b.n	80117c0 <forward_dense+0x90>
 8011b76:	2300      	movs	r3, #0
 8011b78:	9306      	str	r3, [sp, #24]
 8011b7a:	e603      	b.n	8011784 <forward_dense+0x54>
 8011b7c:	9308      	str	r3, [sp, #32]
 8011b7e:	e5f4      	b.n	801176a <forward_dense+0x3a>

08011b80 <nl_func_relu_generic_array_f32>:
 8011b80:	b430      	push	{r4, r5}
 8011b82:	edd3 6a02 	vldr	s13, [r3, #8]
 8011b86:	6880      	ldr	r0, [r0, #8]
 8011b88:	688c      	ldr	r4, [r1, #8]
 8011b8a:	ed93 7a00 	vldr	s14, [r3]
 8011b8e:	ed93 6a01 	vldr	s12, [r3, #4]
 8011b92:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8011b96:	3a01      	subs	r2, #1
 8011b98:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8011b9c:	0092      	lsls	r2, r2, #2
 8011b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ba2:	4410      	add	r0, r2
 8011ba4:	4422      	add	r2, r4
 8011ba6:	d421      	bmi.n	8011bec <nl_func_relu_generic_array_f32+0x6c>
 8011ba8:	42a2      	cmp	r2, r4
 8011baa:	d33d      	bcc.n	8011c28 <nl_func_relu_generic_array_f32+0xa8>
 8011bac:	1d13      	adds	r3, r2, #4
 8011bae:	1d02      	adds	r2, r0, #4
 8011bb0:	e010      	b.n	8011bd4 <nl_func_relu_generic_array_f32+0x54>
 8011bb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bba:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8011bbe:	dd01      	ble.n	8011bc4 <nl_func_relu_generic_array_f32+0x44>
 8011bc0:	ee65 7a86 	vmul.f32	s15, s11, s12
 8011bc4:	ed62 7a01 	vstmdb	r2!, {s15}
 8011bc8:	6888      	ldr	r0, [r1, #8]
 8011bca:	f1a3 0408 	sub.w	r4, r3, #8
 8011bce:	4284      	cmp	r4, r0
 8011bd0:	462b      	mov	r3, r5
 8011bd2:	d329      	bcc.n	8011c28 <nl_func_relu_generic_array_f32+0xa8>
 8011bd4:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011bd8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011be0:	f1a3 0504 	sub.w	r5, r3, #4
 8011be4:	dce5      	bgt.n	8011bb2 <nl_func_relu_generic_array_f32+0x32>
 8011be6:	eef0 7a66 	vmov.f32	s15, s13
 8011bea:	e7eb      	b.n	8011bc4 <nl_func_relu_generic_array_f32+0x44>
 8011bec:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bf4:	d01a      	beq.n	8011c2c <nl_func_relu_generic_array_f32+0xac>
 8011bf6:	42a2      	cmp	r2, r4
 8011bf8:	d316      	bcc.n	8011c28 <nl_func_relu_generic_array_f32+0xa8>
 8011bfa:	1d13      	adds	r3, r2, #4
 8011bfc:	1d02      	adds	r2, r0, #4
 8011bfe:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011c02:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c0a:	f1a3 0408 	sub.w	r4, r3, #8
 8011c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c12:	f1a3 0004 	sub.w	r0, r3, #4
 8011c16:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011c1a:	4623      	mov	r3, r4
 8011c1c:	d51e      	bpl.n	8011c5c <nl_func_relu_generic_array_f32+0xdc>
 8011c1e:	ed62 6a01 	vstmdb	r2!, {s13}
 8011c22:	688b      	ldr	r3, [r1, #8]
 8011c24:	42a3      	cmp	r3, r4
 8011c26:	d91e      	bls.n	8011c66 <nl_func_relu_generic_array_f32+0xe6>
 8011c28:	bc30      	pop	{r4, r5}
 8011c2a:	4770      	bx	lr
 8011c2c:	42a2      	cmp	r2, r4
 8011c2e:	d3fb      	bcc.n	8011c28 <nl_func_relu_generic_array_f32+0xa8>
 8011c30:	1d13      	adds	r3, r2, #4
 8011c32:	2500      	movs	r5, #0
 8011c34:	1d02      	adds	r2, r0, #4
 8011c36:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011c3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c3e:	f1a3 0408 	sub.w	r4, r3, #8
 8011c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c46:	f1a3 0004 	sub.w	r0, r3, #4
 8011c4a:	4623      	mov	r3, r4
 8011c4c:	d80d      	bhi.n	8011c6a <nl_func_relu_generic_array_f32+0xea>
 8011c4e:	ed62 7a01 	vstmdb	r2!, {s15}
 8011c52:	688b      	ldr	r3, [r1, #8]
 8011c54:	42a3      	cmp	r3, r4
 8011c56:	d8e7      	bhi.n	8011c28 <nl_func_relu_generic_array_f32+0xa8>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	e7ec      	b.n	8011c36 <nl_func_relu_generic_array_f32+0xb6>
 8011c5c:	ed62 7a01 	vstmdb	r2!, {s15}
 8011c60:	688c      	ldr	r4, [r1, #8]
 8011c62:	429c      	cmp	r4, r3
 8011c64:	d8e0      	bhi.n	8011c28 <nl_func_relu_generic_array_f32+0xa8>
 8011c66:	4603      	mov	r3, r0
 8011c68:	e7c9      	b.n	8011bfe <nl_func_relu_generic_array_f32+0x7e>
 8011c6a:	f842 5d04 	str.w	r5, [r2, #-4]!
 8011c6e:	688c      	ldr	r4, [r1, #8]
 8011c70:	429c      	cmp	r4, r3
 8011c72:	d8d9      	bhi.n	8011c28 <nl_func_relu_generic_array_f32+0xa8>
 8011c74:	4603      	mov	r3, r0
 8011c76:	e7de      	b.n	8011c36 <nl_func_relu_generic_array_f32+0xb6>

08011c78 <forward_relu>:
 8011c78:	6942      	ldr	r2, [r0, #20]
 8011c7a:	8813      	ldrh	r3, [r2, #0]
 8011c7c:	b33b      	cbz	r3, 8011cce <forward_relu+0x56>
 8011c7e:	b470      	push	{r4, r5, r6}
 8011c80:	6852      	ldr	r2, [r2, #4]
 8011c82:	6856      	ldr	r6, [r2, #4]
 8011c84:	b106      	cbz	r6, 8011c88 <forward_relu+0x10>
 8011c86:	6836      	ldr	r6, [r6, #0]
 8011c88:	2b01      	cmp	r3, #1
 8011c8a:	d91d      	bls.n	8011cc8 <forward_relu+0x50>
 8011c8c:	6913      	ldr	r3, [r2, #16]
 8011c8e:	b103      	cbz	r3, 8011c92 <forward_relu+0x1a>
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	6982      	ldr	r2, [r0, #24]
 8011c94:	68b4      	ldr	r4, [r6, #8]
 8011c96:	6998      	ldr	r0, [r3, #24]
 8011c98:	69b1      	ldr	r1, [r6, #24]
 8011c9a:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8011c9e:	2a00      	cmp	r2, #0
 8011ca0:	d041      	beq.n	8011d26 <forward_relu+0xae>
 8011ca2:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 8011ca6:	2d01      	cmp	r5, #1
 8011ca8:	d013      	beq.n	8011cd2 <forward_relu+0x5a>
 8011caa:	2c00      	cmp	r4, #0
 8011cac:	d06f      	beq.n	8011d8e <forward_relu+0x116>
 8011cae:	68f6      	ldr	r6, [r6, #12]
 8011cb0:	2201      	movs	r2, #1
 8011cb2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8011cb6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011cba:	42a6      	cmp	r6, r4
 8011cbc:	fb05 f202 	mul.w	r2, r5, r2
 8011cc0:	d1f9      	bne.n	8011cb6 <forward_relu+0x3e>
 8011cc2:	bc70      	pop	{r4, r5, r6}
 8011cc4:	f7ff bf5c 	b.w	8011b80 <nl_func_relu_generic_array_f32>
 8011cc8:	2300      	movs	r3, #0
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	deff      	udf	#255	; 0xff
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	deff      	udf	#255	; 0xff
 8011cd2:	6880      	ldr	r0, [r0, #8]
 8011cd4:	688a      	ldr	r2, [r1, #8]
 8011cd6:	ed93 7a00 	vldr	s14, [r3]
 8011cda:	b184      	cbz	r4, 8011cfe <forward_relu+0x86>
 8011cdc:	68f6      	ldr	r6, [r6, #12]
 8011cde:	462b      	mov	r3, r5
 8011ce0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8011ce4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011ce8:	42a6      	cmp	r6, r4
 8011cea:	fb05 f303 	mul.w	r3, r5, r3
 8011cee:	d1f9      	bne.n	8011ce4 <forward_relu+0x6c>
 8011cf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011cf4:	3b01      	subs	r3, #1
 8011cf6:	009b      	lsls	r3, r3, #2
 8011cf8:	18d2      	adds	r2, r2, r3
 8011cfa:	4418      	add	r0, r3
 8011cfc:	d23d      	bcs.n	8011d7a <forward_relu+0x102>
 8011cfe:	1d13      	adds	r3, r2, #4
 8011d00:	2500      	movs	r5, #0
 8011d02:	1d02      	adds	r2, r0, #4
 8011d04:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d10:	f1a3 0004 	sub.w	r0, r3, #4
 8011d14:	d833      	bhi.n	8011d7e <forward_relu+0x106>
 8011d16:	ed62 7a01 	vstmdb	r2!, {s15}
 8011d1a:	688c      	ldr	r4, [r1, #8]
 8011d1c:	3b08      	subs	r3, #8
 8011d1e:	429c      	cmp	r4, r3
 8011d20:	d82b      	bhi.n	8011d7a <forward_relu+0x102>
 8011d22:	4603      	mov	r3, r0
 8011d24:	e7ee      	b.n	8011d04 <forward_relu+0x8c>
 8011d26:	6880      	ldr	r0, [r0, #8]
 8011d28:	688b      	ldr	r3, [r1, #8]
 8011d2a:	b184      	cbz	r4, 8011d4e <forward_relu+0xd6>
 8011d2c:	68f6      	ldr	r6, [r6, #12]
 8011d2e:	2201      	movs	r2, #1
 8011d30:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8011d34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011d38:	42a6      	cmp	r6, r4
 8011d3a:	fb05 f202 	mul.w	r2, r5, r2
 8011d3e:	d1f9      	bne.n	8011d34 <forward_relu+0xbc>
 8011d40:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8011d44:	3a01      	subs	r2, #1
 8011d46:	0092      	lsls	r2, r2, #2
 8011d48:	189b      	adds	r3, r3, r2
 8011d4a:	4410      	add	r0, r2
 8011d4c:	d215      	bcs.n	8011d7a <forward_relu+0x102>
 8011d4e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8011d94 <forward_relu+0x11c>
 8011d52:	3304      	adds	r3, #4
 8011d54:	3004      	adds	r0, #4
 8011d56:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011d5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d62:	bfb8      	it	lt
 8011d64:	eef0 7a47 	vmovlt.f32	s15, s14
 8011d68:	ed60 7a01 	vstmdb	r0!, {s15}
 8011d6c:	688c      	ldr	r4, [r1, #8]
 8011d6e:	f1a3 0208 	sub.w	r2, r3, #8
 8011d72:	4294      	cmp	r4, r2
 8011d74:	f1a3 0304 	sub.w	r3, r3, #4
 8011d78:	d9ed      	bls.n	8011d56 <forward_relu+0xde>
 8011d7a:	bc70      	pop	{r4, r5, r6}
 8011d7c:	4770      	bx	lr
 8011d7e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8011d82:	688c      	ldr	r4, [r1, #8]
 8011d84:	3b08      	subs	r3, #8
 8011d86:	429c      	cmp	r4, r3
 8011d88:	d8f7      	bhi.n	8011d7a <forward_relu+0x102>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	e7ba      	b.n	8011d04 <forward_relu+0x8c>
 8011d8e:	2201      	movs	r2, #1
 8011d90:	e797      	b.n	8011cc2 <forward_relu+0x4a>
 8011d92:	bf00      	nop
 8011d94:	00000000 	.word	0x00000000

08011d98 <ai_check_custom_types>:
 8011d98:	4b13      	ldr	r3, [pc, #76]	; (8011de8 <ai_check_custom_types+0x50>)
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	9301      	str	r3, [sp, #4]
 8011da0:	b118      	cbz	r0, 8011daa <ai_check_custom_types+0x12>
 8011da2:	7803      	ldrb	r3, [r0, #0]
 8011da4:	2b03      	cmp	r3, #3
 8011da6:	d002      	beq.n	8011dae <ai_check_custom_types+0x16>
 8011da8:	2000      	movs	r0, #0
 8011daa:	b002      	add	sp, #8
 8011dac:	4770      	bx	lr
 8011dae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011db2:	4293      	cmp	r3, r2
 8011db4:	d004      	beq.n	8011dc0 <ai_check_custom_types+0x28>
 8011db6:	2001      	movs	r0, #1
 8011db8:	f080 0001 	eor.w	r0, r0, #1
 8011dbc:	b002      	add	sp, #8
 8011dbe:	4770      	bx	lr
 8011dc0:	7842      	ldrb	r2, [r0, #1]
 8011dc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	f100 0001 	add.w	r0, r0, #1
 8011dcc:	d1f3      	bne.n	8011db6 <ai_check_custom_types+0x1e>
 8011dce:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8011dd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d1ed      	bne.n	8011db6 <ai_check_custom_types+0x1e>
 8011dda:	7842      	ldrb	r2, [r0, #1]
 8011ddc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d1e8      	bne.n	8011db6 <ai_check_custom_types+0x1e>
 8011de4:	2000      	movs	r0, #0
 8011de6:	e7e7      	b.n	8011db8 <ai_check_custom_types+0x20>
 8011de8:	08015d8c 	.word	0x08015d8c

08011dec <ai_layers_forward_all>:
 8011dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dee:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8011df0:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8011df2:	4604      	mov	r4, r0
 8011df4:	b31e      	cbz	r6, 8011e3e <ai_layers_forward_all+0x52>
 8011df6:	b1cd      	cbz	r5, 8011e2c <ai_layers_forward_all+0x40>
 8011df8:	6545      	str	r5, [r0, #84]	; 0x54
 8011dfa:	4629      	mov	r1, r5
 8011dfc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8011dfe:	2001      	movs	r0, #1
 8011e00:	47b0      	blx	r6
 8011e02:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8011e04:	2700      	movs	r7, #0
 8011e06:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011e08:	2002      	movs	r0, #2
 8011e0a:	47b0      	blx	r6
 8011e0c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8011e0e:	692b      	ldr	r3, [r5, #16]
 8011e10:	4628      	mov	r0, r5
 8011e12:	4798      	blx	r3
 8011e14:	68eb      	ldr	r3, [r5, #12]
 8011e16:	429d      	cmp	r5, r3
 8011e18:	f04f 0003 	mov.w	r0, #3
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	d006      	beq.n	8011e2e <ai_layers_forward_all+0x42>
 8011e20:	6563      	str	r3, [r4, #84]	; 0x54
 8011e22:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011e24:	47b0      	blx	r6
 8011e26:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8011e28:	2900      	cmp	r1, #0
 8011e2a:	d1ec      	bne.n	8011e06 <ai_layers_forward_all+0x1a>
 8011e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e2e:	2100      	movs	r1, #0
 8011e30:	6567      	str	r7, [r4, #84]	; 0x54
 8011e32:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011e34:	47b0      	blx	r6
 8011e36:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8011e38:	2900      	cmp	r1, #0
 8011e3a:	d1e4      	bne.n	8011e06 <ai_layers_forward_all+0x1a>
 8011e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e3e:	2d00      	cmp	r5, #0
 8011e40:	d0f4      	beq.n	8011e2c <ai_layers_forward_all+0x40>
 8011e42:	6545      	str	r5, [r0, #84]	; 0x54
 8011e44:	692b      	ldr	r3, [r5, #16]
 8011e46:	4628      	mov	r0, r5
 8011e48:	4798      	blx	r3
 8011e4a:	68eb      	ldr	r3, [r5, #12]
 8011e4c:	42ab      	cmp	r3, r5
 8011e4e:	d004      	beq.n	8011e5a <ai_layers_forward_all+0x6e>
 8011e50:	6563      	str	r3, [r4, #84]	; 0x54
 8011e52:	461d      	mov	r5, r3
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d1f5      	bne.n	8011e44 <ai_layers_forward_all+0x58>
 8011e58:	e7e8      	b.n	8011e2c <ai_layers_forward_all+0x40>
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	6563      	str	r3, [r4, #84]	; 0x54
 8011e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e60 <ai_array_to_buffer_fmt>:
 8011e60:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8011e64:	2b02      	cmp	r3, #2
 8011e66:	d01f      	beq.n	8011ea8 <ai_array_to_buffer_fmt+0x48>
 8011e68:	4a1c      	ldr	r2, [pc, #112]	; (8011edc <ai_array_to_buffer_fmt+0x7c>)
 8011e6a:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8011e6e:	4293      	cmp	r3, r2
 8011e70:	d00a      	beq.n	8011e88 <ai_array_to_buffer_fmt+0x28>
 8011e72:	dc0d      	bgt.n	8011e90 <ai_array_to_buffer_fmt+0x30>
 8011e74:	4a1a      	ldr	r2, [pc, #104]	; (8011ee0 <ai_array_to_buffer_fmt+0x80>)
 8011e76:	4293      	cmp	r3, r2
 8011e78:	d006      	beq.n	8011e88 <ai_array_to_buffer_fmt+0x28>
 8011e7a:	dd1d      	ble.n	8011eb8 <ai_array_to_buffer_fmt+0x58>
 8011e7c:	4a19      	ldr	r2, [pc, #100]	; (8011ee4 <ai_array_to_buffer_fmt+0x84>)
 8011e7e:	4293      	cmp	r3, r2
 8011e80:	d002      	beq.n	8011e88 <ai_array_to_buffer_fmt+0x28>
 8011e82:	320f      	adds	r2, #15
 8011e84:	4293      	cmp	r3, r2
 8011e86:	d10d      	bne.n	8011ea4 <ai_array_to_buffer_fmt+0x44>
 8011e88:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8011e8c:	4318      	orrs	r0, r3
 8011e8e:	4770      	bx	lr
 8011e90:	4a15      	ldr	r2, [pc, #84]	; (8011ee8 <ai_array_to_buffer_fmt+0x88>)
 8011e92:	4293      	cmp	r3, r2
 8011e94:	d0f8      	beq.n	8011e88 <ai_array_to_buffer_fmt+0x28>
 8011e96:	dd18      	ble.n	8011eca <ai_array_to_buffer_fmt+0x6a>
 8011e98:	4a14      	ldr	r2, [pc, #80]	; (8011eec <ai_array_to_buffer_fmt+0x8c>)
 8011e9a:	4293      	cmp	r3, r2
 8011e9c:	d0f4      	beq.n	8011e88 <ai_array_to_buffer_fmt+0x28>
 8011e9e:	4a14      	ldr	r2, [pc, #80]	; (8011ef0 <ai_array_to_buffer_fmt+0x90>)
 8011ea0:	4293      	cmp	r3, r2
 8011ea2:	d0f1      	beq.n	8011e88 <ai_array_to_buffer_fmt+0x28>
 8011ea4:	2340      	movs	r3, #64	; 0x40
 8011ea6:	e7ef      	b.n	8011e88 <ai_array_to_buffer_fmt+0x28>
 8011ea8:	4b12      	ldr	r3, [pc, #72]	; (8011ef4 <ai_array_to_buffer_fmt+0x94>)
 8011eaa:	4003      	ands	r3, r0
 8011eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011eb0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8011eb4:	4318      	orrs	r0, r3
 8011eb6:	4770      	bx	lr
 8011eb8:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8011ebc:	4293      	cmp	r3, r2
 8011ebe:	d0e3      	beq.n	8011e88 <ai_array_to_buffer_fmt+0x28>
 8011ec0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011ec4:	4293      	cmp	r3, r2
 8011ec6:	d0df      	beq.n	8011e88 <ai_array_to_buffer_fmt+0x28>
 8011ec8:	e7ec      	b.n	8011ea4 <ai_array_to_buffer_fmt+0x44>
 8011eca:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8011ece:	4293      	cmp	r3, r2
 8011ed0:	d0da      	beq.n	8011e88 <ai_array_to_buffer_fmt+0x28>
 8011ed2:	3207      	adds	r2, #7
 8011ed4:	4293      	cmp	r3, r2
 8011ed6:	d0d7      	beq.n	8011e88 <ai_array_to_buffer_fmt+0x28>
 8011ed8:	e7e4      	b.n	8011ea4 <ai_array_to_buffer_fmt+0x44>
 8011eda:	bf00      	nop
 8011edc:	00840040 	.word	0x00840040
 8011ee0:	00040447 	.word	0x00040447
 8011ee4:	00040840 	.word	0x00040840
 8011ee8:	00840840 	.word	0x00840840
 8011eec:	0084084f 	.word	0x0084084f
 8011ef0:	01821040 	.word	0x01821040
 8011ef4:	00803fff 	.word	0x00803fff

08011ef8 <ai_array_get_byte_size>:
 8011ef8:	b1c1      	cbz	r1, 8011f2c <ai_array_get_byte_size+0x34>
 8011efa:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8011efe:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8011f02:	4413      	add	r3, r2
 8011f04:	fb01 f103 	mul.w	r1, r1, r3
 8011f08:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8011f0c:	3107      	adds	r1, #7
 8011f0e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8011f12:	f021 0107 	bic.w	r1, r1, #7
 8011f16:	2804      	cmp	r0, #4
 8011f18:	fa21 f102 	lsr.w	r1, r1, r2
 8011f1c:	d008      	beq.n	8011f30 <ai_array_get_byte_size+0x38>
 8011f1e:	2808      	cmp	r0, #8
 8011f20:	d101      	bne.n	8011f26 <ai_array_get_byte_size+0x2e>
 8011f22:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8011f26:	3107      	adds	r1, #7
 8011f28:	08c8      	lsrs	r0, r1, #3
 8011f2a:	4770      	bx	lr
 8011f2c:	4608      	mov	r0, r1
 8011f2e:	4770      	bx	lr
 8011f30:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8011f34:	3107      	adds	r1, #7
 8011f36:	08c8      	lsrs	r0, r1, #3
 8011f38:	4770      	bx	lr
 8011f3a:	bf00      	nop
 8011f3c:	0000      	movs	r0, r0
	...

08011f40 <sin>:
 8011f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f42:	ec51 0b10 	vmov	r0, r1, d0
 8011f46:	4a20      	ldr	r2, [pc, #128]	; (8011fc8 <sin+0x88>)
 8011f48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011f4c:	4293      	cmp	r3, r2
 8011f4e:	dc07      	bgt.n	8011f60 <sin+0x20>
 8011f50:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011fc0 <sin+0x80>
 8011f54:	2000      	movs	r0, #0
 8011f56:	f000 fe37 	bl	8012bc8 <__kernel_sin>
 8011f5a:	ec51 0b10 	vmov	r0, r1, d0
 8011f5e:	e007      	b.n	8011f70 <sin+0x30>
 8011f60:	4a1a      	ldr	r2, [pc, #104]	; (8011fcc <sin+0x8c>)
 8011f62:	4293      	cmp	r3, r2
 8011f64:	dd09      	ble.n	8011f7a <sin+0x3a>
 8011f66:	ee10 2a10 	vmov	r2, s0
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	f7ee f9a4 	bl	80002b8 <__aeabi_dsub>
 8011f70:	ec41 0b10 	vmov	d0, r0, r1
 8011f74:	b005      	add	sp, #20
 8011f76:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f7a:	4668      	mov	r0, sp
 8011f7c:	f000 f828 	bl	8011fd0 <__ieee754_rem_pio2>
 8011f80:	f000 0003 	and.w	r0, r0, #3
 8011f84:	2801      	cmp	r0, #1
 8011f86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011f8a:	ed9d 0b00 	vldr	d0, [sp]
 8011f8e:	d004      	beq.n	8011f9a <sin+0x5a>
 8011f90:	2802      	cmp	r0, #2
 8011f92:	d005      	beq.n	8011fa0 <sin+0x60>
 8011f94:	b970      	cbnz	r0, 8011fb4 <sin+0x74>
 8011f96:	2001      	movs	r0, #1
 8011f98:	e7dd      	b.n	8011f56 <sin+0x16>
 8011f9a:	f000 fa0d 	bl	80123b8 <__kernel_cos>
 8011f9e:	e7dc      	b.n	8011f5a <sin+0x1a>
 8011fa0:	2001      	movs	r0, #1
 8011fa2:	f000 fe11 	bl	8012bc8 <__kernel_sin>
 8011fa6:	ec53 2b10 	vmov	r2, r3, d0
 8011faa:	ee10 0a10 	vmov	r0, s0
 8011fae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011fb2:	e7dd      	b.n	8011f70 <sin+0x30>
 8011fb4:	f000 fa00 	bl	80123b8 <__kernel_cos>
 8011fb8:	e7f5      	b.n	8011fa6 <sin+0x66>
 8011fba:	bf00      	nop
 8011fbc:	f3af 8000 	nop.w
	...
 8011fc8:	3fe921fb 	.word	0x3fe921fb
 8011fcc:	7fefffff 	.word	0x7fefffff

08011fd0 <__ieee754_rem_pio2>:
 8011fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd4:	ec57 6b10 	vmov	r6, r7, d0
 8011fd8:	4bc3      	ldr	r3, [pc, #780]	; (80122e8 <__ieee754_rem_pio2+0x318>)
 8011fda:	b08d      	sub	sp, #52	; 0x34
 8011fdc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011fe0:	4598      	cmp	r8, r3
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	9704      	str	r7, [sp, #16]
 8011fe6:	dc07      	bgt.n	8011ff8 <__ieee754_rem_pio2+0x28>
 8011fe8:	2200      	movs	r2, #0
 8011fea:	2300      	movs	r3, #0
 8011fec:	ed84 0b00 	vstr	d0, [r4]
 8011ff0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011ff4:	2500      	movs	r5, #0
 8011ff6:	e027      	b.n	8012048 <__ieee754_rem_pio2+0x78>
 8011ff8:	4bbc      	ldr	r3, [pc, #752]	; (80122ec <__ieee754_rem_pio2+0x31c>)
 8011ffa:	4598      	cmp	r8, r3
 8011ffc:	dc75      	bgt.n	80120ea <__ieee754_rem_pio2+0x11a>
 8011ffe:	9b04      	ldr	r3, [sp, #16]
 8012000:	4dbb      	ldr	r5, [pc, #748]	; (80122f0 <__ieee754_rem_pio2+0x320>)
 8012002:	2b00      	cmp	r3, #0
 8012004:	ee10 0a10 	vmov	r0, s0
 8012008:	a3a9      	add	r3, pc, #676	; (adr r3, 80122b0 <__ieee754_rem_pio2+0x2e0>)
 801200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801200e:	4639      	mov	r1, r7
 8012010:	dd36      	ble.n	8012080 <__ieee754_rem_pio2+0xb0>
 8012012:	f7ee f951 	bl	80002b8 <__aeabi_dsub>
 8012016:	45a8      	cmp	r8, r5
 8012018:	4606      	mov	r6, r0
 801201a:	460f      	mov	r7, r1
 801201c:	d018      	beq.n	8012050 <__ieee754_rem_pio2+0x80>
 801201e:	a3a6      	add	r3, pc, #664	; (adr r3, 80122b8 <__ieee754_rem_pio2+0x2e8>)
 8012020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012024:	f7ee f948 	bl	80002b8 <__aeabi_dsub>
 8012028:	4602      	mov	r2, r0
 801202a:	460b      	mov	r3, r1
 801202c:	e9c4 2300 	strd	r2, r3, [r4]
 8012030:	4630      	mov	r0, r6
 8012032:	4639      	mov	r1, r7
 8012034:	f7ee f940 	bl	80002b8 <__aeabi_dsub>
 8012038:	a39f      	add	r3, pc, #636	; (adr r3, 80122b8 <__ieee754_rem_pio2+0x2e8>)
 801203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801203e:	f7ee f93b 	bl	80002b8 <__aeabi_dsub>
 8012042:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012046:	2501      	movs	r5, #1
 8012048:	4628      	mov	r0, r5
 801204a:	b00d      	add	sp, #52	; 0x34
 801204c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012050:	a39b      	add	r3, pc, #620	; (adr r3, 80122c0 <__ieee754_rem_pio2+0x2f0>)
 8012052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012056:	f7ee f92f 	bl	80002b8 <__aeabi_dsub>
 801205a:	a39b      	add	r3, pc, #620	; (adr r3, 80122c8 <__ieee754_rem_pio2+0x2f8>)
 801205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012060:	4606      	mov	r6, r0
 8012062:	460f      	mov	r7, r1
 8012064:	f7ee f928 	bl	80002b8 <__aeabi_dsub>
 8012068:	4602      	mov	r2, r0
 801206a:	460b      	mov	r3, r1
 801206c:	e9c4 2300 	strd	r2, r3, [r4]
 8012070:	4630      	mov	r0, r6
 8012072:	4639      	mov	r1, r7
 8012074:	f7ee f920 	bl	80002b8 <__aeabi_dsub>
 8012078:	a393      	add	r3, pc, #588	; (adr r3, 80122c8 <__ieee754_rem_pio2+0x2f8>)
 801207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801207e:	e7de      	b.n	801203e <__ieee754_rem_pio2+0x6e>
 8012080:	f7ee f91c 	bl	80002bc <__adddf3>
 8012084:	45a8      	cmp	r8, r5
 8012086:	4606      	mov	r6, r0
 8012088:	460f      	mov	r7, r1
 801208a:	d016      	beq.n	80120ba <__ieee754_rem_pio2+0xea>
 801208c:	a38a      	add	r3, pc, #552	; (adr r3, 80122b8 <__ieee754_rem_pio2+0x2e8>)
 801208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012092:	f7ee f913 	bl	80002bc <__adddf3>
 8012096:	4602      	mov	r2, r0
 8012098:	460b      	mov	r3, r1
 801209a:	e9c4 2300 	strd	r2, r3, [r4]
 801209e:	4630      	mov	r0, r6
 80120a0:	4639      	mov	r1, r7
 80120a2:	f7ee f909 	bl	80002b8 <__aeabi_dsub>
 80120a6:	a384      	add	r3, pc, #528	; (adr r3, 80122b8 <__ieee754_rem_pio2+0x2e8>)
 80120a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ac:	f7ee f906 	bl	80002bc <__adddf3>
 80120b0:	f04f 35ff 	mov.w	r5, #4294967295
 80120b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80120b8:	e7c6      	b.n	8012048 <__ieee754_rem_pio2+0x78>
 80120ba:	a381      	add	r3, pc, #516	; (adr r3, 80122c0 <__ieee754_rem_pio2+0x2f0>)
 80120bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c0:	f7ee f8fc 	bl	80002bc <__adddf3>
 80120c4:	a380      	add	r3, pc, #512	; (adr r3, 80122c8 <__ieee754_rem_pio2+0x2f8>)
 80120c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ca:	4606      	mov	r6, r0
 80120cc:	460f      	mov	r7, r1
 80120ce:	f7ee f8f5 	bl	80002bc <__adddf3>
 80120d2:	4602      	mov	r2, r0
 80120d4:	460b      	mov	r3, r1
 80120d6:	e9c4 2300 	strd	r2, r3, [r4]
 80120da:	4630      	mov	r0, r6
 80120dc:	4639      	mov	r1, r7
 80120de:	f7ee f8eb 	bl	80002b8 <__aeabi_dsub>
 80120e2:	a379      	add	r3, pc, #484	; (adr r3, 80122c8 <__ieee754_rem_pio2+0x2f8>)
 80120e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e8:	e7e0      	b.n	80120ac <__ieee754_rem_pio2+0xdc>
 80120ea:	4b82      	ldr	r3, [pc, #520]	; (80122f4 <__ieee754_rem_pio2+0x324>)
 80120ec:	4598      	cmp	r8, r3
 80120ee:	f300 80d0 	bgt.w	8012292 <__ieee754_rem_pio2+0x2c2>
 80120f2:	f000 fe23 	bl	8012d3c <fabs>
 80120f6:	ec57 6b10 	vmov	r6, r7, d0
 80120fa:	ee10 0a10 	vmov	r0, s0
 80120fe:	a374      	add	r3, pc, #464	; (adr r3, 80122d0 <__ieee754_rem_pio2+0x300>)
 8012100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012104:	4639      	mov	r1, r7
 8012106:	f7ee fa8f 	bl	8000628 <__aeabi_dmul>
 801210a:	2200      	movs	r2, #0
 801210c:	4b7a      	ldr	r3, [pc, #488]	; (80122f8 <__ieee754_rem_pio2+0x328>)
 801210e:	f7ee f8d5 	bl	80002bc <__adddf3>
 8012112:	f7ee fd39 	bl	8000b88 <__aeabi_d2iz>
 8012116:	4605      	mov	r5, r0
 8012118:	f7ee fa1c 	bl	8000554 <__aeabi_i2d>
 801211c:	a364      	add	r3, pc, #400	; (adr r3, 80122b0 <__ieee754_rem_pio2+0x2e0>)
 801211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012126:	f7ee fa7f 	bl	8000628 <__aeabi_dmul>
 801212a:	4602      	mov	r2, r0
 801212c:	460b      	mov	r3, r1
 801212e:	4630      	mov	r0, r6
 8012130:	4639      	mov	r1, r7
 8012132:	f7ee f8c1 	bl	80002b8 <__aeabi_dsub>
 8012136:	a360      	add	r3, pc, #384	; (adr r3, 80122b8 <__ieee754_rem_pio2+0x2e8>)
 8012138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801213c:	4682      	mov	sl, r0
 801213e:	468b      	mov	fp, r1
 8012140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012144:	f7ee fa70 	bl	8000628 <__aeabi_dmul>
 8012148:	2d1f      	cmp	r5, #31
 801214a:	4606      	mov	r6, r0
 801214c:	460f      	mov	r7, r1
 801214e:	dc0c      	bgt.n	801216a <__ieee754_rem_pio2+0x19a>
 8012150:	1e6a      	subs	r2, r5, #1
 8012152:	4b6a      	ldr	r3, [pc, #424]	; (80122fc <__ieee754_rem_pio2+0x32c>)
 8012154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012158:	4543      	cmp	r3, r8
 801215a:	d006      	beq.n	801216a <__ieee754_rem_pio2+0x19a>
 801215c:	4632      	mov	r2, r6
 801215e:	463b      	mov	r3, r7
 8012160:	4650      	mov	r0, sl
 8012162:	4659      	mov	r1, fp
 8012164:	f7ee f8a8 	bl	80002b8 <__aeabi_dsub>
 8012168:	e00e      	b.n	8012188 <__ieee754_rem_pio2+0x1b8>
 801216a:	4632      	mov	r2, r6
 801216c:	463b      	mov	r3, r7
 801216e:	4650      	mov	r0, sl
 8012170:	4659      	mov	r1, fp
 8012172:	f7ee f8a1 	bl	80002b8 <__aeabi_dsub>
 8012176:	ea4f 5328 	mov.w	r3, r8, asr #20
 801217a:	9305      	str	r3, [sp, #20]
 801217c:	9a05      	ldr	r2, [sp, #20]
 801217e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012182:	1ad3      	subs	r3, r2, r3
 8012184:	2b10      	cmp	r3, #16
 8012186:	dc02      	bgt.n	801218e <__ieee754_rem_pio2+0x1be>
 8012188:	e9c4 0100 	strd	r0, r1, [r4]
 801218c:	e039      	b.n	8012202 <__ieee754_rem_pio2+0x232>
 801218e:	a34c      	add	r3, pc, #304	; (adr r3, 80122c0 <__ieee754_rem_pio2+0x2f0>)
 8012190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012198:	f7ee fa46 	bl	8000628 <__aeabi_dmul>
 801219c:	4606      	mov	r6, r0
 801219e:	460f      	mov	r7, r1
 80121a0:	4602      	mov	r2, r0
 80121a2:	460b      	mov	r3, r1
 80121a4:	4650      	mov	r0, sl
 80121a6:	4659      	mov	r1, fp
 80121a8:	f7ee f886 	bl	80002b8 <__aeabi_dsub>
 80121ac:	4602      	mov	r2, r0
 80121ae:	460b      	mov	r3, r1
 80121b0:	4680      	mov	r8, r0
 80121b2:	4689      	mov	r9, r1
 80121b4:	4650      	mov	r0, sl
 80121b6:	4659      	mov	r1, fp
 80121b8:	f7ee f87e 	bl	80002b8 <__aeabi_dsub>
 80121bc:	4632      	mov	r2, r6
 80121be:	463b      	mov	r3, r7
 80121c0:	f7ee f87a 	bl	80002b8 <__aeabi_dsub>
 80121c4:	a340      	add	r3, pc, #256	; (adr r3, 80122c8 <__ieee754_rem_pio2+0x2f8>)
 80121c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ca:	4606      	mov	r6, r0
 80121cc:	460f      	mov	r7, r1
 80121ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121d2:	f7ee fa29 	bl	8000628 <__aeabi_dmul>
 80121d6:	4632      	mov	r2, r6
 80121d8:	463b      	mov	r3, r7
 80121da:	f7ee f86d 	bl	80002b8 <__aeabi_dsub>
 80121de:	4602      	mov	r2, r0
 80121e0:	460b      	mov	r3, r1
 80121e2:	4606      	mov	r6, r0
 80121e4:	460f      	mov	r7, r1
 80121e6:	4640      	mov	r0, r8
 80121e8:	4649      	mov	r1, r9
 80121ea:	f7ee f865 	bl	80002b8 <__aeabi_dsub>
 80121ee:	9a05      	ldr	r2, [sp, #20]
 80121f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80121f4:	1ad3      	subs	r3, r2, r3
 80121f6:	2b31      	cmp	r3, #49	; 0x31
 80121f8:	dc20      	bgt.n	801223c <__ieee754_rem_pio2+0x26c>
 80121fa:	e9c4 0100 	strd	r0, r1, [r4]
 80121fe:	46c2      	mov	sl, r8
 8012200:	46cb      	mov	fp, r9
 8012202:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012206:	4650      	mov	r0, sl
 8012208:	4642      	mov	r2, r8
 801220a:	464b      	mov	r3, r9
 801220c:	4659      	mov	r1, fp
 801220e:	f7ee f853 	bl	80002b8 <__aeabi_dsub>
 8012212:	463b      	mov	r3, r7
 8012214:	4632      	mov	r2, r6
 8012216:	f7ee f84f 	bl	80002b8 <__aeabi_dsub>
 801221a:	9b04      	ldr	r3, [sp, #16]
 801221c:	2b00      	cmp	r3, #0
 801221e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012222:	f6bf af11 	bge.w	8012048 <__ieee754_rem_pio2+0x78>
 8012226:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801222a:	6063      	str	r3, [r4, #4]
 801222c:	f8c4 8000 	str.w	r8, [r4]
 8012230:	60a0      	str	r0, [r4, #8]
 8012232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012236:	60e3      	str	r3, [r4, #12]
 8012238:	426d      	negs	r5, r5
 801223a:	e705      	b.n	8012048 <__ieee754_rem_pio2+0x78>
 801223c:	a326      	add	r3, pc, #152	; (adr r3, 80122d8 <__ieee754_rem_pio2+0x308>)
 801223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012242:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012246:	f7ee f9ef 	bl	8000628 <__aeabi_dmul>
 801224a:	4606      	mov	r6, r0
 801224c:	460f      	mov	r7, r1
 801224e:	4602      	mov	r2, r0
 8012250:	460b      	mov	r3, r1
 8012252:	4640      	mov	r0, r8
 8012254:	4649      	mov	r1, r9
 8012256:	f7ee f82f 	bl	80002b8 <__aeabi_dsub>
 801225a:	4602      	mov	r2, r0
 801225c:	460b      	mov	r3, r1
 801225e:	4682      	mov	sl, r0
 8012260:	468b      	mov	fp, r1
 8012262:	4640      	mov	r0, r8
 8012264:	4649      	mov	r1, r9
 8012266:	f7ee f827 	bl	80002b8 <__aeabi_dsub>
 801226a:	4632      	mov	r2, r6
 801226c:	463b      	mov	r3, r7
 801226e:	f7ee f823 	bl	80002b8 <__aeabi_dsub>
 8012272:	a31b      	add	r3, pc, #108	; (adr r3, 80122e0 <__ieee754_rem_pio2+0x310>)
 8012274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012278:	4606      	mov	r6, r0
 801227a:	460f      	mov	r7, r1
 801227c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012280:	f7ee f9d2 	bl	8000628 <__aeabi_dmul>
 8012284:	4632      	mov	r2, r6
 8012286:	463b      	mov	r3, r7
 8012288:	f7ee f816 	bl	80002b8 <__aeabi_dsub>
 801228c:	4606      	mov	r6, r0
 801228e:	460f      	mov	r7, r1
 8012290:	e764      	b.n	801215c <__ieee754_rem_pio2+0x18c>
 8012292:	4b1b      	ldr	r3, [pc, #108]	; (8012300 <__ieee754_rem_pio2+0x330>)
 8012294:	4598      	cmp	r8, r3
 8012296:	dd35      	ble.n	8012304 <__ieee754_rem_pio2+0x334>
 8012298:	ee10 2a10 	vmov	r2, s0
 801229c:	463b      	mov	r3, r7
 801229e:	4630      	mov	r0, r6
 80122a0:	4639      	mov	r1, r7
 80122a2:	f7ee f809 	bl	80002b8 <__aeabi_dsub>
 80122a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80122aa:	e9c4 0100 	strd	r0, r1, [r4]
 80122ae:	e6a1      	b.n	8011ff4 <__ieee754_rem_pio2+0x24>
 80122b0:	54400000 	.word	0x54400000
 80122b4:	3ff921fb 	.word	0x3ff921fb
 80122b8:	1a626331 	.word	0x1a626331
 80122bc:	3dd0b461 	.word	0x3dd0b461
 80122c0:	1a600000 	.word	0x1a600000
 80122c4:	3dd0b461 	.word	0x3dd0b461
 80122c8:	2e037073 	.word	0x2e037073
 80122cc:	3ba3198a 	.word	0x3ba3198a
 80122d0:	6dc9c883 	.word	0x6dc9c883
 80122d4:	3fe45f30 	.word	0x3fe45f30
 80122d8:	2e000000 	.word	0x2e000000
 80122dc:	3ba3198a 	.word	0x3ba3198a
 80122e0:	252049c1 	.word	0x252049c1
 80122e4:	397b839a 	.word	0x397b839a
 80122e8:	3fe921fb 	.word	0x3fe921fb
 80122ec:	4002d97b 	.word	0x4002d97b
 80122f0:	3ff921fb 	.word	0x3ff921fb
 80122f4:	413921fb 	.word	0x413921fb
 80122f8:	3fe00000 	.word	0x3fe00000
 80122fc:	0801632c 	.word	0x0801632c
 8012300:	7fefffff 	.word	0x7fefffff
 8012304:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012308:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801230c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012310:	4630      	mov	r0, r6
 8012312:	460f      	mov	r7, r1
 8012314:	f7ee fc38 	bl	8000b88 <__aeabi_d2iz>
 8012318:	f7ee f91c 	bl	8000554 <__aeabi_i2d>
 801231c:	4602      	mov	r2, r0
 801231e:	460b      	mov	r3, r1
 8012320:	4630      	mov	r0, r6
 8012322:	4639      	mov	r1, r7
 8012324:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012328:	f7ed ffc6 	bl	80002b8 <__aeabi_dsub>
 801232c:	2200      	movs	r2, #0
 801232e:	4b1f      	ldr	r3, [pc, #124]	; (80123ac <__ieee754_rem_pio2+0x3dc>)
 8012330:	f7ee f97a 	bl	8000628 <__aeabi_dmul>
 8012334:	460f      	mov	r7, r1
 8012336:	4606      	mov	r6, r0
 8012338:	f7ee fc26 	bl	8000b88 <__aeabi_d2iz>
 801233c:	f7ee f90a 	bl	8000554 <__aeabi_i2d>
 8012340:	4602      	mov	r2, r0
 8012342:	460b      	mov	r3, r1
 8012344:	4630      	mov	r0, r6
 8012346:	4639      	mov	r1, r7
 8012348:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801234c:	f7ed ffb4 	bl	80002b8 <__aeabi_dsub>
 8012350:	2200      	movs	r2, #0
 8012352:	4b16      	ldr	r3, [pc, #88]	; (80123ac <__ieee754_rem_pio2+0x3dc>)
 8012354:	f7ee f968 	bl	8000628 <__aeabi_dmul>
 8012358:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801235c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8012360:	f04f 0803 	mov.w	r8, #3
 8012364:	2600      	movs	r6, #0
 8012366:	2700      	movs	r7, #0
 8012368:	4632      	mov	r2, r6
 801236a:	463b      	mov	r3, r7
 801236c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012370:	f108 3aff 	add.w	sl, r8, #4294967295
 8012374:	f7ee fbc0 	bl	8000af8 <__aeabi_dcmpeq>
 8012378:	b9b0      	cbnz	r0, 80123a8 <__ieee754_rem_pio2+0x3d8>
 801237a:	4b0d      	ldr	r3, [pc, #52]	; (80123b0 <__ieee754_rem_pio2+0x3e0>)
 801237c:	9301      	str	r3, [sp, #4]
 801237e:	2302      	movs	r3, #2
 8012380:	9300      	str	r3, [sp, #0]
 8012382:	462a      	mov	r2, r5
 8012384:	4643      	mov	r3, r8
 8012386:	4621      	mov	r1, r4
 8012388:	a806      	add	r0, sp, #24
 801238a:	f000 f8dd 	bl	8012548 <__kernel_rem_pio2>
 801238e:	9b04      	ldr	r3, [sp, #16]
 8012390:	2b00      	cmp	r3, #0
 8012392:	4605      	mov	r5, r0
 8012394:	f6bf ae58 	bge.w	8012048 <__ieee754_rem_pio2+0x78>
 8012398:	6863      	ldr	r3, [r4, #4]
 801239a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801239e:	6063      	str	r3, [r4, #4]
 80123a0:	68e3      	ldr	r3, [r4, #12]
 80123a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80123a6:	e746      	b.n	8012236 <__ieee754_rem_pio2+0x266>
 80123a8:	46d0      	mov	r8, sl
 80123aa:	e7dd      	b.n	8012368 <__ieee754_rem_pio2+0x398>
 80123ac:	41700000 	.word	0x41700000
 80123b0:	080163ac 	.word	0x080163ac
 80123b4:	00000000 	.word	0x00000000

080123b8 <__kernel_cos>:
 80123b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123bc:	ec59 8b10 	vmov	r8, r9, d0
 80123c0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80123c4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80123c8:	ed2d 8b02 	vpush	{d8}
 80123cc:	eeb0 8a41 	vmov.f32	s16, s2
 80123d0:	eef0 8a61 	vmov.f32	s17, s3
 80123d4:	da07      	bge.n	80123e6 <__kernel_cos+0x2e>
 80123d6:	ee10 0a10 	vmov	r0, s0
 80123da:	4649      	mov	r1, r9
 80123dc:	f7ee fbd4 	bl	8000b88 <__aeabi_d2iz>
 80123e0:	2800      	cmp	r0, #0
 80123e2:	f000 8089 	beq.w	80124f8 <__kernel_cos+0x140>
 80123e6:	4642      	mov	r2, r8
 80123e8:	464b      	mov	r3, r9
 80123ea:	4640      	mov	r0, r8
 80123ec:	4649      	mov	r1, r9
 80123ee:	f7ee f91b 	bl	8000628 <__aeabi_dmul>
 80123f2:	2200      	movs	r2, #0
 80123f4:	4b4e      	ldr	r3, [pc, #312]	; (8012530 <__kernel_cos+0x178>)
 80123f6:	4604      	mov	r4, r0
 80123f8:	460d      	mov	r5, r1
 80123fa:	f7ee f915 	bl	8000628 <__aeabi_dmul>
 80123fe:	a340      	add	r3, pc, #256	; (adr r3, 8012500 <__kernel_cos+0x148>)
 8012400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012404:	4682      	mov	sl, r0
 8012406:	468b      	mov	fp, r1
 8012408:	4620      	mov	r0, r4
 801240a:	4629      	mov	r1, r5
 801240c:	f7ee f90c 	bl	8000628 <__aeabi_dmul>
 8012410:	a33d      	add	r3, pc, #244	; (adr r3, 8012508 <__kernel_cos+0x150>)
 8012412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012416:	f7ed ff51 	bl	80002bc <__adddf3>
 801241a:	4622      	mov	r2, r4
 801241c:	462b      	mov	r3, r5
 801241e:	f7ee f903 	bl	8000628 <__aeabi_dmul>
 8012422:	a33b      	add	r3, pc, #236	; (adr r3, 8012510 <__kernel_cos+0x158>)
 8012424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012428:	f7ed ff46 	bl	80002b8 <__aeabi_dsub>
 801242c:	4622      	mov	r2, r4
 801242e:	462b      	mov	r3, r5
 8012430:	f7ee f8fa 	bl	8000628 <__aeabi_dmul>
 8012434:	a338      	add	r3, pc, #224	; (adr r3, 8012518 <__kernel_cos+0x160>)
 8012436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801243a:	f7ed ff3f 	bl	80002bc <__adddf3>
 801243e:	4622      	mov	r2, r4
 8012440:	462b      	mov	r3, r5
 8012442:	f7ee f8f1 	bl	8000628 <__aeabi_dmul>
 8012446:	a336      	add	r3, pc, #216	; (adr r3, 8012520 <__kernel_cos+0x168>)
 8012448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801244c:	f7ed ff34 	bl	80002b8 <__aeabi_dsub>
 8012450:	4622      	mov	r2, r4
 8012452:	462b      	mov	r3, r5
 8012454:	f7ee f8e8 	bl	8000628 <__aeabi_dmul>
 8012458:	a333      	add	r3, pc, #204	; (adr r3, 8012528 <__kernel_cos+0x170>)
 801245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801245e:	f7ed ff2d 	bl	80002bc <__adddf3>
 8012462:	4622      	mov	r2, r4
 8012464:	462b      	mov	r3, r5
 8012466:	f7ee f8df 	bl	8000628 <__aeabi_dmul>
 801246a:	4622      	mov	r2, r4
 801246c:	462b      	mov	r3, r5
 801246e:	f7ee f8db 	bl	8000628 <__aeabi_dmul>
 8012472:	ec53 2b18 	vmov	r2, r3, d8
 8012476:	4604      	mov	r4, r0
 8012478:	460d      	mov	r5, r1
 801247a:	4640      	mov	r0, r8
 801247c:	4649      	mov	r1, r9
 801247e:	f7ee f8d3 	bl	8000628 <__aeabi_dmul>
 8012482:	460b      	mov	r3, r1
 8012484:	4602      	mov	r2, r0
 8012486:	4629      	mov	r1, r5
 8012488:	4620      	mov	r0, r4
 801248a:	f7ed ff15 	bl	80002b8 <__aeabi_dsub>
 801248e:	4b29      	ldr	r3, [pc, #164]	; (8012534 <__kernel_cos+0x17c>)
 8012490:	429e      	cmp	r6, r3
 8012492:	4680      	mov	r8, r0
 8012494:	4689      	mov	r9, r1
 8012496:	dc11      	bgt.n	80124bc <__kernel_cos+0x104>
 8012498:	4602      	mov	r2, r0
 801249a:	460b      	mov	r3, r1
 801249c:	4650      	mov	r0, sl
 801249e:	4659      	mov	r1, fp
 80124a0:	f7ed ff0a 	bl	80002b8 <__aeabi_dsub>
 80124a4:	460b      	mov	r3, r1
 80124a6:	4924      	ldr	r1, [pc, #144]	; (8012538 <__kernel_cos+0x180>)
 80124a8:	4602      	mov	r2, r0
 80124aa:	2000      	movs	r0, #0
 80124ac:	f7ed ff04 	bl	80002b8 <__aeabi_dsub>
 80124b0:	ecbd 8b02 	vpop	{d8}
 80124b4:	ec41 0b10 	vmov	d0, r0, r1
 80124b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124bc:	4b1f      	ldr	r3, [pc, #124]	; (801253c <__kernel_cos+0x184>)
 80124be:	491e      	ldr	r1, [pc, #120]	; (8012538 <__kernel_cos+0x180>)
 80124c0:	429e      	cmp	r6, r3
 80124c2:	bfcc      	ite	gt
 80124c4:	4d1e      	ldrgt	r5, [pc, #120]	; (8012540 <__kernel_cos+0x188>)
 80124c6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80124ca:	2400      	movs	r4, #0
 80124cc:	4622      	mov	r2, r4
 80124ce:	462b      	mov	r3, r5
 80124d0:	2000      	movs	r0, #0
 80124d2:	f7ed fef1 	bl	80002b8 <__aeabi_dsub>
 80124d6:	4622      	mov	r2, r4
 80124d8:	4606      	mov	r6, r0
 80124da:	460f      	mov	r7, r1
 80124dc:	462b      	mov	r3, r5
 80124de:	4650      	mov	r0, sl
 80124e0:	4659      	mov	r1, fp
 80124e2:	f7ed fee9 	bl	80002b8 <__aeabi_dsub>
 80124e6:	4642      	mov	r2, r8
 80124e8:	464b      	mov	r3, r9
 80124ea:	f7ed fee5 	bl	80002b8 <__aeabi_dsub>
 80124ee:	4602      	mov	r2, r0
 80124f0:	460b      	mov	r3, r1
 80124f2:	4630      	mov	r0, r6
 80124f4:	4639      	mov	r1, r7
 80124f6:	e7d9      	b.n	80124ac <__kernel_cos+0xf4>
 80124f8:	2000      	movs	r0, #0
 80124fa:	490f      	ldr	r1, [pc, #60]	; (8012538 <__kernel_cos+0x180>)
 80124fc:	e7d8      	b.n	80124b0 <__kernel_cos+0xf8>
 80124fe:	bf00      	nop
 8012500:	be8838d4 	.word	0xbe8838d4
 8012504:	bda8fae9 	.word	0xbda8fae9
 8012508:	bdb4b1c4 	.word	0xbdb4b1c4
 801250c:	3e21ee9e 	.word	0x3e21ee9e
 8012510:	809c52ad 	.word	0x809c52ad
 8012514:	3e927e4f 	.word	0x3e927e4f
 8012518:	19cb1590 	.word	0x19cb1590
 801251c:	3efa01a0 	.word	0x3efa01a0
 8012520:	16c15177 	.word	0x16c15177
 8012524:	3f56c16c 	.word	0x3f56c16c
 8012528:	5555554c 	.word	0x5555554c
 801252c:	3fa55555 	.word	0x3fa55555
 8012530:	3fe00000 	.word	0x3fe00000
 8012534:	3fd33332 	.word	0x3fd33332
 8012538:	3ff00000 	.word	0x3ff00000
 801253c:	3fe90000 	.word	0x3fe90000
 8012540:	3fd20000 	.word	0x3fd20000
 8012544:	00000000 	.word	0x00000000

08012548 <__kernel_rem_pio2>:
 8012548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801254c:	ed2d 8b02 	vpush	{d8}
 8012550:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012554:	1ed4      	subs	r4, r2, #3
 8012556:	9308      	str	r3, [sp, #32]
 8012558:	9101      	str	r1, [sp, #4]
 801255a:	4bc5      	ldr	r3, [pc, #788]	; (8012870 <__kernel_rem_pio2+0x328>)
 801255c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801255e:	9009      	str	r0, [sp, #36]	; 0x24
 8012560:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012564:	9304      	str	r3, [sp, #16]
 8012566:	9b08      	ldr	r3, [sp, #32]
 8012568:	3b01      	subs	r3, #1
 801256a:	9307      	str	r3, [sp, #28]
 801256c:	2318      	movs	r3, #24
 801256e:	fb94 f4f3 	sdiv	r4, r4, r3
 8012572:	f06f 0317 	mvn.w	r3, #23
 8012576:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801257a:	fb04 3303 	mla	r3, r4, r3, r3
 801257e:	eb03 0a02 	add.w	sl, r3, r2
 8012582:	9b04      	ldr	r3, [sp, #16]
 8012584:	9a07      	ldr	r2, [sp, #28]
 8012586:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012860 <__kernel_rem_pio2+0x318>
 801258a:	eb03 0802 	add.w	r8, r3, r2
 801258e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012590:	1aa7      	subs	r7, r4, r2
 8012592:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012596:	ae22      	add	r6, sp, #136	; 0x88
 8012598:	2500      	movs	r5, #0
 801259a:	4545      	cmp	r5, r8
 801259c:	dd13      	ble.n	80125c6 <__kernel_rem_pio2+0x7e>
 801259e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012860 <__kernel_rem_pio2+0x318>
 80125a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80125a6:	2600      	movs	r6, #0
 80125a8:	9b04      	ldr	r3, [sp, #16]
 80125aa:	429e      	cmp	r6, r3
 80125ac:	dc32      	bgt.n	8012614 <__kernel_rem_pio2+0xcc>
 80125ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125b0:	9302      	str	r3, [sp, #8]
 80125b2:	9b08      	ldr	r3, [sp, #32]
 80125b4:	199d      	adds	r5, r3, r6
 80125b6:	ab22      	add	r3, sp, #136	; 0x88
 80125b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80125bc:	9306      	str	r3, [sp, #24]
 80125be:	ec59 8b18 	vmov	r8, r9, d8
 80125c2:	2700      	movs	r7, #0
 80125c4:	e01f      	b.n	8012606 <__kernel_rem_pio2+0xbe>
 80125c6:	42ef      	cmn	r7, r5
 80125c8:	d407      	bmi.n	80125da <__kernel_rem_pio2+0x92>
 80125ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80125ce:	f7ed ffc1 	bl	8000554 <__aeabi_i2d>
 80125d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80125d6:	3501      	adds	r5, #1
 80125d8:	e7df      	b.n	801259a <__kernel_rem_pio2+0x52>
 80125da:	ec51 0b18 	vmov	r0, r1, d8
 80125de:	e7f8      	b.n	80125d2 <__kernel_rem_pio2+0x8a>
 80125e0:	9906      	ldr	r1, [sp, #24]
 80125e2:	9d02      	ldr	r5, [sp, #8]
 80125e4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80125e8:	9106      	str	r1, [sp, #24]
 80125ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80125ee:	9502      	str	r5, [sp, #8]
 80125f0:	f7ee f81a 	bl	8000628 <__aeabi_dmul>
 80125f4:	4602      	mov	r2, r0
 80125f6:	460b      	mov	r3, r1
 80125f8:	4640      	mov	r0, r8
 80125fa:	4649      	mov	r1, r9
 80125fc:	f7ed fe5e 	bl	80002bc <__adddf3>
 8012600:	3701      	adds	r7, #1
 8012602:	4680      	mov	r8, r0
 8012604:	4689      	mov	r9, r1
 8012606:	9b07      	ldr	r3, [sp, #28]
 8012608:	429f      	cmp	r7, r3
 801260a:	dde9      	ble.n	80125e0 <__kernel_rem_pio2+0x98>
 801260c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012610:	3601      	adds	r6, #1
 8012612:	e7c9      	b.n	80125a8 <__kernel_rem_pio2+0x60>
 8012614:	9b04      	ldr	r3, [sp, #16]
 8012616:	aa0e      	add	r2, sp, #56	; 0x38
 8012618:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801261c:	930c      	str	r3, [sp, #48]	; 0x30
 801261e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012620:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012624:	9c04      	ldr	r4, [sp, #16]
 8012626:	930b      	str	r3, [sp, #44]	; 0x2c
 8012628:	ab9a      	add	r3, sp, #616	; 0x268
 801262a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801262e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012632:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012636:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801263a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801263e:	ab9a      	add	r3, sp, #616	; 0x268
 8012640:	445b      	add	r3, fp
 8012642:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8012646:	2500      	movs	r5, #0
 8012648:	1b63      	subs	r3, r4, r5
 801264a:	2b00      	cmp	r3, #0
 801264c:	dc78      	bgt.n	8012740 <__kernel_rem_pio2+0x1f8>
 801264e:	4650      	mov	r0, sl
 8012650:	ec49 8b10 	vmov	d0, r8, r9
 8012654:	f000 fc00 	bl	8012e58 <scalbn>
 8012658:	ec57 6b10 	vmov	r6, r7, d0
 801265c:	2200      	movs	r2, #0
 801265e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012662:	ee10 0a10 	vmov	r0, s0
 8012666:	4639      	mov	r1, r7
 8012668:	f7ed ffde 	bl	8000628 <__aeabi_dmul>
 801266c:	ec41 0b10 	vmov	d0, r0, r1
 8012670:	f000 fb6e 	bl	8012d50 <floor>
 8012674:	2200      	movs	r2, #0
 8012676:	ec51 0b10 	vmov	r0, r1, d0
 801267a:	4b7e      	ldr	r3, [pc, #504]	; (8012874 <__kernel_rem_pio2+0x32c>)
 801267c:	f7ed ffd4 	bl	8000628 <__aeabi_dmul>
 8012680:	4602      	mov	r2, r0
 8012682:	460b      	mov	r3, r1
 8012684:	4630      	mov	r0, r6
 8012686:	4639      	mov	r1, r7
 8012688:	f7ed fe16 	bl	80002b8 <__aeabi_dsub>
 801268c:	460f      	mov	r7, r1
 801268e:	4606      	mov	r6, r0
 8012690:	f7ee fa7a 	bl	8000b88 <__aeabi_d2iz>
 8012694:	9006      	str	r0, [sp, #24]
 8012696:	f7ed ff5d 	bl	8000554 <__aeabi_i2d>
 801269a:	4602      	mov	r2, r0
 801269c:	460b      	mov	r3, r1
 801269e:	4630      	mov	r0, r6
 80126a0:	4639      	mov	r1, r7
 80126a2:	f7ed fe09 	bl	80002b8 <__aeabi_dsub>
 80126a6:	f1ba 0f00 	cmp.w	sl, #0
 80126aa:	4606      	mov	r6, r0
 80126ac:	460f      	mov	r7, r1
 80126ae:	dd6c      	ble.n	801278a <__kernel_rem_pio2+0x242>
 80126b0:	1e62      	subs	r2, r4, #1
 80126b2:	ab0e      	add	r3, sp, #56	; 0x38
 80126b4:	f1ca 0118 	rsb	r1, sl, #24
 80126b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80126bc:	9d06      	ldr	r5, [sp, #24]
 80126be:	fa40 f301 	asr.w	r3, r0, r1
 80126c2:	441d      	add	r5, r3
 80126c4:	408b      	lsls	r3, r1
 80126c6:	1ac0      	subs	r0, r0, r3
 80126c8:	ab0e      	add	r3, sp, #56	; 0x38
 80126ca:	9506      	str	r5, [sp, #24]
 80126cc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80126d0:	f1ca 0317 	rsb	r3, sl, #23
 80126d4:	fa40 f303 	asr.w	r3, r0, r3
 80126d8:	9302      	str	r3, [sp, #8]
 80126da:	9b02      	ldr	r3, [sp, #8]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	dd62      	ble.n	80127a6 <__kernel_rem_pio2+0x25e>
 80126e0:	9b06      	ldr	r3, [sp, #24]
 80126e2:	2200      	movs	r2, #0
 80126e4:	3301      	adds	r3, #1
 80126e6:	9306      	str	r3, [sp, #24]
 80126e8:	4615      	mov	r5, r2
 80126ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80126ee:	4294      	cmp	r4, r2
 80126f0:	f300 8095 	bgt.w	801281e <__kernel_rem_pio2+0x2d6>
 80126f4:	f1ba 0f00 	cmp.w	sl, #0
 80126f8:	dd07      	ble.n	801270a <__kernel_rem_pio2+0x1c2>
 80126fa:	f1ba 0f01 	cmp.w	sl, #1
 80126fe:	f000 80a2 	beq.w	8012846 <__kernel_rem_pio2+0x2fe>
 8012702:	f1ba 0f02 	cmp.w	sl, #2
 8012706:	f000 80c1 	beq.w	801288c <__kernel_rem_pio2+0x344>
 801270a:	9b02      	ldr	r3, [sp, #8]
 801270c:	2b02      	cmp	r3, #2
 801270e:	d14a      	bne.n	80127a6 <__kernel_rem_pio2+0x25e>
 8012710:	4632      	mov	r2, r6
 8012712:	463b      	mov	r3, r7
 8012714:	2000      	movs	r0, #0
 8012716:	4958      	ldr	r1, [pc, #352]	; (8012878 <__kernel_rem_pio2+0x330>)
 8012718:	f7ed fdce 	bl	80002b8 <__aeabi_dsub>
 801271c:	4606      	mov	r6, r0
 801271e:	460f      	mov	r7, r1
 8012720:	2d00      	cmp	r5, #0
 8012722:	d040      	beq.n	80127a6 <__kernel_rem_pio2+0x25e>
 8012724:	4650      	mov	r0, sl
 8012726:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012868 <__kernel_rem_pio2+0x320>
 801272a:	f000 fb95 	bl	8012e58 <scalbn>
 801272e:	4630      	mov	r0, r6
 8012730:	4639      	mov	r1, r7
 8012732:	ec53 2b10 	vmov	r2, r3, d0
 8012736:	f7ed fdbf 	bl	80002b8 <__aeabi_dsub>
 801273a:	4606      	mov	r6, r0
 801273c:	460f      	mov	r7, r1
 801273e:	e032      	b.n	80127a6 <__kernel_rem_pio2+0x25e>
 8012740:	2200      	movs	r2, #0
 8012742:	4b4e      	ldr	r3, [pc, #312]	; (801287c <__kernel_rem_pio2+0x334>)
 8012744:	4640      	mov	r0, r8
 8012746:	4649      	mov	r1, r9
 8012748:	f7ed ff6e 	bl	8000628 <__aeabi_dmul>
 801274c:	f7ee fa1c 	bl	8000b88 <__aeabi_d2iz>
 8012750:	f7ed ff00 	bl	8000554 <__aeabi_i2d>
 8012754:	2200      	movs	r2, #0
 8012756:	4b4a      	ldr	r3, [pc, #296]	; (8012880 <__kernel_rem_pio2+0x338>)
 8012758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801275c:	f7ed ff64 	bl	8000628 <__aeabi_dmul>
 8012760:	4602      	mov	r2, r0
 8012762:	460b      	mov	r3, r1
 8012764:	4640      	mov	r0, r8
 8012766:	4649      	mov	r1, r9
 8012768:	f7ed fda6 	bl	80002b8 <__aeabi_dsub>
 801276c:	f7ee fa0c 	bl	8000b88 <__aeabi_d2iz>
 8012770:	ab0e      	add	r3, sp, #56	; 0x38
 8012772:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012776:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801277a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801277e:	f7ed fd9d 	bl	80002bc <__adddf3>
 8012782:	3501      	adds	r5, #1
 8012784:	4680      	mov	r8, r0
 8012786:	4689      	mov	r9, r1
 8012788:	e75e      	b.n	8012648 <__kernel_rem_pio2+0x100>
 801278a:	d105      	bne.n	8012798 <__kernel_rem_pio2+0x250>
 801278c:	1e63      	subs	r3, r4, #1
 801278e:	aa0e      	add	r2, sp, #56	; 0x38
 8012790:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012794:	15c3      	asrs	r3, r0, #23
 8012796:	e79f      	b.n	80126d8 <__kernel_rem_pio2+0x190>
 8012798:	2200      	movs	r2, #0
 801279a:	4b3a      	ldr	r3, [pc, #232]	; (8012884 <__kernel_rem_pio2+0x33c>)
 801279c:	f7ee f9ca 	bl	8000b34 <__aeabi_dcmpge>
 80127a0:	2800      	cmp	r0, #0
 80127a2:	d139      	bne.n	8012818 <__kernel_rem_pio2+0x2d0>
 80127a4:	9002      	str	r0, [sp, #8]
 80127a6:	2200      	movs	r2, #0
 80127a8:	2300      	movs	r3, #0
 80127aa:	4630      	mov	r0, r6
 80127ac:	4639      	mov	r1, r7
 80127ae:	f7ee f9a3 	bl	8000af8 <__aeabi_dcmpeq>
 80127b2:	2800      	cmp	r0, #0
 80127b4:	f000 80c7 	beq.w	8012946 <__kernel_rem_pio2+0x3fe>
 80127b8:	1e65      	subs	r5, r4, #1
 80127ba:	462b      	mov	r3, r5
 80127bc:	2200      	movs	r2, #0
 80127be:	9904      	ldr	r1, [sp, #16]
 80127c0:	428b      	cmp	r3, r1
 80127c2:	da6a      	bge.n	801289a <__kernel_rem_pio2+0x352>
 80127c4:	2a00      	cmp	r2, #0
 80127c6:	f000 8088 	beq.w	80128da <__kernel_rem_pio2+0x392>
 80127ca:	ab0e      	add	r3, sp, #56	; 0x38
 80127cc:	f1aa 0a18 	sub.w	sl, sl, #24
 80127d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	f000 80b4 	beq.w	8012942 <__kernel_rem_pio2+0x3fa>
 80127da:	4650      	mov	r0, sl
 80127dc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012868 <__kernel_rem_pio2+0x320>
 80127e0:	f000 fb3a 	bl	8012e58 <scalbn>
 80127e4:	00ec      	lsls	r4, r5, #3
 80127e6:	ab72      	add	r3, sp, #456	; 0x1c8
 80127e8:	191e      	adds	r6, r3, r4
 80127ea:	ec59 8b10 	vmov	r8, r9, d0
 80127ee:	f106 0a08 	add.w	sl, r6, #8
 80127f2:	462f      	mov	r7, r5
 80127f4:	2f00      	cmp	r7, #0
 80127f6:	f280 80df 	bge.w	80129b8 <__kernel_rem_pio2+0x470>
 80127fa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012860 <__kernel_rem_pio2+0x318>
 80127fe:	f04f 0a00 	mov.w	sl, #0
 8012802:	eba5 030a 	sub.w	r3, r5, sl
 8012806:	2b00      	cmp	r3, #0
 8012808:	f2c0 810a 	blt.w	8012a20 <__kernel_rem_pio2+0x4d8>
 801280c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012888 <__kernel_rem_pio2+0x340>
 8012810:	ec59 8b18 	vmov	r8, r9, d8
 8012814:	2700      	movs	r7, #0
 8012816:	e0f5      	b.n	8012a04 <__kernel_rem_pio2+0x4bc>
 8012818:	2302      	movs	r3, #2
 801281a:	9302      	str	r3, [sp, #8]
 801281c:	e760      	b.n	80126e0 <__kernel_rem_pio2+0x198>
 801281e:	ab0e      	add	r3, sp, #56	; 0x38
 8012820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012824:	b94d      	cbnz	r5, 801283a <__kernel_rem_pio2+0x2f2>
 8012826:	b12b      	cbz	r3, 8012834 <__kernel_rem_pio2+0x2ec>
 8012828:	a80e      	add	r0, sp, #56	; 0x38
 801282a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801282e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012832:	2301      	movs	r3, #1
 8012834:	3201      	adds	r2, #1
 8012836:	461d      	mov	r5, r3
 8012838:	e759      	b.n	80126ee <__kernel_rem_pio2+0x1a6>
 801283a:	a80e      	add	r0, sp, #56	; 0x38
 801283c:	1acb      	subs	r3, r1, r3
 801283e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012842:	462b      	mov	r3, r5
 8012844:	e7f6      	b.n	8012834 <__kernel_rem_pio2+0x2ec>
 8012846:	1e62      	subs	r2, r4, #1
 8012848:	ab0e      	add	r3, sp, #56	; 0x38
 801284a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801284e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012852:	a90e      	add	r1, sp, #56	; 0x38
 8012854:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012858:	e757      	b.n	801270a <__kernel_rem_pio2+0x1c2>
 801285a:	bf00      	nop
 801285c:	f3af 8000 	nop.w
	...
 801286c:	3ff00000 	.word	0x3ff00000
 8012870:	080164f8 	.word	0x080164f8
 8012874:	40200000 	.word	0x40200000
 8012878:	3ff00000 	.word	0x3ff00000
 801287c:	3e700000 	.word	0x3e700000
 8012880:	41700000 	.word	0x41700000
 8012884:	3fe00000 	.word	0x3fe00000
 8012888:	080164b8 	.word	0x080164b8
 801288c:	1e62      	subs	r2, r4, #1
 801288e:	ab0e      	add	r3, sp, #56	; 0x38
 8012890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012894:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012898:	e7db      	b.n	8012852 <__kernel_rem_pio2+0x30a>
 801289a:	a90e      	add	r1, sp, #56	; 0x38
 801289c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80128a0:	3b01      	subs	r3, #1
 80128a2:	430a      	orrs	r2, r1
 80128a4:	e78b      	b.n	80127be <__kernel_rem_pio2+0x276>
 80128a6:	3301      	adds	r3, #1
 80128a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80128ac:	2900      	cmp	r1, #0
 80128ae:	d0fa      	beq.n	80128a6 <__kernel_rem_pio2+0x35e>
 80128b0:	9a08      	ldr	r2, [sp, #32]
 80128b2:	4422      	add	r2, r4
 80128b4:	00d2      	lsls	r2, r2, #3
 80128b6:	a922      	add	r1, sp, #136	; 0x88
 80128b8:	18e3      	adds	r3, r4, r3
 80128ba:	9206      	str	r2, [sp, #24]
 80128bc:	440a      	add	r2, r1
 80128be:	9302      	str	r3, [sp, #8]
 80128c0:	f10b 0108 	add.w	r1, fp, #8
 80128c4:	f102 0308 	add.w	r3, r2, #8
 80128c8:	1c66      	adds	r6, r4, #1
 80128ca:	910a      	str	r1, [sp, #40]	; 0x28
 80128cc:	2500      	movs	r5, #0
 80128ce:	930d      	str	r3, [sp, #52]	; 0x34
 80128d0:	9b02      	ldr	r3, [sp, #8]
 80128d2:	42b3      	cmp	r3, r6
 80128d4:	da04      	bge.n	80128e0 <__kernel_rem_pio2+0x398>
 80128d6:	461c      	mov	r4, r3
 80128d8:	e6a6      	b.n	8012628 <__kernel_rem_pio2+0xe0>
 80128da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80128dc:	2301      	movs	r3, #1
 80128de:	e7e3      	b.n	80128a8 <__kernel_rem_pio2+0x360>
 80128e0:	9b06      	ldr	r3, [sp, #24]
 80128e2:	18ef      	adds	r7, r5, r3
 80128e4:	ab22      	add	r3, sp, #136	; 0x88
 80128e6:	441f      	add	r7, r3
 80128e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80128ee:	f7ed fe31 	bl	8000554 <__aeabi_i2d>
 80128f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128f4:	461c      	mov	r4, r3
 80128f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128f8:	e9c7 0100 	strd	r0, r1, [r7]
 80128fc:	eb03 0b05 	add.w	fp, r3, r5
 8012900:	2700      	movs	r7, #0
 8012902:	f04f 0800 	mov.w	r8, #0
 8012906:	f04f 0900 	mov.w	r9, #0
 801290a:	9b07      	ldr	r3, [sp, #28]
 801290c:	429f      	cmp	r7, r3
 801290e:	dd08      	ble.n	8012922 <__kernel_rem_pio2+0x3da>
 8012910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012912:	aa72      	add	r2, sp, #456	; 0x1c8
 8012914:	18eb      	adds	r3, r5, r3
 8012916:	4413      	add	r3, r2
 8012918:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801291c:	3601      	adds	r6, #1
 801291e:	3508      	adds	r5, #8
 8012920:	e7d6      	b.n	80128d0 <__kernel_rem_pio2+0x388>
 8012922:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012926:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801292a:	f7ed fe7d 	bl	8000628 <__aeabi_dmul>
 801292e:	4602      	mov	r2, r0
 8012930:	460b      	mov	r3, r1
 8012932:	4640      	mov	r0, r8
 8012934:	4649      	mov	r1, r9
 8012936:	f7ed fcc1 	bl	80002bc <__adddf3>
 801293a:	3701      	adds	r7, #1
 801293c:	4680      	mov	r8, r0
 801293e:	4689      	mov	r9, r1
 8012940:	e7e3      	b.n	801290a <__kernel_rem_pio2+0x3c2>
 8012942:	3d01      	subs	r5, #1
 8012944:	e741      	b.n	80127ca <__kernel_rem_pio2+0x282>
 8012946:	f1ca 0000 	rsb	r0, sl, #0
 801294a:	ec47 6b10 	vmov	d0, r6, r7
 801294e:	f000 fa83 	bl	8012e58 <scalbn>
 8012952:	ec57 6b10 	vmov	r6, r7, d0
 8012956:	2200      	movs	r2, #0
 8012958:	4b99      	ldr	r3, [pc, #612]	; (8012bc0 <__kernel_rem_pio2+0x678>)
 801295a:	ee10 0a10 	vmov	r0, s0
 801295e:	4639      	mov	r1, r7
 8012960:	f7ee f8e8 	bl	8000b34 <__aeabi_dcmpge>
 8012964:	b1f8      	cbz	r0, 80129a6 <__kernel_rem_pio2+0x45e>
 8012966:	2200      	movs	r2, #0
 8012968:	4b96      	ldr	r3, [pc, #600]	; (8012bc4 <__kernel_rem_pio2+0x67c>)
 801296a:	4630      	mov	r0, r6
 801296c:	4639      	mov	r1, r7
 801296e:	f7ed fe5b 	bl	8000628 <__aeabi_dmul>
 8012972:	f7ee f909 	bl	8000b88 <__aeabi_d2iz>
 8012976:	4680      	mov	r8, r0
 8012978:	f7ed fdec 	bl	8000554 <__aeabi_i2d>
 801297c:	2200      	movs	r2, #0
 801297e:	4b90      	ldr	r3, [pc, #576]	; (8012bc0 <__kernel_rem_pio2+0x678>)
 8012980:	f7ed fe52 	bl	8000628 <__aeabi_dmul>
 8012984:	460b      	mov	r3, r1
 8012986:	4602      	mov	r2, r0
 8012988:	4639      	mov	r1, r7
 801298a:	4630      	mov	r0, r6
 801298c:	f7ed fc94 	bl	80002b8 <__aeabi_dsub>
 8012990:	f7ee f8fa 	bl	8000b88 <__aeabi_d2iz>
 8012994:	1c65      	adds	r5, r4, #1
 8012996:	ab0e      	add	r3, sp, #56	; 0x38
 8012998:	f10a 0a18 	add.w	sl, sl, #24
 801299c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80129a0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80129a4:	e719      	b.n	80127da <__kernel_rem_pio2+0x292>
 80129a6:	4630      	mov	r0, r6
 80129a8:	4639      	mov	r1, r7
 80129aa:	f7ee f8ed 	bl	8000b88 <__aeabi_d2iz>
 80129ae:	ab0e      	add	r3, sp, #56	; 0x38
 80129b0:	4625      	mov	r5, r4
 80129b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80129b6:	e710      	b.n	80127da <__kernel_rem_pio2+0x292>
 80129b8:	ab0e      	add	r3, sp, #56	; 0x38
 80129ba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80129be:	f7ed fdc9 	bl	8000554 <__aeabi_i2d>
 80129c2:	4642      	mov	r2, r8
 80129c4:	464b      	mov	r3, r9
 80129c6:	f7ed fe2f 	bl	8000628 <__aeabi_dmul>
 80129ca:	2200      	movs	r2, #0
 80129cc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80129d0:	4b7c      	ldr	r3, [pc, #496]	; (8012bc4 <__kernel_rem_pio2+0x67c>)
 80129d2:	4640      	mov	r0, r8
 80129d4:	4649      	mov	r1, r9
 80129d6:	f7ed fe27 	bl	8000628 <__aeabi_dmul>
 80129da:	3f01      	subs	r7, #1
 80129dc:	4680      	mov	r8, r0
 80129de:	4689      	mov	r9, r1
 80129e0:	e708      	b.n	80127f4 <__kernel_rem_pio2+0x2ac>
 80129e2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80129e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80129ee:	f7ed fe1b 	bl	8000628 <__aeabi_dmul>
 80129f2:	4602      	mov	r2, r0
 80129f4:	460b      	mov	r3, r1
 80129f6:	4640      	mov	r0, r8
 80129f8:	4649      	mov	r1, r9
 80129fa:	f7ed fc5f 	bl	80002bc <__adddf3>
 80129fe:	3701      	adds	r7, #1
 8012a00:	4680      	mov	r8, r0
 8012a02:	4689      	mov	r9, r1
 8012a04:	9b04      	ldr	r3, [sp, #16]
 8012a06:	429f      	cmp	r7, r3
 8012a08:	dc01      	bgt.n	8012a0e <__kernel_rem_pio2+0x4c6>
 8012a0a:	45ba      	cmp	sl, r7
 8012a0c:	dae9      	bge.n	80129e2 <__kernel_rem_pio2+0x49a>
 8012a0e:	ab4a      	add	r3, sp, #296	; 0x128
 8012a10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012a14:	e9c3 8900 	strd	r8, r9, [r3]
 8012a18:	f10a 0a01 	add.w	sl, sl, #1
 8012a1c:	3e08      	subs	r6, #8
 8012a1e:	e6f0      	b.n	8012802 <__kernel_rem_pio2+0x2ba>
 8012a20:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012a22:	2b03      	cmp	r3, #3
 8012a24:	d85b      	bhi.n	8012ade <__kernel_rem_pio2+0x596>
 8012a26:	e8df f003 	tbb	[pc, r3]
 8012a2a:	264a      	.short	0x264a
 8012a2c:	0226      	.short	0x0226
 8012a2e:	ab9a      	add	r3, sp, #616	; 0x268
 8012a30:	441c      	add	r4, r3
 8012a32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012a36:	46a2      	mov	sl, r4
 8012a38:	46ab      	mov	fp, r5
 8012a3a:	f1bb 0f00 	cmp.w	fp, #0
 8012a3e:	dc6c      	bgt.n	8012b1a <__kernel_rem_pio2+0x5d2>
 8012a40:	46a2      	mov	sl, r4
 8012a42:	46ab      	mov	fp, r5
 8012a44:	f1bb 0f01 	cmp.w	fp, #1
 8012a48:	f300 8086 	bgt.w	8012b58 <__kernel_rem_pio2+0x610>
 8012a4c:	2000      	movs	r0, #0
 8012a4e:	2100      	movs	r1, #0
 8012a50:	2d01      	cmp	r5, #1
 8012a52:	f300 80a0 	bgt.w	8012b96 <__kernel_rem_pio2+0x64e>
 8012a56:	9b02      	ldr	r3, [sp, #8]
 8012a58:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012a5c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	f040 809e 	bne.w	8012ba2 <__kernel_rem_pio2+0x65a>
 8012a66:	9b01      	ldr	r3, [sp, #4]
 8012a68:	e9c3 7800 	strd	r7, r8, [r3]
 8012a6c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012a70:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012a74:	e033      	b.n	8012ade <__kernel_rem_pio2+0x596>
 8012a76:	3408      	adds	r4, #8
 8012a78:	ab4a      	add	r3, sp, #296	; 0x128
 8012a7a:	441c      	add	r4, r3
 8012a7c:	462e      	mov	r6, r5
 8012a7e:	2000      	movs	r0, #0
 8012a80:	2100      	movs	r1, #0
 8012a82:	2e00      	cmp	r6, #0
 8012a84:	da3a      	bge.n	8012afc <__kernel_rem_pio2+0x5b4>
 8012a86:	9b02      	ldr	r3, [sp, #8]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d03d      	beq.n	8012b08 <__kernel_rem_pio2+0x5c0>
 8012a8c:	4602      	mov	r2, r0
 8012a8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a92:	9c01      	ldr	r4, [sp, #4]
 8012a94:	e9c4 2300 	strd	r2, r3, [r4]
 8012a98:	4602      	mov	r2, r0
 8012a9a:	460b      	mov	r3, r1
 8012a9c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012aa0:	f7ed fc0a 	bl	80002b8 <__aeabi_dsub>
 8012aa4:	ae4c      	add	r6, sp, #304	; 0x130
 8012aa6:	2401      	movs	r4, #1
 8012aa8:	42a5      	cmp	r5, r4
 8012aaa:	da30      	bge.n	8012b0e <__kernel_rem_pio2+0x5c6>
 8012aac:	9b02      	ldr	r3, [sp, #8]
 8012aae:	b113      	cbz	r3, 8012ab6 <__kernel_rem_pio2+0x56e>
 8012ab0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ab4:	4619      	mov	r1, r3
 8012ab6:	9b01      	ldr	r3, [sp, #4]
 8012ab8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012abc:	e00f      	b.n	8012ade <__kernel_rem_pio2+0x596>
 8012abe:	ab9a      	add	r3, sp, #616	; 0x268
 8012ac0:	441c      	add	r4, r3
 8012ac2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012ac6:	2000      	movs	r0, #0
 8012ac8:	2100      	movs	r1, #0
 8012aca:	2d00      	cmp	r5, #0
 8012acc:	da10      	bge.n	8012af0 <__kernel_rem_pio2+0x5a8>
 8012ace:	9b02      	ldr	r3, [sp, #8]
 8012ad0:	b113      	cbz	r3, 8012ad8 <__kernel_rem_pio2+0x590>
 8012ad2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	9b01      	ldr	r3, [sp, #4]
 8012ada:	e9c3 0100 	strd	r0, r1, [r3]
 8012ade:	9b06      	ldr	r3, [sp, #24]
 8012ae0:	f003 0007 	and.w	r0, r3, #7
 8012ae4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012ae8:	ecbd 8b02 	vpop	{d8}
 8012aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012af0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012af4:	f7ed fbe2 	bl	80002bc <__adddf3>
 8012af8:	3d01      	subs	r5, #1
 8012afa:	e7e6      	b.n	8012aca <__kernel_rem_pio2+0x582>
 8012afc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b00:	f7ed fbdc 	bl	80002bc <__adddf3>
 8012b04:	3e01      	subs	r6, #1
 8012b06:	e7bc      	b.n	8012a82 <__kernel_rem_pio2+0x53a>
 8012b08:	4602      	mov	r2, r0
 8012b0a:	460b      	mov	r3, r1
 8012b0c:	e7c1      	b.n	8012a92 <__kernel_rem_pio2+0x54a>
 8012b0e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012b12:	f7ed fbd3 	bl	80002bc <__adddf3>
 8012b16:	3401      	adds	r4, #1
 8012b18:	e7c6      	b.n	8012aa8 <__kernel_rem_pio2+0x560>
 8012b1a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8012b1e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012b22:	4640      	mov	r0, r8
 8012b24:	ec53 2b17 	vmov	r2, r3, d7
 8012b28:	4649      	mov	r1, r9
 8012b2a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012b2e:	f7ed fbc5 	bl	80002bc <__adddf3>
 8012b32:	4602      	mov	r2, r0
 8012b34:	460b      	mov	r3, r1
 8012b36:	4606      	mov	r6, r0
 8012b38:	460f      	mov	r7, r1
 8012b3a:	4640      	mov	r0, r8
 8012b3c:	4649      	mov	r1, r9
 8012b3e:	f7ed fbbb 	bl	80002b8 <__aeabi_dsub>
 8012b42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b46:	f7ed fbb9 	bl	80002bc <__adddf3>
 8012b4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012b4e:	e9ca 0100 	strd	r0, r1, [sl]
 8012b52:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8012b56:	e770      	b.n	8012a3a <__kernel_rem_pio2+0x4f2>
 8012b58:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012b5c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012b60:	4630      	mov	r0, r6
 8012b62:	ec53 2b17 	vmov	r2, r3, d7
 8012b66:	4639      	mov	r1, r7
 8012b68:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012b6c:	f7ed fba6 	bl	80002bc <__adddf3>
 8012b70:	4602      	mov	r2, r0
 8012b72:	460b      	mov	r3, r1
 8012b74:	4680      	mov	r8, r0
 8012b76:	4689      	mov	r9, r1
 8012b78:	4630      	mov	r0, r6
 8012b7a:	4639      	mov	r1, r7
 8012b7c:	f7ed fb9c 	bl	80002b8 <__aeabi_dsub>
 8012b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b84:	f7ed fb9a 	bl	80002bc <__adddf3>
 8012b88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012b8c:	e9ca 0100 	strd	r0, r1, [sl]
 8012b90:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8012b94:	e756      	b.n	8012a44 <__kernel_rem_pio2+0x4fc>
 8012b96:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b9a:	f7ed fb8f 	bl	80002bc <__adddf3>
 8012b9e:	3d01      	subs	r5, #1
 8012ba0:	e756      	b.n	8012a50 <__kernel_rem_pio2+0x508>
 8012ba2:	9b01      	ldr	r3, [sp, #4]
 8012ba4:	9a01      	ldr	r2, [sp, #4]
 8012ba6:	601f      	str	r7, [r3, #0]
 8012ba8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012bac:	605c      	str	r4, [r3, #4]
 8012bae:	609d      	str	r5, [r3, #8]
 8012bb0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012bb4:	60d3      	str	r3, [r2, #12]
 8012bb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012bba:	6110      	str	r0, [r2, #16]
 8012bbc:	6153      	str	r3, [r2, #20]
 8012bbe:	e78e      	b.n	8012ade <__kernel_rem_pio2+0x596>
 8012bc0:	41700000 	.word	0x41700000
 8012bc4:	3e700000 	.word	0x3e700000

08012bc8 <__kernel_sin>:
 8012bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bcc:	ec55 4b10 	vmov	r4, r5, d0
 8012bd0:	b085      	sub	sp, #20
 8012bd2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012bd6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012bda:	ed8d 1b00 	vstr	d1, [sp]
 8012bde:	9002      	str	r0, [sp, #8]
 8012be0:	da06      	bge.n	8012bf0 <__kernel_sin+0x28>
 8012be2:	ee10 0a10 	vmov	r0, s0
 8012be6:	4629      	mov	r1, r5
 8012be8:	f7ed ffce 	bl	8000b88 <__aeabi_d2iz>
 8012bec:	2800      	cmp	r0, #0
 8012bee:	d051      	beq.n	8012c94 <__kernel_sin+0xcc>
 8012bf0:	4622      	mov	r2, r4
 8012bf2:	462b      	mov	r3, r5
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	4629      	mov	r1, r5
 8012bf8:	f7ed fd16 	bl	8000628 <__aeabi_dmul>
 8012bfc:	4682      	mov	sl, r0
 8012bfe:	468b      	mov	fp, r1
 8012c00:	4602      	mov	r2, r0
 8012c02:	460b      	mov	r3, r1
 8012c04:	4620      	mov	r0, r4
 8012c06:	4629      	mov	r1, r5
 8012c08:	f7ed fd0e 	bl	8000628 <__aeabi_dmul>
 8012c0c:	a341      	add	r3, pc, #260	; (adr r3, 8012d14 <__kernel_sin+0x14c>)
 8012c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c12:	4680      	mov	r8, r0
 8012c14:	4689      	mov	r9, r1
 8012c16:	4650      	mov	r0, sl
 8012c18:	4659      	mov	r1, fp
 8012c1a:	f7ed fd05 	bl	8000628 <__aeabi_dmul>
 8012c1e:	a33f      	add	r3, pc, #252	; (adr r3, 8012d1c <__kernel_sin+0x154>)
 8012c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c24:	f7ed fb48 	bl	80002b8 <__aeabi_dsub>
 8012c28:	4652      	mov	r2, sl
 8012c2a:	465b      	mov	r3, fp
 8012c2c:	f7ed fcfc 	bl	8000628 <__aeabi_dmul>
 8012c30:	a33c      	add	r3, pc, #240	; (adr r3, 8012d24 <__kernel_sin+0x15c>)
 8012c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c36:	f7ed fb41 	bl	80002bc <__adddf3>
 8012c3a:	4652      	mov	r2, sl
 8012c3c:	465b      	mov	r3, fp
 8012c3e:	f7ed fcf3 	bl	8000628 <__aeabi_dmul>
 8012c42:	a33a      	add	r3, pc, #232	; (adr r3, 8012d2c <__kernel_sin+0x164>)
 8012c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c48:	f7ed fb36 	bl	80002b8 <__aeabi_dsub>
 8012c4c:	4652      	mov	r2, sl
 8012c4e:	465b      	mov	r3, fp
 8012c50:	f7ed fcea 	bl	8000628 <__aeabi_dmul>
 8012c54:	a337      	add	r3, pc, #220	; (adr r3, 8012d34 <__kernel_sin+0x16c>)
 8012c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c5a:	f7ed fb2f 	bl	80002bc <__adddf3>
 8012c5e:	9b02      	ldr	r3, [sp, #8]
 8012c60:	4606      	mov	r6, r0
 8012c62:	460f      	mov	r7, r1
 8012c64:	b9db      	cbnz	r3, 8012c9e <__kernel_sin+0xd6>
 8012c66:	4602      	mov	r2, r0
 8012c68:	460b      	mov	r3, r1
 8012c6a:	4650      	mov	r0, sl
 8012c6c:	4659      	mov	r1, fp
 8012c6e:	f7ed fcdb 	bl	8000628 <__aeabi_dmul>
 8012c72:	a325      	add	r3, pc, #148	; (adr r3, 8012d08 <__kernel_sin+0x140>)
 8012c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c78:	f7ed fb1e 	bl	80002b8 <__aeabi_dsub>
 8012c7c:	4642      	mov	r2, r8
 8012c7e:	464b      	mov	r3, r9
 8012c80:	f7ed fcd2 	bl	8000628 <__aeabi_dmul>
 8012c84:	4602      	mov	r2, r0
 8012c86:	460b      	mov	r3, r1
 8012c88:	4620      	mov	r0, r4
 8012c8a:	4629      	mov	r1, r5
 8012c8c:	f7ed fb16 	bl	80002bc <__adddf3>
 8012c90:	4604      	mov	r4, r0
 8012c92:	460d      	mov	r5, r1
 8012c94:	ec45 4b10 	vmov	d0, r4, r5
 8012c98:	b005      	add	sp, #20
 8012c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	4b1b      	ldr	r3, [pc, #108]	; (8012d10 <__kernel_sin+0x148>)
 8012ca2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ca6:	f7ed fcbf 	bl	8000628 <__aeabi_dmul>
 8012caa:	4632      	mov	r2, r6
 8012cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012cb0:	463b      	mov	r3, r7
 8012cb2:	4640      	mov	r0, r8
 8012cb4:	4649      	mov	r1, r9
 8012cb6:	f7ed fcb7 	bl	8000628 <__aeabi_dmul>
 8012cba:	4602      	mov	r2, r0
 8012cbc:	460b      	mov	r3, r1
 8012cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cc2:	f7ed faf9 	bl	80002b8 <__aeabi_dsub>
 8012cc6:	4652      	mov	r2, sl
 8012cc8:	465b      	mov	r3, fp
 8012cca:	f7ed fcad 	bl	8000628 <__aeabi_dmul>
 8012cce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012cd2:	f7ed faf1 	bl	80002b8 <__aeabi_dsub>
 8012cd6:	a30c      	add	r3, pc, #48	; (adr r3, 8012d08 <__kernel_sin+0x140>)
 8012cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cdc:	4606      	mov	r6, r0
 8012cde:	460f      	mov	r7, r1
 8012ce0:	4640      	mov	r0, r8
 8012ce2:	4649      	mov	r1, r9
 8012ce4:	f7ed fca0 	bl	8000628 <__aeabi_dmul>
 8012ce8:	4602      	mov	r2, r0
 8012cea:	460b      	mov	r3, r1
 8012cec:	4630      	mov	r0, r6
 8012cee:	4639      	mov	r1, r7
 8012cf0:	f7ed fae4 	bl	80002bc <__adddf3>
 8012cf4:	4602      	mov	r2, r0
 8012cf6:	460b      	mov	r3, r1
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	4629      	mov	r1, r5
 8012cfc:	f7ed fadc 	bl	80002b8 <__aeabi_dsub>
 8012d00:	e7c6      	b.n	8012c90 <__kernel_sin+0xc8>
 8012d02:	bf00      	nop
 8012d04:	f3af 8000 	nop.w
 8012d08:	55555549 	.word	0x55555549
 8012d0c:	3fc55555 	.word	0x3fc55555
 8012d10:	3fe00000 	.word	0x3fe00000
 8012d14:	5acfd57c 	.word	0x5acfd57c
 8012d18:	3de5d93a 	.word	0x3de5d93a
 8012d1c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012d20:	3e5ae5e6 	.word	0x3e5ae5e6
 8012d24:	57b1fe7d 	.word	0x57b1fe7d
 8012d28:	3ec71de3 	.word	0x3ec71de3
 8012d2c:	19c161d5 	.word	0x19c161d5
 8012d30:	3f2a01a0 	.word	0x3f2a01a0
 8012d34:	1110f8a6 	.word	0x1110f8a6
 8012d38:	3f811111 	.word	0x3f811111

08012d3c <fabs>:
 8012d3c:	ec51 0b10 	vmov	r0, r1, d0
 8012d40:	ee10 2a10 	vmov	r2, s0
 8012d44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012d48:	ec43 2b10 	vmov	d0, r2, r3
 8012d4c:	4770      	bx	lr
	...

08012d50 <floor>:
 8012d50:	ec51 0b10 	vmov	r0, r1, d0
 8012d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d58:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012d5c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012d60:	2e13      	cmp	r6, #19
 8012d62:	460c      	mov	r4, r1
 8012d64:	ee10 5a10 	vmov	r5, s0
 8012d68:	4680      	mov	r8, r0
 8012d6a:	dc34      	bgt.n	8012dd6 <floor+0x86>
 8012d6c:	2e00      	cmp	r6, #0
 8012d6e:	da16      	bge.n	8012d9e <floor+0x4e>
 8012d70:	a335      	add	r3, pc, #212	; (adr r3, 8012e48 <floor+0xf8>)
 8012d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d76:	f7ed faa1 	bl	80002bc <__adddf3>
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	f7ed fee3 	bl	8000b48 <__aeabi_dcmpgt>
 8012d82:	b148      	cbz	r0, 8012d98 <floor+0x48>
 8012d84:	2c00      	cmp	r4, #0
 8012d86:	da59      	bge.n	8012e3c <floor+0xec>
 8012d88:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012d8c:	4a30      	ldr	r2, [pc, #192]	; (8012e50 <floor+0x100>)
 8012d8e:	432b      	orrs	r3, r5
 8012d90:	2500      	movs	r5, #0
 8012d92:	42ab      	cmp	r3, r5
 8012d94:	bf18      	it	ne
 8012d96:	4614      	movne	r4, r2
 8012d98:	4621      	mov	r1, r4
 8012d9a:	4628      	mov	r0, r5
 8012d9c:	e025      	b.n	8012dea <floor+0x9a>
 8012d9e:	4f2d      	ldr	r7, [pc, #180]	; (8012e54 <floor+0x104>)
 8012da0:	4137      	asrs	r7, r6
 8012da2:	ea01 0307 	and.w	r3, r1, r7
 8012da6:	4303      	orrs	r3, r0
 8012da8:	d01f      	beq.n	8012dea <floor+0x9a>
 8012daa:	a327      	add	r3, pc, #156	; (adr r3, 8012e48 <floor+0xf8>)
 8012dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012db0:	f7ed fa84 	bl	80002bc <__adddf3>
 8012db4:	2200      	movs	r2, #0
 8012db6:	2300      	movs	r3, #0
 8012db8:	f7ed fec6 	bl	8000b48 <__aeabi_dcmpgt>
 8012dbc:	2800      	cmp	r0, #0
 8012dbe:	d0eb      	beq.n	8012d98 <floor+0x48>
 8012dc0:	2c00      	cmp	r4, #0
 8012dc2:	bfbe      	ittt	lt
 8012dc4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012dc8:	fa43 f606 	asrlt.w	r6, r3, r6
 8012dcc:	19a4      	addlt	r4, r4, r6
 8012dce:	ea24 0407 	bic.w	r4, r4, r7
 8012dd2:	2500      	movs	r5, #0
 8012dd4:	e7e0      	b.n	8012d98 <floor+0x48>
 8012dd6:	2e33      	cmp	r6, #51	; 0x33
 8012dd8:	dd0b      	ble.n	8012df2 <floor+0xa2>
 8012dda:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012dde:	d104      	bne.n	8012dea <floor+0x9a>
 8012de0:	ee10 2a10 	vmov	r2, s0
 8012de4:	460b      	mov	r3, r1
 8012de6:	f7ed fa69 	bl	80002bc <__adddf3>
 8012dea:	ec41 0b10 	vmov	d0, r0, r1
 8012dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012df2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012df6:	f04f 33ff 	mov.w	r3, #4294967295
 8012dfa:	fa23 f707 	lsr.w	r7, r3, r7
 8012dfe:	4207      	tst	r7, r0
 8012e00:	d0f3      	beq.n	8012dea <floor+0x9a>
 8012e02:	a311      	add	r3, pc, #68	; (adr r3, 8012e48 <floor+0xf8>)
 8012e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e08:	f7ed fa58 	bl	80002bc <__adddf3>
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	2300      	movs	r3, #0
 8012e10:	f7ed fe9a 	bl	8000b48 <__aeabi_dcmpgt>
 8012e14:	2800      	cmp	r0, #0
 8012e16:	d0bf      	beq.n	8012d98 <floor+0x48>
 8012e18:	2c00      	cmp	r4, #0
 8012e1a:	da02      	bge.n	8012e22 <floor+0xd2>
 8012e1c:	2e14      	cmp	r6, #20
 8012e1e:	d103      	bne.n	8012e28 <floor+0xd8>
 8012e20:	3401      	adds	r4, #1
 8012e22:	ea25 0507 	bic.w	r5, r5, r7
 8012e26:	e7b7      	b.n	8012d98 <floor+0x48>
 8012e28:	2301      	movs	r3, #1
 8012e2a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012e2e:	fa03 f606 	lsl.w	r6, r3, r6
 8012e32:	4435      	add	r5, r6
 8012e34:	4545      	cmp	r5, r8
 8012e36:	bf38      	it	cc
 8012e38:	18e4      	addcc	r4, r4, r3
 8012e3a:	e7f2      	b.n	8012e22 <floor+0xd2>
 8012e3c:	2500      	movs	r5, #0
 8012e3e:	462c      	mov	r4, r5
 8012e40:	e7aa      	b.n	8012d98 <floor+0x48>
 8012e42:	bf00      	nop
 8012e44:	f3af 8000 	nop.w
 8012e48:	8800759c 	.word	0x8800759c
 8012e4c:	7e37e43c 	.word	0x7e37e43c
 8012e50:	bff00000 	.word	0xbff00000
 8012e54:	000fffff 	.word	0x000fffff

08012e58 <scalbn>:
 8012e58:	b570      	push	{r4, r5, r6, lr}
 8012e5a:	ec55 4b10 	vmov	r4, r5, d0
 8012e5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012e62:	4606      	mov	r6, r0
 8012e64:	462b      	mov	r3, r5
 8012e66:	b9aa      	cbnz	r2, 8012e94 <scalbn+0x3c>
 8012e68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012e6c:	4323      	orrs	r3, r4
 8012e6e:	d03b      	beq.n	8012ee8 <scalbn+0x90>
 8012e70:	4b31      	ldr	r3, [pc, #196]	; (8012f38 <scalbn+0xe0>)
 8012e72:	4629      	mov	r1, r5
 8012e74:	2200      	movs	r2, #0
 8012e76:	ee10 0a10 	vmov	r0, s0
 8012e7a:	f7ed fbd5 	bl	8000628 <__aeabi_dmul>
 8012e7e:	4b2f      	ldr	r3, [pc, #188]	; (8012f3c <scalbn+0xe4>)
 8012e80:	429e      	cmp	r6, r3
 8012e82:	4604      	mov	r4, r0
 8012e84:	460d      	mov	r5, r1
 8012e86:	da12      	bge.n	8012eae <scalbn+0x56>
 8012e88:	a327      	add	r3, pc, #156	; (adr r3, 8012f28 <scalbn+0xd0>)
 8012e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e8e:	f7ed fbcb 	bl	8000628 <__aeabi_dmul>
 8012e92:	e009      	b.n	8012ea8 <scalbn+0x50>
 8012e94:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012e98:	428a      	cmp	r2, r1
 8012e9a:	d10c      	bne.n	8012eb6 <scalbn+0x5e>
 8012e9c:	ee10 2a10 	vmov	r2, s0
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	4629      	mov	r1, r5
 8012ea4:	f7ed fa0a 	bl	80002bc <__adddf3>
 8012ea8:	4604      	mov	r4, r0
 8012eaa:	460d      	mov	r5, r1
 8012eac:	e01c      	b.n	8012ee8 <scalbn+0x90>
 8012eae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012eb2:	460b      	mov	r3, r1
 8012eb4:	3a36      	subs	r2, #54	; 0x36
 8012eb6:	4432      	add	r2, r6
 8012eb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012ebc:	428a      	cmp	r2, r1
 8012ebe:	dd0b      	ble.n	8012ed8 <scalbn+0x80>
 8012ec0:	ec45 4b11 	vmov	d1, r4, r5
 8012ec4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012f30 <scalbn+0xd8>
 8012ec8:	f000 f83c 	bl	8012f44 <copysign>
 8012ecc:	a318      	add	r3, pc, #96	; (adr r3, 8012f30 <scalbn+0xd8>)
 8012ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed2:	ec51 0b10 	vmov	r0, r1, d0
 8012ed6:	e7da      	b.n	8012e8e <scalbn+0x36>
 8012ed8:	2a00      	cmp	r2, #0
 8012eda:	dd08      	ble.n	8012eee <scalbn+0x96>
 8012edc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012ee0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012ee4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012ee8:	ec45 4b10 	vmov	d0, r4, r5
 8012eec:	bd70      	pop	{r4, r5, r6, pc}
 8012eee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012ef2:	da0d      	bge.n	8012f10 <scalbn+0xb8>
 8012ef4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012ef8:	429e      	cmp	r6, r3
 8012efa:	ec45 4b11 	vmov	d1, r4, r5
 8012efe:	dce1      	bgt.n	8012ec4 <scalbn+0x6c>
 8012f00:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012f28 <scalbn+0xd0>
 8012f04:	f000 f81e 	bl	8012f44 <copysign>
 8012f08:	a307      	add	r3, pc, #28	; (adr r3, 8012f28 <scalbn+0xd0>)
 8012f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f0e:	e7e0      	b.n	8012ed2 <scalbn+0x7a>
 8012f10:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012f14:	3236      	adds	r2, #54	; 0x36
 8012f16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012f1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012f1e:	4620      	mov	r0, r4
 8012f20:	4629      	mov	r1, r5
 8012f22:	2200      	movs	r2, #0
 8012f24:	4b06      	ldr	r3, [pc, #24]	; (8012f40 <scalbn+0xe8>)
 8012f26:	e7b2      	b.n	8012e8e <scalbn+0x36>
 8012f28:	c2f8f359 	.word	0xc2f8f359
 8012f2c:	01a56e1f 	.word	0x01a56e1f
 8012f30:	8800759c 	.word	0x8800759c
 8012f34:	7e37e43c 	.word	0x7e37e43c
 8012f38:	43500000 	.word	0x43500000
 8012f3c:	ffff3cb0 	.word	0xffff3cb0
 8012f40:	3c900000 	.word	0x3c900000

08012f44 <copysign>:
 8012f44:	ec51 0b10 	vmov	r0, r1, d0
 8012f48:	ee11 0a90 	vmov	r0, s3
 8012f4c:	ee10 2a10 	vmov	r2, s0
 8012f50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012f54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012f58:	ea41 0300 	orr.w	r3, r1, r0
 8012f5c:	ec43 2b10 	vmov	d0, r2, r3
 8012f60:	4770      	bx	lr
	...

08012f64 <__errno>:
 8012f64:	4b01      	ldr	r3, [pc, #4]	; (8012f6c <__errno+0x8>)
 8012f66:	6818      	ldr	r0, [r3, #0]
 8012f68:	4770      	bx	lr
 8012f6a:	bf00      	nop
 8012f6c:	20000768 	.word	0x20000768

08012f70 <__libc_init_array>:
 8012f70:	b570      	push	{r4, r5, r6, lr}
 8012f72:	4e0d      	ldr	r6, [pc, #52]	; (8012fa8 <__libc_init_array+0x38>)
 8012f74:	4c0d      	ldr	r4, [pc, #52]	; (8012fac <__libc_init_array+0x3c>)
 8012f76:	1ba4      	subs	r4, r4, r6
 8012f78:	10a4      	asrs	r4, r4, #2
 8012f7a:	2500      	movs	r5, #0
 8012f7c:	42a5      	cmp	r5, r4
 8012f7e:	d109      	bne.n	8012f94 <__libc_init_array+0x24>
 8012f80:	4e0b      	ldr	r6, [pc, #44]	; (8012fb0 <__libc_init_array+0x40>)
 8012f82:	4c0c      	ldr	r4, [pc, #48]	; (8012fb4 <__libc_init_array+0x44>)
 8012f84:	f002 fd6e 	bl	8015a64 <_init>
 8012f88:	1ba4      	subs	r4, r4, r6
 8012f8a:	10a4      	asrs	r4, r4, #2
 8012f8c:	2500      	movs	r5, #0
 8012f8e:	42a5      	cmp	r5, r4
 8012f90:	d105      	bne.n	8012f9e <__libc_init_array+0x2e>
 8012f92:	bd70      	pop	{r4, r5, r6, pc}
 8012f94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012f98:	4798      	blx	r3
 8012f9a:	3501      	adds	r5, #1
 8012f9c:	e7ee      	b.n	8012f7c <__libc_init_array+0xc>
 8012f9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012fa2:	4798      	blx	r3
 8012fa4:	3501      	adds	r5, #1
 8012fa6:	e7f2      	b.n	8012f8e <__libc_init_array+0x1e>
 8012fa8:	080167d0 	.word	0x080167d0
 8012fac:	080167d0 	.word	0x080167d0
 8012fb0:	080167d0 	.word	0x080167d0
 8012fb4:	080167d4 	.word	0x080167d4

08012fb8 <malloc>:
 8012fb8:	4b02      	ldr	r3, [pc, #8]	; (8012fc4 <malloc+0xc>)
 8012fba:	4601      	mov	r1, r0
 8012fbc:	6818      	ldr	r0, [r3, #0]
 8012fbe:	f000 b86d 	b.w	801309c <_malloc_r>
 8012fc2:	bf00      	nop
 8012fc4:	20000768 	.word	0x20000768

08012fc8 <free>:
 8012fc8:	4b02      	ldr	r3, [pc, #8]	; (8012fd4 <free+0xc>)
 8012fca:	4601      	mov	r1, r0
 8012fcc:	6818      	ldr	r0, [r3, #0]
 8012fce:	f000 b817 	b.w	8013000 <_free_r>
 8012fd2:	bf00      	nop
 8012fd4:	20000768 	.word	0x20000768

08012fd8 <memcpy>:
 8012fd8:	b510      	push	{r4, lr}
 8012fda:	1e43      	subs	r3, r0, #1
 8012fdc:	440a      	add	r2, r1
 8012fde:	4291      	cmp	r1, r2
 8012fe0:	d100      	bne.n	8012fe4 <memcpy+0xc>
 8012fe2:	bd10      	pop	{r4, pc}
 8012fe4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fe8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012fec:	e7f7      	b.n	8012fde <memcpy+0x6>

08012fee <memset>:
 8012fee:	4402      	add	r2, r0
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	4293      	cmp	r3, r2
 8012ff4:	d100      	bne.n	8012ff8 <memset+0xa>
 8012ff6:	4770      	bx	lr
 8012ff8:	f803 1b01 	strb.w	r1, [r3], #1
 8012ffc:	e7f9      	b.n	8012ff2 <memset+0x4>
	...

08013000 <_free_r>:
 8013000:	b538      	push	{r3, r4, r5, lr}
 8013002:	4605      	mov	r5, r0
 8013004:	2900      	cmp	r1, #0
 8013006:	d045      	beq.n	8013094 <_free_r+0x94>
 8013008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801300c:	1f0c      	subs	r4, r1, #4
 801300e:	2b00      	cmp	r3, #0
 8013010:	bfb8      	it	lt
 8013012:	18e4      	addlt	r4, r4, r3
 8013014:	f001 fe94 	bl	8014d40 <__malloc_lock>
 8013018:	4a1f      	ldr	r2, [pc, #124]	; (8013098 <_free_r+0x98>)
 801301a:	6813      	ldr	r3, [r2, #0]
 801301c:	4610      	mov	r0, r2
 801301e:	b933      	cbnz	r3, 801302e <_free_r+0x2e>
 8013020:	6063      	str	r3, [r4, #4]
 8013022:	6014      	str	r4, [r2, #0]
 8013024:	4628      	mov	r0, r5
 8013026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801302a:	f001 be8a 	b.w	8014d42 <__malloc_unlock>
 801302e:	42a3      	cmp	r3, r4
 8013030:	d90c      	bls.n	801304c <_free_r+0x4c>
 8013032:	6821      	ldr	r1, [r4, #0]
 8013034:	1862      	adds	r2, r4, r1
 8013036:	4293      	cmp	r3, r2
 8013038:	bf04      	itt	eq
 801303a:	681a      	ldreq	r2, [r3, #0]
 801303c:	685b      	ldreq	r3, [r3, #4]
 801303e:	6063      	str	r3, [r4, #4]
 8013040:	bf04      	itt	eq
 8013042:	1852      	addeq	r2, r2, r1
 8013044:	6022      	streq	r2, [r4, #0]
 8013046:	6004      	str	r4, [r0, #0]
 8013048:	e7ec      	b.n	8013024 <_free_r+0x24>
 801304a:	4613      	mov	r3, r2
 801304c:	685a      	ldr	r2, [r3, #4]
 801304e:	b10a      	cbz	r2, 8013054 <_free_r+0x54>
 8013050:	42a2      	cmp	r2, r4
 8013052:	d9fa      	bls.n	801304a <_free_r+0x4a>
 8013054:	6819      	ldr	r1, [r3, #0]
 8013056:	1858      	adds	r0, r3, r1
 8013058:	42a0      	cmp	r0, r4
 801305a:	d10b      	bne.n	8013074 <_free_r+0x74>
 801305c:	6820      	ldr	r0, [r4, #0]
 801305e:	4401      	add	r1, r0
 8013060:	1858      	adds	r0, r3, r1
 8013062:	4282      	cmp	r2, r0
 8013064:	6019      	str	r1, [r3, #0]
 8013066:	d1dd      	bne.n	8013024 <_free_r+0x24>
 8013068:	6810      	ldr	r0, [r2, #0]
 801306a:	6852      	ldr	r2, [r2, #4]
 801306c:	605a      	str	r2, [r3, #4]
 801306e:	4401      	add	r1, r0
 8013070:	6019      	str	r1, [r3, #0]
 8013072:	e7d7      	b.n	8013024 <_free_r+0x24>
 8013074:	d902      	bls.n	801307c <_free_r+0x7c>
 8013076:	230c      	movs	r3, #12
 8013078:	602b      	str	r3, [r5, #0]
 801307a:	e7d3      	b.n	8013024 <_free_r+0x24>
 801307c:	6820      	ldr	r0, [r4, #0]
 801307e:	1821      	adds	r1, r4, r0
 8013080:	428a      	cmp	r2, r1
 8013082:	bf04      	itt	eq
 8013084:	6811      	ldreq	r1, [r2, #0]
 8013086:	6852      	ldreq	r2, [r2, #4]
 8013088:	6062      	str	r2, [r4, #4]
 801308a:	bf04      	itt	eq
 801308c:	1809      	addeq	r1, r1, r0
 801308e:	6021      	streq	r1, [r4, #0]
 8013090:	605c      	str	r4, [r3, #4]
 8013092:	e7c7      	b.n	8013024 <_free_r+0x24>
 8013094:	bd38      	pop	{r3, r4, r5, pc}
 8013096:	bf00      	nop
 8013098:	20000b00 	.word	0x20000b00

0801309c <_malloc_r>:
 801309c:	b570      	push	{r4, r5, r6, lr}
 801309e:	1ccd      	adds	r5, r1, #3
 80130a0:	f025 0503 	bic.w	r5, r5, #3
 80130a4:	3508      	adds	r5, #8
 80130a6:	2d0c      	cmp	r5, #12
 80130a8:	bf38      	it	cc
 80130aa:	250c      	movcc	r5, #12
 80130ac:	2d00      	cmp	r5, #0
 80130ae:	4606      	mov	r6, r0
 80130b0:	db01      	blt.n	80130b6 <_malloc_r+0x1a>
 80130b2:	42a9      	cmp	r1, r5
 80130b4:	d903      	bls.n	80130be <_malloc_r+0x22>
 80130b6:	230c      	movs	r3, #12
 80130b8:	6033      	str	r3, [r6, #0]
 80130ba:	2000      	movs	r0, #0
 80130bc:	bd70      	pop	{r4, r5, r6, pc}
 80130be:	f001 fe3f 	bl	8014d40 <__malloc_lock>
 80130c2:	4a21      	ldr	r2, [pc, #132]	; (8013148 <_malloc_r+0xac>)
 80130c4:	6814      	ldr	r4, [r2, #0]
 80130c6:	4621      	mov	r1, r4
 80130c8:	b991      	cbnz	r1, 80130f0 <_malloc_r+0x54>
 80130ca:	4c20      	ldr	r4, [pc, #128]	; (801314c <_malloc_r+0xb0>)
 80130cc:	6823      	ldr	r3, [r4, #0]
 80130ce:	b91b      	cbnz	r3, 80130d8 <_malloc_r+0x3c>
 80130d0:	4630      	mov	r0, r6
 80130d2:	f000 fd15 	bl	8013b00 <_sbrk_r>
 80130d6:	6020      	str	r0, [r4, #0]
 80130d8:	4629      	mov	r1, r5
 80130da:	4630      	mov	r0, r6
 80130dc:	f000 fd10 	bl	8013b00 <_sbrk_r>
 80130e0:	1c43      	adds	r3, r0, #1
 80130e2:	d124      	bne.n	801312e <_malloc_r+0x92>
 80130e4:	230c      	movs	r3, #12
 80130e6:	6033      	str	r3, [r6, #0]
 80130e8:	4630      	mov	r0, r6
 80130ea:	f001 fe2a 	bl	8014d42 <__malloc_unlock>
 80130ee:	e7e4      	b.n	80130ba <_malloc_r+0x1e>
 80130f0:	680b      	ldr	r3, [r1, #0]
 80130f2:	1b5b      	subs	r3, r3, r5
 80130f4:	d418      	bmi.n	8013128 <_malloc_r+0x8c>
 80130f6:	2b0b      	cmp	r3, #11
 80130f8:	d90f      	bls.n	801311a <_malloc_r+0x7e>
 80130fa:	600b      	str	r3, [r1, #0]
 80130fc:	50cd      	str	r5, [r1, r3]
 80130fe:	18cc      	adds	r4, r1, r3
 8013100:	4630      	mov	r0, r6
 8013102:	f001 fe1e 	bl	8014d42 <__malloc_unlock>
 8013106:	f104 000b 	add.w	r0, r4, #11
 801310a:	1d23      	adds	r3, r4, #4
 801310c:	f020 0007 	bic.w	r0, r0, #7
 8013110:	1ac3      	subs	r3, r0, r3
 8013112:	d0d3      	beq.n	80130bc <_malloc_r+0x20>
 8013114:	425a      	negs	r2, r3
 8013116:	50e2      	str	r2, [r4, r3]
 8013118:	e7d0      	b.n	80130bc <_malloc_r+0x20>
 801311a:	428c      	cmp	r4, r1
 801311c:	684b      	ldr	r3, [r1, #4]
 801311e:	bf16      	itet	ne
 8013120:	6063      	strne	r3, [r4, #4]
 8013122:	6013      	streq	r3, [r2, #0]
 8013124:	460c      	movne	r4, r1
 8013126:	e7eb      	b.n	8013100 <_malloc_r+0x64>
 8013128:	460c      	mov	r4, r1
 801312a:	6849      	ldr	r1, [r1, #4]
 801312c:	e7cc      	b.n	80130c8 <_malloc_r+0x2c>
 801312e:	1cc4      	adds	r4, r0, #3
 8013130:	f024 0403 	bic.w	r4, r4, #3
 8013134:	42a0      	cmp	r0, r4
 8013136:	d005      	beq.n	8013144 <_malloc_r+0xa8>
 8013138:	1a21      	subs	r1, r4, r0
 801313a:	4630      	mov	r0, r6
 801313c:	f000 fce0 	bl	8013b00 <_sbrk_r>
 8013140:	3001      	adds	r0, #1
 8013142:	d0cf      	beq.n	80130e4 <_malloc_r+0x48>
 8013144:	6025      	str	r5, [r4, #0]
 8013146:	e7db      	b.n	8013100 <_malloc_r+0x64>
 8013148:	20000b00 	.word	0x20000b00
 801314c:	20000b04 	.word	0x20000b04

08013150 <__cvt>:
 8013150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013154:	ec55 4b10 	vmov	r4, r5, d0
 8013158:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801315a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801315e:	2d00      	cmp	r5, #0
 8013160:	460e      	mov	r6, r1
 8013162:	4691      	mov	r9, r2
 8013164:	4619      	mov	r1, r3
 8013166:	bfb8      	it	lt
 8013168:	4622      	movlt	r2, r4
 801316a:	462b      	mov	r3, r5
 801316c:	f027 0720 	bic.w	r7, r7, #32
 8013170:	bfbb      	ittet	lt
 8013172:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013176:	461d      	movlt	r5, r3
 8013178:	2300      	movge	r3, #0
 801317a:	232d      	movlt	r3, #45	; 0x2d
 801317c:	bfb8      	it	lt
 801317e:	4614      	movlt	r4, r2
 8013180:	2f46      	cmp	r7, #70	; 0x46
 8013182:	700b      	strb	r3, [r1, #0]
 8013184:	d004      	beq.n	8013190 <__cvt+0x40>
 8013186:	2f45      	cmp	r7, #69	; 0x45
 8013188:	d100      	bne.n	801318c <__cvt+0x3c>
 801318a:	3601      	adds	r6, #1
 801318c:	2102      	movs	r1, #2
 801318e:	e000      	b.n	8013192 <__cvt+0x42>
 8013190:	2103      	movs	r1, #3
 8013192:	ab03      	add	r3, sp, #12
 8013194:	9301      	str	r3, [sp, #4]
 8013196:	ab02      	add	r3, sp, #8
 8013198:	9300      	str	r3, [sp, #0]
 801319a:	4632      	mov	r2, r6
 801319c:	4653      	mov	r3, sl
 801319e:	ec45 4b10 	vmov	d0, r4, r5
 80131a2:	f000 fe29 	bl	8013df8 <_dtoa_r>
 80131a6:	2f47      	cmp	r7, #71	; 0x47
 80131a8:	4680      	mov	r8, r0
 80131aa:	d102      	bne.n	80131b2 <__cvt+0x62>
 80131ac:	f019 0f01 	tst.w	r9, #1
 80131b0:	d026      	beq.n	8013200 <__cvt+0xb0>
 80131b2:	2f46      	cmp	r7, #70	; 0x46
 80131b4:	eb08 0906 	add.w	r9, r8, r6
 80131b8:	d111      	bne.n	80131de <__cvt+0x8e>
 80131ba:	f898 3000 	ldrb.w	r3, [r8]
 80131be:	2b30      	cmp	r3, #48	; 0x30
 80131c0:	d10a      	bne.n	80131d8 <__cvt+0x88>
 80131c2:	2200      	movs	r2, #0
 80131c4:	2300      	movs	r3, #0
 80131c6:	4620      	mov	r0, r4
 80131c8:	4629      	mov	r1, r5
 80131ca:	f7ed fc95 	bl	8000af8 <__aeabi_dcmpeq>
 80131ce:	b918      	cbnz	r0, 80131d8 <__cvt+0x88>
 80131d0:	f1c6 0601 	rsb	r6, r6, #1
 80131d4:	f8ca 6000 	str.w	r6, [sl]
 80131d8:	f8da 3000 	ldr.w	r3, [sl]
 80131dc:	4499      	add	r9, r3
 80131de:	2200      	movs	r2, #0
 80131e0:	2300      	movs	r3, #0
 80131e2:	4620      	mov	r0, r4
 80131e4:	4629      	mov	r1, r5
 80131e6:	f7ed fc87 	bl	8000af8 <__aeabi_dcmpeq>
 80131ea:	b938      	cbnz	r0, 80131fc <__cvt+0xac>
 80131ec:	2230      	movs	r2, #48	; 0x30
 80131ee:	9b03      	ldr	r3, [sp, #12]
 80131f0:	454b      	cmp	r3, r9
 80131f2:	d205      	bcs.n	8013200 <__cvt+0xb0>
 80131f4:	1c59      	adds	r1, r3, #1
 80131f6:	9103      	str	r1, [sp, #12]
 80131f8:	701a      	strb	r2, [r3, #0]
 80131fa:	e7f8      	b.n	80131ee <__cvt+0x9e>
 80131fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8013200:	9b03      	ldr	r3, [sp, #12]
 8013202:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013204:	eba3 0308 	sub.w	r3, r3, r8
 8013208:	4640      	mov	r0, r8
 801320a:	6013      	str	r3, [r2, #0]
 801320c:	b004      	add	sp, #16
 801320e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013212 <__exponent>:
 8013212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013214:	2900      	cmp	r1, #0
 8013216:	4604      	mov	r4, r0
 8013218:	bfba      	itte	lt
 801321a:	4249      	neglt	r1, r1
 801321c:	232d      	movlt	r3, #45	; 0x2d
 801321e:	232b      	movge	r3, #43	; 0x2b
 8013220:	2909      	cmp	r1, #9
 8013222:	f804 2b02 	strb.w	r2, [r4], #2
 8013226:	7043      	strb	r3, [r0, #1]
 8013228:	dd20      	ble.n	801326c <__exponent+0x5a>
 801322a:	f10d 0307 	add.w	r3, sp, #7
 801322e:	461f      	mov	r7, r3
 8013230:	260a      	movs	r6, #10
 8013232:	fb91 f5f6 	sdiv	r5, r1, r6
 8013236:	fb06 1115 	mls	r1, r6, r5, r1
 801323a:	3130      	adds	r1, #48	; 0x30
 801323c:	2d09      	cmp	r5, #9
 801323e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013242:	f103 32ff 	add.w	r2, r3, #4294967295
 8013246:	4629      	mov	r1, r5
 8013248:	dc09      	bgt.n	801325e <__exponent+0x4c>
 801324a:	3130      	adds	r1, #48	; 0x30
 801324c:	3b02      	subs	r3, #2
 801324e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013252:	42bb      	cmp	r3, r7
 8013254:	4622      	mov	r2, r4
 8013256:	d304      	bcc.n	8013262 <__exponent+0x50>
 8013258:	1a10      	subs	r0, r2, r0
 801325a:	b003      	add	sp, #12
 801325c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801325e:	4613      	mov	r3, r2
 8013260:	e7e7      	b.n	8013232 <__exponent+0x20>
 8013262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013266:	f804 2b01 	strb.w	r2, [r4], #1
 801326a:	e7f2      	b.n	8013252 <__exponent+0x40>
 801326c:	2330      	movs	r3, #48	; 0x30
 801326e:	4419      	add	r1, r3
 8013270:	7083      	strb	r3, [r0, #2]
 8013272:	1d02      	adds	r2, r0, #4
 8013274:	70c1      	strb	r1, [r0, #3]
 8013276:	e7ef      	b.n	8013258 <__exponent+0x46>

08013278 <_printf_float>:
 8013278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801327c:	b08d      	sub	sp, #52	; 0x34
 801327e:	460c      	mov	r4, r1
 8013280:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013284:	4616      	mov	r6, r2
 8013286:	461f      	mov	r7, r3
 8013288:	4605      	mov	r5, r0
 801328a:	f001 fce7 	bl	8014c5c <_localeconv_r>
 801328e:	6803      	ldr	r3, [r0, #0]
 8013290:	9304      	str	r3, [sp, #16]
 8013292:	4618      	mov	r0, r3
 8013294:	f7ec ffb4 	bl	8000200 <strlen>
 8013298:	2300      	movs	r3, #0
 801329a:	930a      	str	r3, [sp, #40]	; 0x28
 801329c:	f8d8 3000 	ldr.w	r3, [r8]
 80132a0:	9005      	str	r0, [sp, #20]
 80132a2:	3307      	adds	r3, #7
 80132a4:	f023 0307 	bic.w	r3, r3, #7
 80132a8:	f103 0208 	add.w	r2, r3, #8
 80132ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80132b0:	f8d4 b000 	ldr.w	fp, [r4]
 80132b4:	f8c8 2000 	str.w	r2, [r8]
 80132b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132bc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80132c0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80132c4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80132c8:	9307      	str	r3, [sp, #28]
 80132ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80132ce:	f04f 32ff 	mov.w	r2, #4294967295
 80132d2:	4ba7      	ldr	r3, [pc, #668]	; (8013570 <_printf_float+0x2f8>)
 80132d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80132d8:	f7ed fc40 	bl	8000b5c <__aeabi_dcmpun>
 80132dc:	bb70      	cbnz	r0, 801333c <_printf_float+0xc4>
 80132de:	f04f 32ff 	mov.w	r2, #4294967295
 80132e2:	4ba3      	ldr	r3, [pc, #652]	; (8013570 <_printf_float+0x2f8>)
 80132e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80132e8:	f7ed fc1a 	bl	8000b20 <__aeabi_dcmple>
 80132ec:	bb30      	cbnz	r0, 801333c <_printf_float+0xc4>
 80132ee:	2200      	movs	r2, #0
 80132f0:	2300      	movs	r3, #0
 80132f2:	4640      	mov	r0, r8
 80132f4:	4649      	mov	r1, r9
 80132f6:	f7ed fc09 	bl	8000b0c <__aeabi_dcmplt>
 80132fa:	b110      	cbz	r0, 8013302 <_printf_float+0x8a>
 80132fc:	232d      	movs	r3, #45	; 0x2d
 80132fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013302:	4a9c      	ldr	r2, [pc, #624]	; (8013574 <_printf_float+0x2fc>)
 8013304:	4b9c      	ldr	r3, [pc, #624]	; (8013578 <_printf_float+0x300>)
 8013306:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801330a:	bf8c      	ite	hi
 801330c:	4690      	movhi	r8, r2
 801330e:	4698      	movls	r8, r3
 8013310:	2303      	movs	r3, #3
 8013312:	f02b 0204 	bic.w	r2, fp, #4
 8013316:	6123      	str	r3, [r4, #16]
 8013318:	6022      	str	r2, [r4, #0]
 801331a:	f04f 0900 	mov.w	r9, #0
 801331e:	9700      	str	r7, [sp, #0]
 8013320:	4633      	mov	r3, r6
 8013322:	aa0b      	add	r2, sp, #44	; 0x2c
 8013324:	4621      	mov	r1, r4
 8013326:	4628      	mov	r0, r5
 8013328:	f000 f9e6 	bl	80136f8 <_printf_common>
 801332c:	3001      	adds	r0, #1
 801332e:	f040 808d 	bne.w	801344c <_printf_float+0x1d4>
 8013332:	f04f 30ff 	mov.w	r0, #4294967295
 8013336:	b00d      	add	sp, #52	; 0x34
 8013338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801333c:	4642      	mov	r2, r8
 801333e:	464b      	mov	r3, r9
 8013340:	4640      	mov	r0, r8
 8013342:	4649      	mov	r1, r9
 8013344:	f7ed fc0a 	bl	8000b5c <__aeabi_dcmpun>
 8013348:	b110      	cbz	r0, 8013350 <_printf_float+0xd8>
 801334a:	4a8c      	ldr	r2, [pc, #560]	; (801357c <_printf_float+0x304>)
 801334c:	4b8c      	ldr	r3, [pc, #560]	; (8013580 <_printf_float+0x308>)
 801334e:	e7da      	b.n	8013306 <_printf_float+0x8e>
 8013350:	6861      	ldr	r1, [r4, #4]
 8013352:	1c4b      	adds	r3, r1, #1
 8013354:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8013358:	a80a      	add	r0, sp, #40	; 0x28
 801335a:	d13e      	bne.n	80133da <_printf_float+0x162>
 801335c:	2306      	movs	r3, #6
 801335e:	6063      	str	r3, [r4, #4]
 8013360:	2300      	movs	r3, #0
 8013362:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013366:	ab09      	add	r3, sp, #36	; 0x24
 8013368:	9300      	str	r3, [sp, #0]
 801336a:	ec49 8b10 	vmov	d0, r8, r9
 801336e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013372:	6022      	str	r2, [r4, #0]
 8013374:	f8cd a004 	str.w	sl, [sp, #4]
 8013378:	6861      	ldr	r1, [r4, #4]
 801337a:	4628      	mov	r0, r5
 801337c:	f7ff fee8 	bl	8013150 <__cvt>
 8013380:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8013384:	2b47      	cmp	r3, #71	; 0x47
 8013386:	4680      	mov	r8, r0
 8013388:	d109      	bne.n	801339e <_printf_float+0x126>
 801338a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801338c:	1cd8      	adds	r0, r3, #3
 801338e:	db02      	blt.n	8013396 <_printf_float+0x11e>
 8013390:	6862      	ldr	r2, [r4, #4]
 8013392:	4293      	cmp	r3, r2
 8013394:	dd47      	ble.n	8013426 <_printf_float+0x1ae>
 8013396:	f1aa 0a02 	sub.w	sl, sl, #2
 801339a:	fa5f fa8a 	uxtb.w	sl, sl
 801339e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80133a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133a4:	d824      	bhi.n	80133f0 <_printf_float+0x178>
 80133a6:	3901      	subs	r1, #1
 80133a8:	4652      	mov	r2, sl
 80133aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80133ae:	9109      	str	r1, [sp, #36]	; 0x24
 80133b0:	f7ff ff2f 	bl	8013212 <__exponent>
 80133b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133b6:	1813      	adds	r3, r2, r0
 80133b8:	2a01      	cmp	r2, #1
 80133ba:	4681      	mov	r9, r0
 80133bc:	6123      	str	r3, [r4, #16]
 80133be:	dc02      	bgt.n	80133c6 <_printf_float+0x14e>
 80133c0:	6822      	ldr	r2, [r4, #0]
 80133c2:	07d1      	lsls	r1, r2, #31
 80133c4:	d501      	bpl.n	80133ca <_printf_float+0x152>
 80133c6:	3301      	adds	r3, #1
 80133c8:	6123      	str	r3, [r4, #16]
 80133ca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d0a5      	beq.n	801331e <_printf_float+0xa6>
 80133d2:	232d      	movs	r3, #45	; 0x2d
 80133d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133d8:	e7a1      	b.n	801331e <_printf_float+0xa6>
 80133da:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80133de:	f000 8177 	beq.w	80136d0 <_printf_float+0x458>
 80133e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80133e6:	d1bb      	bne.n	8013360 <_printf_float+0xe8>
 80133e8:	2900      	cmp	r1, #0
 80133ea:	d1b9      	bne.n	8013360 <_printf_float+0xe8>
 80133ec:	2301      	movs	r3, #1
 80133ee:	e7b6      	b.n	801335e <_printf_float+0xe6>
 80133f0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80133f4:	d119      	bne.n	801342a <_printf_float+0x1b2>
 80133f6:	2900      	cmp	r1, #0
 80133f8:	6863      	ldr	r3, [r4, #4]
 80133fa:	dd0c      	ble.n	8013416 <_printf_float+0x19e>
 80133fc:	6121      	str	r1, [r4, #16]
 80133fe:	b913      	cbnz	r3, 8013406 <_printf_float+0x18e>
 8013400:	6822      	ldr	r2, [r4, #0]
 8013402:	07d2      	lsls	r2, r2, #31
 8013404:	d502      	bpl.n	801340c <_printf_float+0x194>
 8013406:	3301      	adds	r3, #1
 8013408:	440b      	add	r3, r1
 801340a:	6123      	str	r3, [r4, #16]
 801340c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801340e:	65a3      	str	r3, [r4, #88]	; 0x58
 8013410:	f04f 0900 	mov.w	r9, #0
 8013414:	e7d9      	b.n	80133ca <_printf_float+0x152>
 8013416:	b913      	cbnz	r3, 801341e <_printf_float+0x1a6>
 8013418:	6822      	ldr	r2, [r4, #0]
 801341a:	07d0      	lsls	r0, r2, #31
 801341c:	d501      	bpl.n	8013422 <_printf_float+0x1aa>
 801341e:	3302      	adds	r3, #2
 8013420:	e7f3      	b.n	801340a <_printf_float+0x192>
 8013422:	2301      	movs	r3, #1
 8013424:	e7f1      	b.n	801340a <_printf_float+0x192>
 8013426:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801342a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801342e:	4293      	cmp	r3, r2
 8013430:	db05      	blt.n	801343e <_printf_float+0x1c6>
 8013432:	6822      	ldr	r2, [r4, #0]
 8013434:	6123      	str	r3, [r4, #16]
 8013436:	07d1      	lsls	r1, r2, #31
 8013438:	d5e8      	bpl.n	801340c <_printf_float+0x194>
 801343a:	3301      	adds	r3, #1
 801343c:	e7e5      	b.n	801340a <_printf_float+0x192>
 801343e:	2b00      	cmp	r3, #0
 8013440:	bfd4      	ite	le
 8013442:	f1c3 0302 	rsble	r3, r3, #2
 8013446:	2301      	movgt	r3, #1
 8013448:	4413      	add	r3, r2
 801344a:	e7de      	b.n	801340a <_printf_float+0x192>
 801344c:	6823      	ldr	r3, [r4, #0]
 801344e:	055a      	lsls	r2, r3, #21
 8013450:	d407      	bmi.n	8013462 <_printf_float+0x1ea>
 8013452:	6923      	ldr	r3, [r4, #16]
 8013454:	4642      	mov	r2, r8
 8013456:	4631      	mov	r1, r6
 8013458:	4628      	mov	r0, r5
 801345a:	47b8      	blx	r7
 801345c:	3001      	adds	r0, #1
 801345e:	d12b      	bne.n	80134b8 <_printf_float+0x240>
 8013460:	e767      	b.n	8013332 <_printf_float+0xba>
 8013462:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013466:	f240 80dc 	bls.w	8013622 <_printf_float+0x3aa>
 801346a:	2200      	movs	r2, #0
 801346c:	2300      	movs	r3, #0
 801346e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013472:	f7ed fb41 	bl	8000af8 <__aeabi_dcmpeq>
 8013476:	2800      	cmp	r0, #0
 8013478:	d033      	beq.n	80134e2 <_printf_float+0x26a>
 801347a:	2301      	movs	r3, #1
 801347c:	4a41      	ldr	r2, [pc, #260]	; (8013584 <_printf_float+0x30c>)
 801347e:	4631      	mov	r1, r6
 8013480:	4628      	mov	r0, r5
 8013482:	47b8      	blx	r7
 8013484:	3001      	adds	r0, #1
 8013486:	f43f af54 	beq.w	8013332 <_printf_float+0xba>
 801348a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801348e:	429a      	cmp	r2, r3
 8013490:	db02      	blt.n	8013498 <_printf_float+0x220>
 8013492:	6823      	ldr	r3, [r4, #0]
 8013494:	07d8      	lsls	r0, r3, #31
 8013496:	d50f      	bpl.n	80134b8 <_printf_float+0x240>
 8013498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801349c:	4631      	mov	r1, r6
 801349e:	4628      	mov	r0, r5
 80134a0:	47b8      	blx	r7
 80134a2:	3001      	adds	r0, #1
 80134a4:	f43f af45 	beq.w	8013332 <_printf_float+0xba>
 80134a8:	f04f 0800 	mov.w	r8, #0
 80134ac:	f104 091a 	add.w	r9, r4, #26
 80134b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134b2:	3b01      	subs	r3, #1
 80134b4:	4543      	cmp	r3, r8
 80134b6:	dc09      	bgt.n	80134cc <_printf_float+0x254>
 80134b8:	6823      	ldr	r3, [r4, #0]
 80134ba:	079b      	lsls	r3, r3, #30
 80134bc:	f100 8103 	bmi.w	80136c6 <_printf_float+0x44e>
 80134c0:	68e0      	ldr	r0, [r4, #12]
 80134c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134c4:	4298      	cmp	r0, r3
 80134c6:	bfb8      	it	lt
 80134c8:	4618      	movlt	r0, r3
 80134ca:	e734      	b.n	8013336 <_printf_float+0xbe>
 80134cc:	2301      	movs	r3, #1
 80134ce:	464a      	mov	r2, r9
 80134d0:	4631      	mov	r1, r6
 80134d2:	4628      	mov	r0, r5
 80134d4:	47b8      	blx	r7
 80134d6:	3001      	adds	r0, #1
 80134d8:	f43f af2b 	beq.w	8013332 <_printf_float+0xba>
 80134dc:	f108 0801 	add.w	r8, r8, #1
 80134e0:	e7e6      	b.n	80134b0 <_printf_float+0x238>
 80134e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	dc2b      	bgt.n	8013540 <_printf_float+0x2c8>
 80134e8:	2301      	movs	r3, #1
 80134ea:	4a26      	ldr	r2, [pc, #152]	; (8013584 <_printf_float+0x30c>)
 80134ec:	4631      	mov	r1, r6
 80134ee:	4628      	mov	r0, r5
 80134f0:	47b8      	blx	r7
 80134f2:	3001      	adds	r0, #1
 80134f4:	f43f af1d 	beq.w	8013332 <_printf_float+0xba>
 80134f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134fa:	b923      	cbnz	r3, 8013506 <_printf_float+0x28e>
 80134fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134fe:	b913      	cbnz	r3, 8013506 <_printf_float+0x28e>
 8013500:	6823      	ldr	r3, [r4, #0]
 8013502:	07d9      	lsls	r1, r3, #31
 8013504:	d5d8      	bpl.n	80134b8 <_printf_float+0x240>
 8013506:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801350a:	4631      	mov	r1, r6
 801350c:	4628      	mov	r0, r5
 801350e:	47b8      	blx	r7
 8013510:	3001      	adds	r0, #1
 8013512:	f43f af0e 	beq.w	8013332 <_printf_float+0xba>
 8013516:	f04f 0900 	mov.w	r9, #0
 801351a:	f104 0a1a 	add.w	sl, r4, #26
 801351e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013520:	425b      	negs	r3, r3
 8013522:	454b      	cmp	r3, r9
 8013524:	dc01      	bgt.n	801352a <_printf_float+0x2b2>
 8013526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013528:	e794      	b.n	8013454 <_printf_float+0x1dc>
 801352a:	2301      	movs	r3, #1
 801352c:	4652      	mov	r2, sl
 801352e:	4631      	mov	r1, r6
 8013530:	4628      	mov	r0, r5
 8013532:	47b8      	blx	r7
 8013534:	3001      	adds	r0, #1
 8013536:	f43f aefc 	beq.w	8013332 <_printf_float+0xba>
 801353a:	f109 0901 	add.w	r9, r9, #1
 801353e:	e7ee      	b.n	801351e <_printf_float+0x2a6>
 8013540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013542:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013544:	429a      	cmp	r2, r3
 8013546:	bfa8      	it	ge
 8013548:	461a      	movge	r2, r3
 801354a:	2a00      	cmp	r2, #0
 801354c:	4691      	mov	r9, r2
 801354e:	dd07      	ble.n	8013560 <_printf_float+0x2e8>
 8013550:	4613      	mov	r3, r2
 8013552:	4631      	mov	r1, r6
 8013554:	4642      	mov	r2, r8
 8013556:	4628      	mov	r0, r5
 8013558:	47b8      	blx	r7
 801355a:	3001      	adds	r0, #1
 801355c:	f43f aee9 	beq.w	8013332 <_printf_float+0xba>
 8013560:	f104 031a 	add.w	r3, r4, #26
 8013564:	f04f 0b00 	mov.w	fp, #0
 8013568:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801356c:	9306      	str	r3, [sp, #24]
 801356e:	e015      	b.n	801359c <_printf_float+0x324>
 8013570:	7fefffff 	.word	0x7fefffff
 8013574:	08016510 	.word	0x08016510
 8013578:	0801650c 	.word	0x0801650c
 801357c:	08016518 	.word	0x08016518
 8013580:	08016514 	.word	0x08016514
 8013584:	0801651c 	.word	0x0801651c
 8013588:	2301      	movs	r3, #1
 801358a:	9a06      	ldr	r2, [sp, #24]
 801358c:	4631      	mov	r1, r6
 801358e:	4628      	mov	r0, r5
 8013590:	47b8      	blx	r7
 8013592:	3001      	adds	r0, #1
 8013594:	f43f aecd 	beq.w	8013332 <_printf_float+0xba>
 8013598:	f10b 0b01 	add.w	fp, fp, #1
 801359c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80135a0:	ebaa 0309 	sub.w	r3, sl, r9
 80135a4:	455b      	cmp	r3, fp
 80135a6:	dcef      	bgt.n	8013588 <_printf_float+0x310>
 80135a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80135ac:	429a      	cmp	r2, r3
 80135ae:	44d0      	add	r8, sl
 80135b0:	db15      	blt.n	80135de <_printf_float+0x366>
 80135b2:	6823      	ldr	r3, [r4, #0]
 80135b4:	07da      	lsls	r2, r3, #31
 80135b6:	d412      	bmi.n	80135de <_printf_float+0x366>
 80135b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135bc:	eba3 020a 	sub.w	r2, r3, sl
 80135c0:	eba3 0a01 	sub.w	sl, r3, r1
 80135c4:	4592      	cmp	sl, r2
 80135c6:	bfa8      	it	ge
 80135c8:	4692      	movge	sl, r2
 80135ca:	f1ba 0f00 	cmp.w	sl, #0
 80135ce:	dc0e      	bgt.n	80135ee <_printf_float+0x376>
 80135d0:	f04f 0800 	mov.w	r8, #0
 80135d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80135d8:	f104 091a 	add.w	r9, r4, #26
 80135dc:	e019      	b.n	8013612 <_printf_float+0x39a>
 80135de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80135e2:	4631      	mov	r1, r6
 80135e4:	4628      	mov	r0, r5
 80135e6:	47b8      	blx	r7
 80135e8:	3001      	adds	r0, #1
 80135ea:	d1e5      	bne.n	80135b8 <_printf_float+0x340>
 80135ec:	e6a1      	b.n	8013332 <_printf_float+0xba>
 80135ee:	4653      	mov	r3, sl
 80135f0:	4642      	mov	r2, r8
 80135f2:	4631      	mov	r1, r6
 80135f4:	4628      	mov	r0, r5
 80135f6:	47b8      	blx	r7
 80135f8:	3001      	adds	r0, #1
 80135fa:	d1e9      	bne.n	80135d0 <_printf_float+0x358>
 80135fc:	e699      	b.n	8013332 <_printf_float+0xba>
 80135fe:	2301      	movs	r3, #1
 8013600:	464a      	mov	r2, r9
 8013602:	4631      	mov	r1, r6
 8013604:	4628      	mov	r0, r5
 8013606:	47b8      	blx	r7
 8013608:	3001      	adds	r0, #1
 801360a:	f43f ae92 	beq.w	8013332 <_printf_float+0xba>
 801360e:	f108 0801 	add.w	r8, r8, #1
 8013612:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013616:	1a9b      	subs	r3, r3, r2
 8013618:	eba3 030a 	sub.w	r3, r3, sl
 801361c:	4543      	cmp	r3, r8
 801361e:	dcee      	bgt.n	80135fe <_printf_float+0x386>
 8013620:	e74a      	b.n	80134b8 <_printf_float+0x240>
 8013622:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013624:	2a01      	cmp	r2, #1
 8013626:	dc01      	bgt.n	801362c <_printf_float+0x3b4>
 8013628:	07db      	lsls	r3, r3, #31
 801362a:	d53a      	bpl.n	80136a2 <_printf_float+0x42a>
 801362c:	2301      	movs	r3, #1
 801362e:	4642      	mov	r2, r8
 8013630:	4631      	mov	r1, r6
 8013632:	4628      	mov	r0, r5
 8013634:	47b8      	blx	r7
 8013636:	3001      	adds	r0, #1
 8013638:	f43f ae7b 	beq.w	8013332 <_printf_float+0xba>
 801363c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013640:	4631      	mov	r1, r6
 8013642:	4628      	mov	r0, r5
 8013644:	47b8      	blx	r7
 8013646:	3001      	adds	r0, #1
 8013648:	f108 0801 	add.w	r8, r8, #1
 801364c:	f43f ae71 	beq.w	8013332 <_printf_float+0xba>
 8013650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013652:	2200      	movs	r2, #0
 8013654:	f103 3aff 	add.w	sl, r3, #4294967295
 8013658:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801365c:	2300      	movs	r3, #0
 801365e:	f7ed fa4b 	bl	8000af8 <__aeabi_dcmpeq>
 8013662:	b9c8      	cbnz	r0, 8013698 <_printf_float+0x420>
 8013664:	4653      	mov	r3, sl
 8013666:	4642      	mov	r2, r8
 8013668:	4631      	mov	r1, r6
 801366a:	4628      	mov	r0, r5
 801366c:	47b8      	blx	r7
 801366e:	3001      	adds	r0, #1
 8013670:	d10e      	bne.n	8013690 <_printf_float+0x418>
 8013672:	e65e      	b.n	8013332 <_printf_float+0xba>
 8013674:	2301      	movs	r3, #1
 8013676:	4652      	mov	r2, sl
 8013678:	4631      	mov	r1, r6
 801367a:	4628      	mov	r0, r5
 801367c:	47b8      	blx	r7
 801367e:	3001      	adds	r0, #1
 8013680:	f43f ae57 	beq.w	8013332 <_printf_float+0xba>
 8013684:	f108 0801 	add.w	r8, r8, #1
 8013688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801368a:	3b01      	subs	r3, #1
 801368c:	4543      	cmp	r3, r8
 801368e:	dcf1      	bgt.n	8013674 <_printf_float+0x3fc>
 8013690:	464b      	mov	r3, r9
 8013692:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013696:	e6de      	b.n	8013456 <_printf_float+0x1de>
 8013698:	f04f 0800 	mov.w	r8, #0
 801369c:	f104 0a1a 	add.w	sl, r4, #26
 80136a0:	e7f2      	b.n	8013688 <_printf_float+0x410>
 80136a2:	2301      	movs	r3, #1
 80136a4:	e7df      	b.n	8013666 <_printf_float+0x3ee>
 80136a6:	2301      	movs	r3, #1
 80136a8:	464a      	mov	r2, r9
 80136aa:	4631      	mov	r1, r6
 80136ac:	4628      	mov	r0, r5
 80136ae:	47b8      	blx	r7
 80136b0:	3001      	adds	r0, #1
 80136b2:	f43f ae3e 	beq.w	8013332 <_printf_float+0xba>
 80136b6:	f108 0801 	add.w	r8, r8, #1
 80136ba:	68e3      	ldr	r3, [r4, #12]
 80136bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80136be:	1a9b      	subs	r3, r3, r2
 80136c0:	4543      	cmp	r3, r8
 80136c2:	dcf0      	bgt.n	80136a6 <_printf_float+0x42e>
 80136c4:	e6fc      	b.n	80134c0 <_printf_float+0x248>
 80136c6:	f04f 0800 	mov.w	r8, #0
 80136ca:	f104 0919 	add.w	r9, r4, #25
 80136ce:	e7f4      	b.n	80136ba <_printf_float+0x442>
 80136d0:	2900      	cmp	r1, #0
 80136d2:	f43f ae8b 	beq.w	80133ec <_printf_float+0x174>
 80136d6:	2300      	movs	r3, #0
 80136d8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80136dc:	ab09      	add	r3, sp, #36	; 0x24
 80136de:	9300      	str	r3, [sp, #0]
 80136e0:	ec49 8b10 	vmov	d0, r8, r9
 80136e4:	6022      	str	r2, [r4, #0]
 80136e6:	f8cd a004 	str.w	sl, [sp, #4]
 80136ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80136ee:	4628      	mov	r0, r5
 80136f0:	f7ff fd2e 	bl	8013150 <__cvt>
 80136f4:	4680      	mov	r8, r0
 80136f6:	e648      	b.n	801338a <_printf_float+0x112>

080136f8 <_printf_common>:
 80136f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136fc:	4691      	mov	r9, r2
 80136fe:	461f      	mov	r7, r3
 8013700:	688a      	ldr	r2, [r1, #8]
 8013702:	690b      	ldr	r3, [r1, #16]
 8013704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013708:	4293      	cmp	r3, r2
 801370a:	bfb8      	it	lt
 801370c:	4613      	movlt	r3, r2
 801370e:	f8c9 3000 	str.w	r3, [r9]
 8013712:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013716:	4606      	mov	r6, r0
 8013718:	460c      	mov	r4, r1
 801371a:	b112      	cbz	r2, 8013722 <_printf_common+0x2a>
 801371c:	3301      	adds	r3, #1
 801371e:	f8c9 3000 	str.w	r3, [r9]
 8013722:	6823      	ldr	r3, [r4, #0]
 8013724:	0699      	lsls	r1, r3, #26
 8013726:	bf42      	ittt	mi
 8013728:	f8d9 3000 	ldrmi.w	r3, [r9]
 801372c:	3302      	addmi	r3, #2
 801372e:	f8c9 3000 	strmi.w	r3, [r9]
 8013732:	6825      	ldr	r5, [r4, #0]
 8013734:	f015 0506 	ands.w	r5, r5, #6
 8013738:	d107      	bne.n	801374a <_printf_common+0x52>
 801373a:	f104 0a19 	add.w	sl, r4, #25
 801373e:	68e3      	ldr	r3, [r4, #12]
 8013740:	f8d9 2000 	ldr.w	r2, [r9]
 8013744:	1a9b      	subs	r3, r3, r2
 8013746:	42ab      	cmp	r3, r5
 8013748:	dc28      	bgt.n	801379c <_printf_common+0xa4>
 801374a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801374e:	6822      	ldr	r2, [r4, #0]
 8013750:	3300      	adds	r3, #0
 8013752:	bf18      	it	ne
 8013754:	2301      	movne	r3, #1
 8013756:	0692      	lsls	r2, r2, #26
 8013758:	d42d      	bmi.n	80137b6 <_printf_common+0xbe>
 801375a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801375e:	4639      	mov	r1, r7
 8013760:	4630      	mov	r0, r6
 8013762:	47c0      	blx	r8
 8013764:	3001      	adds	r0, #1
 8013766:	d020      	beq.n	80137aa <_printf_common+0xb2>
 8013768:	6823      	ldr	r3, [r4, #0]
 801376a:	68e5      	ldr	r5, [r4, #12]
 801376c:	f8d9 2000 	ldr.w	r2, [r9]
 8013770:	f003 0306 	and.w	r3, r3, #6
 8013774:	2b04      	cmp	r3, #4
 8013776:	bf08      	it	eq
 8013778:	1aad      	subeq	r5, r5, r2
 801377a:	68a3      	ldr	r3, [r4, #8]
 801377c:	6922      	ldr	r2, [r4, #16]
 801377e:	bf0c      	ite	eq
 8013780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013784:	2500      	movne	r5, #0
 8013786:	4293      	cmp	r3, r2
 8013788:	bfc4      	itt	gt
 801378a:	1a9b      	subgt	r3, r3, r2
 801378c:	18ed      	addgt	r5, r5, r3
 801378e:	f04f 0900 	mov.w	r9, #0
 8013792:	341a      	adds	r4, #26
 8013794:	454d      	cmp	r5, r9
 8013796:	d11a      	bne.n	80137ce <_printf_common+0xd6>
 8013798:	2000      	movs	r0, #0
 801379a:	e008      	b.n	80137ae <_printf_common+0xb6>
 801379c:	2301      	movs	r3, #1
 801379e:	4652      	mov	r2, sl
 80137a0:	4639      	mov	r1, r7
 80137a2:	4630      	mov	r0, r6
 80137a4:	47c0      	blx	r8
 80137a6:	3001      	adds	r0, #1
 80137a8:	d103      	bne.n	80137b2 <_printf_common+0xba>
 80137aa:	f04f 30ff 	mov.w	r0, #4294967295
 80137ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137b2:	3501      	adds	r5, #1
 80137b4:	e7c3      	b.n	801373e <_printf_common+0x46>
 80137b6:	18e1      	adds	r1, r4, r3
 80137b8:	1c5a      	adds	r2, r3, #1
 80137ba:	2030      	movs	r0, #48	; 0x30
 80137bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80137c0:	4422      	add	r2, r4
 80137c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80137c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80137ca:	3302      	adds	r3, #2
 80137cc:	e7c5      	b.n	801375a <_printf_common+0x62>
 80137ce:	2301      	movs	r3, #1
 80137d0:	4622      	mov	r2, r4
 80137d2:	4639      	mov	r1, r7
 80137d4:	4630      	mov	r0, r6
 80137d6:	47c0      	blx	r8
 80137d8:	3001      	adds	r0, #1
 80137da:	d0e6      	beq.n	80137aa <_printf_common+0xb2>
 80137dc:	f109 0901 	add.w	r9, r9, #1
 80137e0:	e7d8      	b.n	8013794 <_printf_common+0x9c>
	...

080137e4 <_printf_i>:
 80137e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80137e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80137ec:	460c      	mov	r4, r1
 80137ee:	7e09      	ldrb	r1, [r1, #24]
 80137f0:	b085      	sub	sp, #20
 80137f2:	296e      	cmp	r1, #110	; 0x6e
 80137f4:	4617      	mov	r7, r2
 80137f6:	4606      	mov	r6, r0
 80137f8:	4698      	mov	r8, r3
 80137fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80137fc:	f000 80b3 	beq.w	8013966 <_printf_i+0x182>
 8013800:	d822      	bhi.n	8013848 <_printf_i+0x64>
 8013802:	2963      	cmp	r1, #99	; 0x63
 8013804:	d036      	beq.n	8013874 <_printf_i+0x90>
 8013806:	d80a      	bhi.n	801381e <_printf_i+0x3a>
 8013808:	2900      	cmp	r1, #0
 801380a:	f000 80b9 	beq.w	8013980 <_printf_i+0x19c>
 801380e:	2958      	cmp	r1, #88	; 0x58
 8013810:	f000 8083 	beq.w	801391a <_printf_i+0x136>
 8013814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013818:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801381c:	e032      	b.n	8013884 <_printf_i+0xa0>
 801381e:	2964      	cmp	r1, #100	; 0x64
 8013820:	d001      	beq.n	8013826 <_printf_i+0x42>
 8013822:	2969      	cmp	r1, #105	; 0x69
 8013824:	d1f6      	bne.n	8013814 <_printf_i+0x30>
 8013826:	6820      	ldr	r0, [r4, #0]
 8013828:	6813      	ldr	r3, [r2, #0]
 801382a:	0605      	lsls	r5, r0, #24
 801382c:	f103 0104 	add.w	r1, r3, #4
 8013830:	d52a      	bpl.n	8013888 <_printf_i+0xa4>
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	6011      	str	r1, [r2, #0]
 8013836:	2b00      	cmp	r3, #0
 8013838:	da03      	bge.n	8013842 <_printf_i+0x5e>
 801383a:	222d      	movs	r2, #45	; 0x2d
 801383c:	425b      	negs	r3, r3
 801383e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013842:	486f      	ldr	r0, [pc, #444]	; (8013a00 <_printf_i+0x21c>)
 8013844:	220a      	movs	r2, #10
 8013846:	e039      	b.n	80138bc <_printf_i+0xd8>
 8013848:	2973      	cmp	r1, #115	; 0x73
 801384a:	f000 809d 	beq.w	8013988 <_printf_i+0x1a4>
 801384e:	d808      	bhi.n	8013862 <_printf_i+0x7e>
 8013850:	296f      	cmp	r1, #111	; 0x6f
 8013852:	d020      	beq.n	8013896 <_printf_i+0xb2>
 8013854:	2970      	cmp	r1, #112	; 0x70
 8013856:	d1dd      	bne.n	8013814 <_printf_i+0x30>
 8013858:	6823      	ldr	r3, [r4, #0]
 801385a:	f043 0320 	orr.w	r3, r3, #32
 801385e:	6023      	str	r3, [r4, #0]
 8013860:	e003      	b.n	801386a <_printf_i+0x86>
 8013862:	2975      	cmp	r1, #117	; 0x75
 8013864:	d017      	beq.n	8013896 <_printf_i+0xb2>
 8013866:	2978      	cmp	r1, #120	; 0x78
 8013868:	d1d4      	bne.n	8013814 <_printf_i+0x30>
 801386a:	2378      	movs	r3, #120	; 0x78
 801386c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013870:	4864      	ldr	r0, [pc, #400]	; (8013a04 <_printf_i+0x220>)
 8013872:	e055      	b.n	8013920 <_printf_i+0x13c>
 8013874:	6813      	ldr	r3, [r2, #0]
 8013876:	1d19      	adds	r1, r3, #4
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	6011      	str	r1, [r2, #0]
 801387c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013884:	2301      	movs	r3, #1
 8013886:	e08c      	b.n	80139a2 <_printf_i+0x1be>
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	6011      	str	r1, [r2, #0]
 801388c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013890:	bf18      	it	ne
 8013892:	b21b      	sxthne	r3, r3
 8013894:	e7cf      	b.n	8013836 <_printf_i+0x52>
 8013896:	6813      	ldr	r3, [r2, #0]
 8013898:	6825      	ldr	r5, [r4, #0]
 801389a:	1d18      	adds	r0, r3, #4
 801389c:	6010      	str	r0, [r2, #0]
 801389e:	0628      	lsls	r0, r5, #24
 80138a0:	d501      	bpl.n	80138a6 <_printf_i+0xc2>
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	e002      	b.n	80138ac <_printf_i+0xc8>
 80138a6:	0668      	lsls	r0, r5, #25
 80138a8:	d5fb      	bpl.n	80138a2 <_printf_i+0xbe>
 80138aa:	881b      	ldrh	r3, [r3, #0]
 80138ac:	4854      	ldr	r0, [pc, #336]	; (8013a00 <_printf_i+0x21c>)
 80138ae:	296f      	cmp	r1, #111	; 0x6f
 80138b0:	bf14      	ite	ne
 80138b2:	220a      	movne	r2, #10
 80138b4:	2208      	moveq	r2, #8
 80138b6:	2100      	movs	r1, #0
 80138b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80138bc:	6865      	ldr	r5, [r4, #4]
 80138be:	60a5      	str	r5, [r4, #8]
 80138c0:	2d00      	cmp	r5, #0
 80138c2:	f2c0 8095 	blt.w	80139f0 <_printf_i+0x20c>
 80138c6:	6821      	ldr	r1, [r4, #0]
 80138c8:	f021 0104 	bic.w	r1, r1, #4
 80138cc:	6021      	str	r1, [r4, #0]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d13d      	bne.n	801394e <_printf_i+0x16a>
 80138d2:	2d00      	cmp	r5, #0
 80138d4:	f040 808e 	bne.w	80139f4 <_printf_i+0x210>
 80138d8:	4665      	mov	r5, ip
 80138da:	2a08      	cmp	r2, #8
 80138dc:	d10b      	bne.n	80138f6 <_printf_i+0x112>
 80138de:	6823      	ldr	r3, [r4, #0]
 80138e0:	07db      	lsls	r3, r3, #31
 80138e2:	d508      	bpl.n	80138f6 <_printf_i+0x112>
 80138e4:	6923      	ldr	r3, [r4, #16]
 80138e6:	6862      	ldr	r2, [r4, #4]
 80138e8:	429a      	cmp	r2, r3
 80138ea:	bfde      	ittt	le
 80138ec:	2330      	movle	r3, #48	; 0x30
 80138ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80138f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80138f6:	ebac 0305 	sub.w	r3, ip, r5
 80138fa:	6123      	str	r3, [r4, #16]
 80138fc:	f8cd 8000 	str.w	r8, [sp]
 8013900:	463b      	mov	r3, r7
 8013902:	aa03      	add	r2, sp, #12
 8013904:	4621      	mov	r1, r4
 8013906:	4630      	mov	r0, r6
 8013908:	f7ff fef6 	bl	80136f8 <_printf_common>
 801390c:	3001      	adds	r0, #1
 801390e:	d14d      	bne.n	80139ac <_printf_i+0x1c8>
 8013910:	f04f 30ff 	mov.w	r0, #4294967295
 8013914:	b005      	add	sp, #20
 8013916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801391a:	4839      	ldr	r0, [pc, #228]	; (8013a00 <_printf_i+0x21c>)
 801391c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013920:	6813      	ldr	r3, [r2, #0]
 8013922:	6821      	ldr	r1, [r4, #0]
 8013924:	1d1d      	adds	r5, r3, #4
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	6015      	str	r5, [r2, #0]
 801392a:	060a      	lsls	r2, r1, #24
 801392c:	d50b      	bpl.n	8013946 <_printf_i+0x162>
 801392e:	07ca      	lsls	r2, r1, #31
 8013930:	bf44      	itt	mi
 8013932:	f041 0120 	orrmi.w	r1, r1, #32
 8013936:	6021      	strmi	r1, [r4, #0]
 8013938:	b91b      	cbnz	r3, 8013942 <_printf_i+0x15e>
 801393a:	6822      	ldr	r2, [r4, #0]
 801393c:	f022 0220 	bic.w	r2, r2, #32
 8013940:	6022      	str	r2, [r4, #0]
 8013942:	2210      	movs	r2, #16
 8013944:	e7b7      	b.n	80138b6 <_printf_i+0xd2>
 8013946:	064d      	lsls	r5, r1, #25
 8013948:	bf48      	it	mi
 801394a:	b29b      	uxthmi	r3, r3
 801394c:	e7ef      	b.n	801392e <_printf_i+0x14a>
 801394e:	4665      	mov	r5, ip
 8013950:	fbb3 f1f2 	udiv	r1, r3, r2
 8013954:	fb02 3311 	mls	r3, r2, r1, r3
 8013958:	5cc3      	ldrb	r3, [r0, r3]
 801395a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801395e:	460b      	mov	r3, r1
 8013960:	2900      	cmp	r1, #0
 8013962:	d1f5      	bne.n	8013950 <_printf_i+0x16c>
 8013964:	e7b9      	b.n	80138da <_printf_i+0xf6>
 8013966:	6813      	ldr	r3, [r2, #0]
 8013968:	6825      	ldr	r5, [r4, #0]
 801396a:	6961      	ldr	r1, [r4, #20]
 801396c:	1d18      	adds	r0, r3, #4
 801396e:	6010      	str	r0, [r2, #0]
 8013970:	0628      	lsls	r0, r5, #24
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	d501      	bpl.n	801397a <_printf_i+0x196>
 8013976:	6019      	str	r1, [r3, #0]
 8013978:	e002      	b.n	8013980 <_printf_i+0x19c>
 801397a:	066a      	lsls	r2, r5, #25
 801397c:	d5fb      	bpl.n	8013976 <_printf_i+0x192>
 801397e:	8019      	strh	r1, [r3, #0]
 8013980:	2300      	movs	r3, #0
 8013982:	6123      	str	r3, [r4, #16]
 8013984:	4665      	mov	r5, ip
 8013986:	e7b9      	b.n	80138fc <_printf_i+0x118>
 8013988:	6813      	ldr	r3, [r2, #0]
 801398a:	1d19      	adds	r1, r3, #4
 801398c:	6011      	str	r1, [r2, #0]
 801398e:	681d      	ldr	r5, [r3, #0]
 8013990:	6862      	ldr	r2, [r4, #4]
 8013992:	2100      	movs	r1, #0
 8013994:	4628      	mov	r0, r5
 8013996:	f7ec fc3b 	bl	8000210 <memchr>
 801399a:	b108      	cbz	r0, 80139a0 <_printf_i+0x1bc>
 801399c:	1b40      	subs	r0, r0, r5
 801399e:	6060      	str	r0, [r4, #4]
 80139a0:	6863      	ldr	r3, [r4, #4]
 80139a2:	6123      	str	r3, [r4, #16]
 80139a4:	2300      	movs	r3, #0
 80139a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80139aa:	e7a7      	b.n	80138fc <_printf_i+0x118>
 80139ac:	6923      	ldr	r3, [r4, #16]
 80139ae:	462a      	mov	r2, r5
 80139b0:	4639      	mov	r1, r7
 80139b2:	4630      	mov	r0, r6
 80139b4:	47c0      	blx	r8
 80139b6:	3001      	adds	r0, #1
 80139b8:	d0aa      	beq.n	8013910 <_printf_i+0x12c>
 80139ba:	6823      	ldr	r3, [r4, #0]
 80139bc:	079b      	lsls	r3, r3, #30
 80139be:	d413      	bmi.n	80139e8 <_printf_i+0x204>
 80139c0:	68e0      	ldr	r0, [r4, #12]
 80139c2:	9b03      	ldr	r3, [sp, #12]
 80139c4:	4298      	cmp	r0, r3
 80139c6:	bfb8      	it	lt
 80139c8:	4618      	movlt	r0, r3
 80139ca:	e7a3      	b.n	8013914 <_printf_i+0x130>
 80139cc:	2301      	movs	r3, #1
 80139ce:	464a      	mov	r2, r9
 80139d0:	4639      	mov	r1, r7
 80139d2:	4630      	mov	r0, r6
 80139d4:	47c0      	blx	r8
 80139d6:	3001      	adds	r0, #1
 80139d8:	d09a      	beq.n	8013910 <_printf_i+0x12c>
 80139da:	3501      	adds	r5, #1
 80139dc:	68e3      	ldr	r3, [r4, #12]
 80139de:	9a03      	ldr	r2, [sp, #12]
 80139e0:	1a9b      	subs	r3, r3, r2
 80139e2:	42ab      	cmp	r3, r5
 80139e4:	dcf2      	bgt.n	80139cc <_printf_i+0x1e8>
 80139e6:	e7eb      	b.n	80139c0 <_printf_i+0x1dc>
 80139e8:	2500      	movs	r5, #0
 80139ea:	f104 0919 	add.w	r9, r4, #25
 80139ee:	e7f5      	b.n	80139dc <_printf_i+0x1f8>
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d1ac      	bne.n	801394e <_printf_i+0x16a>
 80139f4:	7803      	ldrb	r3, [r0, #0]
 80139f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80139fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80139fe:	e76c      	b.n	80138da <_printf_i+0xf6>
 8013a00:	0801651e 	.word	0x0801651e
 8013a04:	0801652f 	.word	0x0801652f

08013a08 <iprintf>:
 8013a08:	b40f      	push	{r0, r1, r2, r3}
 8013a0a:	4b0a      	ldr	r3, [pc, #40]	; (8013a34 <iprintf+0x2c>)
 8013a0c:	b513      	push	{r0, r1, r4, lr}
 8013a0e:	681c      	ldr	r4, [r3, #0]
 8013a10:	b124      	cbz	r4, 8013a1c <iprintf+0x14>
 8013a12:	69a3      	ldr	r3, [r4, #24]
 8013a14:	b913      	cbnz	r3, 8013a1c <iprintf+0x14>
 8013a16:	4620      	mov	r0, r4
 8013a18:	f001 f896 	bl	8014b48 <__sinit>
 8013a1c:	ab05      	add	r3, sp, #20
 8013a1e:	9a04      	ldr	r2, [sp, #16]
 8013a20:	68a1      	ldr	r1, [r4, #8]
 8013a22:	9301      	str	r3, [sp, #4]
 8013a24:	4620      	mov	r0, r4
 8013a26:	f001 fe19 	bl	801565c <_vfiprintf_r>
 8013a2a:	b002      	add	sp, #8
 8013a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a30:	b004      	add	sp, #16
 8013a32:	4770      	bx	lr
 8013a34:	20000768 	.word	0x20000768

08013a38 <_puts_r>:
 8013a38:	b570      	push	{r4, r5, r6, lr}
 8013a3a:	460e      	mov	r6, r1
 8013a3c:	4605      	mov	r5, r0
 8013a3e:	b118      	cbz	r0, 8013a48 <_puts_r+0x10>
 8013a40:	6983      	ldr	r3, [r0, #24]
 8013a42:	b90b      	cbnz	r3, 8013a48 <_puts_r+0x10>
 8013a44:	f001 f880 	bl	8014b48 <__sinit>
 8013a48:	69ab      	ldr	r3, [r5, #24]
 8013a4a:	68ac      	ldr	r4, [r5, #8]
 8013a4c:	b913      	cbnz	r3, 8013a54 <_puts_r+0x1c>
 8013a4e:	4628      	mov	r0, r5
 8013a50:	f001 f87a 	bl	8014b48 <__sinit>
 8013a54:	4b23      	ldr	r3, [pc, #140]	; (8013ae4 <_puts_r+0xac>)
 8013a56:	429c      	cmp	r4, r3
 8013a58:	d117      	bne.n	8013a8a <_puts_r+0x52>
 8013a5a:	686c      	ldr	r4, [r5, #4]
 8013a5c:	89a3      	ldrh	r3, [r4, #12]
 8013a5e:	071b      	lsls	r3, r3, #28
 8013a60:	d51d      	bpl.n	8013a9e <_puts_r+0x66>
 8013a62:	6923      	ldr	r3, [r4, #16]
 8013a64:	b1db      	cbz	r3, 8013a9e <_puts_r+0x66>
 8013a66:	3e01      	subs	r6, #1
 8013a68:	68a3      	ldr	r3, [r4, #8]
 8013a6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013a6e:	3b01      	subs	r3, #1
 8013a70:	60a3      	str	r3, [r4, #8]
 8013a72:	b9e9      	cbnz	r1, 8013ab0 <_puts_r+0x78>
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	da2e      	bge.n	8013ad6 <_puts_r+0x9e>
 8013a78:	4622      	mov	r2, r4
 8013a7a:	210a      	movs	r1, #10
 8013a7c:	4628      	mov	r0, r5
 8013a7e:	f000 f86f 	bl	8013b60 <__swbuf_r>
 8013a82:	3001      	adds	r0, #1
 8013a84:	d011      	beq.n	8013aaa <_puts_r+0x72>
 8013a86:	200a      	movs	r0, #10
 8013a88:	e011      	b.n	8013aae <_puts_r+0x76>
 8013a8a:	4b17      	ldr	r3, [pc, #92]	; (8013ae8 <_puts_r+0xb0>)
 8013a8c:	429c      	cmp	r4, r3
 8013a8e:	d101      	bne.n	8013a94 <_puts_r+0x5c>
 8013a90:	68ac      	ldr	r4, [r5, #8]
 8013a92:	e7e3      	b.n	8013a5c <_puts_r+0x24>
 8013a94:	4b15      	ldr	r3, [pc, #84]	; (8013aec <_puts_r+0xb4>)
 8013a96:	429c      	cmp	r4, r3
 8013a98:	bf08      	it	eq
 8013a9a:	68ec      	ldreq	r4, [r5, #12]
 8013a9c:	e7de      	b.n	8013a5c <_puts_r+0x24>
 8013a9e:	4621      	mov	r1, r4
 8013aa0:	4628      	mov	r0, r5
 8013aa2:	f000 f8af 	bl	8013c04 <__swsetup_r>
 8013aa6:	2800      	cmp	r0, #0
 8013aa8:	d0dd      	beq.n	8013a66 <_puts_r+0x2e>
 8013aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8013aae:	bd70      	pop	{r4, r5, r6, pc}
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	da04      	bge.n	8013abe <_puts_r+0x86>
 8013ab4:	69a2      	ldr	r2, [r4, #24]
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	dc06      	bgt.n	8013ac8 <_puts_r+0x90>
 8013aba:	290a      	cmp	r1, #10
 8013abc:	d004      	beq.n	8013ac8 <_puts_r+0x90>
 8013abe:	6823      	ldr	r3, [r4, #0]
 8013ac0:	1c5a      	adds	r2, r3, #1
 8013ac2:	6022      	str	r2, [r4, #0]
 8013ac4:	7019      	strb	r1, [r3, #0]
 8013ac6:	e7cf      	b.n	8013a68 <_puts_r+0x30>
 8013ac8:	4622      	mov	r2, r4
 8013aca:	4628      	mov	r0, r5
 8013acc:	f000 f848 	bl	8013b60 <__swbuf_r>
 8013ad0:	3001      	adds	r0, #1
 8013ad2:	d1c9      	bne.n	8013a68 <_puts_r+0x30>
 8013ad4:	e7e9      	b.n	8013aaa <_puts_r+0x72>
 8013ad6:	6823      	ldr	r3, [r4, #0]
 8013ad8:	200a      	movs	r0, #10
 8013ada:	1c5a      	adds	r2, r3, #1
 8013adc:	6022      	str	r2, [r4, #0]
 8013ade:	7018      	strb	r0, [r3, #0]
 8013ae0:	e7e5      	b.n	8013aae <_puts_r+0x76>
 8013ae2:	bf00      	nop
 8013ae4:	08016570 	.word	0x08016570
 8013ae8:	08016590 	.word	0x08016590
 8013aec:	08016550 	.word	0x08016550

08013af0 <puts>:
 8013af0:	4b02      	ldr	r3, [pc, #8]	; (8013afc <puts+0xc>)
 8013af2:	4601      	mov	r1, r0
 8013af4:	6818      	ldr	r0, [r3, #0]
 8013af6:	f7ff bf9f 	b.w	8013a38 <_puts_r>
 8013afa:	bf00      	nop
 8013afc:	20000768 	.word	0x20000768

08013b00 <_sbrk_r>:
 8013b00:	b538      	push	{r3, r4, r5, lr}
 8013b02:	4c06      	ldr	r4, [pc, #24]	; (8013b1c <_sbrk_r+0x1c>)
 8013b04:	2300      	movs	r3, #0
 8013b06:	4605      	mov	r5, r0
 8013b08:	4608      	mov	r0, r1
 8013b0a:	6023      	str	r3, [r4, #0]
 8013b0c:	f7ef fb3c 	bl	8003188 <_sbrk>
 8013b10:	1c43      	adds	r3, r0, #1
 8013b12:	d102      	bne.n	8013b1a <_sbrk_r+0x1a>
 8013b14:	6823      	ldr	r3, [r4, #0]
 8013b16:	b103      	cbz	r3, 8013b1a <_sbrk_r+0x1a>
 8013b18:	602b      	str	r3, [r5, #0]
 8013b1a:	bd38      	pop	{r3, r4, r5, pc}
 8013b1c:	20002bac 	.word	0x20002bac

08013b20 <siprintf>:
 8013b20:	b40e      	push	{r1, r2, r3}
 8013b22:	b500      	push	{lr}
 8013b24:	b09c      	sub	sp, #112	; 0x70
 8013b26:	ab1d      	add	r3, sp, #116	; 0x74
 8013b28:	9002      	str	r0, [sp, #8]
 8013b2a:	9006      	str	r0, [sp, #24]
 8013b2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013b30:	4809      	ldr	r0, [pc, #36]	; (8013b58 <siprintf+0x38>)
 8013b32:	9107      	str	r1, [sp, #28]
 8013b34:	9104      	str	r1, [sp, #16]
 8013b36:	4909      	ldr	r1, [pc, #36]	; (8013b5c <siprintf+0x3c>)
 8013b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b3c:	9105      	str	r1, [sp, #20]
 8013b3e:	6800      	ldr	r0, [r0, #0]
 8013b40:	9301      	str	r3, [sp, #4]
 8013b42:	a902      	add	r1, sp, #8
 8013b44:	f001 fc68 	bl	8015418 <_svfiprintf_r>
 8013b48:	9b02      	ldr	r3, [sp, #8]
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	701a      	strb	r2, [r3, #0]
 8013b4e:	b01c      	add	sp, #112	; 0x70
 8013b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b54:	b003      	add	sp, #12
 8013b56:	4770      	bx	lr
 8013b58:	20000768 	.word	0x20000768
 8013b5c:	ffff0208 	.word	0xffff0208

08013b60 <__swbuf_r>:
 8013b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b62:	460e      	mov	r6, r1
 8013b64:	4614      	mov	r4, r2
 8013b66:	4605      	mov	r5, r0
 8013b68:	b118      	cbz	r0, 8013b72 <__swbuf_r+0x12>
 8013b6a:	6983      	ldr	r3, [r0, #24]
 8013b6c:	b90b      	cbnz	r3, 8013b72 <__swbuf_r+0x12>
 8013b6e:	f000 ffeb 	bl	8014b48 <__sinit>
 8013b72:	4b21      	ldr	r3, [pc, #132]	; (8013bf8 <__swbuf_r+0x98>)
 8013b74:	429c      	cmp	r4, r3
 8013b76:	d12a      	bne.n	8013bce <__swbuf_r+0x6e>
 8013b78:	686c      	ldr	r4, [r5, #4]
 8013b7a:	69a3      	ldr	r3, [r4, #24]
 8013b7c:	60a3      	str	r3, [r4, #8]
 8013b7e:	89a3      	ldrh	r3, [r4, #12]
 8013b80:	071a      	lsls	r2, r3, #28
 8013b82:	d52e      	bpl.n	8013be2 <__swbuf_r+0x82>
 8013b84:	6923      	ldr	r3, [r4, #16]
 8013b86:	b363      	cbz	r3, 8013be2 <__swbuf_r+0x82>
 8013b88:	6923      	ldr	r3, [r4, #16]
 8013b8a:	6820      	ldr	r0, [r4, #0]
 8013b8c:	1ac0      	subs	r0, r0, r3
 8013b8e:	6963      	ldr	r3, [r4, #20]
 8013b90:	b2f6      	uxtb	r6, r6
 8013b92:	4283      	cmp	r3, r0
 8013b94:	4637      	mov	r7, r6
 8013b96:	dc04      	bgt.n	8013ba2 <__swbuf_r+0x42>
 8013b98:	4621      	mov	r1, r4
 8013b9a:	4628      	mov	r0, r5
 8013b9c:	f000 ff6a 	bl	8014a74 <_fflush_r>
 8013ba0:	bb28      	cbnz	r0, 8013bee <__swbuf_r+0x8e>
 8013ba2:	68a3      	ldr	r3, [r4, #8]
 8013ba4:	3b01      	subs	r3, #1
 8013ba6:	60a3      	str	r3, [r4, #8]
 8013ba8:	6823      	ldr	r3, [r4, #0]
 8013baa:	1c5a      	adds	r2, r3, #1
 8013bac:	6022      	str	r2, [r4, #0]
 8013bae:	701e      	strb	r6, [r3, #0]
 8013bb0:	6963      	ldr	r3, [r4, #20]
 8013bb2:	3001      	adds	r0, #1
 8013bb4:	4283      	cmp	r3, r0
 8013bb6:	d004      	beq.n	8013bc2 <__swbuf_r+0x62>
 8013bb8:	89a3      	ldrh	r3, [r4, #12]
 8013bba:	07db      	lsls	r3, r3, #31
 8013bbc:	d519      	bpl.n	8013bf2 <__swbuf_r+0x92>
 8013bbe:	2e0a      	cmp	r6, #10
 8013bc0:	d117      	bne.n	8013bf2 <__swbuf_r+0x92>
 8013bc2:	4621      	mov	r1, r4
 8013bc4:	4628      	mov	r0, r5
 8013bc6:	f000 ff55 	bl	8014a74 <_fflush_r>
 8013bca:	b190      	cbz	r0, 8013bf2 <__swbuf_r+0x92>
 8013bcc:	e00f      	b.n	8013bee <__swbuf_r+0x8e>
 8013bce:	4b0b      	ldr	r3, [pc, #44]	; (8013bfc <__swbuf_r+0x9c>)
 8013bd0:	429c      	cmp	r4, r3
 8013bd2:	d101      	bne.n	8013bd8 <__swbuf_r+0x78>
 8013bd4:	68ac      	ldr	r4, [r5, #8]
 8013bd6:	e7d0      	b.n	8013b7a <__swbuf_r+0x1a>
 8013bd8:	4b09      	ldr	r3, [pc, #36]	; (8013c00 <__swbuf_r+0xa0>)
 8013bda:	429c      	cmp	r4, r3
 8013bdc:	bf08      	it	eq
 8013bde:	68ec      	ldreq	r4, [r5, #12]
 8013be0:	e7cb      	b.n	8013b7a <__swbuf_r+0x1a>
 8013be2:	4621      	mov	r1, r4
 8013be4:	4628      	mov	r0, r5
 8013be6:	f000 f80d 	bl	8013c04 <__swsetup_r>
 8013bea:	2800      	cmp	r0, #0
 8013bec:	d0cc      	beq.n	8013b88 <__swbuf_r+0x28>
 8013bee:	f04f 37ff 	mov.w	r7, #4294967295
 8013bf2:	4638      	mov	r0, r7
 8013bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bf6:	bf00      	nop
 8013bf8:	08016570 	.word	0x08016570
 8013bfc:	08016590 	.word	0x08016590
 8013c00:	08016550 	.word	0x08016550

08013c04 <__swsetup_r>:
 8013c04:	4b32      	ldr	r3, [pc, #200]	; (8013cd0 <__swsetup_r+0xcc>)
 8013c06:	b570      	push	{r4, r5, r6, lr}
 8013c08:	681d      	ldr	r5, [r3, #0]
 8013c0a:	4606      	mov	r6, r0
 8013c0c:	460c      	mov	r4, r1
 8013c0e:	b125      	cbz	r5, 8013c1a <__swsetup_r+0x16>
 8013c10:	69ab      	ldr	r3, [r5, #24]
 8013c12:	b913      	cbnz	r3, 8013c1a <__swsetup_r+0x16>
 8013c14:	4628      	mov	r0, r5
 8013c16:	f000 ff97 	bl	8014b48 <__sinit>
 8013c1a:	4b2e      	ldr	r3, [pc, #184]	; (8013cd4 <__swsetup_r+0xd0>)
 8013c1c:	429c      	cmp	r4, r3
 8013c1e:	d10f      	bne.n	8013c40 <__swsetup_r+0x3c>
 8013c20:	686c      	ldr	r4, [r5, #4]
 8013c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c26:	b29a      	uxth	r2, r3
 8013c28:	0715      	lsls	r5, r2, #28
 8013c2a:	d42c      	bmi.n	8013c86 <__swsetup_r+0x82>
 8013c2c:	06d0      	lsls	r0, r2, #27
 8013c2e:	d411      	bmi.n	8013c54 <__swsetup_r+0x50>
 8013c30:	2209      	movs	r2, #9
 8013c32:	6032      	str	r2, [r6, #0]
 8013c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c38:	81a3      	strh	r3, [r4, #12]
 8013c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8013c3e:	e03e      	b.n	8013cbe <__swsetup_r+0xba>
 8013c40:	4b25      	ldr	r3, [pc, #148]	; (8013cd8 <__swsetup_r+0xd4>)
 8013c42:	429c      	cmp	r4, r3
 8013c44:	d101      	bne.n	8013c4a <__swsetup_r+0x46>
 8013c46:	68ac      	ldr	r4, [r5, #8]
 8013c48:	e7eb      	b.n	8013c22 <__swsetup_r+0x1e>
 8013c4a:	4b24      	ldr	r3, [pc, #144]	; (8013cdc <__swsetup_r+0xd8>)
 8013c4c:	429c      	cmp	r4, r3
 8013c4e:	bf08      	it	eq
 8013c50:	68ec      	ldreq	r4, [r5, #12]
 8013c52:	e7e6      	b.n	8013c22 <__swsetup_r+0x1e>
 8013c54:	0751      	lsls	r1, r2, #29
 8013c56:	d512      	bpl.n	8013c7e <__swsetup_r+0x7a>
 8013c58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c5a:	b141      	cbz	r1, 8013c6e <__swsetup_r+0x6a>
 8013c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c60:	4299      	cmp	r1, r3
 8013c62:	d002      	beq.n	8013c6a <__swsetup_r+0x66>
 8013c64:	4630      	mov	r0, r6
 8013c66:	f7ff f9cb 	bl	8013000 <_free_r>
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	6363      	str	r3, [r4, #52]	; 0x34
 8013c6e:	89a3      	ldrh	r3, [r4, #12]
 8013c70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013c74:	81a3      	strh	r3, [r4, #12]
 8013c76:	2300      	movs	r3, #0
 8013c78:	6063      	str	r3, [r4, #4]
 8013c7a:	6923      	ldr	r3, [r4, #16]
 8013c7c:	6023      	str	r3, [r4, #0]
 8013c7e:	89a3      	ldrh	r3, [r4, #12]
 8013c80:	f043 0308 	orr.w	r3, r3, #8
 8013c84:	81a3      	strh	r3, [r4, #12]
 8013c86:	6923      	ldr	r3, [r4, #16]
 8013c88:	b94b      	cbnz	r3, 8013c9e <__swsetup_r+0x9a>
 8013c8a:	89a3      	ldrh	r3, [r4, #12]
 8013c8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c94:	d003      	beq.n	8013c9e <__swsetup_r+0x9a>
 8013c96:	4621      	mov	r1, r4
 8013c98:	4630      	mov	r0, r6
 8013c9a:	f001 f811 	bl	8014cc0 <__smakebuf_r>
 8013c9e:	89a2      	ldrh	r2, [r4, #12]
 8013ca0:	f012 0301 	ands.w	r3, r2, #1
 8013ca4:	d00c      	beq.n	8013cc0 <__swsetup_r+0xbc>
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	60a3      	str	r3, [r4, #8]
 8013caa:	6963      	ldr	r3, [r4, #20]
 8013cac:	425b      	negs	r3, r3
 8013cae:	61a3      	str	r3, [r4, #24]
 8013cb0:	6923      	ldr	r3, [r4, #16]
 8013cb2:	b953      	cbnz	r3, 8013cca <__swsetup_r+0xc6>
 8013cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cb8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013cbc:	d1ba      	bne.n	8013c34 <__swsetup_r+0x30>
 8013cbe:	bd70      	pop	{r4, r5, r6, pc}
 8013cc0:	0792      	lsls	r2, r2, #30
 8013cc2:	bf58      	it	pl
 8013cc4:	6963      	ldrpl	r3, [r4, #20]
 8013cc6:	60a3      	str	r3, [r4, #8]
 8013cc8:	e7f2      	b.n	8013cb0 <__swsetup_r+0xac>
 8013cca:	2000      	movs	r0, #0
 8013ccc:	e7f7      	b.n	8013cbe <__swsetup_r+0xba>
 8013cce:	bf00      	nop
 8013cd0:	20000768 	.word	0x20000768
 8013cd4:	08016570 	.word	0x08016570
 8013cd8:	08016590 	.word	0x08016590
 8013cdc:	08016550 	.word	0x08016550

08013ce0 <quorem>:
 8013ce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ce4:	6903      	ldr	r3, [r0, #16]
 8013ce6:	690c      	ldr	r4, [r1, #16]
 8013ce8:	42a3      	cmp	r3, r4
 8013cea:	4680      	mov	r8, r0
 8013cec:	f2c0 8082 	blt.w	8013df4 <quorem+0x114>
 8013cf0:	3c01      	subs	r4, #1
 8013cf2:	f101 0714 	add.w	r7, r1, #20
 8013cf6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8013cfa:	f100 0614 	add.w	r6, r0, #20
 8013cfe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013d02:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013d06:	eb06 030c 	add.w	r3, r6, ip
 8013d0a:	3501      	adds	r5, #1
 8013d0c:	eb07 090c 	add.w	r9, r7, ip
 8013d10:	9301      	str	r3, [sp, #4]
 8013d12:	fbb0 f5f5 	udiv	r5, r0, r5
 8013d16:	b395      	cbz	r5, 8013d7e <quorem+0x9e>
 8013d18:	f04f 0a00 	mov.w	sl, #0
 8013d1c:	4638      	mov	r0, r7
 8013d1e:	46b6      	mov	lr, r6
 8013d20:	46d3      	mov	fp, sl
 8013d22:	f850 2b04 	ldr.w	r2, [r0], #4
 8013d26:	b293      	uxth	r3, r2
 8013d28:	fb05 a303 	mla	r3, r5, r3, sl
 8013d2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013d30:	b29b      	uxth	r3, r3
 8013d32:	ebab 0303 	sub.w	r3, fp, r3
 8013d36:	0c12      	lsrs	r2, r2, #16
 8013d38:	f8de b000 	ldr.w	fp, [lr]
 8013d3c:	fb05 a202 	mla	r2, r5, r2, sl
 8013d40:	fa13 f38b 	uxtah	r3, r3, fp
 8013d44:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013d48:	fa1f fb82 	uxth.w	fp, r2
 8013d4c:	f8de 2000 	ldr.w	r2, [lr]
 8013d50:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013d54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013d58:	b29b      	uxth	r3, r3
 8013d5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013d5e:	4581      	cmp	r9, r0
 8013d60:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013d64:	f84e 3b04 	str.w	r3, [lr], #4
 8013d68:	d2db      	bcs.n	8013d22 <quorem+0x42>
 8013d6a:	f856 300c 	ldr.w	r3, [r6, ip]
 8013d6e:	b933      	cbnz	r3, 8013d7e <quorem+0x9e>
 8013d70:	9b01      	ldr	r3, [sp, #4]
 8013d72:	3b04      	subs	r3, #4
 8013d74:	429e      	cmp	r6, r3
 8013d76:	461a      	mov	r2, r3
 8013d78:	d330      	bcc.n	8013ddc <quorem+0xfc>
 8013d7a:	f8c8 4010 	str.w	r4, [r8, #16]
 8013d7e:	4640      	mov	r0, r8
 8013d80:	f001 f9f6 	bl	8015170 <__mcmp>
 8013d84:	2800      	cmp	r0, #0
 8013d86:	db25      	blt.n	8013dd4 <quorem+0xf4>
 8013d88:	3501      	adds	r5, #1
 8013d8a:	4630      	mov	r0, r6
 8013d8c:	f04f 0c00 	mov.w	ip, #0
 8013d90:	f857 2b04 	ldr.w	r2, [r7], #4
 8013d94:	f8d0 e000 	ldr.w	lr, [r0]
 8013d98:	b293      	uxth	r3, r2
 8013d9a:	ebac 0303 	sub.w	r3, ip, r3
 8013d9e:	0c12      	lsrs	r2, r2, #16
 8013da0:	fa13 f38e 	uxtah	r3, r3, lr
 8013da4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013da8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013dac:	b29b      	uxth	r3, r3
 8013dae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013db2:	45b9      	cmp	r9, r7
 8013db4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013db8:	f840 3b04 	str.w	r3, [r0], #4
 8013dbc:	d2e8      	bcs.n	8013d90 <quorem+0xb0>
 8013dbe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013dc2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013dc6:	b92a      	cbnz	r2, 8013dd4 <quorem+0xf4>
 8013dc8:	3b04      	subs	r3, #4
 8013dca:	429e      	cmp	r6, r3
 8013dcc:	461a      	mov	r2, r3
 8013dce:	d30b      	bcc.n	8013de8 <quorem+0x108>
 8013dd0:	f8c8 4010 	str.w	r4, [r8, #16]
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	b003      	add	sp, #12
 8013dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ddc:	6812      	ldr	r2, [r2, #0]
 8013dde:	3b04      	subs	r3, #4
 8013de0:	2a00      	cmp	r2, #0
 8013de2:	d1ca      	bne.n	8013d7a <quorem+0x9a>
 8013de4:	3c01      	subs	r4, #1
 8013de6:	e7c5      	b.n	8013d74 <quorem+0x94>
 8013de8:	6812      	ldr	r2, [r2, #0]
 8013dea:	3b04      	subs	r3, #4
 8013dec:	2a00      	cmp	r2, #0
 8013dee:	d1ef      	bne.n	8013dd0 <quorem+0xf0>
 8013df0:	3c01      	subs	r4, #1
 8013df2:	e7ea      	b.n	8013dca <quorem+0xea>
 8013df4:	2000      	movs	r0, #0
 8013df6:	e7ee      	b.n	8013dd6 <quorem+0xf6>

08013df8 <_dtoa_r>:
 8013df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dfc:	ec57 6b10 	vmov	r6, r7, d0
 8013e00:	b097      	sub	sp, #92	; 0x5c
 8013e02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013e04:	9106      	str	r1, [sp, #24]
 8013e06:	4604      	mov	r4, r0
 8013e08:	920b      	str	r2, [sp, #44]	; 0x2c
 8013e0a:	9312      	str	r3, [sp, #72]	; 0x48
 8013e0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013e10:	e9cd 6700 	strd	r6, r7, [sp]
 8013e14:	b93d      	cbnz	r5, 8013e26 <_dtoa_r+0x2e>
 8013e16:	2010      	movs	r0, #16
 8013e18:	f7ff f8ce 	bl	8012fb8 <malloc>
 8013e1c:	6260      	str	r0, [r4, #36]	; 0x24
 8013e1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013e22:	6005      	str	r5, [r0, #0]
 8013e24:	60c5      	str	r5, [r0, #12]
 8013e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e28:	6819      	ldr	r1, [r3, #0]
 8013e2a:	b151      	cbz	r1, 8013e42 <_dtoa_r+0x4a>
 8013e2c:	685a      	ldr	r2, [r3, #4]
 8013e2e:	604a      	str	r2, [r1, #4]
 8013e30:	2301      	movs	r3, #1
 8013e32:	4093      	lsls	r3, r2
 8013e34:	608b      	str	r3, [r1, #8]
 8013e36:	4620      	mov	r0, r4
 8013e38:	f000 ffb8 	bl	8014dac <_Bfree>
 8013e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e3e:	2200      	movs	r2, #0
 8013e40:	601a      	str	r2, [r3, #0]
 8013e42:	1e3b      	subs	r3, r7, #0
 8013e44:	bfbb      	ittet	lt
 8013e46:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013e4a:	9301      	strlt	r3, [sp, #4]
 8013e4c:	2300      	movge	r3, #0
 8013e4e:	2201      	movlt	r2, #1
 8013e50:	bfac      	ite	ge
 8013e52:	f8c8 3000 	strge.w	r3, [r8]
 8013e56:	f8c8 2000 	strlt.w	r2, [r8]
 8013e5a:	4baf      	ldr	r3, [pc, #700]	; (8014118 <_dtoa_r+0x320>)
 8013e5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013e60:	ea33 0308 	bics.w	r3, r3, r8
 8013e64:	d114      	bne.n	8013e90 <_dtoa_r+0x98>
 8013e66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e68:	f242 730f 	movw	r3, #9999	; 0x270f
 8013e6c:	6013      	str	r3, [r2, #0]
 8013e6e:	9b00      	ldr	r3, [sp, #0]
 8013e70:	b923      	cbnz	r3, 8013e7c <_dtoa_r+0x84>
 8013e72:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8013e76:	2800      	cmp	r0, #0
 8013e78:	f000 8542 	beq.w	8014900 <_dtoa_r+0xb08>
 8013e7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013e7e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801412c <_dtoa_r+0x334>
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	f000 8544 	beq.w	8014910 <_dtoa_r+0xb18>
 8013e88:	f10b 0303 	add.w	r3, fp, #3
 8013e8c:	f000 bd3e 	b.w	801490c <_dtoa_r+0xb14>
 8013e90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013e94:	2200      	movs	r2, #0
 8013e96:	2300      	movs	r3, #0
 8013e98:	4630      	mov	r0, r6
 8013e9a:	4639      	mov	r1, r7
 8013e9c:	f7ec fe2c 	bl	8000af8 <__aeabi_dcmpeq>
 8013ea0:	4681      	mov	r9, r0
 8013ea2:	b168      	cbz	r0, 8013ec0 <_dtoa_r+0xc8>
 8013ea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	6013      	str	r3, [r2, #0]
 8013eaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	f000 8524 	beq.w	80148fa <_dtoa_r+0xb02>
 8013eb2:	4b9a      	ldr	r3, [pc, #616]	; (801411c <_dtoa_r+0x324>)
 8013eb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013eb6:	f103 3bff 	add.w	fp, r3, #4294967295
 8013eba:	6013      	str	r3, [r2, #0]
 8013ebc:	f000 bd28 	b.w	8014910 <_dtoa_r+0xb18>
 8013ec0:	aa14      	add	r2, sp, #80	; 0x50
 8013ec2:	a915      	add	r1, sp, #84	; 0x54
 8013ec4:	ec47 6b10 	vmov	d0, r6, r7
 8013ec8:	4620      	mov	r0, r4
 8013eca:	f001 f9c8 	bl	801525e <__d2b>
 8013ece:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013ed2:	9004      	str	r0, [sp, #16]
 8013ed4:	2d00      	cmp	r5, #0
 8013ed6:	d07c      	beq.n	8013fd2 <_dtoa_r+0x1da>
 8013ed8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013edc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013ee0:	46b2      	mov	sl, r6
 8013ee2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8013ee6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013eea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013eee:	2200      	movs	r2, #0
 8013ef0:	4b8b      	ldr	r3, [pc, #556]	; (8014120 <_dtoa_r+0x328>)
 8013ef2:	4650      	mov	r0, sl
 8013ef4:	4659      	mov	r1, fp
 8013ef6:	f7ec f9df 	bl	80002b8 <__aeabi_dsub>
 8013efa:	a381      	add	r3, pc, #516	; (adr r3, 8014100 <_dtoa_r+0x308>)
 8013efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f00:	f7ec fb92 	bl	8000628 <__aeabi_dmul>
 8013f04:	a380      	add	r3, pc, #512	; (adr r3, 8014108 <_dtoa_r+0x310>)
 8013f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f0a:	f7ec f9d7 	bl	80002bc <__adddf3>
 8013f0e:	4606      	mov	r6, r0
 8013f10:	4628      	mov	r0, r5
 8013f12:	460f      	mov	r7, r1
 8013f14:	f7ec fb1e 	bl	8000554 <__aeabi_i2d>
 8013f18:	a37d      	add	r3, pc, #500	; (adr r3, 8014110 <_dtoa_r+0x318>)
 8013f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f1e:	f7ec fb83 	bl	8000628 <__aeabi_dmul>
 8013f22:	4602      	mov	r2, r0
 8013f24:	460b      	mov	r3, r1
 8013f26:	4630      	mov	r0, r6
 8013f28:	4639      	mov	r1, r7
 8013f2a:	f7ec f9c7 	bl	80002bc <__adddf3>
 8013f2e:	4606      	mov	r6, r0
 8013f30:	460f      	mov	r7, r1
 8013f32:	f7ec fe29 	bl	8000b88 <__aeabi_d2iz>
 8013f36:	2200      	movs	r2, #0
 8013f38:	4682      	mov	sl, r0
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	4630      	mov	r0, r6
 8013f3e:	4639      	mov	r1, r7
 8013f40:	f7ec fde4 	bl	8000b0c <__aeabi_dcmplt>
 8013f44:	b148      	cbz	r0, 8013f5a <_dtoa_r+0x162>
 8013f46:	4650      	mov	r0, sl
 8013f48:	f7ec fb04 	bl	8000554 <__aeabi_i2d>
 8013f4c:	4632      	mov	r2, r6
 8013f4e:	463b      	mov	r3, r7
 8013f50:	f7ec fdd2 	bl	8000af8 <__aeabi_dcmpeq>
 8013f54:	b908      	cbnz	r0, 8013f5a <_dtoa_r+0x162>
 8013f56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013f5a:	f1ba 0f16 	cmp.w	sl, #22
 8013f5e:	d859      	bhi.n	8014014 <_dtoa_r+0x21c>
 8013f60:	4970      	ldr	r1, [pc, #448]	; (8014124 <_dtoa_r+0x32c>)
 8013f62:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013f66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f6e:	f7ec fdeb 	bl	8000b48 <__aeabi_dcmpgt>
 8013f72:	2800      	cmp	r0, #0
 8013f74:	d050      	beq.n	8014018 <_dtoa_r+0x220>
 8013f76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013f80:	1b5d      	subs	r5, r3, r5
 8013f82:	f1b5 0801 	subs.w	r8, r5, #1
 8013f86:	bf49      	itett	mi
 8013f88:	f1c5 0301 	rsbmi	r3, r5, #1
 8013f8c:	2300      	movpl	r3, #0
 8013f8e:	9305      	strmi	r3, [sp, #20]
 8013f90:	f04f 0800 	movmi.w	r8, #0
 8013f94:	bf58      	it	pl
 8013f96:	9305      	strpl	r3, [sp, #20]
 8013f98:	f1ba 0f00 	cmp.w	sl, #0
 8013f9c:	db3e      	blt.n	801401c <_dtoa_r+0x224>
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	44d0      	add	r8, sl
 8013fa2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8013fa6:	9307      	str	r3, [sp, #28]
 8013fa8:	9b06      	ldr	r3, [sp, #24]
 8013faa:	2b09      	cmp	r3, #9
 8013fac:	f200 8090 	bhi.w	80140d0 <_dtoa_r+0x2d8>
 8013fb0:	2b05      	cmp	r3, #5
 8013fb2:	bfc4      	itt	gt
 8013fb4:	3b04      	subgt	r3, #4
 8013fb6:	9306      	strgt	r3, [sp, #24]
 8013fb8:	9b06      	ldr	r3, [sp, #24]
 8013fba:	f1a3 0302 	sub.w	r3, r3, #2
 8013fbe:	bfcc      	ite	gt
 8013fc0:	2500      	movgt	r5, #0
 8013fc2:	2501      	movle	r5, #1
 8013fc4:	2b03      	cmp	r3, #3
 8013fc6:	f200 808f 	bhi.w	80140e8 <_dtoa_r+0x2f0>
 8013fca:	e8df f003 	tbb	[pc, r3]
 8013fce:	7f7d      	.short	0x7f7d
 8013fd0:	7131      	.short	0x7131
 8013fd2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8013fd6:	441d      	add	r5, r3
 8013fd8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8013fdc:	2820      	cmp	r0, #32
 8013fde:	dd13      	ble.n	8014008 <_dtoa_r+0x210>
 8013fe0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8013fe4:	9b00      	ldr	r3, [sp, #0]
 8013fe6:	fa08 f800 	lsl.w	r8, r8, r0
 8013fea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8013fee:	fa23 f000 	lsr.w	r0, r3, r0
 8013ff2:	ea48 0000 	orr.w	r0, r8, r0
 8013ff6:	f7ec fa9d 	bl	8000534 <__aeabi_ui2d>
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	4682      	mov	sl, r0
 8013ffe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014002:	3d01      	subs	r5, #1
 8014004:	9313      	str	r3, [sp, #76]	; 0x4c
 8014006:	e772      	b.n	8013eee <_dtoa_r+0xf6>
 8014008:	9b00      	ldr	r3, [sp, #0]
 801400a:	f1c0 0020 	rsb	r0, r0, #32
 801400e:	fa03 f000 	lsl.w	r0, r3, r0
 8014012:	e7f0      	b.n	8013ff6 <_dtoa_r+0x1fe>
 8014014:	2301      	movs	r3, #1
 8014016:	e7b1      	b.n	8013f7c <_dtoa_r+0x184>
 8014018:	900f      	str	r0, [sp, #60]	; 0x3c
 801401a:	e7b0      	b.n	8013f7e <_dtoa_r+0x186>
 801401c:	9b05      	ldr	r3, [sp, #20]
 801401e:	eba3 030a 	sub.w	r3, r3, sl
 8014022:	9305      	str	r3, [sp, #20]
 8014024:	f1ca 0300 	rsb	r3, sl, #0
 8014028:	9307      	str	r3, [sp, #28]
 801402a:	2300      	movs	r3, #0
 801402c:	930e      	str	r3, [sp, #56]	; 0x38
 801402e:	e7bb      	b.n	8013fa8 <_dtoa_r+0x1b0>
 8014030:	2301      	movs	r3, #1
 8014032:	930a      	str	r3, [sp, #40]	; 0x28
 8014034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014036:	2b00      	cmp	r3, #0
 8014038:	dd59      	ble.n	80140ee <_dtoa_r+0x2f6>
 801403a:	9302      	str	r3, [sp, #8]
 801403c:	4699      	mov	r9, r3
 801403e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014040:	2200      	movs	r2, #0
 8014042:	6072      	str	r2, [r6, #4]
 8014044:	2204      	movs	r2, #4
 8014046:	f102 0014 	add.w	r0, r2, #20
 801404a:	4298      	cmp	r0, r3
 801404c:	6871      	ldr	r1, [r6, #4]
 801404e:	d953      	bls.n	80140f8 <_dtoa_r+0x300>
 8014050:	4620      	mov	r0, r4
 8014052:	f000 fe77 	bl	8014d44 <_Balloc>
 8014056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014058:	6030      	str	r0, [r6, #0]
 801405a:	f1b9 0f0e 	cmp.w	r9, #14
 801405e:	f8d3 b000 	ldr.w	fp, [r3]
 8014062:	f200 80e6 	bhi.w	8014232 <_dtoa_r+0x43a>
 8014066:	2d00      	cmp	r5, #0
 8014068:	f000 80e3 	beq.w	8014232 <_dtoa_r+0x43a>
 801406c:	ed9d 7b00 	vldr	d7, [sp]
 8014070:	f1ba 0f00 	cmp.w	sl, #0
 8014074:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014078:	dd74      	ble.n	8014164 <_dtoa_r+0x36c>
 801407a:	4a2a      	ldr	r2, [pc, #168]	; (8014124 <_dtoa_r+0x32c>)
 801407c:	f00a 030f 	and.w	r3, sl, #15
 8014080:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014084:	ed93 7b00 	vldr	d7, [r3]
 8014088:	ea4f 162a 	mov.w	r6, sl, asr #4
 801408c:	06f0      	lsls	r0, r6, #27
 801408e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014092:	d565      	bpl.n	8014160 <_dtoa_r+0x368>
 8014094:	4b24      	ldr	r3, [pc, #144]	; (8014128 <_dtoa_r+0x330>)
 8014096:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801409a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801409e:	f7ec fbed 	bl	800087c <__aeabi_ddiv>
 80140a2:	e9cd 0100 	strd	r0, r1, [sp]
 80140a6:	f006 060f 	and.w	r6, r6, #15
 80140aa:	2503      	movs	r5, #3
 80140ac:	4f1e      	ldr	r7, [pc, #120]	; (8014128 <_dtoa_r+0x330>)
 80140ae:	e04c      	b.n	801414a <_dtoa_r+0x352>
 80140b0:	2301      	movs	r3, #1
 80140b2:	930a      	str	r3, [sp, #40]	; 0x28
 80140b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140b6:	4453      	add	r3, sl
 80140b8:	f103 0901 	add.w	r9, r3, #1
 80140bc:	9302      	str	r3, [sp, #8]
 80140be:	464b      	mov	r3, r9
 80140c0:	2b01      	cmp	r3, #1
 80140c2:	bfb8      	it	lt
 80140c4:	2301      	movlt	r3, #1
 80140c6:	e7ba      	b.n	801403e <_dtoa_r+0x246>
 80140c8:	2300      	movs	r3, #0
 80140ca:	e7b2      	b.n	8014032 <_dtoa_r+0x23a>
 80140cc:	2300      	movs	r3, #0
 80140ce:	e7f0      	b.n	80140b2 <_dtoa_r+0x2ba>
 80140d0:	2501      	movs	r5, #1
 80140d2:	2300      	movs	r3, #0
 80140d4:	9306      	str	r3, [sp, #24]
 80140d6:	950a      	str	r5, [sp, #40]	; 0x28
 80140d8:	f04f 33ff 	mov.w	r3, #4294967295
 80140dc:	9302      	str	r3, [sp, #8]
 80140de:	4699      	mov	r9, r3
 80140e0:	2200      	movs	r2, #0
 80140e2:	2312      	movs	r3, #18
 80140e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80140e6:	e7aa      	b.n	801403e <_dtoa_r+0x246>
 80140e8:	2301      	movs	r3, #1
 80140ea:	930a      	str	r3, [sp, #40]	; 0x28
 80140ec:	e7f4      	b.n	80140d8 <_dtoa_r+0x2e0>
 80140ee:	2301      	movs	r3, #1
 80140f0:	9302      	str	r3, [sp, #8]
 80140f2:	4699      	mov	r9, r3
 80140f4:	461a      	mov	r2, r3
 80140f6:	e7f5      	b.n	80140e4 <_dtoa_r+0x2ec>
 80140f8:	3101      	adds	r1, #1
 80140fa:	6071      	str	r1, [r6, #4]
 80140fc:	0052      	lsls	r2, r2, #1
 80140fe:	e7a2      	b.n	8014046 <_dtoa_r+0x24e>
 8014100:	636f4361 	.word	0x636f4361
 8014104:	3fd287a7 	.word	0x3fd287a7
 8014108:	8b60c8b3 	.word	0x8b60c8b3
 801410c:	3fc68a28 	.word	0x3fc68a28
 8014110:	509f79fb 	.word	0x509f79fb
 8014114:	3fd34413 	.word	0x3fd34413
 8014118:	7ff00000 	.word	0x7ff00000
 801411c:	0801651d 	.word	0x0801651d
 8014120:	3ff80000 	.word	0x3ff80000
 8014124:	080165d8 	.word	0x080165d8
 8014128:	080165b0 	.word	0x080165b0
 801412c:	08016549 	.word	0x08016549
 8014130:	07f1      	lsls	r1, r6, #31
 8014132:	d508      	bpl.n	8014146 <_dtoa_r+0x34e>
 8014134:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014138:	e9d7 2300 	ldrd	r2, r3, [r7]
 801413c:	f7ec fa74 	bl	8000628 <__aeabi_dmul>
 8014140:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014144:	3501      	adds	r5, #1
 8014146:	1076      	asrs	r6, r6, #1
 8014148:	3708      	adds	r7, #8
 801414a:	2e00      	cmp	r6, #0
 801414c:	d1f0      	bne.n	8014130 <_dtoa_r+0x338>
 801414e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014152:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014156:	f7ec fb91 	bl	800087c <__aeabi_ddiv>
 801415a:	e9cd 0100 	strd	r0, r1, [sp]
 801415e:	e01a      	b.n	8014196 <_dtoa_r+0x39e>
 8014160:	2502      	movs	r5, #2
 8014162:	e7a3      	b.n	80140ac <_dtoa_r+0x2b4>
 8014164:	f000 80a0 	beq.w	80142a8 <_dtoa_r+0x4b0>
 8014168:	f1ca 0600 	rsb	r6, sl, #0
 801416c:	4b9f      	ldr	r3, [pc, #636]	; (80143ec <_dtoa_r+0x5f4>)
 801416e:	4fa0      	ldr	r7, [pc, #640]	; (80143f0 <_dtoa_r+0x5f8>)
 8014170:	f006 020f 	and.w	r2, r6, #15
 8014174:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801417c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014180:	f7ec fa52 	bl	8000628 <__aeabi_dmul>
 8014184:	e9cd 0100 	strd	r0, r1, [sp]
 8014188:	1136      	asrs	r6, r6, #4
 801418a:	2300      	movs	r3, #0
 801418c:	2502      	movs	r5, #2
 801418e:	2e00      	cmp	r6, #0
 8014190:	d17f      	bne.n	8014292 <_dtoa_r+0x49a>
 8014192:	2b00      	cmp	r3, #0
 8014194:	d1e1      	bne.n	801415a <_dtoa_r+0x362>
 8014196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014198:	2b00      	cmp	r3, #0
 801419a:	f000 8087 	beq.w	80142ac <_dtoa_r+0x4b4>
 801419e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80141a2:	2200      	movs	r2, #0
 80141a4:	4b93      	ldr	r3, [pc, #588]	; (80143f4 <_dtoa_r+0x5fc>)
 80141a6:	4630      	mov	r0, r6
 80141a8:	4639      	mov	r1, r7
 80141aa:	f7ec fcaf 	bl	8000b0c <__aeabi_dcmplt>
 80141ae:	2800      	cmp	r0, #0
 80141b0:	d07c      	beq.n	80142ac <_dtoa_r+0x4b4>
 80141b2:	f1b9 0f00 	cmp.w	r9, #0
 80141b6:	d079      	beq.n	80142ac <_dtoa_r+0x4b4>
 80141b8:	9b02      	ldr	r3, [sp, #8]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	dd35      	ble.n	801422a <_dtoa_r+0x432>
 80141be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80141c2:	9308      	str	r3, [sp, #32]
 80141c4:	4639      	mov	r1, r7
 80141c6:	2200      	movs	r2, #0
 80141c8:	4b8b      	ldr	r3, [pc, #556]	; (80143f8 <_dtoa_r+0x600>)
 80141ca:	4630      	mov	r0, r6
 80141cc:	f7ec fa2c 	bl	8000628 <__aeabi_dmul>
 80141d0:	e9cd 0100 	strd	r0, r1, [sp]
 80141d4:	9f02      	ldr	r7, [sp, #8]
 80141d6:	3501      	adds	r5, #1
 80141d8:	4628      	mov	r0, r5
 80141da:	f7ec f9bb 	bl	8000554 <__aeabi_i2d>
 80141de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80141e2:	f7ec fa21 	bl	8000628 <__aeabi_dmul>
 80141e6:	2200      	movs	r2, #0
 80141e8:	4b84      	ldr	r3, [pc, #528]	; (80143fc <_dtoa_r+0x604>)
 80141ea:	f7ec f867 	bl	80002bc <__adddf3>
 80141ee:	4605      	mov	r5, r0
 80141f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80141f4:	2f00      	cmp	r7, #0
 80141f6:	d15d      	bne.n	80142b4 <_dtoa_r+0x4bc>
 80141f8:	2200      	movs	r2, #0
 80141fa:	4b81      	ldr	r3, [pc, #516]	; (8014400 <_dtoa_r+0x608>)
 80141fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014200:	f7ec f85a 	bl	80002b8 <__aeabi_dsub>
 8014204:	462a      	mov	r2, r5
 8014206:	4633      	mov	r3, r6
 8014208:	e9cd 0100 	strd	r0, r1, [sp]
 801420c:	f7ec fc9c 	bl	8000b48 <__aeabi_dcmpgt>
 8014210:	2800      	cmp	r0, #0
 8014212:	f040 8288 	bne.w	8014726 <_dtoa_r+0x92e>
 8014216:	462a      	mov	r2, r5
 8014218:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801421c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014220:	f7ec fc74 	bl	8000b0c <__aeabi_dcmplt>
 8014224:	2800      	cmp	r0, #0
 8014226:	f040 827c 	bne.w	8014722 <_dtoa_r+0x92a>
 801422a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801422e:	e9cd 2300 	strd	r2, r3, [sp]
 8014232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014234:	2b00      	cmp	r3, #0
 8014236:	f2c0 8150 	blt.w	80144da <_dtoa_r+0x6e2>
 801423a:	f1ba 0f0e 	cmp.w	sl, #14
 801423e:	f300 814c 	bgt.w	80144da <_dtoa_r+0x6e2>
 8014242:	4b6a      	ldr	r3, [pc, #424]	; (80143ec <_dtoa_r+0x5f4>)
 8014244:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014248:	ed93 7b00 	vldr	d7, [r3]
 801424c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801424e:	2b00      	cmp	r3, #0
 8014250:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014254:	f280 80d8 	bge.w	8014408 <_dtoa_r+0x610>
 8014258:	f1b9 0f00 	cmp.w	r9, #0
 801425c:	f300 80d4 	bgt.w	8014408 <_dtoa_r+0x610>
 8014260:	f040 825e 	bne.w	8014720 <_dtoa_r+0x928>
 8014264:	2200      	movs	r2, #0
 8014266:	4b66      	ldr	r3, [pc, #408]	; (8014400 <_dtoa_r+0x608>)
 8014268:	ec51 0b17 	vmov	r0, r1, d7
 801426c:	f7ec f9dc 	bl	8000628 <__aeabi_dmul>
 8014270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014274:	f7ec fc5e 	bl	8000b34 <__aeabi_dcmpge>
 8014278:	464f      	mov	r7, r9
 801427a:	464e      	mov	r6, r9
 801427c:	2800      	cmp	r0, #0
 801427e:	f040 8234 	bne.w	80146ea <_dtoa_r+0x8f2>
 8014282:	2331      	movs	r3, #49	; 0x31
 8014284:	f10b 0501 	add.w	r5, fp, #1
 8014288:	f88b 3000 	strb.w	r3, [fp]
 801428c:	f10a 0a01 	add.w	sl, sl, #1
 8014290:	e22f      	b.n	80146f2 <_dtoa_r+0x8fa>
 8014292:	07f2      	lsls	r2, r6, #31
 8014294:	d505      	bpl.n	80142a2 <_dtoa_r+0x4aa>
 8014296:	e9d7 2300 	ldrd	r2, r3, [r7]
 801429a:	f7ec f9c5 	bl	8000628 <__aeabi_dmul>
 801429e:	3501      	adds	r5, #1
 80142a0:	2301      	movs	r3, #1
 80142a2:	1076      	asrs	r6, r6, #1
 80142a4:	3708      	adds	r7, #8
 80142a6:	e772      	b.n	801418e <_dtoa_r+0x396>
 80142a8:	2502      	movs	r5, #2
 80142aa:	e774      	b.n	8014196 <_dtoa_r+0x39e>
 80142ac:	f8cd a020 	str.w	sl, [sp, #32]
 80142b0:	464f      	mov	r7, r9
 80142b2:	e791      	b.n	80141d8 <_dtoa_r+0x3e0>
 80142b4:	4b4d      	ldr	r3, [pc, #308]	; (80143ec <_dtoa_r+0x5f4>)
 80142b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80142ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80142be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d047      	beq.n	8014354 <_dtoa_r+0x55c>
 80142c4:	4602      	mov	r2, r0
 80142c6:	460b      	mov	r3, r1
 80142c8:	2000      	movs	r0, #0
 80142ca:	494e      	ldr	r1, [pc, #312]	; (8014404 <_dtoa_r+0x60c>)
 80142cc:	f7ec fad6 	bl	800087c <__aeabi_ddiv>
 80142d0:	462a      	mov	r2, r5
 80142d2:	4633      	mov	r3, r6
 80142d4:	f7eb fff0 	bl	80002b8 <__aeabi_dsub>
 80142d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80142dc:	465d      	mov	r5, fp
 80142de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80142e2:	f7ec fc51 	bl	8000b88 <__aeabi_d2iz>
 80142e6:	4606      	mov	r6, r0
 80142e8:	f7ec f934 	bl	8000554 <__aeabi_i2d>
 80142ec:	4602      	mov	r2, r0
 80142ee:	460b      	mov	r3, r1
 80142f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80142f4:	f7eb ffe0 	bl	80002b8 <__aeabi_dsub>
 80142f8:	3630      	adds	r6, #48	; 0x30
 80142fa:	f805 6b01 	strb.w	r6, [r5], #1
 80142fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014302:	e9cd 0100 	strd	r0, r1, [sp]
 8014306:	f7ec fc01 	bl	8000b0c <__aeabi_dcmplt>
 801430a:	2800      	cmp	r0, #0
 801430c:	d163      	bne.n	80143d6 <_dtoa_r+0x5de>
 801430e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014312:	2000      	movs	r0, #0
 8014314:	4937      	ldr	r1, [pc, #220]	; (80143f4 <_dtoa_r+0x5fc>)
 8014316:	f7eb ffcf 	bl	80002b8 <__aeabi_dsub>
 801431a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801431e:	f7ec fbf5 	bl	8000b0c <__aeabi_dcmplt>
 8014322:	2800      	cmp	r0, #0
 8014324:	f040 80b7 	bne.w	8014496 <_dtoa_r+0x69e>
 8014328:	eba5 030b 	sub.w	r3, r5, fp
 801432c:	429f      	cmp	r7, r3
 801432e:	f77f af7c 	ble.w	801422a <_dtoa_r+0x432>
 8014332:	2200      	movs	r2, #0
 8014334:	4b30      	ldr	r3, [pc, #192]	; (80143f8 <_dtoa_r+0x600>)
 8014336:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801433a:	f7ec f975 	bl	8000628 <__aeabi_dmul>
 801433e:	2200      	movs	r2, #0
 8014340:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014344:	4b2c      	ldr	r3, [pc, #176]	; (80143f8 <_dtoa_r+0x600>)
 8014346:	e9dd 0100 	ldrd	r0, r1, [sp]
 801434a:	f7ec f96d 	bl	8000628 <__aeabi_dmul>
 801434e:	e9cd 0100 	strd	r0, r1, [sp]
 8014352:	e7c4      	b.n	80142de <_dtoa_r+0x4e6>
 8014354:	462a      	mov	r2, r5
 8014356:	4633      	mov	r3, r6
 8014358:	f7ec f966 	bl	8000628 <__aeabi_dmul>
 801435c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014360:	eb0b 0507 	add.w	r5, fp, r7
 8014364:	465e      	mov	r6, fp
 8014366:	e9dd 0100 	ldrd	r0, r1, [sp]
 801436a:	f7ec fc0d 	bl	8000b88 <__aeabi_d2iz>
 801436e:	4607      	mov	r7, r0
 8014370:	f7ec f8f0 	bl	8000554 <__aeabi_i2d>
 8014374:	3730      	adds	r7, #48	; 0x30
 8014376:	4602      	mov	r2, r0
 8014378:	460b      	mov	r3, r1
 801437a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801437e:	f7eb ff9b 	bl	80002b8 <__aeabi_dsub>
 8014382:	f806 7b01 	strb.w	r7, [r6], #1
 8014386:	42ae      	cmp	r6, r5
 8014388:	e9cd 0100 	strd	r0, r1, [sp]
 801438c:	f04f 0200 	mov.w	r2, #0
 8014390:	d126      	bne.n	80143e0 <_dtoa_r+0x5e8>
 8014392:	4b1c      	ldr	r3, [pc, #112]	; (8014404 <_dtoa_r+0x60c>)
 8014394:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014398:	f7eb ff90 	bl	80002bc <__adddf3>
 801439c:	4602      	mov	r2, r0
 801439e:	460b      	mov	r3, r1
 80143a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143a4:	f7ec fbd0 	bl	8000b48 <__aeabi_dcmpgt>
 80143a8:	2800      	cmp	r0, #0
 80143aa:	d174      	bne.n	8014496 <_dtoa_r+0x69e>
 80143ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80143b0:	2000      	movs	r0, #0
 80143b2:	4914      	ldr	r1, [pc, #80]	; (8014404 <_dtoa_r+0x60c>)
 80143b4:	f7eb ff80 	bl	80002b8 <__aeabi_dsub>
 80143b8:	4602      	mov	r2, r0
 80143ba:	460b      	mov	r3, r1
 80143bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143c0:	f7ec fba4 	bl	8000b0c <__aeabi_dcmplt>
 80143c4:	2800      	cmp	r0, #0
 80143c6:	f43f af30 	beq.w	801422a <_dtoa_r+0x432>
 80143ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80143ce:	2b30      	cmp	r3, #48	; 0x30
 80143d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80143d4:	d002      	beq.n	80143dc <_dtoa_r+0x5e4>
 80143d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80143da:	e04a      	b.n	8014472 <_dtoa_r+0x67a>
 80143dc:	4615      	mov	r5, r2
 80143de:	e7f4      	b.n	80143ca <_dtoa_r+0x5d2>
 80143e0:	4b05      	ldr	r3, [pc, #20]	; (80143f8 <_dtoa_r+0x600>)
 80143e2:	f7ec f921 	bl	8000628 <__aeabi_dmul>
 80143e6:	e9cd 0100 	strd	r0, r1, [sp]
 80143ea:	e7bc      	b.n	8014366 <_dtoa_r+0x56e>
 80143ec:	080165d8 	.word	0x080165d8
 80143f0:	080165b0 	.word	0x080165b0
 80143f4:	3ff00000 	.word	0x3ff00000
 80143f8:	40240000 	.word	0x40240000
 80143fc:	401c0000 	.word	0x401c0000
 8014400:	40140000 	.word	0x40140000
 8014404:	3fe00000 	.word	0x3fe00000
 8014408:	e9dd 6700 	ldrd	r6, r7, [sp]
 801440c:	465d      	mov	r5, fp
 801440e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014412:	4630      	mov	r0, r6
 8014414:	4639      	mov	r1, r7
 8014416:	f7ec fa31 	bl	800087c <__aeabi_ddiv>
 801441a:	f7ec fbb5 	bl	8000b88 <__aeabi_d2iz>
 801441e:	4680      	mov	r8, r0
 8014420:	f7ec f898 	bl	8000554 <__aeabi_i2d>
 8014424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014428:	f7ec f8fe 	bl	8000628 <__aeabi_dmul>
 801442c:	4602      	mov	r2, r0
 801442e:	460b      	mov	r3, r1
 8014430:	4630      	mov	r0, r6
 8014432:	4639      	mov	r1, r7
 8014434:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014438:	f7eb ff3e 	bl	80002b8 <__aeabi_dsub>
 801443c:	f805 6b01 	strb.w	r6, [r5], #1
 8014440:	eba5 060b 	sub.w	r6, r5, fp
 8014444:	45b1      	cmp	r9, r6
 8014446:	4602      	mov	r2, r0
 8014448:	460b      	mov	r3, r1
 801444a:	d139      	bne.n	80144c0 <_dtoa_r+0x6c8>
 801444c:	f7eb ff36 	bl	80002bc <__adddf3>
 8014450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014454:	4606      	mov	r6, r0
 8014456:	460f      	mov	r7, r1
 8014458:	f7ec fb76 	bl	8000b48 <__aeabi_dcmpgt>
 801445c:	b9c8      	cbnz	r0, 8014492 <_dtoa_r+0x69a>
 801445e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014462:	4630      	mov	r0, r6
 8014464:	4639      	mov	r1, r7
 8014466:	f7ec fb47 	bl	8000af8 <__aeabi_dcmpeq>
 801446a:	b110      	cbz	r0, 8014472 <_dtoa_r+0x67a>
 801446c:	f018 0f01 	tst.w	r8, #1
 8014470:	d10f      	bne.n	8014492 <_dtoa_r+0x69a>
 8014472:	9904      	ldr	r1, [sp, #16]
 8014474:	4620      	mov	r0, r4
 8014476:	f000 fc99 	bl	8014dac <_Bfree>
 801447a:	2300      	movs	r3, #0
 801447c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801447e:	702b      	strb	r3, [r5, #0]
 8014480:	f10a 0301 	add.w	r3, sl, #1
 8014484:	6013      	str	r3, [r2, #0]
 8014486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014488:	2b00      	cmp	r3, #0
 801448a:	f000 8241 	beq.w	8014910 <_dtoa_r+0xb18>
 801448e:	601d      	str	r5, [r3, #0]
 8014490:	e23e      	b.n	8014910 <_dtoa_r+0xb18>
 8014492:	f8cd a020 	str.w	sl, [sp, #32]
 8014496:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801449a:	2a39      	cmp	r2, #57	; 0x39
 801449c:	f105 33ff 	add.w	r3, r5, #4294967295
 80144a0:	d108      	bne.n	80144b4 <_dtoa_r+0x6bc>
 80144a2:	459b      	cmp	fp, r3
 80144a4:	d10a      	bne.n	80144bc <_dtoa_r+0x6c4>
 80144a6:	9b08      	ldr	r3, [sp, #32]
 80144a8:	3301      	adds	r3, #1
 80144aa:	9308      	str	r3, [sp, #32]
 80144ac:	2330      	movs	r3, #48	; 0x30
 80144ae:	f88b 3000 	strb.w	r3, [fp]
 80144b2:	465b      	mov	r3, fp
 80144b4:	781a      	ldrb	r2, [r3, #0]
 80144b6:	3201      	adds	r2, #1
 80144b8:	701a      	strb	r2, [r3, #0]
 80144ba:	e78c      	b.n	80143d6 <_dtoa_r+0x5de>
 80144bc:	461d      	mov	r5, r3
 80144be:	e7ea      	b.n	8014496 <_dtoa_r+0x69e>
 80144c0:	2200      	movs	r2, #0
 80144c2:	4b9b      	ldr	r3, [pc, #620]	; (8014730 <_dtoa_r+0x938>)
 80144c4:	f7ec f8b0 	bl	8000628 <__aeabi_dmul>
 80144c8:	2200      	movs	r2, #0
 80144ca:	2300      	movs	r3, #0
 80144cc:	4606      	mov	r6, r0
 80144ce:	460f      	mov	r7, r1
 80144d0:	f7ec fb12 	bl	8000af8 <__aeabi_dcmpeq>
 80144d4:	2800      	cmp	r0, #0
 80144d6:	d09a      	beq.n	801440e <_dtoa_r+0x616>
 80144d8:	e7cb      	b.n	8014472 <_dtoa_r+0x67a>
 80144da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144dc:	2a00      	cmp	r2, #0
 80144de:	f000 808b 	beq.w	80145f8 <_dtoa_r+0x800>
 80144e2:	9a06      	ldr	r2, [sp, #24]
 80144e4:	2a01      	cmp	r2, #1
 80144e6:	dc6e      	bgt.n	80145c6 <_dtoa_r+0x7ce>
 80144e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80144ea:	2a00      	cmp	r2, #0
 80144ec:	d067      	beq.n	80145be <_dtoa_r+0x7c6>
 80144ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80144f2:	9f07      	ldr	r7, [sp, #28]
 80144f4:	9d05      	ldr	r5, [sp, #20]
 80144f6:	9a05      	ldr	r2, [sp, #20]
 80144f8:	2101      	movs	r1, #1
 80144fa:	441a      	add	r2, r3
 80144fc:	4620      	mov	r0, r4
 80144fe:	9205      	str	r2, [sp, #20]
 8014500:	4498      	add	r8, r3
 8014502:	f000 fcf3 	bl	8014eec <__i2b>
 8014506:	4606      	mov	r6, r0
 8014508:	2d00      	cmp	r5, #0
 801450a:	dd0c      	ble.n	8014526 <_dtoa_r+0x72e>
 801450c:	f1b8 0f00 	cmp.w	r8, #0
 8014510:	dd09      	ble.n	8014526 <_dtoa_r+0x72e>
 8014512:	4545      	cmp	r5, r8
 8014514:	9a05      	ldr	r2, [sp, #20]
 8014516:	462b      	mov	r3, r5
 8014518:	bfa8      	it	ge
 801451a:	4643      	movge	r3, r8
 801451c:	1ad2      	subs	r2, r2, r3
 801451e:	9205      	str	r2, [sp, #20]
 8014520:	1aed      	subs	r5, r5, r3
 8014522:	eba8 0803 	sub.w	r8, r8, r3
 8014526:	9b07      	ldr	r3, [sp, #28]
 8014528:	b1eb      	cbz	r3, 8014566 <_dtoa_r+0x76e>
 801452a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801452c:	2b00      	cmp	r3, #0
 801452e:	d067      	beq.n	8014600 <_dtoa_r+0x808>
 8014530:	b18f      	cbz	r7, 8014556 <_dtoa_r+0x75e>
 8014532:	4631      	mov	r1, r6
 8014534:	463a      	mov	r2, r7
 8014536:	4620      	mov	r0, r4
 8014538:	f000 fd78 	bl	801502c <__pow5mult>
 801453c:	9a04      	ldr	r2, [sp, #16]
 801453e:	4601      	mov	r1, r0
 8014540:	4606      	mov	r6, r0
 8014542:	4620      	mov	r0, r4
 8014544:	f000 fcdb 	bl	8014efe <__multiply>
 8014548:	9904      	ldr	r1, [sp, #16]
 801454a:	9008      	str	r0, [sp, #32]
 801454c:	4620      	mov	r0, r4
 801454e:	f000 fc2d 	bl	8014dac <_Bfree>
 8014552:	9b08      	ldr	r3, [sp, #32]
 8014554:	9304      	str	r3, [sp, #16]
 8014556:	9b07      	ldr	r3, [sp, #28]
 8014558:	1bda      	subs	r2, r3, r7
 801455a:	d004      	beq.n	8014566 <_dtoa_r+0x76e>
 801455c:	9904      	ldr	r1, [sp, #16]
 801455e:	4620      	mov	r0, r4
 8014560:	f000 fd64 	bl	801502c <__pow5mult>
 8014564:	9004      	str	r0, [sp, #16]
 8014566:	2101      	movs	r1, #1
 8014568:	4620      	mov	r0, r4
 801456a:	f000 fcbf 	bl	8014eec <__i2b>
 801456e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014570:	4607      	mov	r7, r0
 8014572:	2b00      	cmp	r3, #0
 8014574:	f000 81d0 	beq.w	8014918 <_dtoa_r+0xb20>
 8014578:	461a      	mov	r2, r3
 801457a:	4601      	mov	r1, r0
 801457c:	4620      	mov	r0, r4
 801457e:	f000 fd55 	bl	801502c <__pow5mult>
 8014582:	9b06      	ldr	r3, [sp, #24]
 8014584:	2b01      	cmp	r3, #1
 8014586:	4607      	mov	r7, r0
 8014588:	dc40      	bgt.n	801460c <_dtoa_r+0x814>
 801458a:	9b00      	ldr	r3, [sp, #0]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d139      	bne.n	8014604 <_dtoa_r+0x80c>
 8014590:	9b01      	ldr	r3, [sp, #4]
 8014592:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014596:	2b00      	cmp	r3, #0
 8014598:	d136      	bne.n	8014608 <_dtoa_r+0x810>
 801459a:	9b01      	ldr	r3, [sp, #4]
 801459c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80145a0:	0d1b      	lsrs	r3, r3, #20
 80145a2:	051b      	lsls	r3, r3, #20
 80145a4:	b12b      	cbz	r3, 80145b2 <_dtoa_r+0x7ba>
 80145a6:	9b05      	ldr	r3, [sp, #20]
 80145a8:	3301      	adds	r3, #1
 80145aa:	9305      	str	r3, [sp, #20]
 80145ac:	f108 0801 	add.w	r8, r8, #1
 80145b0:	2301      	movs	r3, #1
 80145b2:	9307      	str	r3, [sp, #28]
 80145b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d12a      	bne.n	8014610 <_dtoa_r+0x818>
 80145ba:	2001      	movs	r0, #1
 80145bc:	e030      	b.n	8014620 <_dtoa_r+0x828>
 80145be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80145c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80145c4:	e795      	b.n	80144f2 <_dtoa_r+0x6fa>
 80145c6:	9b07      	ldr	r3, [sp, #28]
 80145c8:	f109 37ff 	add.w	r7, r9, #4294967295
 80145cc:	42bb      	cmp	r3, r7
 80145ce:	bfbf      	itttt	lt
 80145d0:	9b07      	ldrlt	r3, [sp, #28]
 80145d2:	9707      	strlt	r7, [sp, #28]
 80145d4:	1afa      	sublt	r2, r7, r3
 80145d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80145d8:	bfbb      	ittet	lt
 80145da:	189b      	addlt	r3, r3, r2
 80145dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80145de:	1bdf      	subge	r7, r3, r7
 80145e0:	2700      	movlt	r7, #0
 80145e2:	f1b9 0f00 	cmp.w	r9, #0
 80145e6:	bfb5      	itete	lt
 80145e8:	9b05      	ldrlt	r3, [sp, #20]
 80145ea:	9d05      	ldrge	r5, [sp, #20]
 80145ec:	eba3 0509 	sublt.w	r5, r3, r9
 80145f0:	464b      	movge	r3, r9
 80145f2:	bfb8      	it	lt
 80145f4:	2300      	movlt	r3, #0
 80145f6:	e77e      	b.n	80144f6 <_dtoa_r+0x6fe>
 80145f8:	9f07      	ldr	r7, [sp, #28]
 80145fa:	9d05      	ldr	r5, [sp, #20]
 80145fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80145fe:	e783      	b.n	8014508 <_dtoa_r+0x710>
 8014600:	9a07      	ldr	r2, [sp, #28]
 8014602:	e7ab      	b.n	801455c <_dtoa_r+0x764>
 8014604:	2300      	movs	r3, #0
 8014606:	e7d4      	b.n	80145b2 <_dtoa_r+0x7ba>
 8014608:	9b00      	ldr	r3, [sp, #0]
 801460a:	e7d2      	b.n	80145b2 <_dtoa_r+0x7ba>
 801460c:	2300      	movs	r3, #0
 801460e:	9307      	str	r3, [sp, #28]
 8014610:	693b      	ldr	r3, [r7, #16]
 8014612:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014616:	6918      	ldr	r0, [r3, #16]
 8014618:	f000 fc1a 	bl	8014e50 <__hi0bits>
 801461c:	f1c0 0020 	rsb	r0, r0, #32
 8014620:	4440      	add	r0, r8
 8014622:	f010 001f 	ands.w	r0, r0, #31
 8014626:	d047      	beq.n	80146b8 <_dtoa_r+0x8c0>
 8014628:	f1c0 0320 	rsb	r3, r0, #32
 801462c:	2b04      	cmp	r3, #4
 801462e:	dd3b      	ble.n	80146a8 <_dtoa_r+0x8b0>
 8014630:	9b05      	ldr	r3, [sp, #20]
 8014632:	f1c0 001c 	rsb	r0, r0, #28
 8014636:	4403      	add	r3, r0
 8014638:	9305      	str	r3, [sp, #20]
 801463a:	4405      	add	r5, r0
 801463c:	4480      	add	r8, r0
 801463e:	9b05      	ldr	r3, [sp, #20]
 8014640:	2b00      	cmp	r3, #0
 8014642:	dd05      	ble.n	8014650 <_dtoa_r+0x858>
 8014644:	461a      	mov	r2, r3
 8014646:	9904      	ldr	r1, [sp, #16]
 8014648:	4620      	mov	r0, r4
 801464a:	f000 fd3d 	bl	80150c8 <__lshift>
 801464e:	9004      	str	r0, [sp, #16]
 8014650:	f1b8 0f00 	cmp.w	r8, #0
 8014654:	dd05      	ble.n	8014662 <_dtoa_r+0x86a>
 8014656:	4639      	mov	r1, r7
 8014658:	4642      	mov	r2, r8
 801465a:	4620      	mov	r0, r4
 801465c:	f000 fd34 	bl	80150c8 <__lshift>
 8014660:	4607      	mov	r7, r0
 8014662:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014664:	b353      	cbz	r3, 80146bc <_dtoa_r+0x8c4>
 8014666:	4639      	mov	r1, r7
 8014668:	9804      	ldr	r0, [sp, #16]
 801466a:	f000 fd81 	bl	8015170 <__mcmp>
 801466e:	2800      	cmp	r0, #0
 8014670:	da24      	bge.n	80146bc <_dtoa_r+0x8c4>
 8014672:	2300      	movs	r3, #0
 8014674:	220a      	movs	r2, #10
 8014676:	9904      	ldr	r1, [sp, #16]
 8014678:	4620      	mov	r0, r4
 801467a:	f000 fbae 	bl	8014dda <__multadd>
 801467e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014680:	9004      	str	r0, [sp, #16]
 8014682:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014686:	2b00      	cmp	r3, #0
 8014688:	f000 814d 	beq.w	8014926 <_dtoa_r+0xb2e>
 801468c:	2300      	movs	r3, #0
 801468e:	4631      	mov	r1, r6
 8014690:	220a      	movs	r2, #10
 8014692:	4620      	mov	r0, r4
 8014694:	f000 fba1 	bl	8014dda <__multadd>
 8014698:	9b02      	ldr	r3, [sp, #8]
 801469a:	2b00      	cmp	r3, #0
 801469c:	4606      	mov	r6, r0
 801469e:	dc4f      	bgt.n	8014740 <_dtoa_r+0x948>
 80146a0:	9b06      	ldr	r3, [sp, #24]
 80146a2:	2b02      	cmp	r3, #2
 80146a4:	dd4c      	ble.n	8014740 <_dtoa_r+0x948>
 80146a6:	e011      	b.n	80146cc <_dtoa_r+0x8d4>
 80146a8:	d0c9      	beq.n	801463e <_dtoa_r+0x846>
 80146aa:	9a05      	ldr	r2, [sp, #20]
 80146ac:	331c      	adds	r3, #28
 80146ae:	441a      	add	r2, r3
 80146b0:	9205      	str	r2, [sp, #20]
 80146b2:	441d      	add	r5, r3
 80146b4:	4498      	add	r8, r3
 80146b6:	e7c2      	b.n	801463e <_dtoa_r+0x846>
 80146b8:	4603      	mov	r3, r0
 80146ba:	e7f6      	b.n	80146aa <_dtoa_r+0x8b2>
 80146bc:	f1b9 0f00 	cmp.w	r9, #0
 80146c0:	dc38      	bgt.n	8014734 <_dtoa_r+0x93c>
 80146c2:	9b06      	ldr	r3, [sp, #24]
 80146c4:	2b02      	cmp	r3, #2
 80146c6:	dd35      	ble.n	8014734 <_dtoa_r+0x93c>
 80146c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80146cc:	9b02      	ldr	r3, [sp, #8]
 80146ce:	b963      	cbnz	r3, 80146ea <_dtoa_r+0x8f2>
 80146d0:	4639      	mov	r1, r7
 80146d2:	2205      	movs	r2, #5
 80146d4:	4620      	mov	r0, r4
 80146d6:	f000 fb80 	bl	8014dda <__multadd>
 80146da:	4601      	mov	r1, r0
 80146dc:	4607      	mov	r7, r0
 80146de:	9804      	ldr	r0, [sp, #16]
 80146e0:	f000 fd46 	bl	8015170 <__mcmp>
 80146e4:	2800      	cmp	r0, #0
 80146e6:	f73f adcc 	bgt.w	8014282 <_dtoa_r+0x48a>
 80146ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146ec:	465d      	mov	r5, fp
 80146ee:	ea6f 0a03 	mvn.w	sl, r3
 80146f2:	f04f 0900 	mov.w	r9, #0
 80146f6:	4639      	mov	r1, r7
 80146f8:	4620      	mov	r0, r4
 80146fa:	f000 fb57 	bl	8014dac <_Bfree>
 80146fe:	2e00      	cmp	r6, #0
 8014700:	f43f aeb7 	beq.w	8014472 <_dtoa_r+0x67a>
 8014704:	f1b9 0f00 	cmp.w	r9, #0
 8014708:	d005      	beq.n	8014716 <_dtoa_r+0x91e>
 801470a:	45b1      	cmp	r9, r6
 801470c:	d003      	beq.n	8014716 <_dtoa_r+0x91e>
 801470e:	4649      	mov	r1, r9
 8014710:	4620      	mov	r0, r4
 8014712:	f000 fb4b 	bl	8014dac <_Bfree>
 8014716:	4631      	mov	r1, r6
 8014718:	4620      	mov	r0, r4
 801471a:	f000 fb47 	bl	8014dac <_Bfree>
 801471e:	e6a8      	b.n	8014472 <_dtoa_r+0x67a>
 8014720:	2700      	movs	r7, #0
 8014722:	463e      	mov	r6, r7
 8014724:	e7e1      	b.n	80146ea <_dtoa_r+0x8f2>
 8014726:	f8dd a020 	ldr.w	sl, [sp, #32]
 801472a:	463e      	mov	r6, r7
 801472c:	e5a9      	b.n	8014282 <_dtoa_r+0x48a>
 801472e:	bf00      	nop
 8014730:	40240000 	.word	0x40240000
 8014734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014736:	f8cd 9008 	str.w	r9, [sp, #8]
 801473a:	2b00      	cmp	r3, #0
 801473c:	f000 80fa 	beq.w	8014934 <_dtoa_r+0xb3c>
 8014740:	2d00      	cmp	r5, #0
 8014742:	dd05      	ble.n	8014750 <_dtoa_r+0x958>
 8014744:	4631      	mov	r1, r6
 8014746:	462a      	mov	r2, r5
 8014748:	4620      	mov	r0, r4
 801474a:	f000 fcbd 	bl	80150c8 <__lshift>
 801474e:	4606      	mov	r6, r0
 8014750:	9b07      	ldr	r3, [sp, #28]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d04c      	beq.n	80147f0 <_dtoa_r+0x9f8>
 8014756:	6871      	ldr	r1, [r6, #4]
 8014758:	4620      	mov	r0, r4
 801475a:	f000 faf3 	bl	8014d44 <_Balloc>
 801475e:	6932      	ldr	r2, [r6, #16]
 8014760:	3202      	adds	r2, #2
 8014762:	4605      	mov	r5, r0
 8014764:	0092      	lsls	r2, r2, #2
 8014766:	f106 010c 	add.w	r1, r6, #12
 801476a:	300c      	adds	r0, #12
 801476c:	f7fe fc34 	bl	8012fd8 <memcpy>
 8014770:	2201      	movs	r2, #1
 8014772:	4629      	mov	r1, r5
 8014774:	4620      	mov	r0, r4
 8014776:	f000 fca7 	bl	80150c8 <__lshift>
 801477a:	9b00      	ldr	r3, [sp, #0]
 801477c:	f8cd b014 	str.w	fp, [sp, #20]
 8014780:	f003 0301 	and.w	r3, r3, #1
 8014784:	46b1      	mov	r9, r6
 8014786:	9307      	str	r3, [sp, #28]
 8014788:	4606      	mov	r6, r0
 801478a:	4639      	mov	r1, r7
 801478c:	9804      	ldr	r0, [sp, #16]
 801478e:	f7ff faa7 	bl	8013ce0 <quorem>
 8014792:	4649      	mov	r1, r9
 8014794:	4605      	mov	r5, r0
 8014796:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801479a:	9804      	ldr	r0, [sp, #16]
 801479c:	f000 fce8 	bl	8015170 <__mcmp>
 80147a0:	4632      	mov	r2, r6
 80147a2:	9000      	str	r0, [sp, #0]
 80147a4:	4639      	mov	r1, r7
 80147a6:	4620      	mov	r0, r4
 80147a8:	f000 fcfc 	bl	80151a4 <__mdiff>
 80147ac:	68c3      	ldr	r3, [r0, #12]
 80147ae:	4602      	mov	r2, r0
 80147b0:	bb03      	cbnz	r3, 80147f4 <_dtoa_r+0x9fc>
 80147b2:	4601      	mov	r1, r0
 80147b4:	9008      	str	r0, [sp, #32]
 80147b6:	9804      	ldr	r0, [sp, #16]
 80147b8:	f000 fcda 	bl	8015170 <__mcmp>
 80147bc:	9a08      	ldr	r2, [sp, #32]
 80147be:	4603      	mov	r3, r0
 80147c0:	4611      	mov	r1, r2
 80147c2:	4620      	mov	r0, r4
 80147c4:	9308      	str	r3, [sp, #32]
 80147c6:	f000 faf1 	bl	8014dac <_Bfree>
 80147ca:	9b08      	ldr	r3, [sp, #32]
 80147cc:	b9a3      	cbnz	r3, 80147f8 <_dtoa_r+0xa00>
 80147ce:	9a06      	ldr	r2, [sp, #24]
 80147d0:	b992      	cbnz	r2, 80147f8 <_dtoa_r+0xa00>
 80147d2:	9a07      	ldr	r2, [sp, #28]
 80147d4:	b982      	cbnz	r2, 80147f8 <_dtoa_r+0xa00>
 80147d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80147da:	d029      	beq.n	8014830 <_dtoa_r+0xa38>
 80147dc:	9b00      	ldr	r3, [sp, #0]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	dd01      	ble.n	80147e6 <_dtoa_r+0x9ee>
 80147e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80147e6:	9b05      	ldr	r3, [sp, #20]
 80147e8:	1c5d      	adds	r5, r3, #1
 80147ea:	f883 8000 	strb.w	r8, [r3]
 80147ee:	e782      	b.n	80146f6 <_dtoa_r+0x8fe>
 80147f0:	4630      	mov	r0, r6
 80147f2:	e7c2      	b.n	801477a <_dtoa_r+0x982>
 80147f4:	2301      	movs	r3, #1
 80147f6:	e7e3      	b.n	80147c0 <_dtoa_r+0x9c8>
 80147f8:	9a00      	ldr	r2, [sp, #0]
 80147fa:	2a00      	cmp	r2, #0
 80147fc:	db04      	blt.n	8014808 <_dtoa_r+0xa10>
 80147fe:	d125      	bne.n	801484c <_dtoa_r+0xa54>
 8014800:	9a06      	ldr	r2, [sp, #24]
 8014802:	bb1a      	cbnz	r2, 801484c <_dtoa_r+0xa54>
 8014804:	9a07      	ldr	r2, [sp, #28]
 8014806:	bb0a      	cbnz	r2, 801484c <_dtoa_r+0xa54>
 8014808:	2b00      	cmp	r3, #0
 801480a:	ddec      	ble.n	80147e6 <_dtoa_r+0x9ee>
 801480c:	2201      	movs	r2, #1
 801480e:	9904      	ldr	r1, [sp, #16]
 8014810:	4620      	mov	r0, r4
 8014812:	f000 fc59 	bl	80150c8 <__lshift>
 8014816:	4639      	mov	r1, r7
 8014818:	9004      	str	r0, [sp, #16]
 801481a:	f000 fca9 	bl	8015170 <__mcmp>
 801481e:	2800      	cmp	r0, #0
 8014820:	dc03      	bgt.n	801482a <_dtoa_r+0xa32>
 8014822:	d1e0      	bne.n	80147e6 <_dtoa_r+0x9ee>
 8014824:	f018 0f01 	tst.w	r8, #1
 8014828:	d0dd      	beq.n	80147e6 <_dtoa_r+0x9ee>
 801482a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801482e:	d1d8      	bne.n	80147e2 <_dtoa_r+0x9ea>
 8014830:	9b05      	ldr	r3, [sp, #20]
 8014832:	9a05      	ldr	r2, [sp, #20]
 8014834:	1c5d      	adds	r5, r3, #1
 8014836:	2339      	movs	r3, #57	; 0x39
 8014838:	7013      	strb	r3, [r2, #0]
 801483a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801483e:	2b39      	cmp	r3, #57	; 0x39
 8014840:	f105 32ff 	add.w	r2, r5, #4294967295
 8014844:	d04f      	beq.n	80148e6 <_dtoa_r+0xaee>
 8014846:	3301      	adds	r3, #1
 8014848:	7013      	strb	r3, [r2, #0]
 801484a:	e754      	b.n	80146f6 <_dtoa_r+0x8fe>
 801484c:	9a05      	ldr	r2, [sp, #20]
 801484e:	2b00      	cmp	r3, #0
 8014850:	f102 0501 	add.w	r5, r2, #1
 8014854:	dd06      	ble.n	8014864 <_dtoa_r+0xa6c>
 8014856:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801485a:	d0e9      	beq.n	8014830 <_dtoa_r+0xa38>
 801485c:	f108 0801 	add.w	r8, r8, #1
 8014860:	9b05      	ldr	r3, [sp, #20]
 8014862:	e7c2      	b.n	80147ea <_dtoa_r+0x9f2>
 8014864:	9a02      	ldr	r2, [sp, #8]
 8014866:	f805 8c01 	strb.w	r8, [r5, #-1]
 801486a:	eba5 030b 	sub.w	r3, r5, fp
 801486e:	4293      	cmp	r3, r2
 8014870:	d021      	beq.n	80148b6 <_dtoa_r+0xabe>
 8014872:	2300      	movs	r3, #0
 8014874:	220a      	movs	r2, #10
 8014876:	9904      	ldr	r1, [sp, #16]
 8014878:	4620      	mov	r0, r4
 801487a:	f000 faae 	bl	8014dda <__multadd>
 801487e:	45b1      	cmp	r9, r6
 8014880:	9004      	str	r0, [sp, #16]
 8014882:	f04f 0300 	mov.w	r3, #0
 8014886:	f04f 020a 	mov.w	r2, #10
 801488a:	4649      	mov	r1, r9
 801488c:	4620      	mov	r0, r4
 801488e:	d105      	bne.n	801489c <_dtoa_r+0xaa4>
 8014890:	f000 faa3 	bl	8014dda <__multadd>
 8014894:	4681      	mov	r9, r0
 8014896:	4606      	mov	r6, r0
 8014898:	9505      	str	r5, [sp, #20]
 801489a:	e776      	b.n	801478a <_dtoa_r+0x992>
 801489c:	f000 fa9d 	bl	8014dda <__multadd>
 80148a0:	4631      	mov	r1, r6
 80148a2:	4681      	mov	r9, r0
 80148a4:	2300      	movs	r3, #0
 80148a6:	220a      	movs	r2, #10
 80148a8:	4620      	mov	r0, r4
 80148aa:	f000 fa96 	bl	8014dda <__multadd>
 80148ae:	4606      	mov	r6, r0
 80148b0:	e7f2      	b.n	8014898 <_dtoa_r+0xaa0>
 80148b2:	f04f 0900 	mov.w	r9, #0
 80148b6:	2201      	movs	r2, #1
 80148b8:	9904      	ldr	r1, [sp, #16]
 80148ba:	4620      	mov	r0, r4
 80148bc:	f000 fc04 	bl	80150c8 <__lshift>
 80148c0:	4639      	mov	r1, r7
 80148c2:	9004      	str	r0, [sp, #16]
 80148c4:	f000 fc54 	bl	8015170 <__mcmp>
 80148c8:	2800      	cmp	r0, #0
 80148ca:	dcb6      	bgt.n	801483a <_dtoa_r+0xa42>
 80148cc:	d102      	bne.n	80148d4 <_dtoa_r+0xadc>
 80148ce:	f018 0f01 	tst.w	r8, #1
 80148d2:	d1b2      	bne.n	801483a <_dtoa_r+0xa42>
 80148d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80148d8:	2b30      	cmp	r3, #48	; 0x30
 80148da:	f105 32ff 	add.w	r2, r5, #4294967295
 80148de:	f47f af0a 	bne.w	80146f6 <_dtoa_r+0x8fe>
 80148e2:	4615      	mov	r5, r2
 80148e4:	e7f6      	b.n	80148d4 <_dtoa_r+0xadc>
 80148e6:	4593      	cmp	fp, r2
 80148e8:	d105      	bne.n	80148f6 <_dtoa_r+0xafe>
 80148ea:	2331      	movs	r3, #49	; 0x31
 80148ec:	f10a 0a01 	add.w	sl, sl, #1
 80148f0:	f88b 3000 	strb.w	r3, [fp]
 80148f4:	e6ff      	b.n	80146f6 <_dtoa_r+0x8fe>
 80148f6:	4615      	mov	r5, r2
 80148f8:	e79f      	b.n	801483a <_dtoa_r+0xa42>
 80148fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014960 <_dtoa_r+0xb68>
 80148fe:	e007      	b.n	8014910 <_dtoa_r+0xb18>
 8014900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014902:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014964 <_dtoa_r+0xb6c>
 8014906:	b11b      	cbz	r3, 8014910 <_dtoa_r+0xb18>
 8014908:	f10b 0308 	add.w	r3, fp, #8
 801490c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801490e:	6013      	str	r3, [r2, #0]
 8014910:	4658      	mov	r0, fp
 8014912:	b017      	add	sp, #92	; 0x5c
 8014914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014918:	9b06      	ldr	r3, [sp, #24]
 801491a:	2b01      	cmp	r3, #1
 801491c:	f77f ae35 	ble.w	801458a <_dtoa_r+0x792>
 8014920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014922:	9307      	str	r3, [sp, #28]
 8014924:	e649      	b.n	80145ba <_dtoa_r+0x7c2>
 8014926:	9b02      	ldr	r3, [sp, #8]
 8014928:	2b00      	cmp	r3, #0
 801492a:	dc03      	bgt.n	8014934 <_dtoa_r+0xb3c>
 801492c:	9b06      	ldr	r3, [sp, #24]
 801492e:	2b02      	cmp	r3, #2
 8014930:	f73f aecc 	bgt.w	80146cc <_dtoa_r+0x8d4>
 8014934:	465d      	mov	r5, fp
 8014936:	4639      	mov	r1, r7
 8014938:	9804      	ldr	r0, [sp, #16]
 801493a:	f7ff f9d1 	bl	8013ce0 <quorem>
 801493e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014942:	f805 8b01 	strb.w	r8, [r5], #1
 8014946:	9a02      	ldr	r2, [sp, #8]
 8014948:	eba5 030b 	sub.w	r3, r5, fp
 801494c:	429a      	cmp	r2, r3
 801494e:	ddb0      	ble.n	80148b2 <_dtoa_r+0xaba>
 8014950:	2300      	movs	r3, #0
 8014952:	220a      	movs	r2, #10
 8014954:	9904      	ldr	r1, [sp, #16]
 8014956:	4620      	mov	r0, r4
 8014958:	f000 fa3f 	bl	8014dda <__multadd>
 801495c:	9004      	str	r0, [sp, #16]
 801495e:	e7ea      	b.n	8014936 <_dtoa_r+0xb3e>
 8014960:	0801651c 	.word	0x0801651c
 8014964:	08016540 	.word	0x08016540

08014968 <__sflush_r>:
 8014968:	898a      	ldrh	r2, [r1, #12]
 801496a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801496e:	4605      	mov	r5, r0
 8014970:	0710      	lsls	r0, r2, #28
 8014972:	460c      	mov	r4, r1
 8014974:	d458      	bmi.n	8014a28 <__sflush_r+0xc0>
 8014976:	684b      	ldr	r3, [r1, #4]
 8014978:	2b00      	cmp	r3, #0
 801497a:	dc05      	bgt.n	8014988 <__sflush_r+0x20>
 801497c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801497e:	2b00      	cmp	r3, #0
 8014980:	dc02      	bgt.n	8014988 <__sflush_r+0x20>
 8014982:	2000      	movs	r0, #0
 8014984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014988:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801498a:	2e00      	cmp	r6, #0
 801498c:	d0f9      	beq.n	8014982 <__sflush_r+0x1a>
 801498e:	2300      	movs	r3, #0
 8014990:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014994:	682f      	ldr	r7, [r5, #0]
 8014996:	6a21      	ldr	r1, [r4, #32]
 8014998:	602b      	str	r3, [r5, #0]
 801499a:	d032      	beq.n	8014a02 <__sflush_r+0x9a>
 801499c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801499e:	89a3      	ldrh	r3, [r4, #12]
 80149a0:	075a      	lsls	r2, r3, #29
 80149a2:	d505      	bpl.n	80149b0 <__sflush_r+0x48>
 80149a4:	6863      	ldr	r3, [r4, #4]
 80149a6:	1ac0      	subs	r0, r0, r3
 80149a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80149aa:	b10b      	cbz	r3, 80149b0 <__sflush_r+0x48>
 80149ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80149ae:	1ac0      	subs	r0, r0, r3
 80149b0:	2300      	movs	r3, #0
 80149b2:	4602      	mov	r2, r0
 80149b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149b6:	6a21      	ldr	r1, [r4, #32]
 80149b8:	4628      	mov	r0, r5
 80149ba:	47b0      	blx	r6
 80149bc:	1c43      	adds	r3, r0, #1
 80149be:	89a3      	ldrh	r3, [r4, #12]
 80149c0:	d106      	bne.n	80149d0 <__sflush_r+0x68>
 80149c2:	6829      	ldr	r1, [r5, #0]
 80149c4:	291d      	cmp	r1, #29
 80149c6:	d848      	bhi.n	8014a5a <__sflush_r+0xf2>
 80149c8:	4a29      	ldr	r2, [pc, #164]	; (8014a70 <__sflush_r+0x108>)
 80149ca:	40ca      	lsrs	r2, r1
 80149cc:	07d6      	lsls	r6, r2, #31
 80149ce:	d544      	bpl.n	8014a5a <__sflush_r+0xf2>
 80149d0:	2200      	movs	r2, #0
 80149d2:	6062      	str	r2, [r4, #4]
 80149d4:	04d9      	lsls	r1, r3, #19
 80149d6:	6922      	ldr	r2, [r4, #16]
 80149d8:	6022      	str	r2, [r4, #0]
 80149da:	d504      	bpl.n	80149e6 <__sflush_r+0x7e>
 80149dc:	1c42      	adds	r2, r0, #1
 80149de:	d101      	bne.n	80149e4 <__sflush_r+0x7c>
 80149e0:	682b      	ldr	r3, [r5, #0]
 80149e2:	b903      	cbnz	r3, 80149e6 <__sflush_r+0x7e>
 80149e4:	6560      	str	r0, [r4, #84]	; 0x54
 80149e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80149e8:	602f      	str	r7, [r5, #0]
 80149ea:	2900      	cmp	r1, #0
 80149ec:	d0c9      	beq.n	8014982 <__sflush_r+0x1a>
 80149ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80149f2:	4299      	cmp	r1, r3
 80149f4:	d002      	beq.n	80149fc <__sflush_r+0x94>
 80149f6:	4628      	mov	r0, r5
 80149f8:	f7fe fb02 	bl	8013000 <_free_r>
 80149fc:	2000      	movs	r0, #0
 80149fe:	6360      	str	r0, [r4, #52]	; 0x34
 8014a00:	e7c0      	b.n	8014984 <__sflush_r+0x1c>
 8014a02:	2301      	movs	r3, #1
 8014a04:	4628      	mov	r0, r5
 8014a06:	47b0      	blx	r6
 8014a08:	1c41      	adds	r1, r0, #1
 8014a0a:	d1c8      	bne.n	801499e <__sflush_r+0x36>
 8014a0c:	682b      	ldr	r3, [r5, #0]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d0c5      	beq.n	801499e <__sflush_r+0x36>
 8014a12:	2b1d      	cmp	r3, #29
 8014a14:	d001      	beq.n	8014a1a <__sflush_r+0xb2>
 8014a16:	2b16      	cmp	r3, #22
 8014a18:	d101      	bne.n	8014a1e <__sflush_r+0xb6>
 8014a1a:	602f      	str	r7, [r5, #0]
 8014a1c:	e7b1      	b.n	8014982 <__sflush_r+0x1a>
 8014a1e:	89a3      	ldrh	r3, [r4, #12]
 8014a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a24:	81a3      	strh	r3, [r4, #12]
 8014a26:	e7ad      	b.n	8014984 <__sflush_r+0x1c>
 8014a28:	690f      	ldr	r7, [r1, #16]
 8014a2a:	2f00      	cmp	r7, #0
 8014a2c:	d0a9      	beq.n	8014982 <__sflush_r+0x1a>
 8014a2e:	0793      	lsls	r3, r2, #30
 8014a30:	680e      	ldr	r6, [r1, #0]
 8014a32:	bf08      	it	eq
 8014a34:	694b      	ldreq	r3, [r1, #20]
 8014a36:	600f      	str	r7, [r1, #0]
 8014a38:	bf18      	it	ne
 8014a3a:	2300      	movne	r3, #0
 8014a3c:	eba6 0807 	sub.w	r8, r6, r7
 8014a40:	608b      	str	r3, [r1, #8]
 8014a42:	f1b8 0f00 	cmp.w	r8, #0
 8014a46:	dd9c      	ble.n	8014982 <__sflush_r+0x1a>
 8014a48:	4643      	mov	r3, r8
 8014a4a:	463a      	mov	r2, r7
 8014a4c:	6a21      	ldr	r1, [r4, #32]
 8014a4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014a50:	4628      	mov	r0, r5
 8014a52:	47b0      	blx	r6
 8014a54:	2800      	cmp	r0, #0
 8014a56:	dc06      	bgt.n	8014a66 <__sflush_r+0xfe>
 8014a58:	89a3      	ldrh	r3, [r4, #12]
 8014a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a5e:	81a3      	strh	r3, [r4, #12]
 8014a60:	f04f 30ff 	mov.w	r0, #4294967295
 8014a64:	e78e      	b.n	8014984 <__sflush_r+0x1c>
 8014a66:	4407      	add	r7, r0
 8014a68:	eba8 0800 	sub.w	r8, r8, r0
 8014a6c:	e7e9      	b.n	8014a42 <__sflush_r+0xda>
 8014a6e:	bf00      	nop
 8014a70:	20400001 	.word	0x20400001

08014a74 <_fflush_r>:
 8014a74:	b538      	push	{r3, r4, r5, lr}
 8014a76:	690b      	ldr	r3, [r1, #16]
 8014a78:	4605      	mov	r5, r0
 8014a7a:	460c      	mov	r4, r1
 8014a7c:	b1db      	cbz	r3, 8014ab6 <_fflush_r+0x42>
 8014a7e:	b118      	cbz	r0, 8014a88 <_fflush_r+0x14>
 8014a80:	6983      	ldr	r3, [r0, #24]
 8014a82:	b90b      	cbnz	r3, 8014a88 <_fflush_r+0x14>
 8014a84:	f000 f860 	bl	8014b48 <__sinit>
 8014a88:	4b0c      	ldr	r3, [pc, #48]	; (8014abc <_fflush_r+0x48>)
 8014a8a:	429c      	cmp	r4, r3
 8014a8c:	d109      	bne.n	8014aa2 <_fflush_r+0x2e>
 8014a8e:	686c      	ldr	r4, [r5, #4]
 8014a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a94:	b17b      	cbz	r3, 8014ab6 <_fflush_r+0x42>
 8014a96:	4621      	mov	r1, r4
 8014a98:	4628      	mov	r0, r5
 8014a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a9e:	f7ff bf63 	b.w	8014968 <__sflush_r>
 8014aa2:	4b07      	ldr	r3, [pc, #28]	; (8014ac0 <_fflush_r+0x4c>)
 8014aa4:	429c      	cmp	r4, r3
 8014aa6:	d101      	bne.n	8014aac <_fflush_r+0x38>
 8014aa8:	68ac      	ldr	r4, [r5, #8]
 8014aaa:	e7f1      	b.n	8014a90 <_fflush_r+0x1c>
 8014aac:	4b05      	ldr	r3, [pc, #20]	; (8014ac4 <_fflush_r+0x50>)
 8014aae:	429c      	cmp	r4, r3
 8014ab0:	bf08      	it	eq
 8014ab2:	68ec      	ldreq	r4, [r5, #12]
 8014ab4:	e7ec      	b.n	8014a90 <_fflush_r+0x1c>
 8014ab6:	2000      	movs	r0, #0
 8014ab8:	bd38      	pop	{r3, r4, r5, pc}
 8014aba:	bf00      	nop
 8014abc:	08016570 	.word	0x08016570
 8014ac0:	08016590 	.word	0x08016590
 8014ac4:	08016550 	.word	0x08016550

08014ac8 <std>:
 8014ac8:	2300      	movs	r3, #0
 8014aca:	b510      	push	{r4, lr}
 8014acc:	4604      	mov	r4, r0
 8014ace:	e9c0 3300 	strd	r3, r3, [r0]
 8014ad2:	6083      	str	r3, [r0, #8]
 8014ad4:	8181      	strh	r1, [r0, #12]
 8014ad6:	6643      	str	r3, [r0, #100]	; 0x64
 8014ad8:	81c2      	strh	r2, [r0, #14]
 8014ada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014ade:	6183      	str	r3, [r0, #24]
 8014ae0:	4619      	mov	r1, r3
 8014ae2:	2208      	movs	r2, #8
 8014ae4:	305c      	adds	r0, #92	; 0x5c
 8014ae6:	f7fe fa82 	bl	8012fee <memset>
 8014aea:	4b05      	ldr	r3, [pc, #20]	; (8014b00 <std+0x38>)
 8014aec:	6263      	str	r3, [r4, #36]	; 0x24
 8014aee:	4b05      	ldr	r3, [pc, #20]	; (8014b04 <std+0x3c>)
 8014af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8014af2:	4b05      	ldr	r3, [pc, #20]	; (8014b08 <std+0x40>)
 8014af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014af6:	4b05      	ldr	r3, [pc, #20]	; (8014b0c <std+0x44>)
 8014af8:	6224      	str	r4, [r4, #32]
 8014afa:	6323      	str	r3, [r4, #48]	; 0x30
 8014afc:	bd10      	pop	{r4, pc}
 8014afe:	bf00      	nop
 8014b00:	08015889 	.word	0x08015889
 8014b04:	080158ab 	.word	0x080158ab
 8014b08:	080158e3 	.word	0x080158e3
 8014b0c:	08015907 	.word	0x08015907

08014b10 <_cleanup_r>:
 8014b10:	4901      	ldr	r1, [pc, #4]	; (8014b18 <_cleanup_r+0x8>)
 8014b12:	f000 b885 	b.w	8014c20 <_fwalk_reent>
 8014b16:	bf00      	nop
 8014b18:	08014a75 	.word	0x08014a75

08014b1c <__sfmoreglue>:
 8014b1c:	b570      	push	{r4, r5, r6, lr}
 8014b1e:	1e4a      	subs	r2, r1, #1
 8014b20:	2568      	movs	r5, #104	; 0x68
 8014b22:	4355      	muls	r5, r2
 8014b24:	460e      	mov	r6, r1
 8014b26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014b2a:	f7fe fab7 	bl	801309c <_malloc_r>
 8014b2e:	4604      	mov	r4, r0
 8014b30:	b140      	cbz	r0, 8014b44 <__sfmoreglue+0x28>
 8014b32:	2100      	movs	r1, #0
 8014b34:	e9c0 1600 	strd	r1, r6, [r0]
 8014b38:	300c      	adds	r0, #12
 8014b3a:	60a0      	str	r0, [r4, #8]
 8014b3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014b40:	f7fe fa55 	bl	8012fee <memset>
 8014b44:	4620      	mov	r0, r4
 8014b46:	bd70      	pop	{r4, r5, r6, pc}

08014b48 <__sinit>:
 8014b48:	6983      	ldr	r3, [r0, #24]
 8014b4a:	b510      	push	{r4, lr}
 8014b4c:	4604      	mov	r4, r0
 8014b4e:	bb33      	cbnz	r3, 8014b9e <__sinit+0x56>
 8014b50:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014b54:	6503      	str	r3, [r0, #80]	; 0x50
 8014b56:	4b12      	ldr	r3, [pc, #72]	; (8014ba0 <__sinit+0x58>)
 8014b58:	4a12      	ldr	r2, [pc, #72]	; (8014ba4 <__sinit+0x5c>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	6282      	str	r2, [r0, #40]	; 0x28
 8014b5e:	4298      	cmp	r0, r3
 8014b60:	bf04      	itt	eq
 8014b62:	2301      	moveq	r3, #1
 8014b64:	6183      	streq	r3, [r0, #24]
 8014b66:	f000 f81f 	bl	8014ba8 <__sfp>
 8014b6a:	6060      	str	r0, [r4, #4]
 8014b6c:	4620      	mov	r0, r4
 8014b6e:	f000 f81b 	bl	8014ba8 <__sfp>
 8014b72:	60a0      	str	r0, [r4, #8]
 8014b74:	4620      	mov	r0, r4
 8014b76:	f000 f817 	bl	8014ba8 <__sfp>
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	60e0      	str	r0, [r4, #12]
 8014b7e:	2104      	movs	r1, #4
 8014b80:	6860      	ldr	r0, [r4, #4]
 8014b82:	f7ff ffa1 	bl	8014ac8 <std>
 8014b86:	2201      	movs	r2, #1
 8014b88:	2109      	movs	r1, #9
 8014b8a:	68a0      	ldr	r0, [r4, #8]
 8014b8c:	f7ff ff9c 	bl	8014ac8 <std>
 8014b90:	2202      	movs	r2, #2
 8014b92:	2112      	movs	r1, #18
 8014b94:	68e0      	ldr	r0, [r4, #12]
 8014b96:	f7ff ff97 	bl	8014ac8 <std>
 8014b9a:	2301      	movs	r3, #1
 8014b9c:	61a3      	str	r3, [r4, #24]
 8014b9e:	bd10      	pop	{r4, pc}
 8014ba0:	08016508 	.word	0x08016508
 8014ba4:	08014b11 	.word	0x08014b11

08014ba8 <__sfp>:
 8014ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014baa:	4b1b      	ldr	r3, [pc, #108]	; (8014c18 <__sfp+0x70>)
 8014bac:	681e      	ldr	r6, [r3, #0]
 8014bae:	69b3      	ldr	r3, [r6, #24]
 8014bb0:	4607      	mov	r7, r0
 8014bb2:	b913      	cbnz	r3, 8014bba <__sfp+0x12>
 8014bb4:	4630      	mov	r0, r6
 8014bb6:	f7ff ffc7 	bl	8014b48 <__sinit>
 8014bba:	3648      	adds	r6, #72	; 0x48
 8014bbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014bc0:	3b01      	subs	r3, #1
 8014bc2:	d503      	bpl.n	8014bcc <__sfp+0x24>
 8014bc4:	6833      	ldr	r3, [r6, #0]
 8014bc6:	b133      	cbz	r3, 8014bd6 <__sfp+0x2e>
 8014bc8:	6836      	ldr	r6, [r6, #0]
 8014bca:	e7f7      	b.n	8014bbc <__sfp+0x14>
 8014bcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014bd0:	b16d      	cbz	r5, 8014bee <__sfp+0x46>
 8014bd2:	3468      	adds	r4, #104	; 0x68
 8014bd4:	e7f4      	b.n	8014bc0 <__sfp+0x18>
 8014bd6:	2104      	movs	r1, #4
 8014bd8:	4638      	mov	r0, r7
 8014bda:	f7ff ff9f 	bl	8014b1c <__sfmoreglue>
 8014bde:	6030      	str	r0, [r6, #0]
 8014be0:	2800      	cmp	r0, #0
 8014be2:	d1f1      	bne.n	8014bc8 <__sfp+0x20>
 8014be4:	230c      	movs	r3, #12
 8014be6:	603b      	str	r3, [r7, #0]
 8014be8:	4604      	mov	r4, r0
 8014bea:	4620      	mov	r0, r4
 8014bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bee:	4b0b      	ldr	r3, [pc, #44]	; (8014c1c <__sfp+0x74>)
 8014bf0:	6665      	str	r5, [r4, #100]	; 0x64
 8014bf2:	e9c4 5500 	strd	r5, r5, [r4]
 8014bf6:	60a5      	str	r5, [r4, #8]
 8014bf8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014bfc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014c00:	2208      	movs	r2, #8
 8014c02:	4629      	mov	r1, r5
 8014c04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014c08:	f7fe f9f1 	bl	8012fee <memset>
 8014c0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014c10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014c14:	e7e9      	b.n	8014bea <__sfp+0x42>
 8014c16:	bf00      	nop
 8014c18:	08016508 	.word	0x08016508
 8014c1c:	ffff0001 	.word	0xffff0001

08014c20 <_fwalk_reent>:
 8014c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c24:	4680      	mov	r8, r0
 8014c26:	4689      	mov	r9, r1
 8014c28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014c2c:	2600      	movs	r6, #0
 8014c2e:	b914      	cbnz	r4, 8014c36 <_fwalk_reent+0x16>
 8014c30:	4630      	mov	r0, r6
 8014c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c36:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014c3a:	3f01      	subs	r7, #1
 8014c3c:	d501      	bpl.n	8014c42 <_fwalk_reent+0x22>
 8014c3e:	6824      	ldr	r4, [r4, #0]
 8014c40:	e7f5      	b.n	8014c2e <_fwalk_reent+0xe>
 8014c42:	89ab      	ldrh	r3, [r5, #12]
 8014c44:	2b01      	cmp	r3, #1
 8014c46:	d907      	bls.n	8014c58 <_fwalk_reent+0x38>
 8014c48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014c4c:	3301      	adds	r3, #1
 8014c4e:	d003      	beq.n	8014c58 <_fwalk_reent+0x38>
 8014c50:	4629      	mov	r1, r5
 8014c52:	4640      	mov	r0, r8
 8014c54:	47c8      	blx	r9
 8014c56:	4306      	orrs	r6, r0
 8014c58:	3568      	adds	r5, #104	; 0x68
 8014c5a:	e7ee      	b.n	8014c3a <_fwalk_reent+0x1a>

08014c5c <_localeconv_r>:
 8014c5c:	4b04      	ldr	r3, [pc, #16]	; (8014c70 <_localeconv_r+0x14>)
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	6a18      	ldr	r0, [r3, #32]
 8014c62:	4b04      	ldr	r3, [pc, #16]	; (8014c74 <_localeconv_r+0x18>)
 8014c64:	2800      	cmp	r0, #0
 8014c66:	bf08      	it	eq
 8014c68:	4618      	moveq	r0, r3
 8014c6a:	30f0      	adds	r0, #240	; 0xf0
 8014c6c:	4770      	bx	lr
 8014c6e:	bf00      	nop
 8014c70:	20000768 	.word	0x20000768
 8014c74:	200007cc 	.word	0x200007cc

08014c78 <__swhatbuf_r>:
 8014c78:	b570      	push	{r4, r5, r6, lr}
 8014c7a:	460e      	mov	r6, r1
 8014c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c80:	2900      	cmp	r1, #0
 8014c82:	b096      	sub	sp, #88	; 0x58
 8014c84:	4614      	mov	r4, r2
 8014c86:	461d      	mov	r5, r3
 8014c88:	da07      	bge.n	8014c9a <__swhatbuf_r+0x22>
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	602b      	str	r3, [r5, #0]
 8014c8e:	89b3      	ldrh	r3, [r6, #12]
 8014c90:	061a      	lsls	r2, r3, #24
 8014c92:	d410      	bmi.n	8014cb6 <__swhatbuf_r+0x3e>
 8014c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c98:	e00e      	b.n	8014cb8 <__swhatbuf_r+0x40>
 8014c9a:	466a      	mov	r2, sp
 8014c9c:	f000 fe5a 	bl	8015954 <_fstat_r>
 8014ca0:	2800      	cmp	r0, #0
 8014ca2:	dbf2      	blt.n	8014c8a <__swhatbuf_r+0x12>
 8014ca4:	9a01      	ldr	r2, [sp, #4]
 8014ca6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014caa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014cae:	425a      	negs	r2, r3
 8014cb0:	415a      	adcs	r2, r3
 8014cb2:	602a      	str	r2, [r5, #0]
 8014cb4:	e7ee      	b.n	8014c94 <__swhatbuf_r+0x1c>
 8014cb6:	2340      	movs	r3, #64	; 0x40
 8014cb8:	2000      	movs	r0, #0
 8014cba:	6023      	str	r3, [r4, #0]
 8014cbc:	b016      	add	sp, #88	; 0x58
 8014cbe:	bd70      	pop	{r4, r5, r6, pc}

08014cc0 <__smakebuf_r>:
 8014cc0:	898b      	ldrh	r3, [r1, #12]
 8014cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014cc4:	079d      	lsls	r5, r3, #30
 8014cc6:	4606      	mov	r6, r0
 8014cc8:	460c      	mov	r4, r1
 8014cca:	d507      	bpl.n	8014cdc <__smakebuf_r+0x1c>
 8014ccc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014cd0:	6023      	str	r3, [r4, #0]
 8014cd2:	6123      	str	r3, [r4, #16]
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	6163      	str	r3, [r4, #20]
 8014cd8:	b002      	add	sp, #8
 8014cda:	bd70      	pop	{r4, r5, r6, pc}
 8014cdc:	ab01      	add	r3, sp, #4
 8014cde:	466a      	mov	r2, sp
 8014ce0:	f7ff ffca 	bl	8014c78 <__swhatbuf_r>
 8014ce4:	9900      	ldr	r1, [sp, #0]
 8014ce6:	4605      	mov	r5, r0
 8014ce8:	4630      	mov	r0, r6
 8014cea:	f7fe f9d7 	bl	801309c <_malloc_r>
 8014cee:	b948      	cbnz	r0, 8014d04 <__smakebuf_r+0x44>
 8014cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014cf4:	059a      	lsls	r2, r3, #22
 8014cf6:	d4ef      	bmi.n	8014cd8 <__smakebuf_r+0x18>
 8014cf8:	f023 0303 	bic.w	r3, r3, #3
 8014cfc:	f043 0302 	orr.w	r3, r3, #2
 8014d00:	81a3      	strh	r3, [r4, #12]
 8014d02:	e7e3      	b.n	8014ccc <__smakebuf_r+0xc>
 8014d04:	4b0d      	ldr	r3, [pc, #52]	; (8014d3c <__smakebuf_r+0x7c>)
 8014d06:	62b3      	str	r3, [r6, #40]	; 0x28
 8014d08:	89a3      	ldrh	r3, [r4, #12]
 8014d0a:	6020      	str	r0, [r4, #0]
 8014d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d10:	81a3      	strh	r3, [r4, #12]
 8014d12:	9b00      	ldr	r3, [sp, #0]
 8014d14:	6163      	str	r3, [r4, #20]
 8014d16:	9b01      	ldr	r3, [sp, #4]
 8014d18:	6120      	str	r0, [r4, #16]
 8014d1a:	b15b      	cbz	r3, 8014d34 <__smakebuf_r+0x74>
 8014d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d20:	4630      	mov	r0, r6
 8014d22:	f000 fe29 	bl	8015978 <_isatty_r>
 8014d26:	b128      	cbz	r0, 8014d34 <__smakebuf_r+0x74>
 8014d28:	89a3      	ldrh	r3, [r4, #12]
 8014d2a:	f023 0303 	bic.w	r3, r3, #3
 8014d2e:	f043 0301 	orr.w	r3, r3, #1
 8014d32:	81a3      	strh	r3, [r4, #12]
 8014d34:	89a3      	ldrh	r3, [r4, #12]
 8014d36:	431d      	orrs	r5, r3
 8014d38:	81a5      	strh	r5, [r4, #12]
 8014d3a:	e7cd      	b.n	8014cd8 <__smakebuf_r+0x18>
 8014d3c:	08014b11 	.word	0x08014b11

08014d40 <__malloc_lock>:
 8014d40:	4770      	bx	lr

08014d42 <__malloc_unlock>:
 8014d42:	4770      	bx	lr

08014d44 <_Balloc>:
 8014d44:	b570      	push	{r4, r5, r6, lr}
 8014d46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014d48:	4604      	mov	r4, r0
 8014d4a:	460e      	mov	r6, r1
 8014d4c:	b93d      	cbnz	r5, 8014d5e <_Balloc+0x1a>
 8014d4e:	2010      	movs	r0, #16
 8014d50:	f7fe f932 	bl	8012fb8 <malloc>
 8014d54:	6260      	str	r0, [r4, #36]	; 0x24
 8014d56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014d5a:	6005      	str	r5, [r0, #0]
 8014d5c:	60c5      	str	r5, [r0, #12]
 8014d5e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014d60:	68eb      	ldr	r3, [r5, #12]
 8014d62:	b183      	cbz	r3, 8014d86 <_Balloc+0x42>
 8014d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d66:	68db      	ldr	r3, [r3, #12]
 8014d68:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014d6c:	b9b8      	cbnz	r0, 8014d9e <_Balloc+0x5a>
 8014d6e:	2101      	movs	r1, #1
 8014d70:	fa01 f506 	lsl.w	r5, r1, r6
 8014d74:	1d6a      	adds	r2, r5, #5
 8014d76:	0092      	lsls	r2, r2, #2
 8014d78:	4620      	mov	r0, r4
 8014d7a:	f000 fabf 	bl	80152fc <_calloc_r>
 8014d7e:	b160      	cbz	r0, 8014d9a <_Balloc+0x56>
 8014d80:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014d84:	e00e      	b.n	8014da4 <_Balloc+0x60>
 8014d86:	2221      	movs	r2, #33	; 0x21
 8014d88:	2104      	movs	r1, #4
 8014d8a:	4620      	mov	r0, r4
 8014d8c:	f000 fab6 	bl	80152fc <_calloc_r>
 8014d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d92:	60e8      	str	r0, [r5, #12]
 8014d94:	68db      	ldr	r3, [r3, #12]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d1e4      	bne.n	8014d64 <_Balloc+0x20>
 8014d9a:	2000      	movs	r0, #0
 8014d9c:	bd70      	pop	{r4, r5, r6, pc}
 8014d9e:	6802      	ldr	r2, [r0, #0]
 8014da0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014da4:	2300      	movs	r3, #0
 8014da6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014daa:	e7f7      	b.n	8014d9c <_Balloc+0x58>

08014dac <_Bfree>:
 8014dac:	b570      	push	{r4, r5, r6, lr}
 8014dae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014db0:	4606      	mov	r6, r0
 8014db2:	460d      	mov	r5, r1
 8014db4:	b93c      	cbnz	r4, 8014dc6 <_Bfree+0x1a>
 8014db6:	2010      	movs	r0, #16
 8014db8:	f7fe f8fe 	bl	8012fb8 <malloc>
 8014dbc:	6270      	str	r0, [r6, #36]	; 0x24
 8014dbe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014dc2:	6004      	str	r4, [r0, #0]
 8014dc4:	60c4      	str	r4, [r0, #12]
 8014dc6:	b13d      	cbz	r5, 8014dd8 <_Bfree+0x2c>
 8014dc8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014dca:	686a      	ldr	r2, [r5, #4]
 8014dcc:	68db      	ldr	r3, [r3, #12]
 8014dce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014dd2:	6029      	str	r1, [r5, #0]
 8014dd4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014dd8:	bd70      	pop	{r4, r5, r6, pc}

08014dda <__multadd>:
 8014dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dde:	690d      	ldr	r5, [r1, #16]
 8014de0:	461f      	mov	r7, r3
 8014de2:	4606      	mov	r6, r0
 8014de4:	460c      	mov	r4, r1
 8014de6:	f101 0c14 	add.w	ip, r1, #20
 8014dea:	2300      	movs	r3, #0
 8014dec:	f8dc 0000 	ldr.w	r0, [ip]
 8014df0:	b281      	uxth	r1, r0
 8014df2:	fb02 7101 	mla	r1, r2, r1, r7
 8014df6:	0c0f      	lsrs	r7, r1, #16
 8014df8:	0c00      	lsrs	r0, r0, #16
 8014dfa:	fb02 7000 	mla	r0, r2, r0, r7
 8014dfe:	b289      	uxth	r1, r1
 8014e00:	3301      	adds	r3, #1
 8014e02:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014e06:	429d      	cmp	r5, r3
 8014e08:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014e0c:	f84c 1b04 	str.w	r1, [ip], #4
 8014e10:	dcec      	bgt.n	8014dec <__multadd+0x12>
 8014e12:	b1d7      	cbz	r7, 8014e4a <__multadd+0x70>
 8014e14:	68a3      	ldr	r3, [r4, #8]
 8014e16:	42ab      	cmp	r3, r5
 8014e18:	dc12      	bgt.n	8014e40 <__multadd+0x66>
 8014e1a:	6861      	ldr	r1, [r4, #4]
 8014e1c:	4630      	mov	r0, r6
 8014e1e:	3101      	adds	r1, #1
 8014e20:	f7ff ff90 	bl	8014d44 <_Balloc>
 8014e24:	6922      	ldr	r2, [r4, #16]
 8014e26:	3202      	adds	r2, #2
 8014e28:	f104 010c 	add.w	r1, r4, #12
 8014e2c:	4680      	mov	r8, r0
 8014e2e:	0092      	lsls	r2, r2, #2
 8014e30:	300c      	adds	r0, #12
 8014e32:	f7fe f8d1 	bl	8012fd8 <memcpy>
 8014e36:	4621      	mov	r1, r4
 8014e38:	4630      	mov	r0, r6
 8014e3a:	f7ff ffb7 	bl	8014dac <_Bfree>
 8014e3e:	4644      	mov	r4, r8
 8014e40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014e44:	3501      	adds	r5, #1
 8014e46:	615f      	str	r7, [r3, #20]
 8014e48:	6125      	str	r5, [r4, #16]
 8014e4a:	4620      	mov	r0, r4
 8014e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e50 <__hi0bits>:
 8014e50:	0c02      	lsrs	r2, r0, #16
 8014e52:	0412      	lsls	r2, r2, #16
 8014e54:	4603      	mov	r3, r0
 8014e56:	b9b2      	cbnz	r2, 8014e86 <__hi0bits+0x36>
 8014e58:	0403      	lsls	r3, r0, #16
 8014e5a:	2010      	movs	r0, #16
 8014e5c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014e60:	bf04      	itt	eq
 8014e62:	021b      	lsleq	r3, r3, #8
 8014e64:	3008      	addeq	r0, #8
 8014e66:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014e6a:	bf04      	itt	eq
 8014e6c:	011b      	lsleq	r3, r3, #4
 8014e6e:	3004      	addeq	r0, #4
 8014e70:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014e74:	bf04      	itt	eq
 8014e76:	009b      	lsleq	r3, r3, #2
 8014e78:	3002      	addeq	r0, #2
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	db06      	blt.n	8014e8c <__hi0bits+0x3c>
 8014e7e:	005b      	lsls	r3, r3, #1
 8014e80:	d503      	bpl.n	8014e8a <__hi0bits+0x3a>
 8014e82:	3001      	adds	r0, #1
 8014e84:	4770      	bx	lr
 8014e86:	2000      	movs	r0, #0
 8014e88:	e7e8      	b.n	8014e5c <__hi0bits+0xc>
 8014e8a:	2020      	movs	r0, #32
 8014e8c:	4770      	bx	lr

08014e8e <__lo0bits>:
 8014e8e:	6803      	ldr	r3, [r0, #0]
 8014e90:	f013 0207 	ands.w	r2, r3, #7
 8014e94:	4601      	mov	r1, r0
 8014e96:	d00b      	beq.n	8014eb0 <__lo0bits+0x22>
 8014e98:	07da      	lsls	r2, r3, #31
 8014e9a:	d423      	bmi.n	8014ee4 <__lo0bits+0x56>
 8014e9c:	0798      	lsls	r0, r3, #30
 8014e9e:	bf49      	itett	mi
 8014ea0:	085b      	lsrmi	r3, r3, #1
 8014ea2:	089b      	lsrpl	r3, r3, #2
 8014ea4:	2001      	movmi	r0, #1
 8014ea6:	600b      	strmi	r3, [r1, #0]
 8014ea8:	bf5c      	itt	pl
 8014eaa:	600b      	strpl	r3, [r1, #0]
 8014eac:	2002      	movpl	r0, #2
 8014eae:	4770      	bx	lr
 8014eb0:	b298      	uxth	r0, r3
 8014eb2:	b9a8      	cbnz	r0, 8014ee0 <__lo0bits+0x52>
 8014eb4:	0c1b      	lsrs	r3, r3, #16
 8014eb6:	2010      	movs	r0, #16
 8014eb8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014ebc:	bf04      	itt	eq
 8014ebe:	0a1b      	lsreq	r3, r3, #8
 8014ec0:	3008      	addeq	r0, #8
 8014ec2:	071a      	lsls	r2, r3, #28
 8014ec4:	bf04      	itt	eq
 8014ec6:	091b      	lsreq	r3, r3, #4
 8014ec8:	3004      	addeq	r0, #4
 8014eca:	079a      	lsls	r2, r3, #30
 8014ecc:	bf04      	itt	eq
 8014ece:	089b      	lsreq	r3, r3, #2
 8014ed0:	3002      	addeq	r0, #2
 8014ed2:	07da      	lsls	r2, r3, #31
 8014ed4:	d402      	bmi.n	8014edc <__lo0bits+0x4e>
 8014ed6:	085b      	lsrs	r3, r3, #1
 8014ed8:	d006      	beq.n	8014ee8 <__lo0bits+0x5a>
 8014eda:	3001      	adds	r0, #1
 8014edc:	600b      	str	r3, [r1, #0]
 8014ede:	4770      	bx	lr
 8014ee0:	4610      	mov	r0, r2
 8014ee2:	e7e9      	b.n	8014eb8 <__lo0bits+0x2a>
 8014ee4:	2000      	movs	r0, #0
 8014ee6:	4770      	bx	lr
 8014ee8:	2020      	movs	r0, #32
 8014eea:	4770      	bx	lr

08014eec <__i2b>:
 8014eec:	b510      	push	{r4, lr}
 8014eee:	460c      	mov	r4, r1
 8014ef0:	2101      	movs	r1, #1
 8014ef2:	f7ff ff27 	bl	8014d44 <_Balloc>
 8014ef6:	2201      	movs	r2, #1
 8014ef8:	6144      	str	r4, [r0, #20]
 8014efa:	6102      	str	r2, [r0, #16]
 8014efc:	bd10      	pop	{r4, pc}

08014efe <__multiply>:
 8014efe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f02:	4614      	mov	r4, r2
 8014f04:	690a      	ldr	r2, [r1, #16]
 8014f06:	6923      	ldr	r3, [r4, #16]
 8014f08:	429a      	cmp	r2, r3
 8014f0a:	bfb8      	it	lt
 8014f0c:	460b      	movlt	r3, r1
 8014f0e:	4688      	mov	r8, r1
 8014f10:	bfbc      	itt	lt
 8014f12:	46a0      	movlt	r8, r4
 8014f14:	461c      	movlt	r4, r3
 8014f16:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014f1a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014f1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014f22:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014f26:	eb07 0609 	add.w	r6, r7, r9
 8014f2a:	42b3      	cmp	r3, r6
 8014f2c:	bfb8      	it	lt
 8014f2e:	3101      	addlt	r1, #1
 8014f30:	f7ff ff08 	bl	8014d44 <_Balloc>
 8014f34:	f100 0514 	add.w	r5, r0, #20
 8014f38:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014f3c:	462b      	mov	r3, r5
 8014f3e:	2200      	movs	r2, #0
 8014f40:	4573      	cmp	r3, lr
 8014f42:	d316      	bcc.n	8014f72 <__multiply+0x74>
 8014f44:	f104 0214 	add.w	r2, r4, #20
 8014f48:	f108 0114 	add.w	r1, r8, #20
 8014f4c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014f50:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014f54:	9300      	str	r3, [sp, #0]
 8014f56:	9b00      	ldr	r3, [sp, #0]
 8014f58:	9201      	str	r2, [sp, #4]
 8014f5a:	4293      	cmp	r3, r2
 8014f5c:	d80c      	bhi.n	8014f78 <__multiply+0x7a>
 8014f5e:	2e00      	cmp	r6, #0
 8014f60:	dd03      	ble.n	8014f6a <__multiply+0x6c>
 8014f62:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d05d      	beq.n	8015026 <__multiply+0x128>
 8014f6a:	6106      	str	r6, [r0, #16]
 8014f6c:	b003      	add	sp, #12
 8014f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f72:	f843 2b04 	str.w	r2, [r3], #4
 8014f76:	e7e3      	b.n	8014f40 <__multiply+0x42>
 8014f78:	f8b2 b000 	ldrh.w	fp, [r2]
 8014f7c:	f1bb 0f00 	cmp.w	fp, #0
 8014f80:	d023      	beq.n	8014fca <__multiply+0xcc>
 8014f82:	4689      	mov	r9, r1
 8014f84:	46ac      	mov	ip, r5
 8014f86:	f04f 0800 	mov.w	r8, #0
 8014f8a:	f859 4b04 	ldr.w	r4, [r9], #4
 8014f8e:	f8dc a000 	ldr.w	sl, [ip]
 8014f92:	b2a3      	uxth	r3, r4
 8014f94:	fa1f fa8a 	uxth.w	sl, sl
 8014f98:	fb0b a303 	mla	r3, fp, r3, sl
 8014f9c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014fa0:	f8dc 4000 	ldr.w	r4, [ip]
 8014fa4:	4443      	add	r3, r8
 8014fa6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014faa:	fb0b 840a 	mla	r4, fp, sl, r8
 8014fae:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014fb2:	46e2      	mov	sl, ip
 8014fb4:	b29b      	uxth	r3, r3
 8014fb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014fba:	454f      	cmp	r7, r9
 8014fbc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014fc0:	f84a 3b04 	str.w	r3, [sl], #4
 8014fc4:	d82b      	bhi.n	801501e <__multiply+0x120>
 8014fc6:	f8cc 8004 	str.w	r8, [ip, #4]
 8014fca:	9b01      	ldr	r3, [sp, #4]
 8014fcc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014fd0:	3204      	adds	r2, #4
 8014fd2:	f1ba 0f00 	cmp.w	sl, #0
 8014fd6:	d020      	beq.n	801501a <__multiply+0x11c>
 8014fd8:	682b      	ldr	r3, [r5, #0]
 8014fda:	4689      	mov	r9, r1
 8014fdc:	46a8      	mov	r8, r5
 8014fde:	f04f 0b00 	mov.w	fp, #0
 8014fe2:	f8b9 c000 	ldrh.w	ip, [r9]
 8014fe6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8014fea:	fb0a 440c 	mla	r4, sl, ip, r4
 8014fee:	445c      	add	r4, fp
 8014ff0:	46c4      	mov	ip, r8
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014ff8:	f84c 3b04 	str.w	r3, [ip], #4
 8014ffc:	f859 3b04 	ldr.w	r3, [r9], #4
 8015000:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015004:	0c1b      	lsrs	r3, r3, #16
 8015006:	fb0a b303 	mla	r3, sl, r3, fp
 801500a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801500e:	454f      	cmp	r7, r9
 8015010:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015014:	d805      	bhi.n	8015022 <__multiply+0x124>
 8015016:	f8c8 3004 	str.w	r3, [r8, #4]
 801501a:	3504      	adds	r5, #4
 801501c:	e79b      	b.n	8014f56 <__multiply+0x58>
 801501e:	46d4      	mov	ip, sl
 8015020:	e7b3      	b.n	8014f8a <__multiply+0x8c>
 8015022:	46e0      	mov	r8, ip
 8015024:	e7dd      	b.n	8014fe2 <__multiply+0xe4>
 8015026:	3e01      	subs	r6, #1
 8015028:	e799      	b.n	8014f5e <__multiply+0x60>
	...

0801502c <__pow5mult>:
 801502c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015030:	4615      	mov	r5, r2
 8015032:	f012 0203 	ands.w	r2, r2, #3
 8015036:	4606      	mov	r6, r0
 8015038:	460f      	mov	r7, r1
 801503a:	d007      	beq.n	801504c <__pow5mult+0x20>
 801503c:	3a01      	subs	r2, #1
 801503e:	4c21      	ldr	r4, [pc, #132]	; (80150c4 <__pow5mult+0x98>)
 8015040:	2300      	movs	r3, #0
 8015042:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015046:	f7ff fec8 	bl	8014dda <__multadd>
 801504a:	4607      	mov	r7, r0
 801504c:	10ad      	asrs	r5, r5, #2
 801504e:	d035      	beq.n	80150bc <__pow5mult+0x90>
 8015050:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015052:	b93c      	cbnz	r4, 8015064 <__pow5mult+0x38>
 8015054:	2010      	movs	r0, #16
 8015056:	f7fd ffaf 	bl	8012fb8 <malloc>
 801505a:	6270      	str	r0, [r6, #36]	; 0x24
 801505c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015060:	6004      	str	r4, [r0, #0]
 8015062:	60c4      	str	r4, [r0, #12]
 8015064:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015068:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801506c:	b94c      	cbnz	r4, 8015082 <__pow5mult+0x56>
 801506e:	f240 2171 	movw	r1, #625	; 0x271
 8015072:	4630      	mov	r0, r6
 8015074:	f7ff ff3a 	bl	8014eec <__i2b>
 8015078:	2300      	movs	r3, #0
 801507a:	f8c8 0008 	str.w	r0, [r8, #8]
 801507e:	4604      	mov	r4, r0
 8015080:	6003      	str	r3, [r0, #0]
 8015082:	f04f 0800 	mov.w	r8, #0
 8015086:	07eb      	lsls	r3, r5, #31
 8015088:	d50a      	bpl.n	80150a0 <__pow5mult+0x74>
 801508a:	4639      	mov	r1, r7
 801508c:	4622      	mov	r2, r4
 801508e:	4630      	mov	r0, r6
 8015090:	f7ff ff35 	bl	8014efe <__multiply>
 8015094:	4639      	mov	r1, r7
 8015096:	4681      	mov	r9, r0
 8015098:	4630      	mov	r0, r6
 801509a:	f7ff fe87 	bl	8014dac <_Bfree>
 801509e:	464f      	mov	r7, r9
 80150a0:	106d      	asrs	r5, r5, #1
 80150a2:	d00b      	beq.n	80150bc <__pow5mult+0x90>
 80150a4:	6820      	ldr	r0, [r4, #0]
 80150a6:	b938      	cbnz	r0, 80150b8 <__pow5mult+0x8c>
 80150a8:	4622      	mov	r2, r4
 80150aa:	4621      	mov	r1, r4
 80150ac:	4630      	mov	r0, r6
 80150ae:	f7ff ff26 	bl	8014efe <__multiply>
 80150b2:	6020      	str	r0, [r4, #0]
 80150b4:	f8c0 8000 	str.w	r8, [r0]
 80150b8:	4604      	mov	r4, r0
 80150ba:	e7e4      	b.n	8015086 <__pow5mult+0x5a>
 80150bc:	4638      	mov	r0, r7
 80150be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150c2:	bf00      	nop
 80150c4:	080166a0 	.word	0x080166a0

080150c8 <__lshift>:
 80150c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150cc:	460c      	mov	r4, r1
 80150ce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80150d2:	6923      	ldr	r3, [r4, #16]
 80150d4:	6849      	ldr	r1, [r1, #4]
 80150d6:	eb0a 0903 	add.w	r9, sl, r3
 80150da:	68a3      	ldr	r3, [r4, #8]
 80150dc:	4607      	mov	r7, r0
 80150de:	4616      	mov	r6, r2
 80150e0:	f109 0501 	add.w	r5, r9, #1
 80150e4:	42ab      	cmp	r3, r5
 80150e6:	db32      	blt.n	801514e <__lshift+0x86>
 80150e8:	4638      	mov	r0, r7
 80150ea:	f7ff fe2b 	bl	8014d44 <_Balloc>
 80150ee:	2300      	movs	r3, #0
 80150f0:	4680      	mov	r8, r0
 80150f2:	f100 0114 	add.w	r1, r0, #20
 80150f6:	461a      	mov	r2, r3
 80150f8:	4553      	cmp	r3, sl
 80150fa:	db2b      	blt.n	8015154 <__lshift+0x8c>
 80150fc:	6920      	ldr	r0, [r4, #16]
 80150fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015102:	f104 0314 	add.w	r3, r4, #20
 8015106:	f016 021f 	ands.w	r2, r6, #31
 801510a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801510e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015112:	d025      	beq.n	8015160 <__lshift+0x98>
 8015114:	f1c2 0e20 	rsb	lr, r2, #32
 8015118:	2000      	movs	r0, #0
 801511a:	681e      	ldr	r6, [r3, #0]
 801511c:	468a      	mov	sl, r1
 801511e:	4096      	lsls	r6, r2
 8015120:	4330      	orrs	r0, r6
 8015122:	f84a 0b04 	str.w	r0, [sl], #4
 8015126:	f853 0b04 	ldr.w	r0, [r3], #4
 801512a:	459c      	cmp	ip, r3
 801512c:	fa20 f00e 	lsr.w	r0, r0, lr
 8015130:	d814      	bhi.n	801515c <__lshift+0x94>
 8015132:	6048      	str	r0, [r1, #4]
 8015134:	b108      	cbz	r0, 801513a <__lshift+0x72>
 8015136:	f109 0502 	add.w	r5, r9, #2
 801513a:	3d01      	subs	r5, #1
 801513c:	4638      	mov	r0, r7
 801513e:	f8c8 5010 	str.w	r5, [r8, #16]
 8015142:	4621      	mov	r1, r4
 8015144:	f7ff fe32 	bl	8014dac <_Bfree>
 8015148:	4640      	mov	r0, r8
 801514a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801514e:	3101      	adds	r1, #1
 8015150:	005b      	lsls	r3, r3, #1
 8015152:	e7c7      	b.n	80150e4 <__lshift+0x1c>
 8015154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015158:	3301      	adds	r3, #1
 801515a:	e7cd      	b.n	80150f8 <__lshift+0x30>
 801515c:	4651      	mov	r1, sl
 801515e:	e7dc      	b.n	801511a <__lshift+0x52>
 8015160:	3904      	subs	r1, #4
 8015162:	f853 2b04 	ldr.w	r2, [r3], #4
 8015166:	f841 2f04 	str.w	r2, [r1, #4]!
 801516a:	459c      	cmp	ip, r3
 801516c:	d8f9      	bhi.n	8015162 <__lshift+0x9a>
 801516e:	e7e4      	b.n	801513a <__lshift+0x72>

08015170 <__mcmp>:
 8015170:	6903      	ldr	r3, [r0, #16]
 8015172:	690a      	ldr	r2, [r1, #16]
 8015174:	1a9b      	subs	r3, r3, r2
 8015176:	b530      	push	{r4, r5, lr}
 8015178:	d10c      	bne.n	8015194 <__mcmp+0x24>
 801517a:	0092      	lsls	r2, r2, #2
 801517c:	3014      	adds	r0, #20
 801517e:	3114      	adds	r1, #20
 8015180:	1884      	adds	r4, r0, r2
 8015182:	4411      	add	r1, r2
 8015184:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015188:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801518c:	4295      	cmp	r5, r2
 801518e:	d003      	beq.n	8015198 <__mcmp+0x28>
 8015190:	d305      	bcc.n	801519e <__mcmp+0x2e>
 8015192:	2301      	movs	r3, #1
 8015194:	4618      	mov	r0, r3
 8015196:	bd30      	pop	{r4, r5, pc}
 8015198:	42a0      	cmp	r0, r4
 801519a:	d3f3      	bcc.n	8015184 <__mcmp+0x14>
 801519c:	e7fa      	b.n	8015194 <__mcmp+0x24>
 801519e:	f04f 33ff 	mov.w	r3, #4294967295
 80151a2:	e7f7      	b.n	8015194 <__mcmp+0x24>

080151a4 <__mdiff>:
 80151a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151a8:	460d      	mov	r5, r1
 80151aa:	4607      	mov	r7, r0
 80151ac:	4611      	mov	r1, r2
 80151ae:	4628      	mov	r0, r5
 80151b0:	4614      	mov	r4, r2
 80151b2:	f7ff ffdd 	bl	8015170 <__mcmp>
 80151b6:	1e06      	subs	r6, r0, #0
 80151b8:	d108      	bne.n	80151cc <__mdiff+0x28>
 80151ba:	4631      	mov	r1, r6
 80151bc:	4638      	mov	r0, r7
 80151be:	f7ff fdc1 	bl	8014d44 <_Balloc>
 80151c2:	2301      	movs	r3, #1
 80151c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80151c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151cc:	bfa4      	itt	ge
 80151ce:	4623      	movge	r3, r4
 80151d0:	462c      	movge	r4, r5
 80151d2:	4638      	mov	r0, r7
 80151d4:	6861      	ldr	r1, [r4, #4]
 80151d6:	bfa6      	itte	ge
 80151d8:	461d      	movge	r5, r3
 80151da:	2600      	movge	r6, #0
 80151dc:	2601      	movlt	r6, #1
 80151de:	f7ff fdb1 	bl	8014d44 <_Balloc>
 80151e2:	692b      	ldr	r3, [r5, #16]
 80151e4:	60c6      	str	r6, [r0, #12]
 80151e6:	6926      	ldr	r6, [r4, #16]
 80151e8:	f105 0914 	add.w	r9, r5, #20
 80151ec:	f104 0214 	add.w	r2, r4, #20
 80151f0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80151f4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80151f8:	f100 0514 	add.w	r5, r0, #20
 80151fc:	f04f 0e00 	mov.w	lr, #0
 8015200:	f852 ab04 	ldr.w	sl, [r2], #4
 8015204:	f859 4b04 	ldr.w	r4, [r9], #4
 8015208:	fa1e f18a 	uxtah	r1, lr, sl
 801520c:	b2a3      	uxth	r3, r4
 801520e:	1ac9      	subs	r1, r1, r3
 8015210:	0c23      	lsrs	r3, r4, #16
 8015212:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8015216:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801521a:	b289      	uxth	r1, r1
 801521c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015220:	45c8      	cmp	r8, r9
 8015222:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015226:	4694      	mov	ip, r2
 8015228:	f845 3b04 	str.w	r3, [r5], #4
 801522c:	d8e8      	bhi.n	8015200 <__mdiff+0x5c>
 801522e:	45bc      	cmp	ip, r7
 8015230:	d304      	bcc.n	801523c <__mdiff+0x98>
 8015232:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015236:	b183      	cbz	r3, 801525a <__mdiff+0xb6>
 8015238:	6106      	str	r6, [r0, #16]
 801523a:	e7c5      	b.n	80151c8 <__mdiff+0x24>
 801523c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015240:	fa1e f381 	uxtah	r3, lr, r1
 8015244:	141a      	asrs	r2, r3, #16
 8015246:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801524a:	b29b      	uxth	r3, r3
 801524c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015250:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015254:	f845 3b04 	str.w	r3, [r5], #4
 8015258:	e7e9      	b.n	801522e <__mdiff+0x8a>
 801525a:	3e01      	subs	r6, #1
 801525c:	e7e9      	b.n	8015232 <__mdiff+0x8e>

0801525e <__d2b>:
 801525e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015262:	460e      	mov	r6, r1
 8015264:	2101      	movs	r1, #1
 8015266:	ec59 8b10 	vmov	r8, r9, d0
 801526a:	4615      	mov	r5, r2
 801526c:	f7ff fd6a 	bl	8014d44 <_Balloc>
 8015270:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015274:	4607      	mov	r7, r0
 8015276:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801527a:	bb34      	cbnz	r4, 80152ca <__d2b+0x6c>
 801527c:	9301      	str	r3, [sp, #4]
 801527e:	f1b8 0300 	subs.w	r3, r8, #0
 8015282:	d027      	beq.n	80152d4 <__d2b+0x76>
 8015284:	a802      	add	r0, sp, #8
 8015286:	f840 3d08 	str.w	r3, [r0, #-8]!
 801528a:	f7ff fe00 	bl	8014e8e <__lo0bits>
 801528e:	9900      	ldr	r1, [sp, #0]
 8015290:	b1f0      	cbz	r0, 80152d0 <__d2b+0x72>
 8015292:	9a01      	ldr	r2, [sp, #4]
 8015294:	f1c0 0320 	rsb	r3, r0, #32
 8015298:	fa02 f303 	lsl.w	r3, r2, r3
 801529c:	430b      	orrs	r3, r1
 801529e:	40c2      	lsrs	r2, r0
 80152a0:	617b      	str	r3, [r7, #20]
 80152a2:	9201      	str	r2, [sp, #4]
 80152a4:	9b01      	ldr	r3, [sp, #4]
 80152a6:	61bb      	str	r3, [r7, #24]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	bf14      	ite	ne
 80152ac:	2102      	movne	r1, #2
 80152ae:	2101      	moveq	r1, #1
 80152b0:	6139      	str	r1, [r7, #16]
 80152b2:	b1c4      	cbz	r4, 80152e6 <__d2b+0x88>
 80152b4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80152b8:	4404      	add	r4, r0
 80152ba:	6034      	str	r4, [r6, #0]
 80152bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80152c0:	6028      	str	r0, [r5, #0]
 80152c2:	4638      	mov	r0, r7
 80152c4:	b003      	add	sp, #12
 80152c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80152ce:	e7d5      	b.n	801527c <__d2b+0x1e>
 80152d0:	6179      	str	r1, [r7, #20]
 80152d2:	e7e7      	b.n	80152a4 <__d2b+0x46>
 80152d4:	a801      	add	r0, sp, #4
 80152d6:	f7ff fdda 	bl	8014e8e <__lo0bits>
 80152da:	9b01      	ldr	r3, [sp, #4]
 80152dc:	617b      	str	r3, [r7, #20]
 80152de:	2101      	movs	r1, #1
 80152e0:	6139      	str	r1, [r7, #16]
 80152e2:	3020      	adds	r0, #32
 80152e4:	e7e5      	b.n	80152b2 <__d2b+0x54>
 80152e6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80152ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80152ee:	6030      	str	r0, [r6, #0]
 80152f0:	6918      	ldr	r0, [r3, #16]
 80152f2:	f7ff fdad 	bl	8014e50 <__hi0bits>
 80152f6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80152fa:	e7e1      	b.n	80152c0 <__d2b+0x62>

080152fc <_calloc_r>:
 80152fc:	b538      	push	{r3, r4, r5, lr}
 80152fe:	fb02 f401 	mul.w	r4, r2, r1
 8015302:	4621      	mov	r1, r4
 8015304:	f7fd feca 	bl	801309c <_malloc_r>
 8015308:	4605      	mov	r5, r0
 801530a:	b118      	cbz	r0, 8015314 <_calloc_r+0x18>
 801530c:	4622      	mov	r2, r4
 801530e:	2100      	movs	r1, #0
 8015310:	f7fd fe6d 	bl	8012fee <memset>
 8015314:	4628      	mov	r0, r5
 8015316:	bd38      	pop	{r3, r4, r5, pc}

08015318 <_realloc_r>:
 8015318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801531a:	4607      	mov	r7, r0
 801531c:	4614      	mov	r4, r2
 801531e:	460e      	mov	r6, r1
 8015320:	b921      	cbnz	r1, 801532c <_realloc_r+0x14>
 8015322:	4611      	mov	r1, r2
 8015324:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015328:	f7fd beb8 	b.w	801309c <_malloc_r>
 801532c:	b922      	cbnz	r2, 8015338 <_realloc_r+0x20>
 801532e:	f7fd fe67 	bl	8013000 <_free_r>
 8015332:	4625      	mov	r5, r4
 8015334:	4628      	mov	r0, r5
 8015336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015338:	f000 fb6b 	bl	8015a12 <_malloc_usable_size_r>
 801533c:	42a0      	cmp	r0, r4
 801533e:	d20f      	bcs.n	8015360 <_realloc_r+0x48>
 8015340:	4621      	mov	r1, r4
 8015342:	4638      	mov	r0, r7
 8015344:	f7fd feaa 	bl	801309c <_malloc_r>
 8015348:	4605      	mov	r5, r0
 801534a:	2800      	cmp	r0, #0
 801534c:	d0f2      	beq.n	8015334 <_realloc_r+0x1c>
 801534e:	4631      	mov	r1, r6
 8015350:	4622      	mov	r2, r4
 8015352:	f7fd fe41 	bl	8012fd8 <memcpy>
 8015356:	4631      	mov	r1, r6
 8015358:	4638      	mov	r0, r7
 801535a:	f7fd fe51 	bl	8013000 <_free_r>
 801535e:	e7e9      	b.n	8015334 <_realloc_r+0x1c>
 8015360:	4635      	mov	r5, r6
 8015362:	e7e7      	b.n	8015334 <_realloc_r+0x1c>

08015364 <__ssputs_r>:
 8015364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015368:	688e      	ldr	r6, [r1, #8]
 801536a:	429e      	cmp	r6, r3
 801536c:	4682      	mov	sl, r0
 801536e:	460c      	mov	r4, r1
 8015370:	4690      	mov	r8, r2
 8015372:	4699      	mov	r9, r3
 8015374:	d837      	bhi.n	80153e6 <__ssputs_r+0x82>
 8015376:	898a      	ldrh	r2, [r1, #12]
 8015378:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801537c:	d031      	beq.n	80153e2 <__ssputs_r+0x7e>
 801537e:	6825      	ldr	r5, [r4, #0]
 8015380:	6909      	ldr	r1, [r1, #16]
 8015382:	1a6f      	subs	r7, r5, r1
 8015384:	6965      	ldr	r5, [r4, #20]
 8015386:	2302      	movs	r3, #2
 8015388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801538c:	fb95 f5f3 	sdiv	r5, r5, r3
 8015390:	f109 0301 	add.w	r3, r9, #1
 8015394:	443b      	add	r3, r7
 8015396:	429d      	cmp	r5, r3
 8015398:	bf38      	it	cc
 801539a:	461d      	movcc	r5, r3
 801539c:	0553      	lsls	r3, r2, #21
 801539e:	d530      	bpl.n	8015402 <__ssputs_r+0x9e>
 80153a0:	4629      	mov	r1, r5
 80153a2:	f7fd fe7b 	bl	801309c <_malloc_r>
 80153a6:	4606      	mov	r6, r0
 80153a8:	b950      	cbnz	r0, 80153c0 <__ssputs_r+0x5c>
 80153aa:	230c      	movs	r3, #12
 80153ac:	f8ca 3000 	str.w	r3, [sl]
 80153b0:	89a3      	ldrh	r3, [r4, #12]
 80153b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153b6:	81a3      	strh	r3, [r4, #12]
 80153b8:	f04f 30ff 	mov.w	r0, #4294967295
 80153bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153c0:	463a      	mov	r2, r7
 80153c2:	6921      	ldr	r1, [r4, #16]
 80153c4:	f7fd fe08 	bl	8012fd8 <memcpy>
 80153c8:	89a3      	ldrh	r3, [r4, #12]
 80153ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80153ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153d2:	81a3      	strh	r3, [r4, #12]
 80153d4:	6126      	str	r6, [r4, #16]
 80153d6:	6165      	str	r5, [r4, #20]
 80153d8:	443e      	add	r6, r7
 80153da:	1bed      	subs	r5, r5, r7
 80153dc:	6026      	str	r6, [r4, #0]
 80153de:	60a5      	str	r5, [r4, #8]
 80153e0:	464e      	mov	r6, r9
 80153e2:	454e      	cmp	r6, r9
 80153e4:	d900      	bls.n	80153e8 <__ssputs_r+0x84>
 80153e6:	464e      	mov	r6, r9
 80153e8:	4632      	mov	r2, r6
 80153ea:	4641      	mov	r1, r8
 80153ec:	6820      	ldr	r0, [r4, #0]
 80153ee:	f000 faf7 	bl	80159e0 <memmove>
 80153f2:	68a3      	ldr	r3, [r4, #8]
 80153f4:	1b9b      	subs	r3, r3, r6
 80153f6:	60a3      	str	r3, [r4, #8]
 80153f8:	6823      	ldr	r3, [r4, #0]
 80153fa:	441e      	add	r6, r3
 80153fc:	6026      	str	r6, [r4, #0]
 80153fe:	2000      	movs	r0, #0
 8015400:	e7dc      	b.n	80153bc <__ssputs_r+0x58>
 8015402:	462a      	mov	r2, r5
 8015404:	f7ff ff88 	bl	8015318 <_realloc_r>
 8015408:	4606      	mov	r6, r0
 801540a:	2800      	cmp	r0, #0
 801540c:	d1e2      	bne.n	80153d4 <__ssputs_r+0x70>
 801540e:	6921      	ldr	r1, [r4, #16]
 8015410:	4650      	mov	r0, sl
 8015412:	f7fd fdf5 	bl	8013000 <_free_r>
 8015416:	e7c8      	b.n	80153aa <__ssputs_r+0x46>

08015418 <_svfiprintf_r>:
 8015418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801541c:	461d      	mov	r5, r3
 801541e:	898b      	ldrh	r3, [r1, #12]
 8015420:	061f      	lsls	r7, r3, #24
 8015422:	b09d      	sub	sp, #116	; 0x74
 8015424:	4680      	mov	r8, r0
 8015426:	460c      	mov	r4, r1
 8015428:	4616      	mov	r6, r2
 801542a:	d50f      	bpl.n	801544c <_svfiprintf_r+0x34>
 801542c:	690b      	ldr	r3, [r1, #16]
 801542e:	b96b      	cbnz	r3, 801544c <_svfiprintf_r+0x34>
 8015430:	2140      	movs	r1, #64	; 0x40
 8015432:	f7fd fe33 	bl	801309c <_malloc_r>
 8015436:	6020      	str	r0, [r4, #0]
 8015438:	6120      	str	r0, [r4, #16]
 801543a:	b928      	cbnz	r0, 8015448 <_svfiprintf_r+0x30>
 801543c:	230c      	movs	r3, #12
 801543e:	f8c8 3000 	str.w	r3, [r8]
 8015442:	f04f 30ff 	mov.w	r0, #4294967295
 8015446:	e0c8      	b.n	80155da <_svfiprintf_r+0x1c2>
 8015448:	2340      	movs	r3, #64	; 0x40
 801544a:	6163      	str	r3, [r4, #20]
 801544c:	2300      	movs	r3, #0
 801544e:	9309      	str	r3, [sp, #36]	; 0x24
 8015450:	2320      	movs	r3, #32
 8015452:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015456:	2330      	movs	r3, #48	; 0x30
 8015458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801545c:	9503      	str	r5, [sp, #12]
 801545e:	f04f 0b01 	mov.w	fp, #1
 8015462:	4637      	mov	r7, r6
 8015464:	463d      	mov	r5, r7
 8015466:	f815 3b01 	ldrb.w	r3, [r5], #1
 801546a:	b10b      	cbz	r3, 8015470 <_svfiprintf_r+0x58>
 801546c:	2b25      	cmp	r3, #37	; 0x25
 801546e:	d13e      	bne.n	80154ee <_svfiprintf_r+0xd6>
 8015470:	ebb7 0a06 	subs.w	sl, r7, r6
 8015474:	d00b      	beq.n	801548e <_svfiprintf_r+0x76>
 8015476:	4653      	mov	r3, sl
 8015478:	4632      	mov	r2, r6
 801547a:	4621      	mov	r1, r4
 801547c:	4640      	mov	r0, r8
 801547e:	f7ff ff71 	bl	8015364 <__ssputs_r>
 8015482:	3001      	adds	r0, #1
 8015484:	f000 80a4 	beq.w	80155d0 <_svfiprintf_r+0x1b8>
 8015488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801548a:	4453      	add	r3, sl
 801548c:	9309      	str	r3, [sp, #36]	; 0x24
 801548e:	783b      	ldrb	r3, [r7, #0]
 8015490:	2b00      	cmp	r3, #0
 8015492:	f000 809d 	beq.w	80155d0 <_svfiprintf_r+0x1b8>
 8015496:	2300      	movs	r3, #0
 8015498:	f04f 32ff 	mov.w	r2, #4294967295
 801549c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80154a0:	9304      	str	r3, [sp, #16]
 80154a2:	9307      	str	r3, [sp, #28]
 80154a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80154a8:	931a      	str	r3, [sp, #104]	; 0x68
 80154aa:	462f      	mov	r7, r5
 80154ac:	2205      	movs	r2, #5
 80154ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80154b2:	4850      	ldr	r0, [pc, #320]	; (80155f4 <_svfiprintf_r+0x1dc>)
 80154b4:	f7ea feac 	bl	8000210 <memchr>
 80154b8:	9b04      	ldr	r3, [sp, #16]
 80154ba:	b9d0      	cbnz	r0, 80154f2 <_svfiprintf_r+0xda>
 80154bc:	06d9      	lsls	r1, r3, #27
 80154be:	bf44      	itt	mi
 80154c0:	2220      	movmi	r2, #32
 80154c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80154c6:	071a      	lsls	r2, r3, #28
 80154c8:	bf44      	itt	mi
 80154ca:	222b      	movmi	r2, #43	; 0x2b
 80154cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80154d0:	782a      	ldrb	r2, [r5, #0]
 80154d2:	2a2a      	cmp	r2, #42	; 0x2a
 80154d4:	d015      	beq.n	8015502 <_svfiprintf_r+0xea>
 80154d6:	9a07      	ldr	r2, [sp, #28]
 80154d8:	462f      	mov	r7, r5
 80154da:	2000      	movs	r0, #0
 80154dc:	250a      	movs	r5, #10
 80154de:	4639      	mov	r1, r7
 80154e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80154e4:	3b30      	subs	r3, #48	; 0x30
 80154e6:	2b09      	cmp	r3, #9
 80154e8:	d94d      	bls.n	8015586 <_svfiprintf_r+0x16e>
 80154ea:	b1b8      	cbz	r0, 801551c <_svfiprintf_r+0x104>
 80154ec:	e00f      	b.n	801550e <_svfiprintf_r+0xf6>
 80154ee:	462f      	mov	r7, r5
 80154f0:	e7b8      	b.n	8015464 <_svfiprintf_r+0x4c>
 80154f2:	4a40      	ldr	r2, [pc, #256]	; (80155f4 <_svfiprintf_r+0x1dc>)
 80154f4:	1a80      	subs	r0, r0, r2
 80154f6:	fa0b f000 	lsl.w	r0, fp, r0
 80154fa:	4318      	orrs	r0, r3
 80154fc:	9004      	str	r0, [sp, #16]
 80154fe:	463d      	mov	r5, r7
 8015500:	e7d3      	b.n	80154aa <_svfiprintf_r+0x92>
 8015502:	9a03      	ldr	r2, [sp, #12]
 8015504:	1d11      	adds	r1, r2, #4
 8015506:	6812      	ldr	r2, [r2, #0]
 8015508:	9103      	str	r1, [sp, #12]
 801550a:	2a00      	cmp	r2, #0
 801550c:	db01      	blt.n	8015512 <_svfiprintf_r+0xfa>
 801550e:	9207      	str	r2, [sp, #28]
 8015510:	e004      	b.n	801551c <_svfiprintf_r+0x104>
 8015512:	4252      	negs	r2, r2
 8015514:	f043 0302 	orr.w	r3, r3, #2
 8015518:	9207      	str	r2, [sp, #28]
 801551a:	9304      	str	r3, [sp, #16]
 801551c:	783b      	ldrb	r3, [r7, #0]
 801551e:	2b2e      	cmp	r3, #46	; 0x2e
 8015520:	d10c      	bne.n	801553c <_svfiprintf_r+0x124>
 8015522:	787b      	ldrb	r3, [r7, #1]
 8015524:	2b2a      	cmp	r3, #42	; 0x2a
 8015526:	d133      	bne.n	8015590 <_svfiprintf_r+0x178>
 8015528:	9b03      	ldr	r3, [sp, #12]
 801552a:	1d1a      	adds	r2, r3, #4
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	9203      	str	r2, [sp, #12]
 8015530:	2b00      	cmp	r3, #0
 8015532:	bfb8      	it	lt
 8015534:	f04f 33ff 	movlt.w	r3, #4294967295
 8015538:	3702      	adds	r7, #2
 801553a:	9305      	str	r3, [sp, #20]
 801553c:	4d2e      	ldr	r5, [pc, #184]	; (80155f8 <_svfiprintf_r+0x1e0>)
 801553e:	7839      	ldrb	r1, [r7, #0]
 8015540:	2203      	movs	r2, #3
 8015542:	4628      	mov	r0, r5
 8015544:	f7ea fe64 	bl	8000210 <memchr>
 8015548:	b138      	cbz	r0, 801555a <_svfiprintf_r+0x142>
 801554a:	2340      	movs	r3, #64	; 0x40
 801554c:	1b40      	subs	r0, r0, r5
 801554e:	fa03 f000 	lsl.w	r0, r3, r0
 8015552:	9b04      	ldr	r3, [sp, #16]
 8015554:	4303      	orrs	r3, r0
 8015556:	3701      	adds	r7, #1
 8015558:	9304      	str	r3, [sp, #16]
 801555a:	7839      	ldrb	r1, [r7, #0]
 801555c:	4827      	ldr	r0, [pc, #156]	; (80155fc <_svfiprintf_r+0x1e4>)
 801555e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015562:	2206      	movs	r2, #6
 8015564:	1c7e      	adds	r6, r7, #1
 8015566:	f7ea fe53 	bl	8000210 <memchr>
 801556a:	2800      	cmp	r0, #0
 801556c:	d038      	beq.n	80155e0 <_svfiprintf_r+0x1c8>
 801556e:	4b24      	ldr	r3, [pc, #144]	; (8015600 <_svfiprintf_r+0x1e8>)
 8015570:	bb13      	cbnz	r3, 80155b8 <_svfiprintf_r+0x1a0>
 8015572:	9b03      	ldr	r3, [sp, #12]
 8015574:	3307      	adds	r3, #7
 8015576:	f023 0307 	bic.w	r3, r3, #7
 801557a:	3308      	adds	r3, #8
 801557c:	9303      	str	r3, [sp, #12]
 801557e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015580:	444b      	add	r3, r9
 8015582:	9309      	str	r3, [sp, #36]	; 0x24
 8015584:	e76d      	b.n	8015462 <_svfiprintf_r+0x4a>
 8015586:	fb05 3202 	mla	r2, r5, r2, r3
 801558a:	2001      	movs	r0, #1
 801558c:	460f      	mov	r7, r1
 801558e:	e7a6      	b.n	80154de <_svfiprintf_r+0xc6>
 8015590:	2300      	movs	r3, #0
 8015592:	3701      	adds	r7, #1
 8015594:	9305      	str	r3, [sp, #20]
 8015596:	4619      	mov	r1, r3
 8015598:	250a      	movs	r5, #10
 801559a:	4638      	mov	r0, r7
 801559c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80155a0:	3a30      	subs	r2, #48	; 0x30
 80155a2:	2a09      	cmp	r2, #9
 80155a4:	d903      	bls.n	80155ae <_svfiprintf_r+0x196>
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d0c8      	beq.n	801553c <_svfiprintf_r+0x124>
 80155aa:	9105      	str	r1, [sp, #20]
 80155ac:	e7c6      	b.n	801553c <_svfiprintf_r+0x124>
 80155ae:	fb05 2101 	mla	r1, r5, r1, r2
 80155b2:	2301      	movs	r3, #1
 80155b4:	4607      	mov	r7, r0
 80155b6:	e7f0      	b.n	801559a <_svfiprintf_r+0x182>
 80155b8:	ab03      	add	r3, sp, #12
 80155ba:	9300      	str	r3, [sp, #0]
 80155bc:	4622      	mov	r2, r4
 80155be:	4b11      	ldr	r3, [pc, #68]	; (8015604 <_svfiprintf_r+0x1ec>)
 80155c0:	a904      	add	r1, sp, #16
 80155c2:	4640      	mov	r0, r8
 80155c4:	f7fd fe58 	bl	8013278 <_printf_float>
 80155c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80155cc:	4681      	mov	r9, r0
 80155ce:	d1d6      	bne.n	801557e <_svfiprintf_r+0x166>
 80155d0:	89a3      	ldrh	r3, [r4, #12]
 80155d2:	065b      	lsls	r3, r3, #25
 80155d4:	f53f af35 	bmi.w	8015442 <_svfiprintf_r+0x2a>
 80155d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155da:	b01d      	add	sp, #116	; 0x74
 80155dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155e0:	ab03      	add	r3, sp, #12
 80155e2:	9300      	str	r3, [sp, #0]
 80155e4:	4622      	mov	r2, r4
 80155e6:	4b07      	ldr	r3, [pc, #28]	; (8015604 <_svfiprintf_r+0x1ec>)
 80155e8:	a904      	add	r1, sp, #16
 80155ea:	4640      	mov	r0, r8
 80155ec:	f7fe f8fa 	bl	80137e4 <_printf_i>
 80155f0:	e7ea      	b.n	80155c8 <_svfiprintf_r+0x1b0>
 80155f2:	bf00      	nop
 80155f4:	080166ac 	.word	0x080166ac
 80155f8:	080166b2 	.word	0x080166b2
 80155fc:	080166b6 	.word	0x080166b6
 8015600:	08013279 	.word	0x08013279
 8015604:	08015365 	.word	0x08015365

08015608 <__sfputc_r>:
 8015608:	6893      	ldr	r3, [r2, #8]
 801560a:	3b01      	subs	r3, #1
 801560c:	2b00      	cmp	r3, #0
 801560e:	b410      	push	{r4}
 8015610:	6093      	str	r3, [r2, #8]
 8015612:	da08      	bge.n	8015626 <__sfputc_r+0x1e>
 8015614:	6994      	ldr	r4, [r2, #24]
 8015616:	42a3      	cmp	r3, r4
 8015618:	db01      	blt.n	801561e <__sfputc_r+0x16>
 801561a:	290a      	cmp	r1, #10
 801561c:	d103      	bne.n	8015626 <__sfputc_r+0x1e>
 801561e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015622:	f7fe ba9d 	b.w	8013b60 <__swbuf_r>
 8015626:	6813      	ldr	r3, [r2, #0]
 8015628:	1c58      	adds	r0, r3, #1
 801562a:	6010      	str	r0, [r2, #0]
 801562c:	7019      	strb	r1, [r3, #0]
 801562e:	4608      	mov	r0, r1
 8015630:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015634:	4770      	bx	lr

08015636 <__sfputs_r>:
 8015636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015638:	4606      	mov	r6, r0
 801563a:	460f      	mov	r7, r1
 801563c:	4614      	mov	r4, r2
 801563e:	18d5      	adds	r5, r2, r3
 8015640:	42ac      	cmp	r4, r5
 8015642:	d101      	bne.n	8015648 <__sfputs_r+0x12>
 8015644:	2000      	movs	r0, #0
 8015646:	e007      	b.n	8015658 <__sfputs_r+0x22>
 8015648:	463a      	mov	r2, r7
 801564a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801564e:	4630      	mov	r0, r6
 8015650:	f7ff ffda 	bl	8015608 <__sfputc_r>
 8015654:	1c43      	adds	r3, r0, #1
 8015656:	d1f3      	bne.n	8015640 <__sfputs_r+0xa>
 8015658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801565c <_vfiprintf_r>:
 801565c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015660:	460c      	mov	r4, r1
 8015662:	b09d      	sub	sp, #116	; 0x74
 8015664:	4617      	mov	r7, r2
 8015666:	461d      	mov	r5, r3
 8015668:	4606      	mov	r6, r0
 801566a:	b118      	cbz	r0, 8015674 <_vfiprintf_r+0x18>
 801566c:	6983      	ldr	r3, [r0, #24]
 801566e:	b90b      	cbnz	r3, 8015674 <_vfiprintf_r+0x18>
 8015670:	f7ff fa6a 	bl	8014b48 <__sinit>
 8015674:	4b7c      	ldr	r3, [pc, #496]	; (8015868 <_vfiprintf_r+0x20c>)
 8015676:	429c      	cmp	r4, r3
 8015678:	d158      	bne.n	801572c <_vfiprintf_r+0xd0>
 801567a:	6874      	ldr	r4, [r6, #4]
 801567c:	89a3      	ldrh	r3, [r4, #12]
 801567e:	0718      	lsls	r0, r3, #28
 8015680:	d55e      	bpl.n	8015740 <_vfiprintf_r+0xe4>
 8015682:	6923      	ldr	r3, [r4, #16]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d05b      	beq.n	8015740 <_vfiprintf_r+0xe4>
 8015688:	2300      	movs	r3, #0
 801568a:	9309      	str	r3, [sp, #36]	; 0x24
 801568c:	2320      	movs	r3, #32
 801568e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015692:	2330      	movs	r3, #48	; 0x30
 8015694:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015698:	9503      	str	r5, [sp, #12]
 801569a:	f04f 0b01 	mov.w	fp, #1
 801569e:	46b8      	mov	r8, r7
 80156a0:	4645      	mov	r5, r8
 80156a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80156a6:	b10b      	cbz	r3, 80156ac <_vfiprintf_r+0x50>
 80156a8:	2b25      	cmp	r3, #37	; 0x25
 80156aa:	d154      	bne.n	8015756 <_vfiprintf_r+0xfa>
 80156ac:	ebb8 0a07 	subs.w	sl, r8, r7
 80156b0:	d00b      	beq.n	80156ca <_vfiprintf_r+0x6e>
 80156b2:	4653      	mov	r3, sl
 80156b4:	463a      	mov	r2, r7
 80156b6:	4621      	mov	r1, r4
 80156b8:	4630      	mov	r0, r6
 80156ba:	f7ff ffbc 	bl	8015636 <__sfputs_r>
 80156be:	3001      	adds	r0, #1
 80156c0:	f000 80c2 	beq.w	8015848 <_vfiprintf_r+0x1ec>
 80156c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156c6:	4453      	add	r3, sl
 80156c8:	9309      	str	r3, [sp, #36]	; 0x24
 80156ca:	f898 3000 	ldrb.w	r3, [r8]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	f000 80ba 	beq.w	8015848 <_vfiprintf_r+0x1ec>
 80156d4:	2300      	movs	r3, #0
 80156d6:	f04f 32ff 	mov.w	r2, #4294967295
 80156da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80156de:	9304      	str	r3, [sp, #16]
 80156e0:	9307      	str	r3, [sp, #28]
 80156e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80156e6:	931a      	str	r3, [sp, #104]	; 0x68
 80156e8:	46a8      	mov	r8, r5
 80156ea:	2205      	movs	r2, #5
 80156ec:	f818 1b01 	ldrb.w	r1, [r8], #1
 80156f0:	485e      	ldr	r0, [pc, #376]	; (801586c <_vfiprintf_r+0x210>)
 80156f2:	f7ea fd8d 	bl	8000210 <memchr>
 80156f6:	9b04      	ldr	r3, [sp, #16]
 80156f8:	bb78      	cbnz	r0, 801575a <_vfiprintf_r+0xfe>
 80156fa:	06d9      	lsls	r1, r3, #27
 80156fc:	bf44      	itt	mi
 80156fe:	2220      	movmi	r2, #32
 8015700:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015704:	071a      	lsls	r2, r3, #28
 8015706:	bf44      	itt	mi
 8015708:	222b      	movmi	r2, #43	; 0x2b
 801570a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801570e:	782a      	ldrb	r2, [r5, #0]
 8015710:	2a2a      	cmp	r2, #42	; 0x2a
 8015712:	d02a      	beq.n	801576a <_vfiprintf_r+0x10e>
 8015714:	9a07      	ldr	r2, [sp, #28]
 8015716:	46a8      	mov	r8, r5
 8015718:	2000      	movs	r0, #0
 801571a:	250a      	movs	r5, #10
 801571c:	4641      	mov	r1, r8
 801571e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015722:	3b30      	subs	r3, #48	; 0x30
 8015724:	2b09      	cmp	r3, #9
 8015726:	d969      	bls.n	80157fc <_vfiprintf_r+0x1a0>
 8015728:	b360      	cbz	r0, 8015784 <_vfiprintf_r+0x128>
 801572a:	e024      	b.n	8015776 <_vfiprintf_r+0x11a>
 801572c:	4b50      	ldr	r3, [pc, #320]	; (8015870 <_vfiprintf_r+0x214>)
 801572e:	429c      	cmp	r4, r3
 8015730:	d101      	bne.n	8015736 <_vfiprintf_r+0xda>
 8015732:	68b4      	ldr	r4, [r6, #8]
 8015734:	e7a2      	b.n	801567c <_vfiprintf_r+0x20>
 8015736:	4b4f      	ldr	r3, [pc, #316]	; (8015874 <_vfiprintf_r+0x218>)
 8015738:	429c      	cmp	r4, r3
 801573a:	bf08      	it	eq
 801573c:	68f4      	ldreq	r4, [r6, #12]
 801573e:	e79d      	b.n	801567c <_vfiprintf_r+0x20>
 8015740:	4621      	mov	r1, r4
 8015742:	4630      	mov	r0, r6
 8015744:	f7fe fa5e 	bl	8013c04 <__swsetup_r>
 8015748:	2800      	cmp	r0, #0
 801574a:	d09d      	beq.n	8015688 <_vfiprintf_r+0x2c>
 801574c:	f04f 30ff 	mov.w	r0, #4294967295
 8015750:	b01d      	add	sp, #116	; 0x74
 8015752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015756:	46a8      	mov	r8, r5
 8015758:	e7a2      	b.n	80156a0 <_vfiprintf_r+0x44>
 801575a:	4a44      	ldr	r2, [pc, #272]	; (801586c <_vfiprintf_r+0x210>)
 801575c:	1a80      	subs	r0, r0, r2
 801575e:	fa0b f000 	lsl.w	r0, fp, r0
 8015762:	4318      	orrs	r0, r3
 8015764:	9004      	str	r0, [sp, #16]
 8015766:	4645      	mov	r5, r8
 8015768:	e7be      	b.n	80156e8 <_vfiprintf_r+0x8c>
 801576a:	9a03      	ldr	r2, [sp, #12]
 801576c:	1d11      	adds	r1, r2, #4
 801576e:	6812      	ldr	r2, [r2, #0]
 8015770:	9103      	str	r1, [sp, #12]
 8015772:	2a00      	cmp	r2, #0
 8015774:	db01      	blt.n	801577a <_vfiprintf_r+0x11e>
 8015776:	9207      	str	r2, [sp, #28]
 8015778:	e004      	b.n	8015784 <_vfiprintf_r+0x128>
 801577a:	4252      	negs	r2, r2
 801577c:	f043 0302 	orr.w	r3, r3, #2
 8015780:	9207      	str	r2, [sp, #28]
 8015782:	9304      	str	r3, [sp, #16]
 8015784:	f898 3000 	ldrb.w	r3, [r8]
 8015788:	2b2e      	cmp	r3, #46	; 0x2e
 801578a:	d10e      	bne.n	80157aa <_vfiprintf_r+0x14e>
 801578c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015790:	2b2a      	cmp	r3, #42	; 0x2a
 8015792:	d138      	bne.n	8015806 <_vfiprintf_r+0x1aa>
 8015794:	9b03      	ldr	r3, [sp, #12]
 8015796:	1d1a      	adds	r2, r3, #4
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	9203      	str	r2, [sp, #12]
 801579c:	2b00      	cmp	r3, #0
 801579e:	bfb8      	it	lt
 80157a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80157a4:	f108 0802 	add.w	r8, r8, #2
 80157a8:	9305      	str	r3, [sp, #20]
 80157aa:	4d33      	ldr	r5, [pc, #204]	; (8015878 <_vfiprintf_r+0x21c>)
 80157ac:	f898 1000 	ldrb.w	r1, [r8]
 80157b0:	2203      	movs	r2, #3
 80157b2:	4628      	mov	r0, r5
 80157b4:	f7ea fd2c 	bl	8000210 <memchr>
 80157b8:	b140      	cbz	r0, 80157cc <_vfiprintf_r+0x170>
 80157ba:	2340      	movs	r3, #64	; 0x40
 80157bc:	1b40      	subs	r0, r0, r5
 80157be:	fa03 f000 	lsl.w	r0, r3, r0
 80157c2:	9b04      	ldr	r3, [sp, #16]
 80157c4:	4303      	orrs	r3, r0
 80157c6:	f108 0801 	add.w	r8, r8, #1
 80157ca:	9304      	str	r3, [sp, #16]
 80157cc:	f898 1000 	ldrb.w	r1, [r8]
 80157d0:	482a      	ldr	r0, [pc, #168]	; (801587c <_vfiprintf_r+0x220>)
 80157d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80157d6:	2206      	movs	r2, #6
 80157d8:	f108 0701 	add.w	r7, r8, #1
 80157dc:	f7ea fd18 	bl	8000210 <memchr>
 80157e0:	2800      	cmp	r0, #0
 80157e2:	d037      	beq.n	8015854 <_vfiprintf_r+0x1f8>
 80157e4:	4b26      	ldr	r3, [pc, #152]	; (8015880 <_vfiprintf_r+0x224>)
 80157e6:	bb1b      	cbnz	r3, 8015830 <_vfiprintf_r+0x1d4>
 80157e8:	9b03      	ldr	r3, [sp, #12]
 80157ea:	3307      	adds	r3, #7
 80157ec:	f023 0307 	bic.w	r3, r3, #7
 80157f0:	3308      	adds	r3, #8
 80157f2:	9303      	str	r3, [sp, #12]
 80157f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157f6:	444b      	add	r3, r9
 80157f8:	9309      	str	r3, [sp, #36]	; 0x24
 80157fa:	e750      	b.n	801569e <_vfiprintf_r+0x42>
 80157fc:	fb05 3202 	mla	r2, r5, r2, r3
 8015800:	2001      	movs	r0, #1
 8015802:	4688      	mov	r8, r1
 8015804:	e78a      	b.n	801571c <_vfiprintf_r+0xc0>
 8015806:	2300      	movs	r3, #0
 8015808:	f108 0801 	add.w	r8, r8, #1
 801580c:	9305      	str	r3, [sp, #20]
 801580e:	4619      	mov	r1, r3
 8015810:	250a      	movs	r5, #10
 8015812:	4640      	mov	r0, r8
 8015814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015818:	3a30      	subs	r2, #48	; 0x30
 801581a:	2a09      	cmp	r2, #9
 801581c:	d903      	bls.n	8015826 <_vfiprintf_r+0x1ca>
 801581e:	2b00      	cmp	r3, #0
 8015820:	d0c3      	beq.n	80157aa <_vfiprintf_r+0x14e>
 8015822:	9105      	str	r1, [sp, #20]
 8015824:	e7c1      	b.n	80157aa <_vfiprintf_r+0x14e>
 8015826:	fb05 2101 	mla	r1, r5, r1, r2
 801582a:	2301      	movs	r3, #1
 801582c:	4680      	mov	r8, r0
 801582e:	e7f0      	b.n	8015812 <_vfiprintf_r+0x1b6>
 8015830:	ab03      	add	r3, sp, #12
 8015832:	9300      	str	r3, [sp, #0]
 8015834:	4622      	mov	r2, r4
 8015836:	4b13      	ldr	r3, [pc, #76]	; (8015884 <_vfiprintf_r+0x228>)
 8015838:	a904      	add	r1, sp, #16
 801583a:	4630      	mov	r0, r6
 801583c:	f7fd fd1c 	bl	8013278 <_printf_float>
 8015840:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015844:	4681      	mov	r9, r0
 8015846:	d1d5      	bne.n	80157f4 <_vfiprintf_r+0x198>
 8015848:	89a3      	ldrh	r3, [r4, #12]
 801584a:	065b      	lsls	r3, r3, #25
 801584c:	f53f af7e 	bmi.w	801574c <_vfiprintf_r+0xf0>
 8015850:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015852:	e77d      	b.n	8015750 <_vfiprintf_r+0xf4>
 8015854:	ab03      	add	r3, sp, #12
 8015856:	9300      	str	r3, [sp, #0]
 8015858:	4622      	mov	r2, r4
 801585a:	4b0a      	ldr	r3, [pc, #40]	; (8015884 <_vfiprintf_r+0x228>)
 801585c:	a904      	add	r1, sp, #16
 801585e:	4630      	mov	r0, r6
 8015860:	f7fd ffc0 	bl	80137e4 <_printf_i>
 8015864:	e7ec      	b.n	8015840 <_vfiprintf_r+0x1e4>
 8015866:	bf00      	nop
 8015868:	08016570 	.word	0x08016570
 801586c:	080166ac 	.word	0x080166ac
 8015870:	08016590 	.word	0x08016590
 8015874:	08016550 	.word	0x08016550
 8015878:	080166b2 	.word	0x080166b2
 801587c:	080166b6 	.word	0x080166b6
 8015880:	08013279 	.word	0x08013279
 8015884:	08015637 	.word	0x08015637

08015888 <__sread>:
 8015888:	b510      	push	{r4, lr}
 801588a:	460c      	mov	r4, r1
 801588c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015890:	f000 f8c8 	bl	8015a24 <_read_r>
 8015894:	2800      	cmp	r0, #0
 8015896:	bfab      	itete	ge
 8015898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801589a:	89a3      	ldrhlt	r3, [r4, #12]
 801589c:	181b      	addge	r3, r3, r0
 801589e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80158a2:	bfac      	ite	ge
 80158a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80158a6:	81a3      	strhlt	r3, [r4, #12]
 80158a8:	bd10      	pop	{r4, pc}

080158aa <__swrite>:
 80158aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158ae:	461f      	mov	r7, r3
 80158b0:	898b      	ldrh	r3, [r1, #12]
 80158b2:	05db      	lsls	r3, r3, #23
 80158b4:	4605      	mov	r5, r0
 80158b6:	460c      	mov	r4, r1
 80158b8:	4616      	mov	r6, r2
 80158ba:	d505      	bpl.n	80158c8 <__swrite+0x1e>
 80158bc:	2302      	movs	r3, #2
 80158be:	2200      	movs	r2, #0
 80158c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158c4:	f000 f868 	bl	8015998 <_lseek_r>
 80158c8:	89a3      	ldrh	r3, [r4, #12]
 80158ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80158d2:	81a3      	strh	r3, [r4, #12]
 80158d4:	4632      	mov	r2, r6
 80158d6:	463b      	mov	r3, r7
 80158d8:	4628      	mov	r0, r5
 80158da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158de:	f000 b817 	b.w	8015910 <_write_r>

080158e2 <__sseek>:
 80158e2:	b510      	push	{r4, lr}
 80158e4:	460c      	mov	r4, r1
 80158e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158ea:	f000 f855 	bl	8015998 <_lseek_r>
 80158ee:	1c43      	adds	r3, r0, #1
 80158f0:	89a3      	ldrh	r3, [r4, #12]
 80158f2:	bf15      	itete	ne
 80158f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80158f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80158fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80158fe:	81a3      	strheq	r3, [r4, #12]
 8015900:	bf18      	it	ne
 8015902:	81a3      	strhne	r3, [r4, #12]
 8015904:	bd10      	pop	{r4, pc}

08015906 <__sclose>:
 8015906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801590a:	f000 b813 	b.w	8015934 <_close_r>
	...

08015910 <_write_r>:
 8015910:	b538      	push	{r3, r4, r5, lr}
 8015912:	4c07      	ldr	r4, [pc, #28]	; (8015930 <_write_r+0x20>)
 8015914:	4605      	mov	r5, r0
 8015916:	4608      	mov	r0, r1
 8015918:	4611      	mov	r1, r2
 801591a:	2200      	movs	r2, #0
 801591c:	6022      	str	r2, [r4, #0]
 801591e:	461a      	mov	r2, r3
 8015920:	f7ed fbe1 	bl	80030e6 <_write>
 8015924:	1c43      	adds	r3, r0, #1
 8015926:	d102      	bne.n	801592e <_write_r+0x1e>
 8015928:	6823      	ldr	r3, [r4, #0]
 801592a:	b103      	cbz	r3, 801592e <_write_r+0x1e>
 801592c:	602b      	str	r3, [r5, #0]
 801592e:	bd38      	pop	{r3, r4, r5, pc}
 8015930:	20002bac 	.word	0x20002bac

08015934 <_close_r>:
 8015934:	b538      	push	{r3, r4, r5, lr}
 8015936:	4c06      	ldr	r4, [pc, #24]	; (8015950 <_close_r+0x1c>)
 8015938:	2300      	movs	r3, #0
 801593a:	4605      	mov	r5, r0
 801593c:	4608      	mov	r0, r1
 801593e:	6023      	str	r3, [r4, #0]
 8015940:	f7ed fbed 	bl	800311e <_close>
 8015944:	1c43      	adds	r3, r0, #1
 8015946:	d102      	bne.n	801594e <_close_r+0x1a>
 8015948:	6823      	ldr	r3, [r4, #0]
 801594a:	b103      	cbz	r3, 801594e <_close_r+0x1a>
 801594c:	602b      	str	r3, [r5, #0]
 801594e:	bd38      	pop	{r3, r4, r5, pc}
 8015950:	20002bac 	.word	0x20002bac

08015954 <_fstat_r>:
 8015954:	b538      	push	{r3, r4, r5, lr}
 8015956:	4c07      	ldr	r4, [pc, #28]	; (8015974 <_fstat_r+0x20>)
 8015958:	2300      	movs	r3, #0
 801595a:	4605      	mov	r5, r0
 801595c:	4608      	mov	r0, r1
 801595e:	4611      	mov	r1, r2
 8015960:	6023      	str	r3, [r4, #0]
 8015962:	f7ed fbe8 	bl	8003136 <_fstat>
 8015966:	1c43      	adds	r3, r0, #1
 8015968:	d102      	bne.n	8015970 <_fstat_r+0x1c>
 801596a:	6823      	ldr	r3, [r4, #0]
 801596c:	b103      	cbz	r3, 8015970 <_fstat_r+0x1c>
 801596e:	602b      	str	r3, [r5, #0]
 8015970:	bd38      	pop	{r3, r4, r5, pc}
 8015972:	bf00      	nop
 8015974:	20002bac 	.word	0x20002bac

08015978 <_isatty_r>:
 8015978:	b538      	push	{r3, r4, r5, lr}
 801597a:	4c06      	ldr	r4, [pc, #24]	; (8015994 <_isatty_r+0x1c>)
 801597c:	2300      	movs	r3, #0
 801597e:	4605      	mov	r5, r0
 8015980:	4608      	mov	r0, r1
 8015982:	6023      	str	r3, [r4, #0]
 8015984:	f7ed fbe7 	bl	8003156 <_isatty>
 8015988:	1c43      	adds	r3, r0, #1
 801598a:	d102      	bne.n	8015992 <_isatty_r+0x1a>
 801598c:	6823      	ldr	r3, [r4, #0]
 801598e:	b103      	cbz	r3, 8015992 <_isatty_r+0x1a>
 8015990:	602b      	str	r3, [r5, #0]
 8015992:	bd38      	pop	{r3, r4, r5, pc}
 8015994:	20002bac 	.word	0x20002bac

08015998 <_lseek_r>:
 8015998:	b538      	push	{r3, r4, r5, lr}
 801599a:	4c07      	ldr	r4, [pc, #28]	; (80159b8 <_lseek_r+0x20>)
 801599c:	4605      	mov	r5, r0
 801599e:	4608      	mov	r0, r1
 80159a0:	4611      	mov	r1, r2
 80159a2:	2200      	movs	r2, #0
 80159a4:	6022      	str	r2, [r4, #0]
 80159a6:	461a      	mov	r2, r3
 80159a8:	f7ed fbe0 	bl	800316c <_lseek>
 80159ac:	1c43      	adds	r3, r0, #1
 80159ae:	d102      	bne.n	80159b6 <_lseek_r+0x1e>
 80159b0:	6823      	ldr	r3, [r4, #0]
 80159b2:	b103      	cbz	r3, 80159b6 <_lseek_r+0x1e>
 80159b4:	602b      	str	r3, [r5, #0]
 80159b6:	bd38      	pop	{r3, r4, r5, pc}
 80159b8:	20002bac 	.word	0x20002bac

080159bc <__ascii_mbtowc>:
 80159bc:	b082      	sub	sp, #8
 80159be:	b901      	cbnz	r1, 80159c2 <__ascii_mbtowc+0x6>
 80159c0:	a901      	add	r1, sp, #4
 80159c2:	b142      	cbz	r2, 80159d6 <__ascii_mbtowc+0x1a>
 80159c4:	b14b      	cbz	r3, 80159da <__ascii_mbtowc+0x1e>
 80159c6:	7813      	ldrb	r3, [r2, #0]
 80159c8:	600b      	str	r3, [r1, #0]
 80159ca:	7812      	ldrb	r2, [r2, #0]
 80159cc:	1c10      	adds	r0, r2, #0
 80159ce:	bf18      	it	ne
 80159d0:	2001      	movne	r0, #1
 80159d2:	b002      	add	sp, #8
 80159d4:	4770      	bx	lr
 80159d6:	4610      	mov	r0, r2
 80159d8:	e7fb      	b.n	80159d2 <__ascii_mbtowc+0x16>
 80159da:	f06f 0001 	mvn.w	r0, #1
 80159de:	e7f8      	b.n	80159d2 <__ascii_mbtowc+0x16>

080159e0 <memmove>:
 80159e0:	4288      	cmp	r0, r1
 80159e2:	b510      	push	{r4, lr}
 80159e4:	eb01 0302 	add.w	r3, r1, r2
 80159e8:	d807      	bhi.n	80159fa <memmove+0x1a>
 80159ea:	1e42      	subs	r2, r0, #1
 80159ec:	4299      	cmp	r1, r3
 80159ee:	d00a      	beq.n	8015a06 <memmove+0x26>
 80159f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80159f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80159f8:	e7f8      	b.n	80159ec <memmove+0xc>
 80159fa:	4283      	cmp	r3, r0
 80159fc:	d9f5      	bls.n	80159ea <memmove+0xa>
 80159fe:	1881      	adds	r1, r0, r2
 8015a00:	1ad2      	subs	r2, r2, r3
 8015a02:	42d3      	cmn	r3, r2
 8015a04:	d100      	bne.n	8015a08 <memmove+0x28>
 8015a06:	bd10      	pop	{r4, pc}
 8015a08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015a0c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015a10:	e7f7      	b.n	8015a02 <memmove+0x22>

08015a12 <_malloc_usable_size_r>:
 8015a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a16:	1f18      	subs	r0, r3, #4
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	bfbc      	itt	lt
 8015a1c:	580b      	ldrlt	r3, [r1, r0]
 8015a1e:	18c0      	addlt	r0, r0, r3
 8015a20:	4770      	bx	lr
	...

08015a24 <_read_r>:
 8015a24:	b538      	push	{r3, r4, r5, lr}
 8015a26:	4c07      	ldr	r4, [pc, #28]	; (8015a44 <_read_r+0x20>)
 8015a28:	4605      	mov	r5, r0
 8015a2a:	4608      	mov	r0, r1
 8015a2c:	4611      	mov	r1, r2
 8015a2e:	2200      	movs	r2, #0
 8015a30:	6022      	str	r2, [r4, #0]
 8015a32:	461a      	mov	r2, r3
 8015a34:	f7ed fb3a 	bl	80030ac <_read>
 8015a38:	1c43      	adds	r3, r0, #1
 8015a3a:	d102      	bne.n	8015a42 <_read_r+0x1e>
 8015a3c:	6823      	ldr	r3, [r4, #0]
 8015a3e:	b103      	cbz	r3, 8015a42 <_read_r+0x1e>
 8015a40:	602b      	str	r3, [r5, #0]
 8015a42:	bd38      	pop	{r3, r4, r5, pc}
 8015a44:	20002bac 	.word	0x20002bac

08015a48 <__ascii_wctomb>:
 8015a48:	b149      	cbz	r1, 8015a5e <__ascii_wctomb+0x16>
 8015a4a:	2aff      	cmp	r2, #255	; 0xff
 8015a4c:	bf85      	ittet	hi
 8015a4e:	238a      	movhi	r3, #138	; 0x8a
 8015a50:	6003      	strhi	r3, [r0, #0]
 8015a52:	700a      	strbls	r2, [r1, #0]
 8015a54:	f04f 30ff 	movhi.w	r0, #4294967295
 8015a58:	bf98      	it	ls
 8015a5a:	2001      	movls	r0, #1
 8015a5c:	4770      	bx	lr
 8015a5e:	4608      	mov	r0, r1
 8015a60:	4770      	bx	lr
	...

08015a64 <_init>:
 8015a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a66:	bf00      	nop
 8015a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a6a:	bc08      	pop	{r3}
 8015a6c:	469e      	mov	lr, r3
 8015a6e:	4770      	bx	lr

08015a70 <_fini>:
 8015a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a72:	bf00      	nop
 8015a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a76:	bc08      	pop	{r3}
 8015a78:	469e      	mov	lr, r3
 8015a7a:	4770      	bx	lr
