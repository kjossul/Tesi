
PowerDecay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000148fc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000056e0  08014ac0  08014ac0  00024ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a1a0  0801a1a0  00030974  2**0
                  CONTENTS
  4 .ARM          00000008  0801a1a0  0801a1a0  0002a1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a1a8  0801a1a8  00030974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a1a8  0801a1a8  0002a1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a1ac  0801a1ac  0002a1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000974  20000000  0801a1b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022f8  20000974  0801ab24  00030974  2**2
                  ALLOC
 10 ._user_heap_stack 00010804  20002c6c  0801ab24  00032c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030974  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038a67  00000000  00000000  000309a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005f84  00000000  00000000  0006940b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002ae0  00000000  00000000  0006f390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002820  00000000  00000000  00071e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003f48d  00000000  00000000  00074690  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00028a28  00000000  00000000  000b3b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001650c4  00000000  00000000  000dc545  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00241609  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c734  00000000  00000000  00241684  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000974 	.word	0x20000974
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08014aa4 	.word	0x08014aa4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000978 	.word	0x20000978
 80001fc:	08014aa4 	.word	0x08014aa4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b972 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	4688      	mov	r8, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14b      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4615      	mov	r5, r2
 8000c1a:	d967      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0720 	rsb	r7, r2, #32
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c2e:	4095      	lsls	r5, r2
 8000c30:	ea47 0803 	orr.w	r8, r7, r3
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c40:	fa1f fc85 	uxth.w	ip, r5
 8000c44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c5a:	f080 811b 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8118 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c64:	3f02      	subs	r7, #2
 8000c66:	442b      	add	r3, r5
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8107 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	f240 8104 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c90:	3802      	subs	r0, #2
 8000c92:	442c      	add	r4, r5
 8000c94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c98:	eba4 040c 	sub.w	r4, r4, ip
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	b11e      	cbz	r6, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca8:	4639      	mov	r1, r7
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0xbe>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80eb 	beq.w	8000e8e <__udivmoddi4+0x286>
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e9c6 0100 	strd	r0, r1, [r6]
 8000cbe:	4638      	mov	r0, r7
 8000cc0:	4639      	mov	r1, r7
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	fab3 f783 	clz	r7, r3
 8000cca:	2f00      	cmp	r7, #0
 8000ccc:	d147      	bne.n	8000d5e <__udivmoddi4+0x156>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d302      	bcc.n	8000cd8 <__udivmoddi4+0xd0>
 8000cd2:	4282      	cmp	r2, r0
 8000cd4:	f200 80fa 	bhi.w	8000ecc <__udivmoddi4+0x2c4>
 8000cd8:	1a84      	subs	r4, r0, r2
 8000cda:	eb61 0303 	sbc.w	r3, r1, r3
 8000cde:	2001      	movs	r0, #1
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d0e0      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000ce6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cea:	e7dd      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000cec:	b902      	cbnz	r2, 8000cf0 <__udivmoddi4+0xe8>
 8000cee:	deff      	udf	#255	; 0xff
 8000cf0:	fab2 f282 	clz	r2, r2
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f040 808f 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cfa:	1b49      	subs	r1, r1, r5
 8000cfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d00:	fa1f f885 	uxth.w	r8, r5
 8000d04:	2701      	movs	r7, #1
 8000d06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d14:	fb08 f10c 	mul.w	r1, r8, ip
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1c:	18eb      	adds	r3, r5, r3
 8000d1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4299      	cmp	r1, r3
 8000d26:	f200 80cd 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d3c:	fb08 f800 	mul.w	r8, r8, r0
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x14c>
 8000d44:	192c      	adds	r4, r5, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x14a>
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	f200 80b6 	bhi.w	8000ebe <__udivmoddi4+0x2b6>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 0408 	sub.w	r4, r4, r8
 8000d58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d5c:	e79f      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d62:	40bb      	lsls	r3, r7
 8000d64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d7c:	4325      	orrs	r5, r4
 8000d7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d82:	0c2c      	lsrs	r4, r5, #16
 8000d84:	fb08 3319 	mls	r3, r8, r9, r3
 8000d88:	fa1f fa8e 	uxth.w	sl, lr
 8000d8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d90:	fb09 f40a 	mul.w	r4, r9, sl
 8000d94:	429c      	cmp	r4, r3
 8000d96:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1e 0303 	adds.w	r3, lr, r3
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da8:	f080 8087 	bcs.w	8000eba <__udivmoddi4+0x2b2>
 8000dac:	429c      	cmp	r4, r3
 8000dae:	f240 8084 	bls.w	8000eba <__udivmoddi4+0x2b2>
 8000db2:	f1a9 0902 	sub.w	r9, r9, #2
 8000db6:	4473      	add	r3, lr
 8000db8:	1b1b      	subs	r3, r3, r4
 8000dba:	b2ad      	uxth	r5, r5
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dc8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dcc:	45a2      	cmp	sl, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	d26b      	bcs.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dda:	45a2      	cmp	sl, r4
 8000ddc:	d969      	bls.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4474      	add	r4, lr
 8000de2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	eba4 040a 	sub.w	r4, r4, sl
 8000dee:	454c      	cmp	r4, r9
 8000df0:	46c2      	mov	sl, r8
 8000df2:	464b      	mov	r3, r9
 8000df4:	d354      	bcc.n	8000ea0 <__udivmoddi4+0x298>
 8000df6:	d051      	beq.n	8000e9c <__udivmoddi4+0x294>
 8000df8:	2e00      	cmp	r6, #0
 8000dfa:	d069      	beq.n	8000ed0 <__udivmoddi4+0x2c8>
 8000dfc:	ebb1 050a 	subs.w	r5, r1, sl
 8000e00:	eb64 0403 	sbc.w	r4, r4, r3
 8000e04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e08:	40fd      	lsrs	r5, r7
 8000e0a:	40fc      	lsrs	r4, r7
 8000e0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e10:	e9c6 5400 	strd	r5, r4, [r6]
 8000e14:	2700      	movs	r7, #0
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e20:	4095      	lsls	r5, r2
 8000e22:	fa01 f002 	lsl.w	r0, r1, r2
 8000e26:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e2e:	4338      	orrs	r0, r7
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e36:	fa1f f885 	uxth.w	r8, r5
 8000e3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb07 f308 	mul.w	r3, r7, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x256>
 8000e4e:	1869      	adds	r1, r5, r1
 8000e50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e54:	d22f      	bcs.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d92d      	bls.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e5a:	3f02      	subs	r7, #2
 8000e5c:	4429      	add	r1, r5
 8000e5e:	1acb      	subs	r3, r1, r3
 8000e60:	b281      	uxth	r1, r0
 8000e62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6e:	fb00 f308 	mul.w	r3, r0, r8
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x27e>
 8000e76:	1869      	adds	r1, r5, r1
 8000e78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e7c:	d217      	bcs.n	8000eae <__udivmoddi4+0x2a6>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d915      	bls.n	8000eae <__udivmoddi4+0x2a6>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4429      	add	r1, r5
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e8c:	e73b      	b.n	8000d06 <__udivmoddi4+0xfe>
 8000e8e:	4637      	mov	r7, r6
 8000e90:	4630      	mov	r0, r6
 8000e92:	e709      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e94:	4607      	mov	r7, r0
 8000e96:	e6e7      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6fb      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e9c:	4541      	cmp	r1, r8
 8000e9e:	d2ab      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	4613      	mov	r3, r2
 8000eac:	e7a4      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	e7e9      	b.n	8000e86 <__udivmoddi4+0x27e>
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	e795      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb6:	4667      	mov	r7, ip
 8000eb8:	e7d1      	b.n	8000e5e <__udivmoddi4+0x256>
 8000eba:	4681      	mov	r9, r0
 8000ebc:	e77c      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	442c      	add	r4, r5
 8000ec2:	e747      	b.n	8000d54 <__udivmoddi4+0x14c>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	442b      	add	r3, r5
 8000eca:	e72f      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ecc:	4638      	mov	r0, r7
 8000ece:	e708      	b.n	8000ce2 <__udivmoddi4+0xda>
 8000ed0:	4637      	mov	r7, r6
 8000ed2:	e6e9      	b.n	8000ca8 <__udivmoddi4+0xa0>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	f5ad 5df1 	sub.w	sp, sp, #7712	; 0x1e20
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	 char buf[128];
	  int buf_len = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f507 52f0 	add.w	r2, r7, #7680	; 0x1e00
 8000ee8:	f102 021c 	add.w	r2, r2, #28
 8000eec:	6013      	str	r3, [r2, #0]
	  ai_error ai_err;
	  ai_i32 nbatch;
	  uint32_t timestamp;
	  float y_val;
	  int x_counter = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 8000ef4:	f102 0204 	add.w	r2, r2, #4
 8000ef8:	6013      	str	r3, [r2, #0]
	  float x_points[1728] = {-0.73000,  -0.76000,  -0.00000,   1.41000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.37000,   0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.71000,  -1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.00000,  -1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.22000,   0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.37000,   1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.41000,   0.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.37000,  -1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.00000,   1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.71000,   1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.37000,  -0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.00000,  -1.41000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.37000,  -0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.71000,   1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.00000,   1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.37000,  -1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.41000,  -0.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.37000,   1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.22000,   0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.00000,  -1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.71000,  -1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.37000,   0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.00000,   1.41000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.37000,   0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.71000,  -1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.00000,  -1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.22000,   0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.37000,   1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.41000,   0.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.37000,  -1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.00000,   1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.71000,   1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.37000,  -0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.00000,  -1.41000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.37000,  -0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.71000,   1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.00000,   1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.37000,  -1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.41000,  -0.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.37000,   1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.22000,   0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.00000,  -1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.71000,  -1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.37000,   0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.00000,   1.41000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.37000,   0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.71000,  -1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.00000,  -1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.22000,   0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.37000,   1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.41000,   0.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.37000,  -1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.00000,   1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.71000,   1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.37000,  -0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.00000,  -1.41000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.37000,  -0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.71000,   1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.00000,   1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.37000,  -1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.41000,  -0.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.37000,   1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.22000,   0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.00000,  -1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.71000,  -1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.37000,   0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.00000,   1.41000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.37000,   0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.71000,  -1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.00000,  -1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.22000,   0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.37000,   1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.41000,   0.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.37000,  -1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.00000,   1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.71000,   1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.37000,  -0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.00000,  -1.41000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.37000,  -0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.71000,   1.22000,  -0.11000,  -1.41000,  -0.72000,  -0.76000,   1.00000,   1.00000,  -0.11000,  -1.41000,  -0.72000,  -0.76000,   1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.71000,  -0.76000,  -0.37000,  -1.37000,  -0.11000,  -1.41000,  -0.69000,  -0.76000,  -1.41000,  -0.00000,  -0.11000,  -1.41000,  -0.66000,  -0.76000,  -0.37000,   1.37000,  -0.11000,  -1.41000,  -0.59000,  -0.76000,   1.22000,   0.71000,  -0.11000,  -1.41000,  -0.47000,  -0.76000,   1.00000,  -1.00000,  -0.11000,  -1.41000,  -0.42000,  -0.76000,  -0.71000,  -1.22000,  -0.11000,  -1.41000,  -0.38000,  -0.76000,  -1.37000,   0.37000,  -0.11000,  -1.41000,  -0.33000,  -0.76000,  -0.00000,   1.41000,  -0.11000,  -1.41000,  -0.30000,  -0.76000,   1.37000,   0.37000,  -0.11000,  -1.41000,  -0.26000,  -0.76000,   0.71000,  -1.22000,  -0.11000,  -1.41000,  -0.31000,  -0.75000,  -1.00000,  -1.00000,  -0.11000,  -1.41000,  -0.20000,  -0.73000,  -1.22000,   0.71000,  -0.11000,  -1.41000,  -0.15000,  -0.73000,   0.37000,   1.37000,  -0.11000,  -1.41000,  -0.37000,  -0.71000,   1.41000,   0.00000,  -0.11000,  -1.41000,  -0.32000,  -0.52000,   0.37000,  -1.37000,  -0.11000,  -1.41000,  -0.08000,  -0.21000,  -1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.25000,  -0.12000,  -1.00000,   1.00000,  -0.11000,  -1.41000,   0.07000,   0.03000,   0.71000,   1.22000,  -0.11000,  -1.41000,   0.26000,   0.10000,   1.37000,  -0.37000,  -0.11000,  -1.41000,   0.33000,   0.14000,   0.00000,  -1.41000,  -0.11000,  -1.41000,   0.39000,   0.19000,  -1.37000,  -0.37000,  -0.11000,  -1.41000,   0.45000,   0.24000,  -0.71000,   1.22000,  -0.11000,  -1.41000,   0.50000,   0.30000,   1.00000,   1.00000,  -0.11000,  -1.41000,   0.56000,   0.34000,   1.22000,  -0.71000,  -0.11000,  -1.41000,   0.61000,   0.41000,  -0.37000,  -1.37000,  -0.11000,  -1.41000,   0.65000,   0.50000,  -1.41000,  -0.00000,  -0.11000,  -1.41000,   0.69000,   0.60000,  -0.37000,   1.37000,  -0.11000,  -1.41000,   0.73000,   0.68000,   1.22000,   0.71000,  -0.11000,  -1.41000,   0.78000,   0.75000,   1.00000,  -1.00000,  -0.11000,  -1.41000,   0.83000,   0.87000,  -0.71000,  -1.22000,  -0.11000,  -1.41000,   0.87000,   0.95000,  -1.37000,   0.37000,  -0.11000,  -1.41000,   0.92000,   0.99000,  -0.00000,   1.41000,  -0.11000,  -1.41000,   0.96000,   1.03000,   1.37000,   0.37000,  -0.11000,  -1.41000,   1.01000,   1.07000,   0.71000,  -1.22000,  -0.11000,  -1.41000,   1.04000,   1.11000,  -1.00000,  -1.00000,  -0.11000,  -1.41000,   1.09000,   1.14000,  -1.22000,   0.71000,  -0.11000,  -1.41000,   1.12000,   1.18000,   0.37000,   1.37000,  -0.11000,  -1.41000,   1.16000,   1.21000,   1.41000,   0.00000,  -0.11000,  -1.41000,   1.19000,   1.24000,   0.37000,  -1.37000,  -0.11000,  -1.41000,   1.23000,   1.26000,  -1.22000,  -0.71000,  -0.11000,  -1.41000,   1.26000,   1.28000,  -1.00000,   1.00000,  -0.11000,  -1.41000,   1.29000,   1.30000,   0.71000,   1.22000,  -0.11000,  -1.41000,   1.33000,   1.33000,   1.37000,  -0.37000,  -0.11000,  -1.41000,   1.36000,   1.36000,   0.00000,  -1.41000,  -0.11000,  -1.41000,   1.37000,   1.38000,  -1.37000,  -0.37000,  -0.11000,  -1.41000,   1.38000,   1.40000,  -0.71000,   1.22000,  -0.11000,  -1.41000,   1.39000,   1.41000,   1.00000,   1.00000,  -0.11000,  -1.41000,   1.42000,   1.43000,   1.22000,  -0.71000,  -0.11000,  -1.41000,   1.45000,   1.44000,  -0.37000,  -1.37000,  -0.11000,  -1.41000,   1.48000,   1.46000,  -1.41000,  -0.00000,  -0.11000,  -1.41000,   1.51000,   1.47000,  -0.37000,   1.37000,  -0.11000,  -1.41000,   1.53000,   1.49000,   1.22000,   0.71000,  -0.11000,  -1.41000,   1.55000,   1.50000,   1.00000,  -1.00000,  -0.11000,  -1.41000,   1.57000,   1.50000,  -0.71000,  -1.22000,  -0.11000,  -1.41000,   1.58000,   1.51000,  -1.37000,   0.37000,  -0.11000,  -1.41000,   1.59000,   1.52000,  -0.00000,   1.41000,  -0.11000,  -1.41000,   1.60000,   1.53000,   1.37000,   0.37000,  -0.11000,  -1.41000,   1.60000,   1.52000,   0.71000,  -1.22000,  -0.11000,  -1.41000,   1.61000,   1.52000,  -1.00000,  -1.00000,  -0.11000,  -1.41000,   1.61000,   1.53000,  -1.22000,   0.71000,  -0.11000,  -1.41000,   1.61000,   1.53000,   0.37000,   1.37000,  -0.11000,  -1.41000,   1.62000,   1.52000,   1.41000,   0.00000,  -0.11000,  -1.41000,   1.61000,   1.51000,   0.37000,  -1.37000,  -0.11000,  -1.41000,   1.61000,   1.51000,  -1.22000,  -0.71000,  -0.11000,  -1.41000,   1.59000,   1.51000,  -1.00000,   1.00000,  -0.11000,  -1.41000,   1.59000,   1.49000,   0.71000,   1.22000,  -0.11000,  -1.41000,   1.58000,   1.48000,   1.37000,  -0.37000,  -0.11000,  -1.41000,   1.57000,   1.46000,   0.00000,  -1.41000,  -0.11000,  -1.41000,   1.57000,   1.44000,  -1.37000,  -0.37000,  -0.11000,  -1.41000,   1.56000,   1.43000,  -0.71000,   1.22000,  -0.11000,  -1.41000,   1.56000,   1.42000,   1.00000,   1.00000,  -0.11000,  -1.41000,   1.54000,   1.41000,   1.22000,  -0.71000,  -0.11000,  -1.41000,   1.54000,   1.38000,  -0.37000,  -1.37000,  -0.11000,  -1.41000,   1.53000,   1.36000,  -1.41000,  -0.00000,  -0.11000,  -1.41000,   1.50000,   1.34000,  -0.37000,   1.37000,  -0.11000,  -1.41000,   1.47000,   1.32000,   1.22000,   0.71000,  -0.11000,  -1.41000,   1.45000,   1.30000,   1.00000,  -1.00000,  -0.11000,  -1.41000,   1.43000,   1.28000,  -0.71000,  -1.22000,  -0.11000,  -1.41000,   1.40000,   1.24000,  -1.37000,   0.37000,  -0.11000,  -1.41000,   1.37000,   1.21000,  -0.00000,   1.41000,  -0.11000,  -1.41000,   1.35000,   1.19000,   1.37000,   0.37000,  -0.11000,  -1.41000,   1.32000,   1.16000,   0.71000,  -1.22000,  -0.11000,  -1.41000,   1.29000,   1.12000,  -1.00000,  -1.00000,  -0.11000,  -1.41000,   1.27000,   1.09000,  -1.22000,   0.71000,  -0.11000,  -1.41000,   1.23000,   1.06000,   0.37000,   1.37000,  -0.11000,  -1.41000,   1.19000,   1.02000,   1.41000,   0.00000,  -0.11000,  -1.41000,   1.17000,   1.00000,   0.37000,  -1.37000,  -0.11000,  -1.41000,   1.12000,   0.95000,  -1.22000,  -0.71000,  -0.11000,  -1.41000,   1.07000,   0.90000,  -1.00000,   1.00000,  -0.11000,  -1.41000,   1.04000,   0.87000,   0.71000,   1.22000,  -0.11000,  -1.41000,   1.04000,   0.84000,   1.37000,  -0.37000,  -0.11000,  -1.41000,   1.03000,   0.80000,   0.00000,  -1.41000,  -0.11000,  -1.41000,   0.99000,   0.75000,  -1.37000,  -0.37000,  -0.11000,  -1.41000,   0.95000,   0.71000,  -0.71000,   1.22000,  -0.11000,  -1.41000,   0.91000,   0.66000,   1.00000,   1.00000,  -0.11000,  -1.41000,   0.88000,   0.62000,   1.22000,  -0.71000,  -0.11000,  -1.41000,   0.84000,   0.57000,  -0.37000,  -1.37000,  -0.11000,  -1.41000,   0.78000,   0.52000,  -1.41000,  -0.00000,  -0.11000,  -1.41000,   0.74000,   0.47000,  -0.37000,   1.37000,  -0.11000,  -1.41000,   0.69000,   0.43000,   1.22000,   0.71000,  -0.11000,  -1.41000,   0.64000,   0.37000,   1.00000,  -1.00000,  -0.11000,  -1.41000,   0.59000,   0.32000,  -0.71000,  -1.22000,  -0.11000,  -1.41000,   0.55000,   0.26000,  -1.37000,   0.37000,  -0.11000,  -1.41000,   0.49000,   0.21000,  -0.00000,   1.41000,  -0.11000,  -1.41000,   0.44000,   0.16000,   1.37000,   0.37000,  -0.11000,  -1.41000,   0.39000,   0.10000,   0.71000,  -1.22000,  -0.11000,  -1.41000,   0.34000,   0.05000,  -1.00000,  -1.00000,  -0.11000,  -1.41000,   0.28000,  -0.00000,  -1.22000,   0.71000,  -0.11000,  -1.41000,   0.23000,  -0.06000,   0.37000,   1.37000,  -0.11000,  -1.41000,   0.17000,  -0.11000,   1.41000,   0.00000,  -0.11000,  -1.41000,   0.11000,  -0.17000,   0.37000,  -1.37000,  -0.11000,  -1.41000,   0.05000,  -0.22000,  -1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.01000,  -0.27000,  -1.00000,   1.00000,  -0.11000,  -1.41000,  -0.07000,  -0.32000,   0.71000,   1.22000,  -0.11000,  -1.41000,  -0.12000,  -0.36000,   1.37000,  -0.37000,  -0.11000,  -1.41000,  -0.18000,  -0.41000,   0.00000,  -1.41000,  -0.11000,  -1.41000,  -0.24000,  -0.47000,  -1.37000,  -0.37000,  -0.11000,  -1.41000,  -0.30000,  -0.59000,  -0.71000,   1.22000,  -0.11000,  -1.41000,  -0.46000,  -0.64000,   1.00000,   1.00000,  -0.11000,  -1.41000,  -0.55000,  -0.70000,   1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.62000,  -0.76000,  -0.37000,  -1.37000,  -0.11000,  -1.41000,  -0.60000,  -0.76000,  -1.41000,  -0.00000,  -0.11000,  -1.41000,  -0.66000,  -0.76000,  -0.37000,   1.37000,  -0.11000,  -1.41000,  -0.68000,  -0.76000,   1.22000,   0.71000,  -0.11000,  -1.41000,  -0.69000,  -0.76000,   1.00000,  -1.00000,  -0.11000,  -1.41000,  -0.70000,  -0.76000,  -0.71000,  -1.22000,  -0.11000,  -1.41000,  -0.70000,  -0.76000,  -1.37000,   0.37000,  -0.11000,  -1.41000,  -0.71000,  -0.76000,  -0.00000,   1.41000,  -0.11000,  -1.41000,  -0.72000,  -0.76000,   1.37000,   0.37000,  -0.11000,  -1.41000,  -0.72000,  -0.76000,   0.71000,  -1.22000,  -0.11000,  -1.41000,  -0.72000,  -0.76000,  -1.00000,  -1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.22000,   0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.37000,   1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.41000,   0.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.37000,  -1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.00000,   1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.71000,   1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.37000,  -0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.00000,  -1.41000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.37000,  -0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.71000,   1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.00000,   1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.37000,  -1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.41000,  -0.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.37000,   1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.22000,   0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.00000,  -1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.71000,  -1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.37000,   0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.00000,   1.41000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.37000,   0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.71000,  -1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.00000,  -1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.22000,   0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.37000,   1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.41000,   0.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.37000,  -1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.00000,   1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.71000,   1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.37000,  -0.37000,  -0.11000,  -1.41000,  -0.72000,  -0.76000,   0.00000,  -1.41000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.37000,  -0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.71000,   1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.00000,   1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.37000,  -1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.41000,  -0.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.37000,   1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.22000,   0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.00000,  -1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.71000,  -1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.37000,   0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.00000,   1.41000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.37000,   0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.71000,  -1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.00000,  -1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.22000,   0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.37000,   1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.41000,   0.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.37000,  -1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.00000,   1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.71000,   1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.37000,  -0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   0.00000,  -1.41000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.37000,  -0.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.71000,   1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.00000,   1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.22000,  -0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.37000,  -1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.41000,  -0.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.37000,   1.37000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.22000,   0.71000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,   1.00000,  -1.00000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -0.71000,  -1.22000,  -0.11000,  -1.41000,  -0.73000,  -0.76000,  -1.37000,   0.37000,  -0.11000,  -1.41000};
 8000efa:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000efe:	3b1c      	subs	r3, #28
 8000f00:	4aac      	ldr	r2, [pc, #688]	; (80011b4 <main+0x2dc>)
 8000f02:	4618      	mov	r0, r3
 8000f04:	4611      	mov	r1, r2
 8000f06:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f011 f884 	bl	8012018 <memcpy>
	  // Buffers used to store input and output tensors
	  AI_ALIGNED(4) ai_i8 in_data[AI_DNN_IN_1_SIZE_BYTES];
	  AI_ALIGNED(4) ai_i8 out_data[AI_DNN_OUT_1_SIZE_BYTES];

	  // Pointer to our model
	  ai_handle dnn = AI_HANDLE_NULL;
 8000f10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f14:	3b04      	subs	r3, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]

	  // Initialize wrapper structs that hold pointers to data and info about the
	  // data (tensor height, width, channels)
	  ai_buffer ai_input[AI_DNN_IN_NUM] = AI_DNN_IN;
 8000f1a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f1e:	3b1c      	subs	r3, #28
 8000f20:	4aa5      	ldr	r2, [pc, #660]	; (80011b8 <main+0x2e0>)
 8000f22:	461c      	mov	r4, r3
 8000f24:	4615      	mov	r5, r2
 8000f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f2e:	e884 0003 	stmia.w	r4, {r0, r1}
	  ai_buffer ai_output[AI_DNN_OUT_NUM] = AI_DNN_OUT;
 8000f32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f36:	3b14      	subs	r3, #20
 8000f38:	4aa0      	ldr	r2, [pc, #640]	; (80011bc <main+0x2e4>)
 8000f3a:	461c      	mov	r4, r3
 8000f3c:	4615      	mov	r5, r2
 8000f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f46:	e884 0003 	stmia.w	r4, {r0, r1}

	  // Set working memory and get weights/biases from model
	  ai_network_params ai_params = {
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	4a9b      	ldr	r2, [pc, #620]	; (80011c0 <main+0x2e8>)
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	3b04      	subs	r3, #4
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	809a      	strh	r2, [r3, #4]
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	3b04      	subs	r3, #4
 8000f64:	2201      	movs	r2, #1
 8000f66:	80da      	strh	r2, [r3, #6]
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	3b04      	subs	r3, #4
 8000f6e:	2201      	movs	r2, #1
 8000f70:	811a      	strh	r2, [r3, #8]
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	3b04      	subs	r3, #4
 8000f78:	f243 5284 	movw	r2, #13700	; 0x3584
 8000f7c:	60da      	str	r2, [r3, #12]
	    AI_DNN_DATA_WEIGHTS(ai_dnn_data_weights_get()),
 8000f7e:	f00f fc97 	bl	80108b0 <ai_dnn_data_weights_get>
 8000f82:	4602      	mov	r2, r0
	  ai_network_params ai_params = {
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	3b04      	subs	r3, #4
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	3b04      	subs	r3, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	4a89      	ldr	r2, [pc, #548]	; (80011c4 <main+0x2ec>)
 8000f9e:	619a      	str	r2, [r3, #24]
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	3b04      	subs	r3, #4
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	839a      	strh	r2, [r3, #28]
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	83da      	strh	r2, [r3, #30]
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	3b04      	subs	r3, #4
 8000fba:	2201      	movs	r2, #1
 8000fbc:	841a      	strh	r2, [r3, #32]
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8000fd4:	3a1c      	subs	r2, #28
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	3b04      	subs	r3, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c
	    AI_DNN_DATA_ACTIVATIONS(activations)
	  };

	  // Set pointers wrapper structs to our data buffers
	  ai_input[0].n_batches = 1;
 8000fe2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000fe6:	3b1c      	subs	r3, #28
 8000fe8:	2201      	movs	r2, #1
 8000fea:	809a      	strh	r2, [r3, #4]
	  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000fec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000ff0:	3b1c      	subs	r3, #28
 8000ff2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000ff6:	3a1c      	subs	r2, #28
 8000ff8:	611a      	str	r2, [r3, #16]
	  ai_output[0].n_batches = 1;
 8000ffa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ffe:	3b14      	subs	r3, #20
 8001000:	2201      	movs	r2, #1
 8001002:	809a      	strh	r2, [r3, #4]
	  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001004:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001008:	3b14      	subs	r3, #20
 800100a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800100e:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001010:	f002 f97d 	bl	800330e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001014:	f000 f9a4 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001018:	f001 f8ae 	bl	8002178 <MX_GPIO_Init>
  MX_DMA_Init();
 800101c:	f001 f882 	bl	8002124 <MX_DMA_Init>
  MX_ADC1_Init();
 8001020:	f000 fa5c 	bl	80014dc <MX_ADC1_Init>
  MX_DAC1_Init();
 8001024:	f000 fae0 	bl	80015e8 <MX_DAC1_Init>
  MX_DFSDM1_Init();
 8001028:	f000 fb12 	bl	8001650 <MX_DFSDM1_Init>
  MX_I2C2_SMBUS_Init();
 800102c:	f000 fba8 	bl	8001780 <MX_I2C2_SMBUS_Init>
  MX_I2C3_Init();
 8001030:	f000 fbe8 	bl	8001804 <MX_I2C3_Init>
  MX_I2C4_Init();
 8001034:	f000 fc26 	bl	8001884 <MX_I2C4_Init>
  MX_LTDC_Init();
 8001038:	f000 fc64 	bl	8001904 <MX_LTDC_Init>
  MX_RTC_Init();
 800103c:	f000 fd28 	bl	8001a90 <MX_RTC_Init>
  MX_SAI1_Init();
 8001040:	f000 fd74 	bl	8001b2c <MX_SAI1_Init>
  MX_SPI1_Init();
 8001044:	f000 fe34 	bl	8001cb0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001048:	f000 fe70 	bl	8001d2c <MX_SPI2_Init>
  MX_SPI3_Init();
 800104c:	f000 feac 	bl	8001da8 <MX_SPI3_Init>
  MX_TIM2_Init();
 8001050:	f000 fee8 	bl	8001e24 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001054:	f000 ff40 	bl	8001ed8 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001058:	f000 ffc8 	bl	8001fec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800105c:	f001 f814 	bl	8002088 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8001060:	f000 faa0 	bl	80015a4 <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 8001064:	f00e fbb8 	bl	800f7d8 <MX_USB_DEVICE_Init>
  MX_TIM16_Init();
 8001068:	f000 ff9a 	bl	8001fa0 <MX_TIM16_Init>
  MX_X_CUBE_AI_Init();
 800106c:	f00f fa6e 	bl	801054c <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  // Start timer/counter
    HAL_TIM_Base_Start(&htim16);
 8001070:	4855      	ldr	r0, [pc, #340]	; (80011c8 <main+0x2f0>)
 8001072:	f00a f8a3 	bl	800b1bc <HAL_TIM_Base_Start>

    // Greetings!
    buf_len = sprintf(buf, "STM32 X-Cube-AI test\r\n");
 8001076:	f507 53ec 	add.w	r3, r7, #7552	; 0x1d80
 800107a:	f103 0310 	add.w	r3, r3, #16
 800107e:	4a53      	ldr	r2, [pc, #332]	; (80011cc <main+0x2f4>)
 8001080:	461c      	mov	r4, r3
 8001082:	4615      	mov	r5, r2
 8001084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001088:	e895 0003 	ldmia.w	r5, {r0, r1}
 800108c:	6020      	str	r0, [r4, #0]
 800108e:	3404      	adds	r4, #4
 8001090:	8021      	strh	r1, [r4, #0]
 8001092:	3402      	adds	r4, #2
 8001094:	0c0b      	lsrs	r3, r1, #16
 8001096:	7023      	strb	r3, [r4, #0]
 8001098:	2316      	movs	r3, #22
 800109a:	f507 52f0 	add.w	r2, r7, #7680	; 0x1e00
 800109e:	f102 021c 	add.w	r2, r2, #28
 80010a2:	6013      	str	r3, [r2, #0]
    CDC_Transmit_FS((uint8_t *)buf, buf_len);
 80010a4:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 80010a8:	f103 031c 	add.w	r3, r3, #28
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	f507 53ec 	add.w	r3, r7, #7552	; 0x1d80
 80010b4:	f103 0310 	add.w	r3, r3, #16
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f00e fc4a 	bl	800f954 <CDC_Transmit_FS>
    // HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);

    // Create instance of neural network
    ai_err = ai_dnn_create(&dnn, AI_DNN_DATA_CONFIG);
 80010c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010c4:	3b04      	subs	r3, #4
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00f fb7f 	bl	80107cc <ai_dnn_create>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f507 52ec 	add.w	r2, r7, #7552	; 0x1d80
 80010d4:	f102 020c 	add.w	r2, r2, #12
 80010d8:	6013      	str	r3, [r2, #0]
    if (ai_err.type != AI_ERROR_NONE)
 80010da:	f507 53ec 	add.w	r3, r7, #7552	; 0x1d80
 80010de:	f103 030c 	add.w	r3, r3, #12
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d024      	beq.n	8001132 <main+0x25a>
    {
      buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 80010e8:	f507 53ec 	add.w	r3, r7, #7552	; 0x1d80
 80010ec:	f103 0310 	add.w	r3, r3, #16
 80010f0:	4a37      	ldr	r2, [pc, #220]	; (80011d0 <main+0x2f8>)
 80010f2:	461c      	mov	r4, r3
 80010f4:	4615      	mov	r5, r2
 80010f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001102:	6020      	str	r0, [r4, #0]
 8001104:	3404      	adds	r4, #4
 8001106:	8021      	strh	r1, [r4, #0]
 8001108:	2325      	movs	r3, #37	; 0x25
 800110a:	f507 52f0 	add.w	r2, r7, #7680	; 0x1e00
 800110e:	f102 021c 	add.w	r2, r2, #28
 8001112:	6013      	str	r3, [r2, #0]
      CDC_Transmit_FS((uint8_t *)buf, buf_len);
 8001114:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8001118:	f103 031c 	add.w	r3, r3, #28
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	b29a      	uxth	r2, r3
 8001120:	f507 53ec 	add.w	r3, r7, #7552	; 0x1d80
 8001124:	f103 0310 	add.w	r3, r3, #16
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f00e fc12 	bl	800f954 <CDC_Transmit_FS>
      // HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
      while(1);
 8001130:	e7fe      	b.n	8001130 <main+0x258>
    }

    // Initialize neural network
    if (!ai_dnn_init(dnn, &ai_params))
 8001132:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001136:	3b04      	subs	r3, #4
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	3b04      	subs	r3, #4
 8001140:	4619      	mov	r1, r3
 8001142:	4610      	mov	r0, r2
 8001144:	f00f fb64 	bl	8010810 <ai_dnn_init>
 8001148:	4603      	mov	r3, r0
 800114a:	f083 0301 	eor.w	r3, r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d021      	beq.n	8001198 <main+0x2c0>
    {
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001154:	f507 53ec 	add.w	r3, r7, #7552	; 0x1d80
 8001158:	f103 0310 	add.w	r3, r3, #16
 800115c:	4a1d      	ldr	r2, [pc, #116]	; (80011d4 <main+0x2fc>)
 800115e:	461c      	mov	r4, r3
 8001160:	4615      	mov	r5, r2
 8001162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116a:	682b      	ldr	r3, [r5, #0]
 800116c:	7023      	strb	r3, [r4, #0]
 800116e:	2320      	movs	r3, #32
 8001170:	f507 52f0 	add.w	r2, r7, #7680	; 0x1e00
 8001174:	f102 021c 	add.w	r2, r2, #28
 8001178:	6013      	str	r3, [r2, #0]
      CDC_Transmit_FS((uint8_t *)buf, buf_len);
 800117a:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 800117e:	f103 031c 	add.w	r3, r3, #28
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	b29a      	uxth	r2, r3
 8001186:	f507 53ec 	add.w	r3, r7, #7552	; 0x1d80
 800118a:	f103 0310 	add.w	r3, r3, #16
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f00e fbdf 	bl	800f954 <CDC_Transmit_FS>
      // HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
      while(1);
 8001196:	e7fe      	b.n	8001196 <main+0x2be>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    // Get current timestamp
	    timestamp = htim16.Instance->CNT;
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <main+0x2f0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	f507 52f0 	add.w	r2, r7, #7680	; 0x1e00
 80011a2:	f102 0218 	add.w	r2, r2, #24
 80011a6:	6013      	str	r3, [r2, #0]
	    // Fill input buffer (use test value)
	    for (uint32_t i = 0; i < AI_DNN_IN_1_SIZE; i++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	e046      	b.n	8001240 <main+0x368>
 80011b2:	bf00      	nop
 80011b4:	08014b74 	.word	0x08014b74
 80011b8:	08016674 	.word	0x08016674
 80011bc:	0801668c 	.word	0x0801668c
 80011c0:	40040440 	.word	0x40040440
 80011c4:	00040440 	.word	0x00040440
 80011c8:	20001340 	.word	0x20001340
 80011cc:	08014ac0 	.word	0x08014ac0
 80011d0:	08014ad8 	.word	0x08014ad8
 80011d4:	08014b00 	.word	0x08014b00
	    {
	      ((ai_float *)in_data)[i] = (ai_float)x_points[x_counter];
 80011d8:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	009a      	lsls	r2, r3, #2
 80011e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011e4:	3b1c      	subs	r3, #28
 80011e6:	441a      	add	r2, r3
 80011e8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80011ec:	3b1c      	subs	r3, #28
 80011ee:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80011f2:	f101 0104 	add.w	r1, r1, #4
 80011f6:	6809      	ldr	r1, [r1, #0]
 80011f8:	0089      	lsls	r1, r1, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6013      	str	r3, [r2, #0]
	      if (++x_counter >= 1728) {
 8001200:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8001204:	f103 0304 	add.w	r3, r3, #4
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 8001210:	f102 0204 	add.w	r2, r2, #4
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800121a:	f103 0304 	add.w	r3, r3, #4
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f5b3 6fd8 	cmp.w	r3, #1728	; 0x6c0
 8001224:	db05      	blt.n	8001232 <main+0x35a>
	    	  x_counter = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 800122c:	f102 0204 	add.w	r2, r2, #4
 8001230:	6013      	str	r3, [r2, #0]
	    for (uint32_t i = 0; i < AI_DNN_IN_1_SIZE; i++)
 8001232:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b47      	cmp	r3, #71	; 0x47
 8001248:	d9c6      	bls.n	80011d8 <main+0x300>
	      }
	    }

	    // Perform inference
	    nbatch = ai_dnn_run(dnn, &ai_input[0], &ai_output[0]);
 800124a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800124e:	3b04      	subs	r3, #4
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001256:	3a14      	subs	r2, #20
 8001258:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800125c:	3b1c      	subs	r3, #28
 800125e:	4619      	mov	r1, r3
 8001260:	f00f fb15 	bl	801088e <ai_dnn_run>
 8001264:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8001268:	f103 0314 	add.w	r3, r3, #20
 800126c:	6018      	str	r0, [r3, #0]
	    // Print output of neural network along with inference time (microseconds)
	    if (nbatch != 1) {
 800126e:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8001272:	f103 0314 	add.w	r3, r3, #20
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d020      	beq.n	80012be <main+0x3e6>
	      buf_len = sprintf(buf, "Error: could not run inference\r\n");
 800127c:	f507 53ec 	add.w	r3, r7, #7552	; 0x1d80
 8001280:	f103 0310 	add.w	r3, r3, #16
 8001284:	4a32      	ldr	r2, [pc, #200]	; (8001350 <main+0x478>)
 8001286:	461c      	mov	r4, r3
 8001288:	4615      	mov	r5, r2
 800128a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001292:	682b      	ldr	r3, [r5, #0]
 8001294:	7023      	strb	r3, [r4, #0]
 8001296:	2320      	movs	r3, #32
 8001298:	f507 52f0 	add.w	r2, r7, #7680	; 0x1e00
 800129c:	f102 021c 	add.w	r2, r2, #28
 80012a0:	6013      	str	r3, [r2, #0]
	      // HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
	      CDC_Transmit_FS((uint8_t *)buf, buf_len);
 80012a2:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 80012a6:	f103 031c 	add.w	r3, r3, #28
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	f507 53ec 	add.w	r3, r7, #7552	; 0x1d80
 80012b2:	f103 0310 	add.w	r3, r3, #16
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f00e fb4b 	bl	800f954 <CDC_Transmit_FS>
	    }

	    // Read output (predicted y) of neural network
	    y_val = ((float *)out_data)[0];
 80012be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f507 52f0 	add.w	r2, r7, #7680	; 0x1e00
 80012c8:	f102 0210 	add.w	r2, r2, #16
 80012cc:	6013      	str	r3, [r2, #0]

	    // Print output of neural network along with inference time (microseconds)
	    buf_len = sprintf(buf,
 80012ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80012d2:	f103 0304 	add.w	r3, r3, #4
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <main+0x47c>)
 80012da:	fb82 1203 	smull	r1, r2, r2, r3
 80012de:	1112      	asrs	r2, r2, #4
 80012e0:	17db      	asrs	r3, r3, #31
 80012e2:	1ad5      	subs	r5, r2, r3
 80012e4:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 80012e8:	f103 0310 	add.w	r3, r3, #16
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	f7ff f943 	bl	8000578 <__aeabi_f2d>
 80012f2:	4603      	mov	r3, r0
 80012f4:	460c      	mov	r4, r1
	                      "prediction (h = %d) = %f | Duration: %lu\r\n",
	                      x_counter / (12 * 6), y_val,
	                      htim16.Instance->CNT - timestamp);
 80012f6:	4a18      	ldr	r2, [pc, #96]	; (8001358 <main+0x480>)
 80012f8:	6812      	ldr	r2, [r2, #0]
 80012fa:	6a51      	ldr	r1, [r2, #36]	; 0x24
	    buf_len = sprintf(buf,
 80012fc:	f507 52f0 	add.w	r2, r7, #7680	; 0x1e00
 8001300:	f102 0218 	add.w	r2, r2, #24
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	1a8a      	subs	r2, r1, r2
 8001308:	f507 50ec 	add.w	r0, r7, #7552	; 0x1d80
 800130c:	f100 0010 	add.w	r0, r0, #16
 8001310:	9202      	str	r2, [sp, #8]
 8001312:	e9cd 3400 	strd	r3, r4, [sp]
 8001316:	462a      	mov	r2, r5
 8001318:	4910      	ldr	r1, [pc, #64]	; (800135c <main+0x484>)
 800131a:	f011 fc21 	bl	8012b60 <siprintf>
 800131e:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8001322:	f103 031c 	add.w	r3, r3, #28
 8001326:	6018      	str	r0, [r3, #0]
	    // HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
	    CDC_Transmit_FS((uint8_t *)buf, buf_len);
 8001328:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 800132c:	f103 031c 	add.w	r3, r3, #28
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	b29a      	uxth	r2, r3
 8001334:	f507 53ec 	add.w	r3, r7, #7552	; 0x1d80
 8001338:	f103 0310 	add.w	r3, r3, #16
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f00e fb08 	bl	800f954 <CDC_Transmit_FS>
	    // Wait before doing it again
	    HAL_Delay(500);
 8001344:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001348:	f002 f856 	bl	80033f8 <HAL_Delay>
	    timestamp = htim16.Instance->CNT;
 800134c:	e724      	b.n	8001198 <main+0x2c0>
 800134e:	bf00      	nop
 8001350:	08014b24 	.word	0x08014b24
 8001354:	38e38e39 	.word	0x38e38e39
 8001358:	20001340 	.word	0x20001340
 800135c:	08014b48 	.word	0x08014b48

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0be      	sub	sp, #248	; 0xf8
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800136a:	2244      	movs	r2, #68	; 0x44
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f010 fe5d 	bl	801202e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	229c      	movs	r2, #156	; 0x9c
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f010 fe4f 	bl	801202e <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001390:	2000      	movs	r0, #0
 8001392:	f005 fee9 	bl	8007168 <HAL_PWREx_ControlVoltageScaling>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800139c:	f001 f8d8 	bl	8002550 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013a0:	f005 feb2 	bl	8007108 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013a4:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <SystemClock_Config+0x170>)
 80013a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013aa:	4a49      	ldr	r2, [pc, #292]	; (80014d0 <SystemClock_Config+0x170>)
 80013ac:	f023 0318 	bic.w	r3, r3, #24
 80013b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80013b4:	2325      	movs	r3, #37	; 0x25
 80013b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ce:	2302      	movs	r3, #2
 80013d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d4:	2303      	movs	r3, #3
 80013d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 2;
 80013da:	2302      	movs	r3, #2
 80013dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 30;
 80013e0:	231e      	movs	r3, #30
 80013e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013fc:	4618      	mov	r0, r3
 80013fe:	f005 ff77 	bl	80072f0 <HAL_RCC_OscConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001408:	f001 f8a2 	bl	8002550 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140c:	230f      	movs	r3, #15
 800140e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001412:	2303      	movs	r3, #3
 8001414:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800142a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800142e:	2105      	movs	r1, #5
 8001430:	4618      	mov	r0, r3
 8001432:	f006 fb83 	bl	8007b3c <HAL_RCC_ClockConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800143c:	f001 f888 	bl	8002550 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8001440:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <SystemClock_Config+0x174>)
 8001442:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_LTDC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001444:	2300      	movs	r3, #0
 8001446:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001448:	2300      	movs	r3, #0
 800144a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800144c:	2300      	movs	r3, #0
 800144e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001450:	2300      	movs	r3, #0
 8001452:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001454:	2300      	movs	r3, #0
 8001456:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001458:	2300      	movs	r3, #0
 800145a:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800145c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800146a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800146e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001472:	2300      	movs	r3, #0
 8001474:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV2;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 800147c:	2303      	movs	r3, #3
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.PLLSAI2.PLLSAI2M = 2;
 8001480:	2302      	movs	r3, #2
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 8001484:	2308      	movs	r3, #8
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 8001488:	2302      	movs	r3, #2
 800148a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 800148c:	2302      	movs	r3, #2
 800148e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8001490:	2302      	movs	r3, #2
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 8001494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001498:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800149a:	2303      	movs	r3, #3
 800149c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 800149e:	2305      	movs	r3, #5
 80014a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 80014a2:	2360      	movs	r3, #96	; 0x60
 80014a4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 80014a6:	2319      	movs	r3, #25
 80014a8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80014aa:	2304      	movs	r3, #4
 80014ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80014ae:	2304      	movs	r3, #4
 80014b0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <SystemClock_Config+0x178>)
 80014b4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4618      	mov	r0, r3
 80014ba:	f006 fdeb 	bl	8008094 <HAL_RCCEx_PeriphCLKConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0x168>
  {
    Error_Handler();
 80014c4:	f001 f844 	bl	8002550 <Error_Handler>
  }
}
 80014c8:	bf00      	nop
 80014ca:	37f8      	adds	r7, #248	; 0xf8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40021000 	.word	0x40021000
 80014d4:	00536986 	.word	0x00536986
 80014d8:	01010000 	.word	0x01010000

080014dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014e2:	463b      	mov	r3, r7
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <MX_ADC1_Init+0xbc>)
 80014f4:	4a29      	ldr	r2, [pc, #164]	; (800159c <MX_ADC1_Init+0xc0>)
 80014f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <MX_ADC1_Init+0xbc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <MX_ADC1_Init+0xbc>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <MX_ADC1_Init+0xbc>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800150a:	4b23      	ldr	r3, [pc, #140]	; (8001598 <MX_ADC1_Init+0xbc>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001510:	4b21      	ldr	r3, [pc, #132]	; (8001598 <MX_ADC1_Init+0xbc>)
 8001512:	2204      	movs	r2, #4
 8001514:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <MX_ADC1_Init+0xbc>)
 8001518:	2200      	movs	r2, #0
 800151a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <MX_ADC1_Init+0xbc>)
 800151e:	2200      	movs	r2, #0
 8001520:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001522:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <MX_ADC1_Init+0xbc>)
 8001524:	2201      	movs	r2, #1
 8001526:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <MX_ADC1_Init+0xbc>)
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <MX_ADC1_Init+0xbc>)
 8001532:	2200      	movs	r2, #0
 8001534:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <MX_ADC1_Init+0xbc>)
 8001538:	2200      	movs	r2, #0
 800153a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800153c:	4b16      	ldr	r3, [pc, #88]	; (8001598 <MX_ADC1_Init+0xbc>)
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_ADC1_Init+0xbc>)
 8001546:	2200      	movs	r2, #0
 8001548:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <MX_ADC1_Init+0xbc>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001552:	4811      	ldr	r0, [pc, #68]	; (8001598 <MX_ADC1_Init+0xbc>)
 8001554:	f002 f912 	bl	800377c <HAL_ADC_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800155e:	f000 fff7 	bl	8002550 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_ADC1_Init+0xc4>)
 8001564:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001566:	2306      	movs	r3, #6
 8001568:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800156e:	237f      	movs	r3, #127	; 0x7f
 8001570:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001572:	2304      	movs	r3, #4
 8001574:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800157a:	463b      	mov	r3, r7
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_ADC1_Init+0xbc>)
 8001580:	f002 fa46 	bl	8003a10 <HAL_ADC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800158a:	f000 ffe1 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000fc4 	.word	0x20000fc4
 800159c:	50040000 	.word	0x50040000
 80015a0:	80000001 	.word	0x80000001

080015a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80015a8:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <MX_CRC_Init+0x3c>)
 80015aa:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <MX_CRC_Init+0x40>)
 80015ac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_CRC_Init+0x3c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <MX_CRC_Init+0x3c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_CRC_Init+0x3c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <MX_CRC_Init+0x3c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_CRC_Init+0x3c>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80015cc:	4804      	ldr	r0, [pc, #16]	; (80015e0 <MX_CRC_Init+0x3c>)
 80015ce:	f002 ff2b 	bl	8004428 <HAL_CRC_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80015d8:	f000 ffba 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000d60 	.word	0x20000d60
 80015e4:	40023000 	.word	0x40023000

080015e8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ee:	463b      	mov	r3, r7
 80015f0:	2228      	movs	r2, #40	; 0x28
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f010 fd1a 	bl	801202e <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <MX_DAC1_Init+0x60>)
 80015fc:	4a13      	ldr	r2, [pc, #76]	; (800164c <MX_DAC1_Init+0x64>)
 80015fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001600:	4811      	ldr	r0, [pc, #68]	; (8001648 <MX_DAC1_Init+0x60>)
 8001602:	f002 fffb 	bl	80045fc <HAL_DAC_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800160c:	f000 ffa0 	bl	8002550 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	4806      	ldr	r0, [pc, #24]	; (8001648 <MX_DAC1_Init+0x60>)
 8001630:	f003 f806 	bl	8004640 <HAL_DAC_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800163a:	f000 ff89 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000cc0 	.word	0x20000cc0
 800164c:	40007400 	.word	0x40007400

08001650 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8001654:	4b43      	ldr	r3, [pc, #268]	; (8001764 <MX_DFSDM1_Init+0x114>)
 8001656:	4a44      	ldr	r2, [pc, #272]	; (8001768 <MX_DFSDM1_Init+0x118>)
 8001658:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800165a:	4b42      	ldr	r3, [pc, #264]	; (8001764 <MX_DFSDM1_Init+0x114>)
 800165c:	2200      	movs	r2, #0
 800165e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 8001660:	4b40      	ldr	r3, [pc, #256]	; (8001764 <MX_DFSDM1_Init+0x114>)
 8001662:	2200      	movs	r2, #0
 8001664:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 8001666:	4b3f      	ldr	r3, [pc, #252]	; (8001764 <MX_DFSDM1_Init+0x114>)
 8001668:	2200      	movs	r2, #0
 800166a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 800166c:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <MX_DFSDM1_Init+0x114>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 1;
 8001672:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <MX_DFSDM1_Init+0x114>)
 8001674:	2201      	movs	r2, #1
 8001676:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8001678:	4b3a      	ldr	r3, [pc, #232]	; (8001764 <MX_DFSDM1_Init+0x114>)
 800167a:	2201      	movs	r2, #1
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800167e:	4839      	ldr	r0, [pc, #228]	; (8001764 <MX_DFSDM1_Init+0x114>)
 8001680:	f003 f9f2 	bl	8004a68 <HAL_DFSDM_FilterInit>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 800168a:	f000 ff61 	bl	8002550 <Error_Handler>
  }
  hdfsdm1_channel5.Instance = DFSDM1_Channel5;
 800168e:	4b37      	ldr	r3, [pc, #220]	; (800176c <MX_DFSDM1_Init+0x11c>)
 8001690:	4a37      	ldr	r2, [pc, #220]	; (8001770 <MX_DFSDM1_Init+0x120>)
 8001692:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel5.Init.OutputClock.Activation = ENABLE;
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <MX_DFSDM1_Init+0x11c>)
 8001696:	2201      	movs	r2, #1
 8001698:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel5.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800169a:	4b34      	ldr	r3, [pc, #208]	; (800176c <MX_DFSDM1_Init+0x11c>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel5.Init.OutputClock.Divider = 2;
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <MX_DFSDM1_Init+0x11c>)
 80016a2:	2202      	movs	r2, #2
 80016a4:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel5.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <MX_DFSDM1_Init+0x11c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel5.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80016ac:	4b2f      	ldr	r3, [pc, #188]	; (800176c <MX_DFSDM1_Init+0x11c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel5.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80016b2:	4b2e      	ldr	r3, [pc, #184]	; (800176c <MX_DFSDM1_Init+0x11c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel5.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80016b8:	4b2c      	ldr	r3, [pc, #176]	; (800176c <MX_DFSDM1_Init+0x11c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel5.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80016be:	4b2b      	ldr	r3, [pc, #172]	; (800176c <MX_DFSDM1_Init+0x11c>)
 80016c0:	2204      	movs	r2, #4
 80016c2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel5.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <MX_DFSDM1_Init+0x11c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel5.Init.Awd.Oversampling = 1;
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <MX_DFSDM1_Init+0x11c>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel5.Init.Offset = 0;
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <MX_DFSDM1_Init+0x11c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel5.Init.RightBitShift = 0x00;
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <MX_DFSDM1_Init+0x11c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel5) != HAL_OK)
 80016dc:	4823      	ldr	r0, [pc, #140]	; (800176c <MX_DFSDM1_Init+0x11c>)
 80016de:	f003 f8ef 	bl	80048c0 <HAL_DFSDM_ChannelInit>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_DFSDM1_Init+0x9c>
  {
    Error_Handler();
 80016e8:	f000 ff32 	bl	8002550 <Error_Handler>
  }
  hdfsdm1_channel7.Instance = DFSDM1_Channel7;
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <MX_DFSDM1_Init+0x124>)
 80016ee:	4a22      	ldr	r2, [pc, #136]	; (8001778 <MX_DFSDM1_Init+0x128>)
 80016f0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel7.Init.OutputClock.Activation = ENABLE;
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <MX_DFSDM1_Init+0x124>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <MX_DFSDM1_Init+0x124>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel7.Init.OutputClock.Divider = 2;
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <MX_DFSDM1_Init+0x124>)
 8001700:	2202      	movs	r2, #2
 8001702:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <MX_DFSDM1_Init+0x124>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <MX_DFSDM1_Init+0x124>)
 800170c:	2200      	movs	r2, #0
 800170e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <MX_DFSDM1_Init+0x124>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <MX_DFSDM1_Init+0x124>)
 8001718:	2200      	movs	r2, #0
 800171a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <MX_DFSDM1_Init+0x124>)
 800171e:	2204      	movs	r2, #4
 8001720:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <MX_DFSDM1_Init+0x124>)
 8001724:	2200      	movs	r2, #0
 8001726:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel7.Init.Awd.Oversampling = 1;
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <MX_DFSDM1_Init+0x124>)
 800172a:	2201      	movs	r2, #1
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel7.Init.Offset = 0;
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_DFSDM1_Init+0x124>)
 8001730:	2200      	movs	r2, #0
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel7.Init.RightBitShift = 0x00;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_DFSDM1_Init+0x124>)
 8001736:	2200      	movs	r2, #0
 8001738:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel7) != HAL_OK)
 800173a:	480e      	ldr	r0, [pc, #56]	; (8001774 <MX_DFSDM1_Init+0x124>)
 800173c:	f003 f8c0 	bl	80048c0 <HAL_DFSDM_ChannelInit>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_DFSDM1_Init+0xfa>
  {
    Error_Handler();
 8001746:	f000 ff03 	bl	8002550 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_5, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800174a:	2201      	movs	r2, #1
 800174c:	490b      	ldr	r1, [pc, #44]	; (800177c <MX_DFSDM1_Init+0x12c>)
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_DFSDM1_Init+0x114>)
 8001750:	f003 fa64 	bl	8004c1c <HAL_DFSDM_FilterConfigRegChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_DFSDM1_Init+0x10e>
  {
    Error_Handler();
 800175a:	f000 fef9 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000d84 	.word	0x20000d84
 8001768:	40016100 	.word	0x40016100
 800176c:	2000102c 	.word	0x2000102c
 8001770:	400160a0 	.word	0x400160a0
 8001774:	200010e8 	.word	0x200010e8
 8001778:	400160e0 	.word	0x400160e0
 800177c:	00050020 	.word	0x00050020

08001780 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_I2C2_SMBUS_Init+0x78>)
 8001786:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <MX_I2C2_SMBUS_Init+0x7c>)
 8001788:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x307075B1;
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <MX_I2C2_SMBUS_Init+0x78>)
 800178c:	4a1c      	ldr	r2, [pc, #112]	; (8001800 <MX_I2C2_SMBUS_Init+0x80>)
 800178e:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_I2C2_SMBUS_Init+0x78>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <MX_I2C2_SMBUS_Init+0x78>)
 8001798:	2202      	movs	r2, #2
 800179a:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_I2C2_SMBUS_Init+0x78>)
 800179e:	2201      	movs	r2, #1
 80017a0:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_I2C2_SMBUS_Init+0x78>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_I2C2_SMBUS_Init+0x78>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_I2C2_SMBUS_Init+0x78>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <MX_I2C2_SMBUS_Init+0x78>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_I2C2_SMBUS_Init+0x78>)
 80017bc:	2200      	movs	r2, #0
 80017be:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <MX_I2C2_SMBUS_Init+0x78>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_I2C2_SMBUS_Init+0x78>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x000085B8;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <MX_I2C2_SMBUS_Init+0x78>)
 80017ce:	f248 52b8 	movw	r2, #34232	; 0x85b8
 80017d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 80017d4:	4808      	ldr	r0, [pc, #32]	; (80017f8 <MX_I2C2_SMBUS_Init+0x78>)
 80017d6:	f008 fcd1 	bl	800a17c <HAL_SMBUS_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 80017e0:	f000 feb6 	bl	8002550 <Error_Handler>
  }
  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 80017e4:	4804      	ldr	r0, [pc, #16]	; (80017f8 <MX_I2C2_SMBUS_Init+0x78>)
 80017e6:	f008 fd81 	bl	800a2ec <HAL_SMBUS_EnableAlert_IT>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 80017f0:	f000 feae 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200012f0 	.word	0x200012f0
 80017fc:	40005800 	.word	0x40005800
 8001800:	307075b1 	.word	0x307075b1

08001804 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <MX_I2C3_Init+0x74>)
 800180a:	4a1c      	ldr	r2, [pc, #112]	; (800187c <MX_I2C3_Init+0x78>)
 800180c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_I2C3_Init+0x74>)
 8001810:	4a1b      	ldr	r2, [pc, #108]	; (8001880 <MX_I2C3_Init+0x7c>)
 8001812:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <MX_I2C3_Init+0x74>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <MX_I2C3_Init+0x74>)
 800181c:	2201      	movs	r2, #1
 800181e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <MX_I2C3_Init+0x74>)
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_I2C3_Init+0x74>)
 8001828:	2200      	movs	r2, #0
 800182a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <MX_I2C3_Init+0x74>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_I2C3_Init+0x74>)
 8001834:	2200      	movs	r2, #0
 8001836:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_I2C3_Init+0x74>)
 800183a:	2200      	movs	r2, #0
 800183c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800183e:	480e      	ldr	r0, [pc, #56]	; (8001878 <MX_I2C3_Init+0x74>)
 8001840:	f003 ff72 	bl	8005728 <HAL_I2C_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800184a:	f000 fe81 	bl	8002550 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800184e:	2100      	movs	r1, #0
 8001850:	4809      	ldr	r0, [pc, #36]	; (8001878 <MX_I2C3_Init+0x74>)
 8001852:	f003 fff8 	bl	8005846 <HAL_I2CEx_ConfigAnalogFilter>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800185c:	f000 fe78 	bl	8002550 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001860:	2100      	movs	r1, #0
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_I2C3_Init+0x74>)
 8001864:	f004 f83a 	bl	80058dc <HAL_I2CEx_ConfigDigitalFilter>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800186e:	f000 fe6f 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000bc4 	.word	0x20000bc4
 800187c:	40005c00 	.word	0x40005c00
 8001880:	307075b1 	.word	0x307075b1

08001884 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <MX_I2C4_Init+0x74>)
 800188a:	4a1c      	ldr	r2, [pc, #112]	; (80018fc <MX_I2C4_Init+0x78>)
 800188c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 800188e:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <MX_I2C4_Init+0x74>)
 8001890:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <MX_I2C4_Init+0x7c>)
 8001892:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001894:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <MX_I2C4_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <MX_I2C4_Init+0x74>)
 800189c:	2201      	movs	r2, #1
 800189e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <MX_I2C4_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <MX_I2C4_Init+0x74>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <MX_I2C4_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_I2C4_Init+0x74>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <MX_I2C4_Init+0x74>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80018be:	480e      	ldr	r0, [pc, #56]	; (80018f8 <MX_I2C4_Init+0x74>)
 80018c0:	f003 ff32 	bl	8005728 <HAL_I2C_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80018ca:	f000 fe41 	bl	8002550 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018ce:	2100      	movs	r1, #0
 80018d0:	4809      	ldr	r0, [pc, #36]	; (80018f8 <MX_I2C4_Init+0x74>)
 80018d2:	f003 ffb8 	bl	8005846 <HAL_I2CEx_ConfigAnalogFilter>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80018dc:	f000 fe38 	bl	8002550 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80018e0:	2100      	movs	r1, #0
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_I2C4_Init+0x74>)
 80018e4:	f003 fffa 	bl	80058dc <HAL_I2CEx_ConfigDigitalFilter>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80018ee:	f000 fe2f 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000c10 	.word	0x20000c10
 80018fc:	40008400 	.word	0x40008400
 8001900:	307075b1 	.word	0x307075b1

08001904 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b09a      	sub	sp, #104	; 0x68
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800190a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800190e:	2234      	movs	r2, #52	; 0x34
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f010 fb8b 	bl	801202e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001918:	463b      	mov	r3, r7
 800191a:	2234      	movs	r2, #52	; 0x34
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f010 fb85 	bl	801202e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001924:	4b58      	ldr	r3, [pc, #352]	; (8001a88 <MX_LTDC_Init+0x184>)
 8001926:	4a59      	ldr	r2, [pc, #356]	; (8001a8c <MX_LTDC_Init+0x188>)
 8001928:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800192a:	4b57      	ldr	r3, [pc, #348]	; (8001a88 <MX_LTDC_Init+0x184>)
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001930:	4b55      	ldr	r3, [pc, #340]	; (8001a88 <MX_LTDC_Init+0x184>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001936:	4b54      	ldr	r3, [pc, #336]	; (8001a88 <MX_LTDC_Init+0x184>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800193c:	4b52      	ldr	r3, [pc, #328]	; (8001a88 <MX_LTDC_Init+0x184>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001942:	4b51      	ldr	r3, [pc, #324]	; (8001a88 <MX_LTDC_Init+0x184>)
 8001944:	2200      	movs	r2, #0
 8001946:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8001948:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <MX_LTDC_Init+0x184>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 800194e:	4b4e      	ldr	r3, [pc, #312]	; (8001a88 <MX_LTDC_Init+0x184>)
 8001950:	2201      	movs	r2, #1
 8001952:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8001954:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <MX_LTDC_Init+0x184>)
 8001956:	2201      	movs	r2, #1
 8001958:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 801;
 800195a:	4b4b      	ldr	r3, [pc, #300]	; (8001a88 <MX_LTDC_Init+0x184>)
 800195c:	f240 3221 	movw	r2, #801	; 0x321
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8001962:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <MX_LTDC_Init+0x184>)
 8001964:	f240 12e1 	movw	r2, #481	; 0x1e1
 8001968:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 802;
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <MX_LTDC_Init+0x184>)
 800196c:	f240 3222 	movw	r2, #802	; 0x322
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 8001972:	4b45      	ldr	r3, [pc, #276]	; (8001a88 <MX_LTDC_Init+0x184>)
 8001974:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8001978:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800197a:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <MX_LTDC_Init+0x184>)
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001982:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <MX_LTDC_Init+0x184>)
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800198a:	4b3f      	ldr	r3, [pc, #252]	; (8001a88 <MX_LTDC_Init+0x184>)
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001992:	483d      	ldr	r0, [pc, #244]	; (8001a88 <MX_LTDC_Init+0x184>)
 8001994:	f003 ffee 	bl	8005974 <HAL_LTDC_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800199e:	f000 fdd7 	bl	8002550 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80019b2:	2300      	movs	r3, #0
 80019b4:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80019be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80019c4:	2305      	movs	r3, #5
 80019c6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80019e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019ea:	2200      	movs	r2, #0
 80019ec:	4619      	mov	r1, r3
 80019ee:	4826      	ldr	r0, [pc, #152]	; (8001a88 <MX_LTDC_Init+0x184>)
 80019f0:	f004 f890 	bl	8005b14 <HAL_LTDC_ConfigLayer>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80019fa:	f000 fda9 	bl	8002550 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001a20:	2305      	movs	r3, #5
 8001a22:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001a42:	463b      	mov	r3, r7
 8001a44:	2201      	movs	r2, #1
 8001a46:	4619      	mov	r1, r3
 8001a48:	480f      	ldr	r0, [pc, #60]	; (8001a88 <MX_LTDC_Init+0x184>)
 8001a4a:	f004 f863 	bl	8005b14 <HAL_LTDC_ConfigLayer>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001a54:	f000 fd7c 	bl	8002550 <Error_Handler>
  }
  if (HAL_LTDC_SetPitch(&hltdc, 0, 0) != HAL_OK)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	480a      	ldr	r0, [pc, #40]	; (8001a88 <MX_LTDC_Init+0x184>)
 8001a5e:	f004 f897 	bl	8005b90 <HAL_LTDC_SetPitch>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_LTDC_Init+0x168>
  {
    Error_Handler();
 8001a68:	f000 fd72 	bl	8002550 <Error_Handler>
  }
  if (HAL_LTDC_SetPitch(&hltdc, 0, 1) != HAL_OK)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_LTDC_Init+0x184>)
 8001a72:	f004 f88d 	bl	8005b90 <HAL_LTDC_SetPitch>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_LTDC_Init+0x17c>
  {
    Error_Handler();
 8001a7c:	f000 fd68 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	3768      	adds	r7, #104	; 0x68
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000e88 	.word	0x20000e88
 8001a8c:	40016800 	.word	0x40016800

08001a90 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8001a96:	463b      	mov	r3, r7
 8001a98:	2228      	movs	r2, #40	; 0x28
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f010 fac6 	bl	801202e <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <MX_RTC_Init+0x94>)
 8001aa4:	4a20      	ldr	r2, [pc, #128]	; (8001b28 <MX_RTC_Init+0x98>)
 8001aa6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <MX_RTC_Init+0x94>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <MX_RTC_Init+0x94>)
 8001ab0:	227f      	movs	r2, #127	; 0x7f
 8001ab2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <MX_RTC_Init+0x94>)
 8001ab6:	22ff      	movs	r2, #255	; 0xff
 8001ab8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <MX_RTC_Init+0x94>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <MX_RTC_Init+0x94>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <MX_RTC_Init+0x94>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <MX_RTC_Init+0x94>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ad2:	4814      	ldr	r0, [pc, #80]	; (8001b24 <MX_RTC_Init+0x94>)
 8001ad4:	f007 ff6e 	bl	80099b4 <HAL_RTC_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ade:	f000 fd37 	bl	8002550 <Error_Handler>
  }
  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8001b06:	463b      	mov	r3, r7
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4806      	ldr	r0, [pc, #24]	; (8001b24 <MX_RTC_Init+0x94>)
 8001b0c:	f008 f864 	bl	8009bd8 <HAL_RTCEx_SetTamper>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8001b16:	f000 fd1b 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	3728      	adds	r7, #40	; 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200010c4 	.word	0x200010c4
 8001b28:	40002800 	.word	0x40002800

08001b2c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001b30:	4b5a      	ldr	r3, [pc, #360]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b32:	4a5b      	ldr	r2, [pc, #364]	; (8001ca0 <MX_SAI1_Init+0x174>)
 8001b34:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b36:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001b3c:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001b42:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b44:	2240      	movs	r2, #64	; 0x40
 8001b46:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b48:	4b54      	ldr	r3, [pc, #336]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001b4e:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b54:	4b51      	ldr	r3, [pc, #324]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b5a:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b60:	4b4e      	ldr	r3, [pc, #312]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001b66:	4b4d      	ldr	r3, [pc, #308]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b6c:	4b4b      	ldr	r3, [pc, #300]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001b72:	4b4a      	ldr	r3, [pc, #296]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b74:	4a4b      	ldr	r2, [pc, #300]	; (8001ca4 <MX_SAI1_Init+0x178>)
 8001b76:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b78:	4b48      	ldr	r3, [pc, #288]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b84:	4b45      	ldr	r3, [pc, #276]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b8a:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8001b90:	4b42      	ldr	r3, [pc, #264]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 8001b98:	4b40      	ldr	r3, [pc, #256]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001b9e:	4b3f      	ldr	r3, [pc, #252]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001ba8:	2208      	movs	r2, #8
 8001baa:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001bac:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001bb2:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001bb8:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001bbe:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001bc4:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001bca:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001bd0:	4b32      	ldr	r3, [pc, #200]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001bd6:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001bdc:	482f      	ldr	r0, [pc, #188]	; (8001c9c <MX_SAI1_Init+0x170>)
 8001bde:	f008 f8b7 	bl	8009d50 <HAL_SAI_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8001be8:	f000 fcb2 	bl	8002550 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001bec:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001bee:	4a2f      	ldr	r2, [pc, #188]	; (8001cac <MX_SAI1_Init+0x180>)
 8001bf0:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001bfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c00:	2240      	movs	r2, #64	; 0x40
 8001c02:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c04:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001c0a:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001c10:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c16:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c28:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c34:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c52:	2208      	movs	r2, #8
 8001c54:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001c86:	4808      	ldr	r0, [pc, #32]	; (8001ca8 <MX_SAI1_Init+0x17c>)
 8001c88:	f008 f862 	bl	8009d50 <HAL_SAI_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_SAI1_Init+0x16a>
  {
    Error_Handler();
 8001c92:	f000 fc5d 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200011d0 	.word	0x200011d0
 8001ca0:	40015404 	.word	0x40015404
 8001ca4:	0002ee00 	.word	0x0002ee00
 8001ca8:	20000f30 	.word	0x20000f30
 8001cac:	40015424 	.word	0x40015424

08001cb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <MX_SPI1_Init+0x74>)
 8001cb6:	4a1c      	ldr	r2, [pc, #112]	; (8001d28 <MX_SPI1_Init+0x78>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <MX_SPI1_Init+0x74>)
 8001cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <MX_SPI1_Init+0x74>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <MX_SPI1_Init+0x74>)
 8001cca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <MX_SPI1_Init+0x74>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <MX_SPI1_Init+0x74>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <MX_SPI1_Init+0x74>)
 8001cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <MX_SPI1_Init+0x74>)
 8001ce6:	2228      	movs	r2, #40	; 0x28
 8001ce8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <MX_SPI1_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <MX_SPI1_Init+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <MX_SPI1_Init+0x74>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <MX_SPI1_Init+0x74>)
 8001cfe:	2207      	movs	r2, #7
 8001d00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <MX_SPI1_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <MX_SPI1_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <MX_SPI1_Init+0x74>)
 8001d10:	f009 f95a 	bl	800afc8 <HAL_SPI_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d1a:	f000 fc19 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20001120 	.word	0x20001120
 8001d28:	40013000 	.word	0x40013000

08001d2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d30:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <MX_SPI2_Init+0x74>)
 8001d32:	4a1c      	ldr	r2, [pc, #112]	; (8001da4 <MX_SPI2_Init+0x78>)
 8001d34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <MX_SPI2_Init+0x74>)
 8001d38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <MX_SPI2_Init+0x74>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d44:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <MX_SPI2_Init+0x74>)
 8001d46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d4a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_SPI2_Init+0x74>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <MX_SPI2_Init+0x74>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_SPI2_Init+0x74>)
 8001d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d5e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <MX_SPI2_Init+0x74>)
 8001d62:	2228      	movs	r2, #40	; 0x28
 8001d64:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_SPI2_Init+0x74>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <MX_SPI2_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <MX_SPI2_Init+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <MX_SPI2_Init+0x74>)
 8001d7a:	2207      	movs	r2, #7
 8001d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <MX_SPI2_Init+0x74>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <MX_SPI2_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <MX_SPI2_Init+0x74>)
 8001d8c:	f009 f91c 	bl	800afc8 <HAL_SPI_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d96:	f000 fbdb 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000c5c 	.word	0x20000c5c
 8001da4:	40003800 	.word	0x40003800

08001da8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <MX_SPI3_Init+0x74>)
 8001dae:	4a1c      	ldr	r2, [pc, #112]	; (8001e20 <MX_SPI3_Init+0x78>)
 8001db0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <MX_SPI3_Init+0x74>)
 8001db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001db8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001dba:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <MX_SPI3_Init+0x74>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dc0:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <MX_SPI3_Init+0x74>)
 8001dc2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001dc6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <MX_SPI3_Init+0x74>)
 8001dca:	2202      	movs	r2, #2
 8001dcc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <MX_SPI3_Init+0x74>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <MX_SPI3_Init+0x74>)
 8001dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dda:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <MX_SPI3_Init+0x74>)
 8001dde:	2218      	movs	r2, #24
 8001de0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_SPI3_Init+0x74>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_SPI3_Init+0x74>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <MX_SPI3_Init+0x74>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_SPI3_Init+0x74>)
 8001df6:	2207      	movs	r2, #7
 8001df8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <MX_SPI3_Init+0x74>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MX_SPI3_Init+0x74>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <MX_SPI3_Init+0x74>)
 8001e08:	f009 f8de 	bl	800afc8 <HAL_SPI_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001e12:	f000 fb9d 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000e24 	.word	0x20000e24
 8001e20:	40003c00 	.word	0x40003c00

08001e24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2a:	f107 031c 	add.w	r3, r7, #28
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e36:	463b      	mov	r3, r7
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
 8001e44:	615a      	str	r2, [r3, #20]
 8001e46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e48:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <MX_TIM2_Init+0xb0>)
 8001e4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e50:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <MX_TIM2_Init+0xb0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e56:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <MX_TIM2_Init+0xb0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <MX_TIM2_Init+0xb0>)
 8001e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <MX_TIM2_Init+0xb0>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <MX_TIM2_Init+0xb0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e70:	4818      	ldr	r0, [pc, #96]	; (8001ed4 <MX_TIM2_Init+0xb0>)
 8001e72:	f009 fa62 	bl	800b33a <HAL_TIM_PWM_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001e7c:	f000 fb68 	bl	8002550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4811      	ldr	r0, [pc, #68]	; (8001ed4 <MX_TIM2_Init+0xb0>)
 8001e90:	f009 fffa 	bl	800be88 <HAL_TIMEx_MasterConfigSynchronization>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001e9a:	f000 fb59 	bl	8002550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e9e:	2360      	movs	r3, #96	; 0x60
 8001ea0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eae:	463b      	mov	r3, r7
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4807      	ldr	r0, [pc, #28]	; (8001ed4 <MX_TIM2_Init+0xb0>)
 8001eb6:	f009 fb67 	bl	800b588 <HAL_TIM_PWM_ConfigChannel>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001ec0:	f000 fb46 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <MX_TIM2_Init+0xb0>)
 8001ec6:	f000 ff6d 	bl	8002da4 <HAL_TIM_MspPostInit>

}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	; 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20001184 	.word	0x20001184

08001ed8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ede:	f107 031c 	add.w	r3, r7, #28
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eea:	463b      	mov	r3, r7
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
 8001ef8:	615a      	str	r2, [r3, #20]
 8001efa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001efc:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <MX_TIM5_Init+0xc0>)
 8001efe:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <MX_TIM5_Init+0xc4>)
 8001f00:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f02:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <MX_TIM5_Init+0xc0>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f08:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <MX_TIM5_Init+0xc0>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001f0e:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <MX_TIM5_Init+0xc0>)
 8001f10:	f04f 32ff 	mov.w	r2, #4294967295
 8001f14:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <MX_TIM5_Init+0xc0>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <MX_TIM5_Init+0xc0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001f22:	481d      	ldr	r0, [pc, #116]	; (8001f98 <MX_TIM5_Init+0xc0>)
 8001f24:	f009 f9b2 	bl	800b28c <HAL_TIM_OC_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001f2e:	f000 fb0f 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8001f32:	2108      	movs	r1, #8
 8001f34:	4818      	ldr	r0, [pc, #96]	; (8001f98 <MX_TIM5_Init+0xc0>)
 8001f36:	f009 fa57 	bl	800b3e8 <HAL_TIM_OnePulse_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8001f40:	f000 fb06 	bl	8002550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f4c:	f107 031c 	add.w	r3, r7, #28
 8001f50:	4619      	mov	r1, r3
 8001f52:	4811      	ldr	r0, [pc, #68]	; (8001f98 <MX_TIM5_Init+0xc0>)
 8001f54:	f009 ff98 	bl	800be88 <HAL_TIMEx_MasterConfigSynchronization>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001f5e:	f000 faf7 	bl	8002550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8001f62:	2350      	movs	r3, #80	; 0x50
 8001f64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f72:	463b      	mov	r3, r7
 8001f74:	2200      	movs	r2, #0
 8001f76:	4619      	mov	r1, r3
 8001f78:	4807      	ldr	r0, [pc, #28]	; (8001f98 <MX_TIM5_Init+0xc0>)
 8001f7a:	f009 fa8f 	bl	800b49c <HAL_TIM_OC_ConfigChannel>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001f84:	f000 fae4 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001f88:	4803      	ldr	r0, [pc, #12]	; (8001f98 <MX_TIM5_Init+0xc0>)
 8001f8a:	f000 ff0b 	bl	8002da4 <HAL_TIM_MspPostInit>

}
 8001f8e:	bf00      	nop
 8001f90:	3728      	adds	r7, #40	; 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000dd8 	.word	0x20000dd8
 8001f9c:	40000c00 	.word	0x40000c00

08001fa0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <MX_TIM16_Init+0x44>)
 8001fa6:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <MX_TIM16_Init+0x48>)
 8001fa8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 120-1;
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <MX_TIM16_Init+0x44>)
 8001fac:	2277      	movs	r2, #119	; 0x77
 8001fae:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <MX_TIM16_Init+0x44>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <MX_TIM16_Init+0x44>)
 8001fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fbc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <MX_TIM16_Init+0x44>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <MX_TIM16_Init+0x44>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <MX_TIM16_Init+0x44>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001fd0:	4804      	ldr	r0, [pc, #16]	; (8001fe4 <MX_TIM16_Init+0x44>)
 8001fd2:	f009 f89c 	bl	800b10e <HAL_TIM_Base_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001fdc:	f000 fab8 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20001340 	.word	0x20001340
 8001fe8:	40014400 	.word	0x40014400

08001fec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ff0:	4b23      	ldr	r3, [pc, #140]	; (8002080 <MX_USART2_UART_Init+0x94>)
 8001ff2:	4a24      	ldr	r2, [pc, #144]	; (8002084 <MX_USART2_UART_Init+0x98>)
 8001ff4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ff6:	4b22      	ldr	r3, [pc, #136]	; (8002080 <MX_USART2_UART_Init+0x94>)
 8001ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ffc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffe:	4b20      	ldr	r3, [pc, #128]	; (8002080 <MX_USART2_UART_Init+0x94>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002004:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <MX_USART2_UART_Init+0x94>)
 8002006:	2200      	movs	r2, #0
 8002008:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800200a:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <MX_USART2_UART_Init+0x94>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <MX_USART2_UART_Init+0x94>)
 8002012:	220c      	movs	r2, #12
 8002014:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <MX_USART2_UART_Init+0x94>)
 8002018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800201c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800201e:	4b18      	ldr	r3, [pc, #96]	; (8002080 <MX_USART2_UART_Init+0x94>)
 8002020:	2200      	movs	r2, #0
 8002022:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <MX_USART2_UART_Init+0x94>)
 8002026:	2200      	movs	r2, #0
 8002028:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <MX_USART2_UART_Init+0x94>)
 800202c:	2200      	movs	r2, #0
 800202e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <MX_USART2_UART_Init+0x94>)
 8002032:	2200      	movs	r2, #0
 8002034:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002036:	4812      	ldr	r0, [pc, #72]	; (8002080 <MX_USART2_UART_Init+0x94>)
 8002038:	f009 ffae 	bl	800bf98 <HAL_UART_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002042:	f000 fa85 	bl	8002550 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002046:	2100      	movs	r1, #0
 8002048:	480d      	ldr	r0, [pc, #52]	; (8002080 <MX_USART2_UART_Init+0x94>)
 800204a:	f00a fc6a 	bl	800c922 <HAL_UARTEx_SetTxFifoThreshold>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002054:	f000 fa7c 	bl	8002550 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002058:	2100      	movs	r1, #0
 800205a:	4809      	ldr	r0, [pc, #36]	; (8002080 <MX_USART2_UART_Init+0x94>)
 800205c:	f00a fc9f 	bl	800c99e <HAL_UARTEx_SetRxFifoThreshold>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002066:	f000 fa73 	bl	8002550 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800206a:	4805      	ldr	r0, [pc, #20]	; (8002080 <MX_USART2_UART_Init+0x94>)
 800206c:	f00a fc20 	bl	800c8b0 <HAL_UARTEx_DisableFifoMode>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002076:	f000 fa6b 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20001264 	.word	0x20001264
 8002084:	40004400 	.word	0x40004400

08002088 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800208c:	4b23      	ldr	r3, [pc, #140]	; (800211c <MX_USART3_UART_Init+0x94>)
 800208e:	4a24      	ldr	r2, [pc, #144]	; (8002120 <MX_USART3_UART_Init+0x98>)
 8002090:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002092:	4b22      	ldr	r3, [pc, #136]	; (800211c <MX_USART3_UART_Init+0x94>)
 8002094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002098:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <MX_USART3_UART_Init+0x94>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <MX_USART3_UART_Init+0x94>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <MX_USART3_UART_Init+0x94>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <MX_USART3_UART_Init+0x94>)
 80020ae:	220c      	movs	r2, #12
 80020b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <MX_USART3_UART_Init+0x94>)
 80020b4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80020b8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <MX_USART3_UART_Init+0x94>)
 80020bc:	2200      	movs	r2, #0
 80020be:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020c0:	4b16      	ldr	r3, [pc, #88]	; (800211c <MX_USART3_UART_Init+0x94>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <MX_USART3_UART_Init+0x94>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <MX_USART3_UART_Init+0x94>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020d2:	4812      	ldr	r0, [pc, #72]	; (800211c <MX_USART3_UART_Init+0x94>)
 80020d4:	f009 ff60 	bl	800bf98 <HAL_UART_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 80020de:	f000 fa37 	bl	8002550 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e2:	2100      	movs	r1, #0
 80020e4:	480d      	ldr	r0, [pc, #52]	; (800211c <MX_USART3_UART_Init+0x94>)
 80020e6:	f00a fc1c 	bl	800c922 <HAL_UARTEx_SetTxFifoThreshold>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 80020f0:	f000 fa2e 	bl	8002550 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020f4:	2100      	movs	r1, #0
 80020f6:	4809      	ldr	r0, [pc, #36]	; (800211c <MX_USART3_UART_Init+0x94>)
 80020f8:	f00a fc51 	bl	800c99e <HAL_UARTEx_SetRxFifoThreshold>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8002102:	f000 fa25 	bl	8002550 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002106:	4805      	ldr	r0, [pc, #20]	; (800211c <MX_USART3_UART_Init+0x94>)
 8002108:	f00a fbd2 	bl	800c8b0 <HAL_UARTEx_DisableFifoMode>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8002112:	f000 fa1d 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000cd4 	.word	0x20000cd4
 8002120:	40004800 	.word	0x40004800

08002124 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <MX_DMA_Init+0x50>)
 800212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212e:	4a11      	ldr	r2, [pc, #68]	; (8002174 <MX_DMA_Init+0x50>)
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	6493      	str	r3, [r2, #72]	; 0x48
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <MX_DMA_Init+0x50>)
 8002138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002142:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <MX_DMA_Init+0x50>)
 8002144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002146:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <MX_DMA_Init+0x50>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6493      	str	r3, [r2, #72]	; 0x48
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <MX_DMA_Init+0x50>)
 8002150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	200b      	movs	r0, #11
 8002160:	f002 f92b 	bl	80043ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002164:	200b      	movs	r0, #11
 8002166:	f002 f944 	bl	80043f2 <HAL_NVIC_EnableIRQ>

}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000

08002178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08e      	sub	sp, #56	; 0x38
 800217c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
 800218c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800218e:	4bb5      	ldr	r3, [pc, #724]	; (8002464 <MX_GPIO_Init+0x2ec>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	4ab4      	ldr	r2, [pc, #720]	; (8002464 <MX_GPIO_Init+0x2ec>)
 8002194:	f043 0310 	orr.w	r3, r3, #16
 8002198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219a:	4bb2      	ldr	r3, [pc, #712]	; (8002464 <MX_GPIO_Init+0x2ec>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	623b      	str	r3, [r7, #32]
 80021a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a6:	4baf      	ldr	r3, [pc, #700]	; (8002464 <MX_GPIO_Init+0x2ec>)
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	4aae      	ldr	r2, [pc, #696]	; (8002464 <MX_GPIO_Init+0x2ec>)
 80021ac:	f043 0302 	orr.w	r3, r3, #2
 80021b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b2:	4bac      	ldr	r3, [pc, #688]	; (8002464 <MX_GPIO_Init+0x2ec>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021be:	4ba9      	ldr	r3, [pc, #676]	; (8002464 <MX_GPIO_Init+0x2ec>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	4aa8      	ldr	r2, [pc, #672]	; (8002464 <MX_GPIO_Init+0x2ec>)
 80021c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ca:	4ba6      	ldr	r3, [pc, #664]	; (8002464 <MX_GPIO_Init+0x2ec>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d2:	61bb      	str	r3, [r7, #24]
 80021d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d6:	4ba3      	ldr	r3, [pc, #652]	; (8002464 <MX_GPIO_Init+0x2ec>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	4aa2      	ldr	r2, [pc, #648]	; (8002464 <MX_GPIO_Init+0x2ec>)
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e2:	4ba0      	ldr	r3, [pc, #640]	; (8002464 <MX_GPIO_Init+0x2ec>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	4b9d      	ldr	r3, [pc, #628]	; (8002464 <MX_GPIO_Init+0x2ec>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	4a9c      	ldr	r2, [pc, #624]	; (8002464 <MX_GPIO_Init+0x2ec>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021fa:	4b9a      	ldr	r3, [pc, #616]	; (8002464 <MX_GPIO_Init+0x2ec>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002206:	4b97      	ldr	r3, [pc, #604]	; (8002464 <MX_GPIO_Init+0x2ec>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220a:	4a96      	ldr	r2, [pc, #600]	; (8002464 <MX_GPIO_Init+0x2ec>)
 800220c:	f043 0308 	orr.w	r3, r3, #8
 8002210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002212:	4b94      	ldr	r3, [pc, #592]	; (8002464 <MX_GPIO_Init+0x2ec>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800221e:	4b91      	ldr	r3, [pc, #580]	; (8002464 <MX_GPIO_Init+0x2ec>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	4a90      	ldr	r2, [pc, #576]	; (8002464 <MX_GPIO_Init+0x2ec>)
 8002224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800222a:	4b8e      	ldr	r3, [pc, #568]	; (8002464 <MX_GPIO_Init+0x2ec>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8002236:	f005 f84b 	bl	80072d0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800223a:	4b8a      	ldr	r3, [pc, #552]	; (8002464 <MX_GPIO_Init+0x2ec>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223e:	4a89      	ldr	r2, [pc, #548]	; (8002464 <MX_GPIO_Init+0x2ec>)
 8002240:	f043 0320 	orr.w	r3, r3, #32
 8002244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002246:	4b87      	ldr	r3, [pc, #540]	; (8002464 <MX_GPIO_Init+0x2ec>)
 8002248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 8002252:	2200      	movs	r2, #0
 8002254:	f242 0102 	movw	r1, #8194	; 0x2002
 8002258:	4883      	ldr	r0, [pc, #524]	; (8002468 <MX_GPIO_Init+0x2f0>)
 800225a:	f003 fa4d 	bl	80056f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 800225e:	2200      	movs	r2, #0
 8002260:	f648 0181 	movw	r1, #34945	; 0x8881
 8002264:	4881      	ldr	r0, [pc, #516]	; (800246c <MX_GPIO_Init+0x2f4>)
 8002266:	f003 fa47 	bl	80056f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_RESET);
 800226a:	2200      	movs	r2, #0
 800226c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002274:	f003 fa40 	bl	80056f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8002278:	2200      	movs	r2, #0
 800227a:	2140      	movs	r1, #64	; 0x40
 800227c:	487c      	ldr	r0, [pc, #496]	; (8002470 <MX_GPIO_Init+0x2f8>)
 800227e:	f003 fa3b 	bl	80056f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8002282:	2200      	movs	r2, #0
 8002284:	f247 5128 	movw	r1, #29992	; 0x7528
 8002288:	487a      	ldr	r0, [pc, #488]	; (8002474 <MX_GPIO_Init+0x2fc>)
 800228a:	f003 fa35 	bl	80056f8 <HAL_GPIO_WritePin>
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BLE_SPI_CS_Pin|SEL1_2_Pin, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	2121      	movs	r1, #33	; 0x21
 8002292:	4879      	ldr	r0, [pc, #484]	; (8002478 <MX_GPIO_Init+0x300>)
 8002294:	f003 fa30 	bl	80056f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 8002298:	2200      	movs	r2, #0
 800229a:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 800229e:	4877      	ldr	r0, [pc, #476]	; (800247c <MX_GPIO_Init+0x304>)
 80022a0:	f003 fa2a 	bl	80056f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 80022a4:	f240 4301 	movw	r3, #1025	; 0x401
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b6:	4619      	mov	r1, r3
 80022b8:	486b      	ldr	r0, [pc, #428]	; (8002468 <MX_GPIO_Init+0x2f0>)
 80022ba:	f003 f88b 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
  GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 80022be:	f244 3301 	movw	r3, #17153	; 0x4301
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022c4:	2303      	movs	r3, #3
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d0:	4619      	mov	r1, r3
 80022d2:	486a      	ldr	r0, [pc, #424]	; (800247c <MX_GPIO_Init+0x304>)
 80022d4:	f003 f87e 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_PE0H3_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 80022d8:	2308      	movs	r3, #8
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022dc:	2300      	movs	r3, #0
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e8:	4619      	mov	r1, r3
 80022ea:	4865      	ldr	r0, [pc, #404]	; (8002480 <MX_GPIO_Init+0x308>)
 80022ec:	f003 f872 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin SDMMC_D2_Pin SDMMC_D1_Pin SDMMC_CK_Pin
                           SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 80022f0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDMMC_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fe:	2303      	movs	r3, #3
 8002300:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002302:	230c      	movs	r3, #12
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230a:	4619      	mov	r1, r3
 800230c:	4858      	ldr	r0, [pc, #352]	; (8002470 <MX_GPIO_Init+0x2f8>)
 800230e:	f003 f861 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
  GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 8002312:	f64c 1308 	movw	r3, #51464	; 0xc908
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ADWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002318:	4b5a      	ldr	r3, [pc, #360]	; (8002484 <MX_GPIO_Init+0x30c>)
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002324:	4619      	mov	r1, r3
 8002326:	4850      	ldr	r0, [pc, #320]	; (8002468 <MX_GPIO_Init+0x2f0>)
 8002328:	f003 f854 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin;
 800232c:	f242 0302 	movw	r3, #8194	; 0x2002
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002332:	2301      	movs	r3, #1
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	2300      	movs	r3, #0
 800233c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800233e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002342:	4619      	mov	r1, r3
 8002344:	4848      	ldr	r0, [pc, #288]	; (8002468 <MX_GPIO_Init+0x2f0>)
 8002346:	f003 f845 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 800234a:	f648 0381 	movw	r3, #34945	; 0x8881
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002350:	2301      	movs	r3, #1
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800235c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002360:	4619      	mov	r1, r3
 8002362:	4842      	ldr	r0, [pc, #264]	; (800246c <MX_GPIO_Init+0x2f4>)
 8002364:	f003 f836 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin PA1_Pin */
  GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|PA1_Pin;
 8002368:	f240 6303 	movw	r3, #1539	; 0x603
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800236e:	2303      	movs	r3, #3
 8002370:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237a:	4619      	mov	r1, r3
 800237c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002380:	f003 f828 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12_Pin PG10_Pin PG9_Pin */
  GPIO_InitStruct.Pin = PG12_Pin|PG10_Pin|PG9_Pin;
 8002384:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800238a:	2303      	movs	r3, #3
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002396:	4619      	mov	r1, r3
 8002398:	4837      	ldr	r0, [pc, #220]	; (8002478 <MX_GPIO_Init+0x300>)
 800239a:	f003 f81b 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800239e:	2304      	movs	r3, #4
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80023ae:	230c      	movs	r3, #12
 80023b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80023b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b6:	4619      	mov	r1, r3
 80023b8:	482c      	ldr	r0, [pc, #176]	; (800246c <MX_GPIO_Init+0x2f4>)
 80023ba:	f003 f80b 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RST_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin;
 80023be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c4:	2301      	movs	r3, #1
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023cc:	2300      	movs	r3, #0
 80023ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d4:	4619      	mov	r1, r3
 80023d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023da:	f002 fffb 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 80023de:	2340      	movs	r3, #64	; 0x40
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e2:	2301      	movs	r3, #1
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ea:	2300      	movs	r3, #0
 80023ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 80023ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f2:	4619      	mov	r1, r3
 80023f4:	481e      	ldr	r0, [pc, #120]	; (8002470 <MX_GPIO_Init+0x2f8>)
 80023f6:	f002 ffed 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin CS_DHC_Pin SEL3_4_Pin */
  GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 80023fa:	f247 5328 	movw	r3, #29992	; 0x7528
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002400:	2301      	movs	r3, #1
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2300      	movs	r3, #0
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800240c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002410:	4619      	mov	r1, r3
 8002412:	4818      	ldr	r0, [pc, #96]	; (8002474 <MX_GPIO_Init+0x2fc>)
 8002414:	f002 ffde 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
  GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 8002418:	f44f 7324 	mov.w	r3, #656	; 0x290
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800241e:	4b19      	ldr	r3, [pc, #100]	; (8002484 <MX_GPIO_Init+0x30c>)
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242a:	4619      	mov	r1, r3
 800242c:	4811      	ldr	r0, [pc, #68]	; (8002474 <MX_GPIO_Init+0x2fc>)
 800242e:	f002 ffd1 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_SPI_CS_Pin SEL1_2_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin|SEL1_2_Pin;
 8002432:	2321      	movs	r3, #33	; 0x21
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002436:	2301      	movs	r3, #1
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002446:	4619      	mov	r1, r3
 8002448:	480b      	ldr	r0, [pc, #44]	; (8002478 <MX_GPIO_Init+0x300>)
 800244a:	f002 ffc3 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 800244e:	2342      	movs	r3, #66	; 0x42
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <MX_GPIO_Init+0x30c>)
 8002454:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800245a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245e:	4619      	mov	r1, r3
 8002460:	e012      	b.n	8002488 <MX_GPIO_Init+0x310>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	48001000 	.word	0x48001000
 800246c:	48000c00 	.word	0x48000c00
 8002470:	48000800 	.word	0x48000800
 8002474:	48001400 	.word	0x48001400
 8002478:	48001800 	.word	0x48001800
 800247c:	48000400 	.word	0x48000400
 8002480:	48001c00 	.word	0x48001c00
 8002484:	10110000 	.word	0x10110000
 8002488:	482b      	ldr	r0, [pc, #172]	; (8002538 <MX_GPIO_Init+0x3c0>)
 800248a:	f002 ffa3 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 800248e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002494:	2300      	movs	r3, #0
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a0:	4619      	mov	r1, r3
 80024a2:	4826      	ldr	r0, [pc, #152]	; (800253c <MX_GPIO_Init+0x3c4>)
 80024a4:	f002 ff96 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 80024a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ae:	2300      	movs	r3, #0
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 80024b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ba:	4619      	mov	r1, r3
 80024bc:	4820      	ldr	r0, [pc, #128]	; (8002540 <MX_GPIO_Init+0x3c8>)
 80024be:	f002 ff89 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 80024c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <MX_GPIO_Init+0x3cc>)
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 80024d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d4:	4619      	mov	r1, r3
 80024d6:	481c      	ldr	r0, [pc, #112]	; (8002548 <MX_GPIO_Init+0x3d0>)
 80024d8:	f002 ff7c 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 80024dc:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e2:	2301      	movs	r3, #1
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f2:	4619      	mov	r1, r3
 80024f4:	4811      	ldr	r0, [pc, #68]	; (800253c <MX_GPIO_Init+0x3c4>)
 80024f6:	f002 ff6d 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_DH_Pin */
  GPIO_InitStruct.Pin = INT2_DH_Pin;
 80024fa:	2304      	movs	r3, #4
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <MX_GPIO_Init+0x3cc>)
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 8002506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250a:	4619      	mov	r1, r3
 800250c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002510:	f002 ff60 	bl	80053d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12_Pin */
  GPIO_InitStruct.Pin = PE12_Pin;
 8002514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800251a:	2303      	movs	r3, #3
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PE12_GPIO_Port, &GPIO_InitStruct);
 8002522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002526:	4619      	mov	r1, r3
 8002528:	4808      	ldr	r0, [pc, #32]	; (800254c <MX_GPIO_Init+0x3d4>)
 800252a:	f002 ff53 	bl	80053d4 <HAL_GPIO_Init>

}
 800252e:	bf00      	nop
 8002530:	3738      	adds	r7, #56	; 0x38
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	48001800 	.word	0x48001800
 800253c:	48000400 	.word	0x48000400
 8002540:	48001400 	.word	0x48001400
 8002544:	10110000 	.word	0x10110000
 8002548:	48000c00 	.word	0x48000c00
 800254c:	48001000 	.word	0x48001000

08002550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002554:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002556:	e7fe      	b.n	8002556 <Error_Handler+0x6>

08002558 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	4b0f      	ldr	r3, [pc, #60]	; (800259c <HAL_MspInit+0x44>)
 8002560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002562:	4a0e      	ldr	r2, [pc, #56]	; (800259c <HAL_MspInit+0x44>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6613      	str	r3, [r2, #96]	; 0x60
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <HAL_MspInit+0x44>)
 800256c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_MspInit+0x44>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	4a08      	ldr	r2, [pc, #32]	; (800259c <HAL_MspInit+0x44>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	6593      	str	r3, [r2, #88]	; 0x58
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_MspInit+0x44>)
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000

080025a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	; 0x28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a37      	ldr	r2, [pc, #220]	; (800269c <HAL_ADC_MspInit+0xfc>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d168      	bne.n	8002694 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80025c2:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <HAL_ADC_MspInit+0x100>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	4a36      	ldr	r2, [pc, #216]	; (80026a0 <HAL_ADC_MspInit+0x100>)
 80025c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ce:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <HAL_ADC_MspInit+0x100>)
 80025d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025da:	4b31      	ldr	r3, [pc, #196]	; (80026a0 <HAL_ADC_MspInit+0x100>)
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	4a30      	ldr	r2, [pc, #192]	; (80026a0 <HAL_ADC_MspInit+0x100>)
 80025e0:	f043 0304 	orr.w	r3, r3, #4
 80025e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025e6:	4b2e      	ldr	r3, [pc, #184]	; (80026a0 <HAL_ADC_MspInit+0x100>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <HAL_ADC_MspInit+0x100>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	4a2a      	ldr	r2, [pc, #168]	; (80026a0 <HAL_ADC_MspInit+0x100>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025fe:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <HAL_ADC_MspInit+0x100>)
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PA5     ------> ADC1_IN10
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Pin|ADC1_IN2_Pin|uC_ADC_BATT_Pin;
 800260a:	2313      	movs	r3, #19
 800260c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800260e:	230b      	movs	r3, #11
 8002610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4619      	mov	r1, r3
 800261c:	4821      	ldr	r0, [pc, #132]	; (80026a4 <HAL_ADC_MspInit+0x104>)
 800261e:	f002 fed9 	bl	80053d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EX_ADC_Pin;
 8002622:	2320      	movs	r3, #32
 8002624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002626:	230b      	movs	r3, #11
 8002628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(EX_ADC_GPIO_Port, &GPIO_InitStruct);
 800262e:	f107 0314 	add.w	r3, r7, #20
 8002632:	4619      	mov	r1, r3
 8002634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002638:	f002 fecc 	bl	80053d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <HAL_ADC_MspInit+0x108>)
 800263e:	4a1b      	ldr	r2, [pc, #108]	; (80026ac <HAL_ADC_MspInit+0x10c>)
 8002640:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_ADC_MspInit+0x108>)
 8002644:	2205      	movs	r2, #5
 8002646:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002648:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <HAL_ADC_MspInit+0x108>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800264e:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <HAL_ADC_MspInit+0x108>)
 8002650:	2200      	movs	r2, #0
 8002652:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <HAL_ADC_MspInit+0x108>)
 8002656:	2280      	movs	r2, #128	; 0x80
 8002658:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_ADC_MspInit+0x108>)
 800265c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002660:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_ADC_MspInit+0x108>)
 8002664:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002668:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_ADC_MspInit+0x108>)
 800266c:	2220      	movs	r2, #32
 800266e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002670:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <HAL_ADC_MspInit+0x108>)
 8002672:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002676:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002678:	480b      	ldr	r0, [pc, #44]	; (80026a8 <HAL_ADC_MspInit+0x108>)
 800267a:	f002 fcf1 	bl	8005060 <HAL_DMA_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 8002684:	f7ff ff64 	bl	8002550 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <HAL_ADC_MspInit+0x108>)
 800268c:	651a      	str	r2, [r3, #80]	; 0x50
 800268e:	4a06      	ldr	r2, [pc, #24]	; (80026a8 <HAL_ADC_MspInit+0x108>)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002694:	bf00      	nop
 8002696:	3728      	adds	r7, #40	; 0x28
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	50040000 	.word	0x50040000
 80026a0:	40021000 	.word	0x40021000
 80026a4:	48000800 	.word	0x48000800
 80026a8:	20001064 	.word	0x20001064
 80026ac:	40020008 	.word	0x40020008

080026b0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <HAL_CRC_MspInit+0x38>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d10b      	bne.n	80026da <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_CRC_MspInit+0x3c>)
 80026c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c6:	4a09      	ldr	r2, [pc, #36]	; (80026ec <HAL_CRC_MspInit+0x3c>)
 80026c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026cc:	6493      	str	r3, [r2, #72]	; 0x48
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <HAL_CRC_MspInit+0x3c>)
 80026d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40023000 	.word	0x40023000
 80026ec:	40021000 	.word	0x40021000

080026f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a15      	ldr	r2, [pc, #84]	; (8002764 <HAL_DAC_MspInit+0x74>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d124      	bne.n	800275c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_DAC_MspInit+0x78>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	4a14      	ldr	r2, [pc, #80]	; (8002768 <HAL_DAC_MspInit+0x78>)
 8002718:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800271c:	6593      	str	r3, [r2, #88]	; 0x58
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_DAC_MspInit+0x78>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272a:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <HAL_DAC_MspInit+0x78>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <HAL_DAC_MspInit+0x78>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <HAL_DAC_MspInit+0x78>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC1_OUT1_Pin;
 8002742:	2310      	movs	r3, #16
 8002744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002746:	2303      	movs	r3, #3
 8002748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_OUT1_GPIO_Port, &GPIO_InitStruct);
 800274e:	f107 0314 	add.w	r3, r7, #20
 8002752:	4619      	mov	r1, r3
 8002754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002758:	f002 fe3c 	bl	80053d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800275c:	bf00      	nop
 800275e:	3728      	adds	r7, #40	; 0x28
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40007400 	.word	0x40007400
 8002768:	40021000 	.word	0x40021000

0800276c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8002784:	4b31      	ldr	r3, [pc, #196]	; (800284c <HAL_DFSDM_FilterMspInit+0xe0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d15b      	bne.n	8002844 <HAL_DFSDM_FilterMspInit+0xd8>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800278c:	4b30      	ldr	r3, [pc, #192]	; (8002850 <HAL_DFSDM_FilterMspInit+0xe4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	4a2f      	ldr	r2, [pc, #188]	; (8002850 <HAL_DFSDM_FilterMspInit+0xe4>)
 8002794:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8002796:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <HAL_DFSDM_FilterMspInit+0xe4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d10b      	bne.n	80027b6 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_DFSDM_FilterMspInit+0xe8>)
 80027a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a2:	4a2c      	ldr	r2, [pc, #176]	; (8002854 <HAL_DFSDM_FilterMspInit+0xe8>)
 80027a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a8:	6613      	str	r3, [r2, #96]	; 0x60
 80027aa:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <HAL_DFSDM_FilterMspInit+0xe8>)
 80027ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b6:	4b27      	ldr	r3, [pc, #156]	; (8002854 <HAL_DFSDM_FilterMspInit+0xe8>)
 80027b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ba:	4a26      	ldr	r2, [pc, #152]	; (8002854 <HAL_DFSDM_FilterMspInit+0xe8>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c2:	4b24      	ldr	r3, [pc, #144]	; (8002854 <HAL_DFSDM_FilterMspInit+0xe8>)
 80027c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027ce:	4b21      	ldr	r3, [pc, #132]	; (8002854 <HAL_DFSDM_FilterMspInit+0xe8>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	4a20      	ldr	r2, [pc, #128]	; (8002854 <HAL_DFSDM_FilterMspInit+0xe8>)
 80027d4:	f043 0310 	orr.w	r3, r3, #16
 80027d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027da:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <HAL_DFSDM_FilterMspInit+0xe8>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PB6     ------> DFSDM1_DATIN5
    PE9     ------> DFSDM1_CKOUT
    PB10     ------> DFSDM1_DATIN7
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 80027e6:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80027ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027f0:	2302      	movs	r3, #2
 80027f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f4:	2303      	movs	r3, #3
 80027f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80027f8:	2306      	movs	r3, #6
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	4619      	mov	r1, r3
 8002802:	4815      	ldr	r0, [pc, #84]	; (8002858 <HAL_DFSDM_FilterMspInit+0xec>)
 8002804:	f002 fde6 	bl	80053d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8002808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800280c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002812:	2302      	movs	r3, #2
 8002814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800281a:	2306      	movs	r3, #6
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800281e:	f107 0314 	add.w	r3, r7, #20
 8002822:	4619      	mov	r1, r3
 8002824:	480d      	ldr	r0, [pc, #52]	; (800285c <HAL_DFSDM_FilterMspInit+0xf0>)
 8002826:	f002 fdd5 	bl	80053d4 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	2100      	movs	r1, #0
 800282e:	203d      	movs	r0, #61	; 0x3d
 8002830:	f001 fdc3 	bl	80043ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 8002834:	203d      	movs	r0, #61	; 0x3d
 8002836:	f001 fddc 	bl	80043f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800283a:	4b04      	ldr	r3, [pc, #16]	; (800284c <HAL_DFSDM_FilterMspInit+0xe0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	4a02      	ldr	r2, [pc, #8]	; (800284c <HAL_DFSDM_FilterMspInit+0xe0>)
 8002842:	6013      	str	r3, [r2, #0]
  }

}
 8002844:	bf00      	nop
 8002846:	3728      	adds	r7, #40	; 0x28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000994 	.word	0x20000994
 8002850:	20000990 	.word	0x20000990
 8002854:	40021000 	.word	0x40021000
 8002858:	48000400 	.word	0x48000400
 800285c:	48001000 	.word	0x48001000

08002860 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8002878:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d153      	bne.n	8002928 <HAL_DFSDM_ChannelMspInit+0xc8>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8002880:	4b2c      	ldr	r3, [pc, #176]	; (8002934 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3301      	adds	r3, #1
 8002886:	4a2b      	ldr	r2, [pc, #172]	; (8002934 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8002888:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800288a:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d10b      	bne.n	80028aa <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002892:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8002894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002896:	4a28      	ldr	r2, [pc, #160]	; (8002938 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8002898:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800289c:	6613      	str	r3, [r2, #96]	; 0x60
 800289e:	4b26      	ldr	r3, [pc, #152]	; (8002938 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80028a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028aa:	4b23      	ldr	r3, [pc, #140]	; (8002938 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ae:	4a22      	ldr	r2, [pc, #136]	; (8002938 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80028b0:	f043 0302 	orr.w	r3, r3, #2
 80028b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b6:	4b20      	ldr	r3, [pc, #128]	; (8002938 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028c2:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	4a1c      	ldr	r2, [pc, #112]	; (8002938 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80028c8:	f043 0310 	orr.w	r3, r3, #16
 80028cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PB6     ------> DFSDM1_DATIN5
    PE9     ------> DFSDM1_CKOUT
    PB10     ------> DFSDM1_DATIN7
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 80028da:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80028de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028e4:	2302      	movs	r3, #2
 80028e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e8:	2303      	movs	r3, #3
 80028ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80028ec:	2306      	movs	r3, #6
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f0:	f107 0314 	add.w	r3, r7, #20
 80028f4:	4619      	mov	r1, r3
 80028f6:	4811      	ldr	r0, [pc, #68]	; (800293c <HAL_DFSDM_ChannelMspInit+0xdc>)
 80028f8:	f002 fd6c 	bl	80053d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80028fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002906:	2302      	movs	r3, #2
 8002908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290a:	2303      	movs	r3, #3
 800290c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800290e:	2306      	movs	r3, #6
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	4619      	mov	r1, r3
 8002918:	4809      	ldr	r0, [pc, #36]	; (8002940 <HAL_DFSDM_ChannelMspInit+0xe0>)
 800291a:	f002 fd5b 	bl	80053d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800291e:	4b04      	ldr	r3, [pc, #16]	; (8002930 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3301      	adds	r3, #1
 8002924:	4a02      	ldr	r2, [pc, #8]	; (8002930 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8002926:	6013      	str	r3, [r2, #0]
  }

}
 8002928:	bf00      	nop
 800292a:	3728      	adds	r7, #40	; 0x28
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000994 	.word	0x20000994
 8002934:	20000990 	.word	0x20000990
 8002938:	40021000 	.word	0x40021000
 800293c:	48000400 	.word	0x48000400
 8002940:	48001000 	.word	0x48001000

08002944 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(hsmbus->Instance==I2C2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1f      	ldr	r2, [pc, #124]	; (80029e0 <HAL_SMBUS_MspInit+0x9c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d137      	bne.n	80029d6 <HAL_SMBUS_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002966:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <HAL_SMBUS_MspInit+0xa0>)
 8002968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296a:	4a1e      	ldr	r2, [pc, #120]	; (80029e4 <HAL_SMBUS_MspInit+0xa0>)
 800296c:	f043 0320 	orr.w	r3, r3, #32
 8002970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002972:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <HAL_SMBUS_MspInit+0xa0>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF2     ------> I2C2_SMBA
    PF1     ------> I2C2_SCL
    PF0     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SMBA_Pin|I2C2_SDA_Pin|I2C2_SDAF0_Pin;
 800297e:	2307      	movs	r3, #7
 8002980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002982:	2312      	movs	r3, #18
 8002984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002986:	2301      	movs	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298a:	2303      	movs	r3, #3
 800298c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800298e:	2304      	movs	r3, #4
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002992:	f107 0314 	add.w	r3, r7, #20
 8002996:	4619      	mov	r1, r3
 8002998:	4813      	ldr	r0, [pc, #76]	; (80029e8 <HAL_SMBUS_MspInit+0xa4>)
 800299a:	f002 fd1b 	bl	80053d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800299e:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <HAL_SMBUS_MspInit+0xa0>)
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a2:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <HAL_SMBUS_MspInit+0xa0>)
 80029a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029a8:	6593      	str	r3, [r2, #88]	; 0x58
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_SMBUS_MspInit+0xa0>)
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2100      	movs	r1, #0
 80029ba:	2021      	movs	r0, #33	; 0x21
 80029bc:	f001 fcfd 	bl	80043ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80029c0:	2021      	movs	r0, #33	; 0x21
 80029c2:	f001 fd16 	bl	80043f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	2022      	movs	r0, #34	; 0x22
 80029cc:	f001 fcf5 	bl	80043ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80029d0:	2022      	movs	r0, #34	; 0x22
 80029d2:	f001 fd0e 	bl	80043f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80029d6:	bf00      	nop
 80029d8:	3728      	adds	r7, #40	; 0x28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40005800 	.word	0x40005800
 80029e4:	40021000 	.word	0x40021000
 80029e8:	48001400 	.word	0x48001400

080029ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	; 0x30
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a30      	ldr	r2, [pc, #192]	; (8002acc <HAL_I2C_MspInit+0xe0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d12b      	bne.n	8002a66 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a0e:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <HAL_I2C_MspInit+0xe4>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	4a2f      	ldr	r2, [pc, #188]	; (8002ad0 <HAL_I2C_MspInit+0xe4>)
 8002a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <HAL_I2C_MspInit+0xe4>)
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8002a26:	f004 fc53 	bl	80072d0 <HAL_PWREx_EnableVddIO2>
    /**I2C3 GPIO Configuration
    PG8     ------> I2C3_SDA
    PG7     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8002a2a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a30:	2312      	movs	r3, #18
 8002a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a34:	2301      	movs	r3, #1
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a40:	f107 031c 	add.w	r3, r7, #28
 8002a44:	4619      	mov	r1, r3
 8002a46:	4823      	ldr	r0, [pc, #140]	; (8002ad4 <HAL_I2C_MspInit+0xe8>)
 8002a48:	f002 fcc4 	bl	80053d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a4c:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_I2C_MspInit+0xe4>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	4a1f      	ldr	r2, [pc, #124]	; (8002ad0 <HAL_I2C_MspInit+0xe4>)
 8002a52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a56:	6593      	str	r3, [r2, #88]	; 0x58
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_I2C_MspInit+0xe4>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002a64:	e02d      	b.n	8002ac2 <HAL_I2C_MspInit+0xd6>
  else if(hi2c->Instance==I2C4)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1b      	ldr	r2, [pc, #108]	; (8002ad8 <HAL_I2C_MspInit+0xec>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d128      	bne.n	8002ac2 <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a70:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <HAL_I2C_MspInit+0xe4>)
 8002a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a74:	4a16      	ldr	r2, [pc, #88]	; (8002ad0 <HAL_I2C_MspInit+0xe4>)
 8002a76:	f043 0308 	orr.w	r3, r3, #8
 8002a7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <HAL_I2C_MspInit+0xe4>)
 8002a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 8002a88:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a8e:	2312      	movs	r3, #18
 8002a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a92:	2301      	movs	r3, #1
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a96:	2303      	movs	r3, #3
 8002a98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a9e:	f107 031c 	add.w	r3, r7, #28
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	480d      	ldr	r0, [pc, #52]	; (8002adc <HAL_I2C_MspInit+0xf0>)
 8002aa6:	f002 fc95 	bl	80053d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_I2C_MspInit+0xe4>)
 8002aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aae:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <HAL_I2C_MspInit+0xe4>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_I2C_MspInit+0xe4>)
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
}
 8002ac2:	bf00      	nop
 8002ac4:	3730      	adds	r7, #48	; 0x30
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40005c00 	.word	0x40005c00
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	48001800 	.word	0x48001800
 8002ad8:	40008400 	.word	0x40008400
 8002adc:	48000c00 	.word	0x48000c00

08002ae0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <HAL_LTDC_MspInit+0x38>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d10b      	bne.n	8002b0a <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_LTDC_MspInit+0x3c>)
 8002af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af6:	4a09      	ldr	r2, [pc, #36]	; (8002b1c <HAL_LTDC_MspInit+0x3c>)
 8002af8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002afc:	6613      	str	r3, [r2, #96]	; 0x60
 8002afe:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <HAL_LTDC_MspInit+0x3c>)
 8002b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40016800 	.word	0x40016800
 8002b1c:	40021000 	.word	0x40021000

08002b20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <HAL_RTC_MspInit+0x30>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d107      	bne.n	8002b42 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <HAL_RTC_MspInit+0x34>)
 8002b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b38:	4a06      	ldr	r2, [pc, #24]	; (8002b54 <HAL_RTC_MspInit+0x34>)
 8002b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40002800 	.word	0x40002800
 8002b54:	40021000 	.word	0x40021000

08002b58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08e      	sub	sp, #56	; 0x38
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a54      	ldr	r2, [pc, #336]	; (8002cc8 <HAL_SPI_MspInit+0x170>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d12a      	bne.n	8002bd0 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b7a:	4b54      	ldr	r3, [pc, #336]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7e:	4a53      	ldr	r2, [pc, #332]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b84:	6613      	str	r3, [r2, #96]	; 0x60
 8002b86:	4b51      	ldr	r3, [pc, #324]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b8e:	623b      	str	r3, [r7, #32]
 8002b90:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b92:	4b4e      	ldr	r3, [pc, #312]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b96:	4a4d      	ldr	r2, [pc, #308]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b9e:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba6:	61fb      	str	r3, [r7, #28]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
    HAL_PWREx_EnableVddIO2();
 8002baa:	f004 fb91 	bl	80072d0 <HAL_PWREx_EnableVddIO2>
    /**SPI1 GPIO Configuration
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 8002bae:	231c      	movs	r3, #28
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bbe:	2305      	movs	r3, #5
 8002bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4841      	ldr	r0, [pc, #260]	; (8002cd0 <HAL_SPI_MspInit+0x178>)
 8002bca:	f002 fc03 	bl	80053d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002bce:	e076      	b.n	8002cbe <HAL_SPI_MspInit+0x166>
  else if(hspi->Instance==SPI2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a3f      	ldr	r2, [pc, #252]	; (8002cd4 <HAL_SPI_MspInit+0x17c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d144      	bne.n	8002c64 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bda:	4b3c      	ldr	r3, [pc, #240]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bde:	4a3b      	ldr	r2, [pc, #236]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be4:	6593      	str	r3, [r2, #88]	; 0x58
 8002be6:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bee:	61bb      	str	r3, [r7, #24]
 8002bf0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bf2:	4b36      	ldr	r3, [pc, #216]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	4a35      	ldr	r2, [pc, #212]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002bf8:	f043 0308 	orr.w	r3, r3, #8
 8002bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bfe:	4b33      	ldr	r3, [pc, #204]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c0a:	4b30      	ldr	r3, [pc, #192]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0e:	4a2f      	ldr	r2, [pc, #188]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002c10:	f043 0304 	orr.w	r3, r3, #4
 8002c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c16:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPI2_CLK_Pin;
 8002c22:	2302      	movs	r3, #2
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c32:	2305      	movs	r3, #5
 8002c34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_CLK_GPIO_Port, &GPIO_InitStruct);
 8002c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4826      	ldr	r0, [pc, #152]	; (8002cd8 <HAL_SPI_MspInit+0x180>)
 8002c3e:	f002 fbc9 	bl	80053d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8002c42:	230c      	movs	r3, #12
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	2302      	movs	r3, #2
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c52:	2305      	movs	r3, #5
 8002c54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	481f      	ldr	r0, [pc, #124]	; (8002cdc <HAL_SPI_MspInit+0x184>)
 8002c5e:	f002 fbb9 	bl	80053d4 <HAL_GPIO_Init>
}
 8002c62:	e02c      	b.n	8002cbe <HAL_SPI_MspInit+0x166>
  else if(hspi->Instance==SPI3)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <HAL_SPI_MspInit+0x188>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d127      	bne.n	8002cbe <HAL_SPI_MspInit+0x166>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c78:	6593      	str	r3, [r2, #88]	; 0x58
 8002c7a:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8a:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c92:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <HAL_SPI_MspInit+0x174>)
 8002c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin|SPI3_CLK_Pin;
 8002c9e:	2338      	movs	r3, #56	; 0x38
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002caa:	2303      	movs	r3, #3
 8002cac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002cae:	2306      	movs	r3, #6
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	480a      	ldr	r0, [pc, #40]	; (8002ce4 <HAL_SPI_MspInit+0x18c>)
 8002cba:	f002 fb8b 	bl	80053d4 <HAL_GPIO_Init>
}
 8002cbe:	bf00      	nop
 8002cc0:	3738      	adds	r7, #56	; 0x38
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40013000 	.word	0x40013000
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	48001800 	.word	0x48001800
 8002cd4:	40003800 	.word	0x40003800
 8002cd8:	48000c00 	.word	0x48000c00
 8002cdc:	48000800 	.word	0x48000800
 8002ce0:	40003c00 	.word	0x40003c00
 8002ce4:	48000400 	.word	0x48000400

08002ce8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d10b      	bne.n	8002d12 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_TIM_PWM_MspInit+0x38>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <HAL_TIM_PWM_MspInit+0x38>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	6593      	str	r3, [r2, #88]	; 0x58
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_TIM_PWM_MspInit+0x38>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000

08002d24 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <HAL_TIM_OC_MspInit+0x38>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d10b      	bne.n	8002d4e <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_TIM_OC_MspInit+0x3c>)
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3a:	4a09      	ldr	r2, [pc, #36]	; (8002d60 <HAL_TIM_OC_MspInit+0x3c>)
 8002d3c:	f043 0308 	orr.w	r3, r3, #8
 8002d40:	6593      	str	r3, [r2, #88]	; 0x58
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <HAL_TIM_OC_MspInit+0x3c>)
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40000c00 	.word	0x40000c00
 8002d60:	40021000 	.word	0x40021000

08002d64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <HAL_TIM_Base_MspInit+0x38>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10b      	bne.n	8002d8e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_TIM_Base_MspInit+0x3c>)
 8002d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7a:	4a09      	ldr	r2, [pc, #36]	; (8002da0 <HAL_TIM_Base_MspInit+0x3c>)
 8002d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d80:	6613      	str	r3, [r2, #96]	; 0x60
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <HAL_TIM_Base_MspInit+0x3c>)
 8002d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40014400 	.word	0x40014400
 8002da0:	40021000 	.word	0x40021000

08002da4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc4:	d11e      	bne.n	8002e04 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc6:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <HAL_TIM_MspPostInit+0xac>)
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dca:	4a21      	ldr	r2, [pc, #132]	; (8002e50 <HAL_TIM_MspPostInit+0xac>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dd2:	4b1f      	ldr	r3, [pc, #124]	; (8002e50 <HAL_TIM_MspPostInit+0xac>)
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = EX_PWM_Pin;
 8002dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	2302      	movs	r3, #2
 8002de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dec:	2300      	movs	r3, #0
 8002dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002df0:	2301      	movs	r3, #1
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EX_PWM_GPIO_Port, &GPIO_InitStruct);
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dfe:	f002 fae9 	bl	80053d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002e02:	e020      	b.n	8002e46 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM5)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <HAL_TIM_MspPostInit+0xb0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d11b      	bne.n	8002e46 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <HAL_TIM_MspPostInit+0xac>)
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	4a0f      	ldr	r2, [pc, #60]	; (8002e50 <HAL_TIM_MspPostInit+0xac>)
 8002e14:	f043 0320 	orr.w	r3, r3, #32
 8002e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <HAL_TIM_MspPostInit+0xac>)
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SW_SEL_Pin;
 8002e26:	2340      	movs	r3, #64	; 0x40
 8002e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e32:	2302      	movs	r3, #2
 8002e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002e36:	2302      	movs	r3, #2
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4805      	ldr	r0, [pc, #20]	; (8002e58 <HAL_TIM_MspPostInit+0xb4>)
 8002e42:	f002 fac7 	bl	80053d4 <HAL_GPIO_Init>
}
 8002e46:	bf00      	nop
 8002e48:	3728      	adds	r7, #40	; 0x28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40000c00 	.word	0x40000c00
 8002e58:	48001400 	.word	0x48001400

08002e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08c      	sub	sp, #48	; 0x30
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	f107 031c 	add.w	r3, r7, #28
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a3d      	ldr	r2, [pc, #244]	; (8002f70 <HAL_UART_MspInit+0x114>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d128      	bne.n	8002ed0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e7e:	4b3d      	ldr	r3, [pc, #244]	; (8002f74 <HAL_UART_MspInit+0x118>)
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	4a3c      	ldr	r2, [pc, #240]	; (8002f74 <HAL_UART_MspInit+0x118>)
 8002e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e88:	6593      	str	r3, [r2, #88]	; 0x58
 8002e8a:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <HAL_UART_MspInit+0x118>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	61bb      	str	r3, [r7, #24]
 8002e94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e96:	4b37      	ldr	r3, [pc, #220]	; (8002f74 <HAL_UART_MspInit+0x118>)
 8002e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9a:	4a36      	ldr	r2, [pc, #216]	; (8002f74 <HAL_UART_MspInit+0x118>)
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ea2:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <HAL_UART_MspInit+0x118>)
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 8002eae:	2370      	movs	r3, #112	; 0x70
 8002eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ebe:	2307      	movs	r3, #7
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ec2:	f107 031c 	add.w	r3, r7, #28
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	482b      	ldr	r0, [pc, #172]	; (8002f78 <HAL_UART_MspInit+0x11c>)
 8002eca:	f002 fa83 	bl	80053d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ece:	e04a      	b.n	8002f66 <HAL_UART_MspInit+0x10a>
  else if(huart->Instance==USART3)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a29      	ldr	r2, [pc, #164]	; (8002f7c <HAL_UART_MspInit+0x120>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d145      	bne.n	8002f66 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002eda:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <HAL_UART_MspInit+0x118>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ede:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <HAL_UART_MspInit+0x118>)
 8002ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee6:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <HAL_UART_MspInit+0x118>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ef2:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <HAL_UART_MspInit+0x118>)
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef6:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <HAL_UART_MspInit+0x118>)
 8002ef8:	f043 0308 	orr.w	r3, r3, #8
 8002efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002efe:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_UART_MspInit+0x118>)
 8002f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <HAL_UART_MspInit+0x118>)
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0e:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <HAL_UART_MspInit+0x118>)
 8002f10:	f043 0302 	orr.w	r3, r3, #2
 8002f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f16:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <HAL_UART_MspInit+0x118>)
 8002f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8002f22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f30:	2303      	movs	r3, #3
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f34:	2307      	movs	r3, #7
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f38:	f107 031c 	add.w	r3, r7, #28
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	480e      	ldr	r0, [pc, #56]	; (8002f78 <HAL_UART_MspInit+0x11c>)
 8002f40:	f002 fa48 	bl	80053d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8002f44:	f242 0302 	movw	r3, #8194	; 0x2002
 8002f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f52:	2303      	movs	r3, #3
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f56:	2307      	movs	r3, #7
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5a:	f107 031c 	add.w	r3, r7, #28
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4807      	ldr	r0, [pc, #28]	; (8002f80 <HAL_UART_MspInit+0x124>)
 8002f62:	f002 fa37 	bl	80053d4 <HAL_GPIO_Init>
}
 8002f66:	bf00      	nop
 8002f68:	3730      	adds	r7, #48	; 0x30
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40004400 	.word	0x40004400
 8002f74:	40021000 	.word	0x40021000
 8002f78:	48000c00 	.word	0x48000c00
 8002f7c:	40004800 	.word	0x40004800
 8002f80:	48000400 	.word	0x48000400

08002f84 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a2a      	ldr	r2, [pc, #168]	; (800303c <HAL_SAI_MspInit+0xb8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d124      	bne.n	8002fe0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8002f96:	4b2a      	ldr	r3, [pc, #168]	; (8003040 <HAL_SAI_MspInit+0xbc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10b      	bne.n	8002fb6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002f9e:	4b29      	ldr	r3, [pc, #164]	; (8003044 <HAL_SAI_MspInit+0xc0>)
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa2:	4a28      	ldr	r2, [pc, #160]	; (8003044 <HAL_SAI_MspInit+0xc0>)
 8002fa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fa8:	6613      	str	r3, [r2, #96]	; 0x60
 8002faa:	4b26      	ldr	r3, [pc, #152]	; (8003044 <HAL_SAI_MspInit+0xc0>)
 8002fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <HAL_SAI_MspInit+0xbc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	4a20      	ldr	r2, [pc, #128]	; (8003040 <HAL_SAI_MspInit+0xbc>)
 8002fbe:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin;
 8002fc0:	2374      	movs	r3, #116	; 0x74
 8002fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002fd0:	230d      	movs	r3, #13
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fd4:	f107 0314 	add.w	r3, r7, #20
 8002fd8:	4619      	mov	r1, r3
 8002fda:	481b      	ldr	r0, [pc, #108]	; (8003048 <HAL_SAI_MspInit+0xc4>)
 8002fdc:	f002 f9fa 	bl	80053d4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a19      	ldr	r2, [pc, #100]	; (800304c <HAL_SAI_MspInit+0xc8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d124      	bne.n	8003034 <HAL_SAI_MspInit+0xb0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_SAI_MspInit+0xbc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10b      	bne.n	800300a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <HAL_SAI_MspInit+0xc0>)
 8002ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff6:	4a13      	ldr	r2, [pc, #76]	; (8003044 <HAL_SAI_MspInit+0xc0>)
 8002ff8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ffc:	6613      	str	r3, [r2, #96]	; 0x60
 8002ffe:	4b11      	ldr	r3, [pc, #68]	; (8003044 <HAL_SAI_MspInit+0xc0>)
 8003000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800300a:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <HAL_SAI_MspInit+0xbc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3301      	adds	r3, #1
 8003010:	4a0b      	ldr	r2, [pc, #44]	; (8003040 <HAL_SAI_MspInit+0xbc>)
 8003012:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE7     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003018:	2302      	movs	r3, #2
 800301a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003020:	2300      	movs	r3, #0
 8003022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003024:	230d      	movs	r3, #13
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8003028:	f107 0314 	add.w	r3, r7, #20
 800302c:	4619      	mov	r1, r3
 800302e:	4806      	ldr	r0, [pc, #24]	; (8003048 <HAL_SAI_MspInit+0xc4>)
 8003030:	f002 f9d0 	bl	80053d4 <HAL_GPIO_Init>

    }
}
 8003034:	bf00      	nop
 8003036:	3728      	adds	r7, #40	; 0x28
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40015404 	.word	0x40015404
 8003040:	20000998 	.word	0x20000998
 8003044:	40021000 	.word	0x40021000
 8003048:	48001000 	.word	0x48001000
 800304c:	40015424 	.word	0x40015424

08003050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003054:	e7fe      	b.n	8003054 <NMI_Handler+0x4>

08003056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800305a:	e7fe      	b.n	800305a <HardFault_Handler+0x4>

0800305c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003060:	e7fe      	b.n	8003060 <MemManage_Handler+0x4>

08003062 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003062:	b480      	push	{r7}
 8003064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003066:	e7fe      	b.n	8003066 <BusFault_Handler+0x4>

08003068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800306c:	e7fe      	b.n	800306c <UsageFault_Handler+0x4>

0800306e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800306e:	b480      	push	{r7}
 8003070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800309c:	f000 f98c 	bl	80033b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030a8:	4802      	ldr	r0, [pc, #8]	; (80030b4 <DMA1_Channel1_IRQHandler+0x10>)
 80030aa:	f002 f881 	bl	80051b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20001064 	.word	0x20001064

080030b8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_SMBUS_EV_IRQHandler(&hsmbus2);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <I2C2_EV_IRQHandler+0x10>)
 80030be:	f007 f92f 	bl	800a320 <HAL_SMBUS_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200012f0 	.word	0x200012f0

080030cc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_SMBUS_ER_IRQHandler(&hsmbus2);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <I2C2_ER_IRQHandler+0x10>)
 80030d2:	f007 f9d3 	bl	800a47c <HAL_SMBUS_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200012f0 	.word	0x200012f0

080030e0 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <DFSDM1_FLT0_IRQHandler+0x10>)
 80030e6:	f001 fddf 	bl	8004ca8 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000d84 	.word	0x20000d84

080030f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <OTG_FS_IRQHandler+0x10>)
 80030fa:	f003 f8b9 	bl	8006270 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20002860 	.word	0x20002860

08003108 <_read>:
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	e00a      	b.n	8003130 <_read+0x28>
 800311a:	f3af 8000 	nop.w
 800311e:	4601      	mov	r1, r0
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	60ba      	str	r2, [r7, #8]
 8003126:	b2ca      	uxtb	r2, r1
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	3301      	adds	r3, #1
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	429a      	cmp	r2, r3
 8003136:	dbf0      	blt.n	800311a <_read+0x12>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_write>:
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	e009      	b.n	8003168 <_write+0x26>
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	60ba      	str	r2, [r7, #8]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f3af 8000 	nop.w
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	3301      	adds	r3, #1
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	dbf1      	blt.n	8003154 <_write+0x12>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <_close>:
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	f04f 33ff 	mov.w	r3, #4294967295
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <_fstat>:
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031a2:	605a      	str	r2, [r3, #4]
 80031a4:	2300      	movs	r3, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <_isatty>:
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	2301      	movs	r3, #1
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <_lseek>:
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	2300      	movs	r3, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <_sbrk>:
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	4a14      	ldr	r2, [pc, #80]	; (8003240 <_sbrk+0x5c>)
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <_sbrk+0x60>)
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	4b13      	ldr	r3, [pc, #76]	; (8003248 <_sbrk+0x64>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <_sbrk+0x22>
 8003200:	4b11      	ldr	r3, [pc, #68]	; (8003248 <_sbrk+0x64>)
 8003202:	4a12      	ldr	r2, [pc, #72]	; (800324c <_sbrk+0x68>)
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <_sbrk+0x64>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	429a      	cmp	r2, r3
 8003212:	d207      	bcs.n	8003224 <_sbrk+0x40>
 8003214:	f00e fec6 	bl	8011fa4 <__errno>
 8003218:	4602      	mov	r2, r0
 800321a:	230c      	movs	r3, #12
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	f04f 33ff 	mov.w	r3, #4294967295
 8003222:	e009      	b.n	8003238 <_sbrk+0x54>
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <_sbrk+0x64>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <_sbrk+0x64>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	4a05      	ldr	r2, [pc, #20]	; (8003248 <_sbrk+0x64>)
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	200a0000 	.word	0x200a0000
 8003244:	00000800 	.word	0x00000800
 8003248:	2000099c 	.word	0x2000099c
 800324c:	20002c70 	.word	0x20002c70

08003250 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003254:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <SystemInit+0x64>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <SystemInit+0x64>)
 800325c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <SystemInit+0x68>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <SystemInit+0x68>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003270:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <SystemInit+0x68>)
 8003272:	2200      	movs	r2, #0
 8003274:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003276:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <SystemInit+0x68>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a0f      	ldr	r2, [pc, #60]	; (80032b8 <SystemInit+0x68>)
 800327c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003280:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003284:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <SystemInit+0x68>)
 8003288:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800328c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <SystemInit+0x68>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a09      	ldr	r2, [pc, #36]	; (80032b8 <SystemInit+0x68>)
 8003294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003298:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800329a:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <SystemInit+0x68>)
 800329c:	2200      	movs	r2, #0
 800329e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <SystemInit+0x64>)
 80032a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032a6:	609a      	str	r2, [r3, #8]
#endif
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000ed00 	.word	0xe000ed00
 80032b8:	40021000 	.word	0x40021000

080032bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80032bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032c0:	f7ff ffc6 	bl	8003250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80032c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80032c6:	e003      	b.n	80032d0 <LoopCopyDataInit>

080032c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80032ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80032cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80032ce:	3104      	adds	r1, #4

080032d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80032d0:	480a      	ldr	r0, [pc, #40]	; (80032fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80032d2:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <LoopForever+0xe>)
	adds	r2, r0, r1
 80032d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80032d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80032d8:	d3f6      	bcc.n	80032c8 <CopyDataInit>
	ldr	r2, =_sbss
 80032da:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <LoopForever+0x12>)
	b	LoopFillZerobss
 80032dc:	e002      	b.n	80032e4 <LoopFillZerobss>

080032de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80032de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80032e0:	f842 3b04 	str.w	r3, [r2], #4

080032e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80032e4:	4b08      	ldr	r3, [pc, #32]	; (8003308 <LoopForever+0x16>)
	cmp	r2, r3
 80032e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80032e8:	d3f9      	bcc.n	80032de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032ea:	f00e fe61 	bl	8011fb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032ee:	f7fd fdf3 	bl	8000ed8 <main>

080032f2 <LoopForever>:

LoopForever:
    b LoopForever
 80032f2:	e7fe      	b.n	80032f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80032f4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80032f8:	0801a1b0 	.word	0x0801a1b0
	ldr	r0, =_sdata
 80032fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003300:	20000974 	.word	0x20000974
	ldr	r2, =_sbss
 8003304:	20000974 	.word	0x20000974
	ldr	r3, = _ebss
 8003308:	20002c6c 	.word	0x20002c6c

0800330c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800330c:	e7fe      	b.n	800330c <ADC1_IRQHandler>

0800330e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003318:	2003      	movs	r0, #3
 800331a:	f001 f843 	bl	80043a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800331e:	2000      	movs	r0, #0
 8003320:	f000 f80e 	bl	8003340 <HAL_InitTick>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	71fb      	strb	r3, [r7, #7]
 800332e:	e001      	b.n	8003334 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003330:	f7ff f912 	bl	8002558 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003334:	79fb      	ldrb	r3, [r7, #7]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800334c:	4b17      	ldr	r3, [pc, #92]	; (80033ac <HAL_InitTick+0x6c>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d023      	beq.n	800339c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003354:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <HAL_InitTick+0x70>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4b14      	ldr	r3, [pc, #80]	; (80033ac <HAL_InitTick+0x6c>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	4619      	mov	r1, r3
 800335e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003362:	fbb3 f3f1 	udiv	r3, r3, r1
 8003366:	fbb2 f3f3 	udiv	r3, r2, r3
 800336a:	4618      	mov	r0, r3
 800336c:	f001 f84f 	bl	800440e <HAL_SYSTICK_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10f      	bne.n	8003396 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b0f      	cmp	r3, #15
 800337a:	d809      	bhi.n	8003390 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800337c:	2200      	movs	r2, #0
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	f04f 30ff 	mov.w	r0, #4294967295
 8003384:	f001 f819 	bl	80043ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003388:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <HAL_InitTick+0x74>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e007      	b.n	80033a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	e004      	b.n	80033a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
 800339a:	e001      	b.n	80033a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000008 	.word	0x20000008
 80033b0:	20000000 	.word	0x20000000
 80033b4:	20000004 	.word	0x20000004

080033b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_IncTick+0x20>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_IncTick+0x24>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4413      	add	r3, r2
 80033c8:	4a04      	ldr	r2, [pc, #16]	; (80033dc <HAL_IncTick+0x24>)
 80033ca:	6013      	str	r3, [r2, #0]
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000008 	.word	0x20000008
 80033dc:	2000138c 	.word	0x2000138c

080033e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return uwTick;
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <HAL_GetTick+0x14>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	2000138c 	.word	0x2000138c

080033f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7ff ffee 	bl	80033e0 <HAL_GetTick>
 8003404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d005      	beq.n	800341e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003412:	4b09      	ldr	r3, [pc, #36]	; (8003438 <HAL_Delay+0x40>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800341e:	bf00      	nop
 8003420:	f7ff ffde 	bl	80033e0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	429a      	cmp	r2, r3
 800342e:	d8f7      	bhi.n	8003420 <HAL_Delay+0x28>
  {
  }
}
 8003430:	bf00      	nop
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20000008 	.word	0x20000008

0800343c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	609a      	str	r2, [r3, #8]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	609a      	str	r2, [r3, #8]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3360      	adds	r3, #96	; 0x60
 80034b6:	461a      	mov	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <LL_ADC_SetOffset+0x44>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80034dc:	bf00      	nop
 80034de:	371c      	adds	r7, #28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	03fff000 	.word	0x03fff000

080034ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3360      	adds	r3, #96	; 0x60
 80034fa:	461a      	mov	r2, r3
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3360      	adds	r3, #96	; 0x60
 8003528:	461a      	mov	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	431a      	orrs	r2, r3
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	615a      	str	r2, [r3, #20]
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3330      	adds	r3, #48	; 0x30
 8003584:	461a      	mov	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	0a1b      	lsrs	r3, r3, #8
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	4413      	add	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	211f      	movs	r1, #31
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	401a      	ands	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	0e9b      	lsrs	r3, r3, #26
 80035ac:	f003 011f 	and.w	r1, r3, #31
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 031f 	and.w	r3, r3, #31
 80035b6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ba:	431a      	orrs	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035c0:	bf00      	nop
 80035c2:	371c      	adds	r7, #28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3314      	adds	r3, #20
 80035dc:	461a      	mov	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	0e5b      	lsrs	r3, r3, #25
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	4413      	add	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	0d1b      	lsrs	r3, r3, #20
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	2107      	movs	r1, #7
 80035fa:	fa01 f303 	lsl.w	r3, r1, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	401a      	ands	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	0d1b      	lsrs	r3, r3, #20
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	431a      	orrs	r2, r3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363c:	43db      	mvns	r3, r3
 800363e:	401a      	ands	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f003 0318 	and.w	r3, r3, #24
 8003646:	4908      	ldr	r1, [pc, #32]	; (8003668 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003648:	40d9      	lsrs	r1, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	400b      	ands	r3, r1
 800364e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003652:	431a      	orrs	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	0007ffff 	.word	0x0007ffff

0800366c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800367c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6093      	str	r3, [r2, #8]
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a4:	d101      	bne.n	80036aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80036c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036f4:	d101      	bne.n	80036fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <LL_ADC_IsEnabled+0x18>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <LL_ADC_IsEnabled+0x1a>
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b04      	cmp	r3, #4
 8003740:	d101      	bne.n	8003746 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b08      	cmp	r3, #8
 8003766:	d101      	bne.n	800376c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003788:	2300      	movs	r3, #0
 800378a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e12d      	b.n	80039f2 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d109      	bne.n	80037b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7fe fefb 	bl	80025a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ff67 	bl	8003690 <LL_ADC_IsDeepPowerDownEnabled>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d004      	beq.n	80037d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff ff4d 	bl	800366c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff ff82 	bl	80036e0 <LL_ADC_IsInternalRegulatorEnabled>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d113      	bne.n	800380a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ff66 	bl	80036b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80037ec:	4b83      	ldr	r3, [pc, #524]	; (80039fc <HAL_ADC_Init+0x280>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	099b      	lsrs	r3, r3, #6
 80037f2:	4a83      	ldr	r2, [pc, #524]	; (8003a00 <HAL_ADC_Init+0x284>)
 80037f4:	fba2 2303 	umull	r2, r3, r2, r3
 80037f8:	099b      	lsrs	r3, r3, #6
 80037fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037fc:	e002      	b.n	8003804 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	3b01      	subs	r3, #1
 8003802:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f9      	bne.n	80037fe <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff ff66 	bl	80036e0 <LL_ADC_IsInternalRegulatorEnabled>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10d      	bne.n	8003836 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381e:	f043 0210 	orr.w	r2, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382a:	f043 0201 	orr.w	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff ff77 	bl	800372e <LL_ADC_REG_IsConversionOngoing>
 8003840:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 80c8 	bne.w	80039e0 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 80c4 	bne.w	80039e0 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003860:	f043 0202 	orr.w	r2, r3, #2
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ff4b 	bl	8003708 <LL_ADC_IsEnabled>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10b      	bne.n	8003890 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003878:	4862      	ldr	r0, [pc, #392]	; (8003a04 <HAL_ADC_Init+0x288>)
 800387a:	f7ff ff45 	bl	8003708 <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d105      	bne.n	8003890 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4619      	mov	r1, r3
 800388a:	485f      	ldr	r0, [pc, #380]	; (8003a08 <HAL_ADC_Init+0x28c>)
 800388c:	f7ff fdd6 	bl	800343c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	7e5b      	ldrb	r3, [r3, #25]
 8003894:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800389a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80038a0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80038a6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d106      	bne.n	80038cc <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	3b01      	subs	r3, #1
 80038c4:	045b      	lsls	r3, r3, #17
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d009      	beq.n	80038e8 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	4b47      	ldr	r3, [pc, #284]	; (8003a0c <HAL_ADC_Init+0x290>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	69b9      	ldr	r1, [r7, #24]
 80038f8:	430b      	orrs	r3, r1
 80038fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ff14 	bl	800372e <LL_ADC_REG_IsConversionOngoing>
 8003906:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff ff21 	bl	8003754 <LL_ADC_INJ_IsConversionOngoing>
 8003912:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d140      	bne.n	800399c <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d13d      	bne.n	800399c <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	7e1b      	ldrb	r3, [r3, #24]
 8003928:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800392a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003932:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003934:	4313      	orrs	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003942:	f023 0306 	bic.w	r3, r3, #6
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	69b9      	ldr	r1, [r7, #24]
 800394c:	430b      	orrs	r3, r1
 800394e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003956:	2b01      	cmp	r3, #1
 8003958:	d118      	bne.n	800398c <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003964:	f023 0304 	bic.w	r3, r3, #4
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003970:	4311      	orrs	r1, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003976:	4311      	orrs	r1, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800397c:	430a      	orrs	r2, r1
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0201 	orr.w	r2, r2, #1
 8003988:	611a      	str	r2, [r3, #16]
 800398a:	e007      	b.n	800399c <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0201 	bic.w	r2, r2, #1
 800399a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d10c      	bne.n	80039be <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f023 010f 	bic.w	r1, r3, #15
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	1e5a      	subs	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
 80039bc:	e007      	b.n	80039ce <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 020f 	bic.w	r2, r2, #15
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	f043 0201 	orr.w	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	659a      	str	r2, [r3, #88]	; 0x58
 80039de:	e007      	b.n	80039f0 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	f043 0210 	orr.w	r2, r3, #16
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80039f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000000 	.word	0x20000000
 8003a00:	053e2d63 	.word	0x053e2d63
 8003a04:	50040000 	.word	0x50040000
 8003a08:	50040300 	.word	0x50040300
 8003a0c:	fff0c007 	.word	0xfff0c007

08003a10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b0b6      	sub	sp, #216	; 0xd8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x22>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e3d4      	b.n	80041dc <HAL_ADC_ConfigChannel+0x7cc>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff fe75 	bl	800372e <LL_ADC_REG_IsConversionOngoing>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f040 83b9 	bne.w	80041be <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b05      	cmp	r3, #5
 8003a52:	d824      	bhi.n	8003a9e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	3b02      	subs	r3, #2
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d81b      	bhi.n	8003a96 <HAL_ADC_ConfigChannel+0x86>
 8003a5e:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <HAL_ADC_ConfigChannel+0x54>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a7d 	.word	0x08003a7d
 8003a6c:	08003a85 	.word	0x08003a85
 8003a70:	08003a8d 	.word	0x08003a8d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	220c      	movs	r2, #12
 8003a78:	605a      	str	r2, [r3, #4]
          break;
 8003a7a:	e011      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2212      	movs	r2, #18
 8003a80:	605a      	str	r2, [r3, #4]
          break;
 8003a82:	e00d      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2218      	movs	r2, #24
 8003a88:	605a      	str	r2, [r3, #4]
          break;
 8003a8a:	e009      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a92:	605a      	str	r2, [r3, #4]
          break;
 8003a94:	e004      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2206      	movs	r2, #6
 8003a9a:	605a      	str	r2, [r3, #4]
          break;
 8003a9c:	e000      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003a9e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6859      	ldr	r1, [r3, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	f7ff fd61 	bl	8003574 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fe39 	bl	800372e <LL_ADC_REG_IsConversionOngoing>
 8003abc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fe45 	bl	8003754 <LL_ADC_INJ_IsConversionOngoing>
 8003aca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ace:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f040 81c1 	bne.w	8003e5a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ad8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f040 81bc 	bne.w	8003e5a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aea:	d10f      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2200      	movs	r2, #0
 8003af6:	4619      	mov	r1, r3
 8003af8:	f7ff fd68 	bl	80035cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fd22 	bl	800354e <LL_ADC_SetSamplingTimeCommonConfig>
 8003b0a:	e00e      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	6819      	ldr	r1, [r3, #0]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f7ff fd57 	bl	80035cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff fd12 	bl	800354e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	08db      	lsrs	r3, r3, #3
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d00a      	beq.n	8003b62 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	6919      	ldr	r1, [r3, #16]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b5c:	f7ff fca2 	bl	80034a4 <LL_ADC_SetOffset>
 8003b60:	e17b      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fcbf 	bl	80034ec <LL_ADC_GetOffsetChannel>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10a      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x17e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fcb4 	bl	80034ec <LL_ADC_GetOffsetChannel>
 8003b84:	4603      	mov	r3, r0
 8003b86:	0e9b      	lsrs	r3, r3, #26
 8003b88:	f003 021f 	and.w	r2, r3, #31
 8003b8c:	e01e      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x1bc>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2100      	movs	r1, #0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff fca9 	bl	80034ec <LL_ADC_GetOffsetChannel>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ba4:	fa93 f3a3 	rbit	r3, r3
 8003ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003bac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003bb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	e004      	b.n	8003bca <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003bc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bc4:	fab3 f383 	clz	r3, r3
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d105      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x1d4>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	0e9b      	lsrs	r3, r3, #26
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	e018      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x206>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003bf0:	fa93 f3a3 	rbit	r3, r3
 8003bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003c00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003c08:	2320      	movs	r3, #32
 8003c0a:	e004      	b.n	8003c16 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003c0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c10:	fab3 f383 	clz	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d106      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2100      	movs	r1, #0
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff fc78 	bl	8003518 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fc5c 	bl	80034ec <LL_ADC_GetOffsetChannel>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x244>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2101      	movs	r1, #1
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fc51 	bl	80034ec <LL_ADC_GetOffsetChannel>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	0e9b      	lsrs	r3, r3, #26
 8003c4e:	f003 021f 	and.w	r2, r3, #31
 8003c52:	e01e      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x282>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff fc46 	bl	80034ec <LL_ADC_GetOffsetChannel>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003c82:	2320      	movs	r3, #32
 8003c84:	e004      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003c86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c8a:	fab3 f383 	clz	r3, r3
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d105      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x29a>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	0e9b      	lsrs	r3, r3, #26
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	e018      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x2cc>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003cbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003cc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003cc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003cce:	2320      	movs	r3, #32
 8003cd0:	e004      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003cd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cd6:	fab3 f383 	clz	r3, r3
 8003cda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d106      	bne.n	8003cee <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fc15 	bl	8003518 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2102      	movs	r1, #2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff fbf9 	bl	80034ec <LL_ADC_GetOffsetChannel>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10a      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0x30a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2102      	movs	r1, #2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff fbee 	bl	80034ec <LL_ADC_GetOffsetChannel>
 8003d10:	4603      	mov	r3, r0
 8003d12:	0e9b      	lsrs	r3, r3, #26
 8003d14:	f003 021f 	and.w	r2, r3, #31
 8003d18:	e01e      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x348>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2102      	movs	r1, #2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fbe3 	bl	80034ec <LL_ADC_GetOffsetChannel>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003d38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003d40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003d48:	2320      	movs	r3, #32
 8003d4a:	e004      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003d4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d50:	fab3 f383 	clz	r3, r3
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d105      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x360>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	0e9b      	lsrs	r3, r3, #26
 8003d6a:	f003 031f 	and.w	r3, r3, #31
 8003d6e:	e016      	b.n	8003d9e <HAL_ADC_ConfigChannel+0x38e>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d7c:	fa93 f3a3 	rbit	r3, r3
 8003d80:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003d82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003d90:	2320      	movs	r3, #32
 8003d92:	e004      	b.n	8003d9e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d106      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2200      	movs	r2, #0
 8003da8:	2102      	movs	r1, #2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fbb4 	bl	8003518 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2103      	movs	r1, #3
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fb98 	bl	80034ec <LL_ADC_GetOffsetChannel>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x3cc>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2103      	movs	r1, #3
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fb8d 	bl	80034ec <LL_ADC_GetOffsetChannel>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	0e9b      	lsrs	r3, r3, #26
 8003dd6:	f003 021f 	and.w	r2, r3, #31
 8003dda:	e017      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x3fc>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2103      	movs	r1, #3
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff fb82 	bl	80034ec <LL_ADC_GetOffsetChannel>
 8003de8:	4603      	mov	r3, r0
 8003dea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003df6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003dfe:	2320      	movs	r3, #32
 8003e00:	e003      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e04:	fab3 f383 	clz	r3, r3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d105      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x414>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	0e9b      	lsrs	r3, r3, #26
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	e011      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x438>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e2c:	fa93 f3a3 	rbit	r3, r3
 8003e30:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003e32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e34:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003e3c:	2320      	movs	r3, #32
 8003e3e:	e003      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e42:	fab3 f383 	clz	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d106      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2200      	movs	r2, #0
 8003e52:	2103      	movs	r1, #3
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fb5f 	bl	8003518 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fc52 	bl	8003708 <LL_ADC_IsEnabled>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f040 8140 	bne.w	80040ec <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6819      	ldr	r1, [r3, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f7ff fbd3 	bl	8003624 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	4a8f      	ldr	r2, [pc, #572]	; (80040c0 <HAL_ADC_ConfigChannel+0x6b0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	f040 8131 	bne.w	80040ec <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10b      	bne.n	8003eb2 <HAL_ADC_ConfigChannel+0x4a2>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	0e9b      	lsrs	r3, r3, #26
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	f003 031f 	and.w	r3, r3, #31
 8003ea6:	2b09      	cmp	r3, #9
 8003ea8:	bf94      	ite	ls
 8003eaa:	2301      	movls	r3, #1
 8003eac:	2300      	movhi	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	e019      	b.n	8003ee6 <HAL_ADC_ConfigChannel+0x4d6>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eba:	fa93 f3a3 	rbit	r3, r3
 8003ebe:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ec2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003eca:	2320      	movs	r3, #32
 8003ecc:	e003      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ed0:	fab3 f383 	clz	r3, r3
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	f003 031f 	and.w	r3, r3, #31
 8003edc:	2b09      	cmp	r3, #9
 8003ede:	bf94      	ite	ls
 8003ee0:	2301      	movls	r3, #1
 8003ee2:	2300      	movhi	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d079      	beq.n	8003fde <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d107      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x4f6>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	0e9b      	lsrs	r3, r3, #26
 8003efc:	3301      	adds	r3, #1
 8003efe:	069b      	lsls	r3, r3, #26
 8003f00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f04:	e015      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x522>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f0e:	fa93 f3a3 	rbit	r3, r3
 8003f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f16:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003f1e:	2320      	movs	r3, #32
 8003f20:	e003      	b.n	8003f2a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f24:	fab3 f383 	clz	r3, r3
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	069b      	lsls	r3, r3, #26
 8003f2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x542>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	0e9b      	lsrs	r3, r3, #26
 8003f44:	3301      	adds	r3, #1
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f50:	e017      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x572>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f5a:	fa93 f3a3 	rbit	r3, r3
 8003f5e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f62:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003f6a:	2320      	movs	r3, #32
 8003f6c:	e003      	b.n	8003f76 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f70:	fab3 f383 	clz	r3, r3
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	3301      	adds	r3, #1
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f82:	ea42 0103 	orr.w	r1, r2, r3
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0x598>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	0e9b      	lsrs	r3, r3, #26
 8003f98:	3301      	adds	r3, #1
 8003f9a:	f003 021f 	and.w	r2, r3, #31
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	4413      	add	r3, r2
 8003fa4:	051b      	lsls	r3, r3, #20
 8003fa6:	e018      	b.n	8003fda <HAL_ADC_ConfigChannel+0x5ca>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	fa93 f3a3 	rbit	r3, r3
 8003fb4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	e003      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc6:	fab3 f383 	clz	r3, r3
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	3301      	adds	r3, #1
 8003fce:	f003 021f 	and.w	r2, r3, #31
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	4413      	add	r3, r2
 8003fd8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	e081      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d107      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x5ea>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	0e9b      	lsrs	r3, r3, #26
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	069b      	lsls	r3, r3, #26
 8003ff4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ff8:	e015      	b.n	8004026 <HAL_ADC_ConfigChannel+0x616>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	fa93 f3a3 	rbit	r3, r3
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8004012:	2320      	movs	r3, #32
 8004014:	e003      	b.n	800401e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	fab3 f383 	clz	r3, r3
 800401c:	b2db      	uxtb	r3, r3
 800401e:	3301      	adds	r3, #1
 8004020:	069b      	lsls	r3, r3, #26
 8004022:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402e:	2b00      	cmp	r3, #0
 8004030:	d109      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x636>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	0e9b      	lsrs	r3, r3, #26
 8004038:	3301      	adds	r3, #1
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	2101      	movs	r1, #1
 8004040:	fa01 f303 	lsl.w	r3, r1, r3
 8004044:	e017      	b.n	8004076 <HAL_ADC_ConfigChannel+0x666>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	fa93 f3a3 	rbit	r3, r3
 8004052:	61fb      	str	r3, [r7, #28]
  return result;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800405e:	2320      	movs	r3, #32
 8004060:	e003      	b.n	800406a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	fab3 f383 	clz	r3, r3
 8004068:	b2db      	uxtb	r3, r3
 800406a:	3301      	adds	r3, #1
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	2101      	movs	r1, #1
 8004072:	fa01 f303 	lsl.w	r3, r1, r3
 8004076:	ea42 0103 	orr.w	r1, r2, r3
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10d      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x692>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	0e9b      	lsrs	r3, r3, #26
 800408c:	3301      	adds	r3, #1
 800408e:	f003 021f 	and.w	r2, r3, #31
 8004092:	4613      	mov	r3, r2
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	4413      	add	r3, r2
 8004098:	3b1e      	subs	r3, #30
 800409a:	051b      	lsls	r3, r3, #20
 800409c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040a0:	e01e      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x6d0>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	fa93 f3a3 	rbit	r3, r3
 80040ae:	613b      	str	r3, [r7, #16]
  return result;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d104      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80040ba:	2320      	movs	r3, #32
 80040bc:	e006      	b.n	80040cc <HAL_ADC_ConfigChannel+0x6bc>
 80040be:	bf00      	nop
 80040c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	fab3 f383 	clz	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	3301      	adds	r3, #1
 80040ce:	f003 021f 	and.w	r2, r3, #31
 80040d2:	4613      	mov	r3, r2
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	4413      	add	r3, r2
 80040d8:	3b1e      	subs	r3, #30
 80040da:	051b      	lsls	r3, r3, #20
 80040dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040e0:	430b      	orrs	r3, r1
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	6892      	ldr	r2, [r2, #8]
 80040e6:	4619      	mov	r1, r3
 80040e8:	f7ff fa70 	bl	80035cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	4b3c      	ldr	r3, [pc, #240]	; (80041e4 <HAL_ADC_ConfigChannel+0x7d4>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d06b      	beq.n	80041d0 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040f8:	483b      	ldr	r0, [pc, #236]	; (80041e8 <HAL_ADC_ConfigChannel+0x7d8>)
 80040fa:	f7ff f9c5 	bl	8003488 <LL_ADC_GetCommonPathInternalCh>
 80040fe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a39      	ldr	r2, [pc, #228]	; (80041ec <HAL_ADC_ConfigChannel+0x7dc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d126      	bne.n	800415a <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800410c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004110:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d120      	bne.n	800415a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a34      	ldr	r2, [pc, #208]	; (80041f0 <HAL_ADC_ConfigChannel+0x7e0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d156      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004122:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004126:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800412a:	4619      	mov	r1, r3
 800412c:	482e      	ldr	r0, [pc, #184]	; (80041e8 <HAL_ADC_ConfigChannel+0x7d8>)
 800412e:	f7ff f998 	bl	8003462 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004132:	4b30      	ldr	r3, [pc, #192]	; (80041f4 <HAL_ADC_ConfigChannel+0x7e4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	099b      	lsrs	r3, r3, #6
 8004138:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <HAL_ADC_ConfigChannel+0x7e8>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	099a      	lsrs	r2, r3, #6
 8004140:	4613      	mov	r3, r2
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800414a:	e002      	b.n	8004152 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3b01      	subs	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f9      	bne.n	800414c <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004158:	e03a      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a27      	ldr	r2, [pc, #156]	; (80041fc <HAL_ADC_ConfigChannel+0x7ec>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d113      	bne.n	800418c <HAL_ADC_ConfigChannel+0x77c>
 8004164:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10d      	bne.n	800418c <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1e      	ldr	r2, [pc, #120]	; (80041f0 <HAL_ADC_ConfigChannel+0x7e0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d12a      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800417a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800417e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004182:	4619      	mov	r1, r3
 8004184:	4818      	ldr	r0, [pc, #96]	; (80041e8 <HAL_ADC_ConfigChannel+0x7d8>)
 8004186:	f7ff f96c 	bl	8003462 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800418a:	e021      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <HAL_ADC_ConfigChannel+0x7f0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d11c      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800419a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d116      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a12      	ldr	r2, [pc, #72]	; (80041f0 <HAL_ADC_ConfigChannel+0x7e0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d111      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041b4:	4619      	mov	r1, r3
 80041b6:	480c      	ldr	r0, [pc, #48]	; (80041e8 <HAL_ADC_ConfigChannel+0x7d8>)
 80041b8:	f7ff f953 	bl	8003462 <LL_ADC_SetCommonPathInternalCh>
 80041bc:	e008      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c2:	f043 0220 	orr.w	r2, r3, #32
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80041d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80041dc:	4618      	mov	r0, r3
 80041de:	37d8      	adds	r7, #216	; 0xd8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	80080000 	.word	0x80080000
 80041e8:	50040300 	.word	0x50040300
 80041ec:	c7520000 	.word	0xc7520000
 80041f0:	50040000 	.word	0x50040000
 80041f4:	20000000 	.word	0x20000000
 80041f8:	053e2d63 	.word	0x053e2d63
 80041fc:	cb840000 	.word	0xcb840000
 8004200:	80000001 	.word	0x80000001

08004204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004214:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <__NVIC_SetPriorityGrouping+0x44>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004220:	4013      	ands	r3, r2
 8004222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800422c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004236:	4a04      	ldr	r2, [pc, #16]	; (8004248 <__NVIC_SetPriorityGrouping+0x44>)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	60d3      	str	r3, [r2, #12]
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	e000ed00 	.word	0xe000ed00

0800424c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004250:	4b04      	ldr	r3, [pc, #16]	; (8004264 <__NVIC_GetPriorityGrouping+0x18>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	0a1b      	lsrs	r3, r3, #8
 8004256:	f003 0307 	and.w	r3, r3, #7
}
 800425a:	4618      	mov	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	e000ed00 	.word	0xe000ed00

08004268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004276:	2b00      	cmp	r3, #0
 8004278:	db0b      	blt.n	8004292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	f003 021f 	and.w	r2, r3, #31
 8004280:	4907      	ldr	r1, [pc, #28]	; (80042a0 <__NVIC_EnableIRQ+0x38>)
 8004282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	2001      	movs	r0, #1
 800428a:	fa00 f202 	lsl.w	r2, r0, r2
 800428e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	e000e100 	.word	0xe000e100

080042a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4603      	mov	r3, r0
 80042ac:	6039      	str	r1, [r7, #0]
 80042ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	db0a      	blt.n	80042ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	490c      	ldr	r1, [pc, #48]	; (80042f0 <__NVIC_SetPriority+0x4c>)
 80042be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c2:	0112      	lsls	r2, r2, #4
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	440b      	add	r3, r1
 80042c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042cc:	e00a      	b.n	80042e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	4908      	ldr	r1, [pc, #32]	; (80042f4 <__NVIC_SetPriority+0x50>)
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	3b04      	subs	r3, #4
 80042dc:	0112      	lsls	r2, r2, #4
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	440b      	add	r3, r1
 80042e2:	761a      	strb	r2, [r3, #24]
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	e000e100 	.word	0xe000e100
 80042f4:	e000ed00 	.word	0xe000ed00

080042f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b089      	sub	sp, #36	; 0x24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f1c3 0307 	rsb	r3, r3, #7
 8004312:	2b04      	cmp	r3, #4
 8004314:	bf28      	it	cs
 8004316:	2304      	movcs	r3, #4
 8004318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	3304      	adds	r3, #4
 800431e:	2b06      	cmp	r3, #6
 8004320:	d902      	bls.n	8004328 <NVIC_EncodePriority+0x30>
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	3b03      	subs	r3, #3
 8004326:	e000      	b.n	800432a <NVIC_EncodePriority+0x32>
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800432c:	f04f 32ff 	mov.w	r2, #4294967295
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	43da      	mvns	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	401a      	ands	r2, r3
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004340:	f04f 31ff 	mov.w	r1, #4294967295
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	fa01 f303 	lsl.w	r3, r1, r3
 800434a:	43d9      	mvns	r1, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004350:	4313      	orrs	r3, r2
         );
}
 8004352:	4618      	mov	r0, r3
 8004354:	3724      	adds	r7, #36	; 0x24
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
	...

08004360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3b01      	subs	r3, #1
 800436c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004370:	d301      	bcc.n	8004376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004372:	2301      	movs	r3, #1
 8004374:	e00f      	b.n	8004396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004376:	4a0a      	ldr	r2, [pc, #40]	; (80043a0 <SysTick_Config+0x40>)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3b01      	subs	r3, #1
 800437c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800437e:	210f      	movs	r1, #15
 8004380:	f04f 30ff 	mov.w	r0, #4294967295
 8004384:	f7ff ff8e 	bl	80042a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004388:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <SysTick_Config+0x40>)
 800438a:	2200      	movs	r2, #0
 800438c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800438e:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <SysTick_Config+0x40>)
 8004390:	2207      	movs	r2, #7
 8004392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	e000e010 	.word	0xe000e010

080043a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff ff29 	bl	8004204 <__NVIC_SetPriorityGrouping>
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b086      	sub	sp, #24
 80043be:	af00      	add	r7, sp, #0
 80043c0:	4603      	mov	r3, r0
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
 80043c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043cc:	f7ff ff3e 	bl	800424c <__NVIC_GetPriorityGrouping>
 80043d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	6978      	ldr	r0, [r7, #20]
 80043d8:	f7ff ff8e 	bl	80042f8 <NVIC_EncodePriority>
 80043dc:	4602      	mov	r2, r0
 80043de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e2:	4611      	mov	r1, r2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff ff5d 	bl	80042a4 <__NVIC_SetPriority>
}
 80043ea:	bf00      	nop
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	4603      	mov	r3, r0
 80043fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff ff31 	bl	8004268 <__NVIC_EnableIRQ>
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff ffa2 	bl	8004360 <SysTick_Config>
 800441c:	4603      	mov	r3, r0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e054      	b.n	80044e4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	7f5b      	ldrb	r3, [r3, #29]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d105      	bne.n	8004450 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fe f930 	bl	80026b0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	791b      	ldrb	r3, [r3, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10c      	bne.n	8004478 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a22      	ldr	r2, [pc, #136]	; (80044ec <HAL_CRC_Init+0xc4>)
 8004464:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0218 	bic.w	r2, r2, #24
 8004474:	609a      	str	r2, [r3, #8]
 8004476:	e00c      	b.n	8004492 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6899      	ldr	r1, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	461a      	mov	r2, r3
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f834 	bl	80044f0 <HAL_CRCEx_Polynomial_Set>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e028      	b.n	80044e4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	795b      	ldrb	r3, [r3, #5]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d105      	bne.n	80044a6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f04f 32ff 	mov.w	r2, #4294967295
 80044a2:	611a      	str	r2, [r3, #16]
 80044a4:	e004      	b.n	80044b0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6912      	ldr	r2, [r2, #16]
 80044ae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695a      	ldr	r2, [r3, #20]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	04c11db7 	.word	0x04c11db7

080044f0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004500:	231f      	movs	r3, #31
 8004502:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004504:	bf00      	nop
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1e5a      	subs	r2, r3, #1
 800450a:	613a      	str	r2, [r7, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <HAL_CRCEx_Polynomial_Set+0x34>
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b18      	cmp	r3, #24
 8004528:	d846      	bhi.n	80045b8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800452a:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <HAL_CRCEx_Polynomial_Set+0x40>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	080045bf 	.word	0x080045bf
 8004534:	080045b9 	.word	0x080045b9
 8004538:	080045b9 	.word	0x080045b9
 800453c:	080045b9 	.word	0x080045b9
 8004540:	080045b9 	.word	0x080045b9
 8004544:	080045b9 	.word	0x080045b9
 8004548:	080045b9 	.word	0x080045b9
 800454c:	080045b9 	.word	0x080045b9
 8004550:	080045ad 	.word	0x080045ad
 8004554:	080045b9 	.word	0x080045b9
 8004558:	080045b9 	.word	0x080045b9
 800455c:	080045b9 	.word	0x080045b9
 8004560:	080045b9 	.word	0x080045b9
 8004564:	080045b9 	.word	0x080045b9
 8004568:	080045b9 	.word	0x080045b9
 800456c:	080045b9 	.word	0x080045b9
 8004570:	080045a1 	.word	0x080045a1
 8004574:	080045b9 	.word	0x080045b9
 8004578:	080045b9 	.word	0x080045b9
 800457c:	080045b9 	.word	0x080045b9
 8004580:	080045b9 	.word	0x080045b9
 8004584:	080045b9 	.word	0x080045b9
 8004588:	080045b9 	.word	0x080045b9
 800458c:	080045b9 	.word	0x080045b9
 8004590:	08004595 	.word	0x08004595
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	2b06      	cmp	r3, #6
 8004598:	d913      	bls.n	80045c2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800459e:	e010      	b.n	80045c2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b07      	cmp	r3, #7
 80045a4:	d90f      	bls.n	80045c6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80045aa:	e00c      	b.n	80045c6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2b0f      	cmp	r3, #15
 80045b0:	d90b      	bls.n	80045ca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80045b6:	e008      	b.n	80045ca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	75fb      	strb	r3, [r7, #23]
      break;
 80045bc:	e006      	b.n	80045cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80045be:	bf00      	nop
 80045c0:	e004      	b.n	80045cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80045c2:	bf00      	nop
 80045c4:	e002      	b.n	80045cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80045c6:	bf00      	nop
 80045c8:	e000      	b.n	80045cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80045ca:	bf00      	nop
  }
  if (status == HAL_OK)
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10d      	bne.n	80045ee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f023 0118 	bic.w	r1, r3, #24
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80045ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	371c      	adds	r7, #28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e014      	b.n	8004638 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	791b      	ldrb	r3, [r3, #4]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d105      	bne.n	8004624 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fe f866 	bl	80026f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	795b      	ldrb	r3, [r3, #5]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_DAC_ConfigChannel+0x1c>
 8004658:	2302      	movs	r3, #2
 800465a:	e12a      	b.n	80048b2 <HAL_DAC_ConfigChannel+0x272>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2202      	movs	r2, #2
 8004666:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b04      	cmp	r3, #4
 800466e:	d174      	bne.n	800475a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004670:	f7fe feb6 	bl	80033e0 <HAL_GetTick>
 8004674:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d134      	bne.n	80046e6 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800467c:	e011      	b.n	80046a2 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800467e:	f7fe feaf 	bl	80033e0 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d90a      	bls.n	80046a2 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f043 0208 	orr.w	r2, r3, #8
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2203      	movs	r2, #3
 800469c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e107      	b.n	80048b2 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e6      	bne.n	800467e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80046b0:	2001      	movs	r0, #1
 80046b2:	f7fe fea1 	bl	80033f8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	69d2      	ldr	r2, [r2, #28]
 80046be:	641a      	str	r2, [r3, #64]	; 0x40
 80046c0:	e01e      	b.n	8004700 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80046c2:	f7fe fe8d 	bl	80033e0 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d90a      	bls.n	80046e6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	f043 0208 	orr.w	r2, r3, #8
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2203      	movs	r2, #3
 80046e0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e0e5      	b.n	80048b2 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	dbe8      	blt.n	80046c2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80046f0:	2001      	movs	r0, #1
 80046f2:	f7fe fe81 	bl	80033f8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	69d2      	ldr	r2, [r2, #28]
 80046fe:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004710:	fa01 f303 	lsl.w	r3, r1, r3
 8004714:	43db      	mvns	r3, r3
 8004716:	ea02 0103 	and.w	r1, r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	6a1a      	ldr	r2, [r3, #32]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	409a      	lsls	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f003 0310 	and.w	r3, r3, #16
 800473a:	21ff      	movs	r1, #255	; 0xff
 800473c:	fa01 f303 	lsl.w	r3, r1, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	ea02 0103 	and.w	r1, r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	409a      	lsls	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d11d      	bne.n	800479e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	221f      	movs	r2, #31
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43db      	mvns	r3, r3
 8004778:	69fa      	ldr	r2, [r7, #28]
 800477a:	4013      	ands	r3, r2
 800477c:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	4313      	orrs	r3, r2
 8004794:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a4:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2207      	movs	r2, #7
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43db      	mvns	r3, r3
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	4013      	ands	r3, r2
 80047b8:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6819      	ldr	r1, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43da      	mvns	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	400a      	ands	r2, r1
 8004802:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	43db      	mvns	r3, r3
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	4013      	ands	r3, r2
 8004820:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	4313      	orrs	r3, r2
 8004838:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004842:	d104      	bne.n	800484e <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	e018      	b.n	8004880 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d104      	bne.n	8004860 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	e00f      	b.n	8004880 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8004860:	f003 fb20 	bl	8007ea4 <HAL_RCC_GetHCLKFreq>
 8004864:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4a14      	ldr	r2, [pc, #80]	; (80048bc <HAL_DAC_ConfigChannel+0x27c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d904      	bls.n	8004878 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004874:	61fb      	str	r3, [r7, #28]
 8004876:	e003      	b.n	8004880 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800487e:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6819      	ldr	r1, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	22c0      	movs	r2, #192	; 0xc0
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43da      	mvns	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	400a      	ands	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3720      	adds	r7, #32
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	04c4b400 	.word	0x04c4b400

080048c0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e0ac      	b.n	8004a2c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fb76 	bl	8004fc8 <DFSDM_GetChannelFromInstance>
 80048dc:	4602      	mov	r2, r0
 80048de:	4b55      	ldr	r3, [pc, #340]	; (8004a34 <HAL_DFSDM_ChannelInit+0x174>)
 80048e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e09f      	b.n	8004a2c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7fd ffb7 	bl	8002860 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80048f2:	4b51      	ldr	r3, [pc, #324]	; (8004a38 <HAL_DFSDM_ChannelInit+0x178>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3301      	adds	r3, #1
 80048f8:	4a4f      	ldr	r2, [pc, #316]	; (8004a38 <HAL_DFSDM_ChannelInit+0x178>)
 80048fa:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80048fc:	4b4e      	ldr	r3, [pc, #312]	; (8004a38 <HAL_DFSDM_ChannelInit+0x178>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d125      	bne.n	8004950 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004904:	4b4d      	ldr	r3, [pc, #308]	; (8004a3c <HAL_DFSDM_ChannelInit+0x17c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a4c      	ldr	r2, [pc, #304]	; (8004a3c <HAL_DFSDM_ChannelInit+0x17c>)
 800490a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800490e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004910:	4b4a      	ldr	r3, [pc, #296]	; (8004a3c <HAL_DFSDM_ChannelInit+0x17c>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	4948      	ldr	r1, [pc, #288]	; (8004a3c <HAL_DFSDM_ChannelInit+0x17c>)
 800491a:	4313      	orrs	r3, r2
 800491c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800491e:	4b47      	ldr	r3, [pc, #284]	; (8004a3c <HAL_DFSDM_ChannelInit+0x17c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a46      	ldr	r2, [pc, #280]	; (8004a3c <HAL_DFSDM_ChannelInit+0x17c>)
 8004924:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004928:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	791b      	ldrb	r3, [r3, #4]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d108      	bne.n	8004944 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004932:	4b42      	ldr	r3, [pc, #264]	; (8004a3c <HAL_DFSDM_ChannelInit+0x17c>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	3b01      	subs	r3, #1
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	493f      	ldr	r1, [pc, #252]	; (8004a3c <HAL_DFSDM_ChannelInit+0x17c>)
 8004940:	4313      	orrs	r3, r2
 8004942:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004944:	4b3d      	ldr	r3, [pc, #244]	; (8004a3c <HAL_DFSDM_ChannelInit+0x17c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a3c      	ldr	r2, [pc, #240]	; (8004a3c <HAL_DFSDM_ChannelInit+0x17c>)
 800494a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800494e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800495e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800496e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004974:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 020f 	bic.w	r2, r2, #15
 800498c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6819      	ldr	r1, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80049b4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6899      	ldr	r1, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	3b01      	subs	r3, #1
 80049c6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f002 0207 	and.w	r2, r2, #7
 80049e0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6859      	ldr	r1, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a0c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fad4 	bl	8004fc8 <DFSDM_GetChannelFromInstance>
 8004a20:	4601      	mov	r1, r0
 8004a22:	4a04      	ldr	r2, [pc, #16]	; (8004a34 <HAL_DFSDM_ChannelInit+0x174>)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	200009a4 	.word	0x200009a4
 8004a38:	200009a0 	.word	0x200009a0
 8004a3c:	40016000 	.word	0x40016000

08004a40 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e0ca      	b.n	8004c10 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a66      	ldr	r2, [pc, #408]	; (8004c18 <HAL_DFSDM_FilterInit+0x1b0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d109      	bne.n	8004a98 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d003      	beq.n	8004a94 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0bb      	b.n	8004c10 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7fd fe5b 	bl	800276c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004ac4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	7a1b      	ldrb	r3, [r3, #8]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d108      	bne.n	8004ae0 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	e007      	b.n	8004af0 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004aee:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	7a5b      	ldrb	r3, [r3, #9]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d108      	bne.n	8004b0a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	e007      	b.n	8004b1a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004b18:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b28:	f023 0308 	bic.w	r3, r3, #8
 8004b2c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d108      	bne.n	8004b48 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6819      	ldr	r1, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	695a      	ldr	r2, [r3, #20]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	7c1b      	ldrb	r3, [r3, #16]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d108      	bne.n	8004b62 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0210 	orr.w	r2, r2, #16
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e007      	b.n	8004b72 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0210 	bic.w	r2, r2, #16
 8004b70:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	7c5b      	ldrb	r3, [r3, #17]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d108      	bne.n	8004b8c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0220 	orr.w	r2, r2, #32
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	e007      	b.n	8004b9c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0220 	bic.w	r2, r2, #32
 8004b9a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8004baa:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8004bae:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6959      	ldr	r1, [r3, #20]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004bc2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8004bca:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699a      	ldr	r2, [r3, #24]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	7c1a      	ldrb	r2, [r3, #16]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f042 0201 	orr.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40016100 	.word	0x40016100

08004c1c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d02e      	beq.n	8004c94 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004c3c:	2bff      	cmp	r3, #255	; 0xff
 8004c3e:	d029      	beq.n	8004c94 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	6812      	ldr	r2, [r2, #0]
 8004c4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c52:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d10d      	bne.n	8004c76 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e00a      	b.n	8004c8c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6819      	ldr	r1, [r3, #0]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
 8004c92:	e001      	b.n	8004c98 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	371c      	adds	r7, #28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
	...

08004ca8 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08c      	sub	sp, #48	; 0x30
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00f      	beq.n	8004cea <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2208      	movs	r2, #8
 8004cda:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f966 	bl	8004fb4 <HAL_DFSDM_FilterErrorCallback>
 8004ce8:	e13b      	b.n	8004f62 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00f      	beq.n	8004d14 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2204      	movs	r2, #4
 8004d04:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f951 	bl	8004fb4 <HAL_DFSDM_FilterErrorCallback>
 8004d12:	e126      	b.n	8004f62 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d025      	beq.n	8004d6a <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d020      	beq.n	8004d6a <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f923 	bl	8004f74 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f040 8114 	bne.w	8004f60 <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f040 810f 	bne.w	8004f60 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0202 	bic.w	r2, r2, #2
 8004d50:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d101      	bne.n	8004d60 <HAL_DFSDM_IRQHandler+0xb8>
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	e000      	b.n	8004d62 <HAL_DFSDM_IRQHandler+0xba>
 8004d60:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004d68:	e0fa      	b.n	8004f60 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d034      	beq.n	8004dde <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d02f      	beq.n	8004dde <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f902 	bl	8004f88 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d88:	1e5a      	subs	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f040 80e5 	bne.w	8004f62 <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d112      	bne.n	8004dc6 <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0201 	bic.w	r2, r2, #1
 8004dae:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d101      	bne.n	8004dbe <HAL_DFSDM_IRQHandler+0x116>
 8004dba:	2201      	movs	r2, #1
 8004dbc:	e000      	b.n	8004dc0 <HAL_DFSDM_IRQHandler+0x118>
 8004dbe:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d102      	bne.n	8004dd6 <HAL_DFSDM_IRQHandler+0x12e>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd4:	e000      	b.n	8004dd8 <HAL_DFSDM_IRQHandler+0x130>
 8004dd6:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8004ddc:	e0c1      	b.n	8004f62 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f003 0310 	and.w	r3, r3, #16
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d03d      	beq.n	8004e64 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d038      	beq.n	8004e64 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8004dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_DFSDM_IRQHandler+0x162>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <HAL_DFSDM_IRQHandler+0x164>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8004e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e16:	0a1b      	lsrs	r3, r3, #8
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8004e1a:	e005      	b.n	8004e28 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	3301      	adds	r3, #1
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	085b      	lsrs	r3, r3, #1
 8004e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <HAL_DFSDM_IRQHandler+0x190>
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	2b06      	cmp	r3, #6
 8004e36:	d9f1      	bls.n	8004e1c <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d105      	bne.n	8004e4a <HAL_DFSDM_IRQHandler+0x1a2>
 8004e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e40:	3308      	adds	r3, #8
 8004e42:	2201      	movs	r2, #1
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	e003      	b.n	8004e52 <HAL_DFSDM_IRQHandler+0x1aa>
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f89d 	bl	8004f9c <HAL_DFSDM_FilterAwdCallback>
  {
 8004e62:	e07e      	b.n	8004f62 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a40      	ldr	r2, [pc, #256]	; (8004f6c <HAL_DFSDM_IRQHandler+0x2c4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d141      	bne.n	8004ef2 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d03c      	beq.n	8004ef2 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d037      	beq.n	8004ef2 <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	0c1b      	lsrs	r3, r3, #16
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 8004e92:	e02a      	b.n	8004eea <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d01f      	beq.n	8004ede <HAL_DFSDM_IRQHandler+0x236>
 8004e9e:	4a34      	ldr	r2, [pc, #208]	; (8004f70 <HAL_DFSDM_IRQHandler+0x2c8>)
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d019      	beq.n	8004ede <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8004eaa:	4a31      	ldr	r2, [pc, #196]	; (8004f70 <HAL_DFSDM_IRQHandler+0x2c8>)
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00f      	beq.n	8004ede <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	f103 0210 	add.w	r2, r3, #16
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2101      	movs	r1, #1
 8004eca:	fa01 f202 	lsl.w	r2, r1, r2
 8004ece:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8004ed0:	4a27      	ldr	r2, [pc, #156]	; (8004f70 <HAL_DFSDM_IRQHandler+0x2c8>)
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fdb1 	bl	8004a40 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	085b      	lsrs	r3, r3, #1
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	2b07      	cmp	r3, #7
 8004eee:	d9d1      	bls.n	8004e94 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 8004ef0:	e037      	b.n	8004f62 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a1d      	ldr	r2, [pc, #116]	; (8004f6c <HAL_DFSDM_IRQHandler+0x2c4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d132      	bne.n	8004f62 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d02d      	beq.n	8004f62 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d028      	beq.n	8004f62 <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	0e1b      	lsrs	r3, r3, #24
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8004f20:	e005      	b.n	8004f2e <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	3301      	adds	r3, #1
 8004f26:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	085b      	lsrs	r3, r3, #1
 8004f2c:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d102      	bne.n	8004f3e <HAL_DFSDM_IRQHandler+0x296>
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b06      	cmp	r3, #6
 8004f3c:	d9f1      	bls.n	8004f22 <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	f103 0218 	add.w	r2, r3, #24
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2101      	movs	r1, #1
 8004f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f4e:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8004f50:	4a07      	ldr	r2, [pc, #28]	; (8004f70 <HAL_DFSDM_IRQHandler+0x2c8>)
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff fd7b 	bl	8004a54 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8004f5e:	e000      	b.n	8004f62 <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004f60:	bf00      	nop
}
 8004f62:	bf00      	nop
 8004f64:	3730      	adds	r7, #48	; 0x30
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40016100 	.word	0x40016100
 8004f70:	200009a4 	.word	0x200009a4

08004f74 <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8004fa8:	bf00      	nop
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a1c      	ldr	r2, [pc, #112]	; (8005044 <DFSDM_GetChannelFromInstance+0x7c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d102      	bne.n	8004fde <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e02b      	b.n	8005036 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a19      	ldr	r2, [pc, #100]	; (8005048 <DFSDM_GetChannelFromInstance+0x80>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d102      	bne.n	8004fec <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	e024      	b.n	8005036 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a17      	ldr	r2, [pc, #92]	; (800504c <DFSDM_GetChannelFromInstance+0x84>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d102      	bne.n	8004ffa <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e01d      	b.n	8005036 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a14      	ldr	r2, [pc, #80]	; (8005050 <DFSDM_GetChannelFromInstance+0x88>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d102      	bne.n	8005008 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8005002:	2304      	movs	r3, #4
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	e016      	b.n	8005036 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a12      	ldr	r2, [pc, #72]	; (8005054 <DFSDM_GetChannelFromInstance+0x8c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d102      	bne.n	8005016 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8005010:	2305      	movs	r3, #5
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	e00f      	b.n	8005036 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a0f      	ldr	r2, [pc, #60]	; (8005058 <DFSDM_GetChannelFromInstance+0x90>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d102      	bne.n	8005024 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800501e:	2306      	movs	r3, #6
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e008      	b.n	8005036 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a0d      	ldr	r2, [pc, #52]	; (800505c <DFSDM_GetChannelFromInstance+0x94>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d102      	bne.n	8005032 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800502c:	2307      	movs	r3, #7
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	e001      	b.n	8005036 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8005032:	2303      	movs	r3, #3
 8005034:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8005036:	68fb      	ldr	r3, [r7, #12]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	40016000 	.word	0x40016000
 8005048:	40016020 	.word	0x40016020
 800504c:	40016040 	.word	0x40016040
 8005050:	40016080 	.word	0x40016080
 8005054:	400160a0 	.word	0x400160a0
 8005058:	400160c0 	.word	0x400160c0
 800505c:	400160e0 	.word	0x400160e0

08005060 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e08d      	b.n	800518e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	4b47      	ldr	r3, [pc, #284]	; (8005198 <HAL_DMA_Init+0x138>)
 800507a:	429a      	cmp	r2, r3
 800507c:	d80f      	bhi.n	800509e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	4b45      	ldr	r3, [pc, #276]	; (800519c <HAL_DMA_Init+0x13c>)
 8005086:	4413      	add	r3, r2
 8005088:	4a45      	ldr	r2, [pc, #276]	; (80051a0 <HAL_DMA_Init+0x140>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	091b      	lsrs	r3, r3, #4
 8005090:	009a      	lsls	r2, r3, #2
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a42      	ldr	r2, [pc, #264]	; (80051a4 <HAL_DMA_Init+0x144>)
 800509a:	641a      	str	r2, [r3, #64]	; 0x40
 800509c:	e00e      	b.n	80050bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	4b40      	ldr	r3, [pc, #256]	; (80051a8 <HAL_DMA_Init+0x148>)
 80050a6:	4413      	add	r3, r2
 80050a8:	4a3d      	ldr	r2, [pc, #244]	; (80051a0 <HAL_DMA_Init+0x140>)
 80050aa:	fba2 2303 	umull	r2, r3, r2, r3
 80050ae:	091b      	lsrs	r3, r3, #4
 80050b0:	009a      	lsls	r2, r3, #2
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a3c      	ldr	r2, [pc, #240]	; (80051ac <HAL_DMA_Init+0x14c>)
 80050ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80050d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80050e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f8fe 	bl	8005310 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800511c:	d102      	bne.n	8005124 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005138:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d010      	beq.n	8005164 <HAL_DMA_Init+0x104>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b04      	cmp	r3, #4
 8005148:	d80c      	bhi.n	8005164 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f91e 	bl	800538c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005160:	605a      	str	r2, [r3, #4]
 8005162:	e008      	b.n	8005176 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40020407 	.word	0x40020407
 800519c:	bffdfff8 	.word	0xbffdfff8
 80051a0:	cccccccd 	.word	0xcccccccd
 80051a4:	40020000 	.word	0x40020000
 80051a8:	bffdfbf8 	.word	0xbffdfbf8
 80051ac:	40020400 	.word	0x40020400

080051b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051cc:	f003 031c 	and.w	r3, r3, #28
 80051d0:	2204      	movs	r2, #4
 80051d2:	409a      	lsls	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4013      	ands	r3, r2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d026      	beq.n	800522a <HAL_DMA_IRQHandler+0x7a>
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d021      	beq.n	800522a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d107      	bne.n	8005204 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0204 	bic.w	r2, r2, #4
 8005202:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005208:	f003 021c 	and.w	r2, r3, #28
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	2104      	movs	r1, #4
 8005212:	fa01 f202 	lsl.w	r2, r1, r2
 8005216:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	2b00      	cmp	r3, #0
 800521e:	d071      	beq.n	8005304 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005228:	e06c      	b.n	8005304 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522e:	f003 031c 	and.w	r3, r3, #28
 8005232:	2202      	movs	r2, #2
 8005234:	409a      	lsls	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4013      	ands	r3, r2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d02e      	beq.n	800529c <HAL_DMA_IRQHandler+0xec>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d029      	beq.n	800529c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 020a 	bic.w	r2, r2, #10
 8005264:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005272:	f003 021c 	and.w	r2, r3, #28
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	2102      	movs	r1, #2
 800527c:	fa01 f202 	lsl.w	r2, r1, r2
 8005280:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d038      	beq.n	8005304 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800529a:	e033      	b.n	8005304 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a0:	f003 031c 	and.w	r3, r3, #28
 80052a4:	2208      	movs	r2, #8
 80052a6:	409a      	lsls	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d02a      	beq.n	8005306 <HAL_DMA_IRQHandler+0x156>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d025      	beq.n	8005306 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 020e 	bic.w	r2, r2, #14
 80052c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ce:	f003 021c 	and.w	r2, r3, #28
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	2101      	movs	r1, #1
 80052d8:	fa01 f202 	lsl.w	r2, r1, r2
 80052dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005304:	bf00      	nop
 8005306:	bf00      	nop
}
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	4b17      	ldr	r3, [pc, #92]	; (800537c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005320:	429a      	cmp	r2, r3
 8005322:	d80a      	bhi.n	800533a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005328:	089b      	lsrs	r3, r3, #2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005330:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6493      	str	r3, [r2, #72]	; 0x48
 8005338:	e007      	b.n	800534a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533e:	089b      	lsrs	r3, r3, #2
 8005340:	009a      	lsls	r2, r3, #2
 8005342:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005344:	4413      	add	r3, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	3b08      	subs	r3, #8
 8005352:	4a0c      	ldr	r2, [pc, #48]	; (8005384 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005354:	fba2 2303 	umull	r2, r3, r2, r3
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a0a      	ldr	r2, [pc, #40]	; (8005388 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005360:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f003 031f 	and.w	r3, r3, #31
 8005368:	2201      	movs	r2, #1
 800536a:	409a      	lsls	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	40020407 	.word	0x40020407
 8005380:	4002081c 	.word	0x4002081c
 8005384:	cccccccd 	.word	0xcccccccd
 8005388:	40020880 	.word	0x40020880

0800538c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	b2db      	uxtb	r3, r3
 800539a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	461a      	mov	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a08      	ldr	r2, [pc, #32]	; (80053d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80053ae:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	2201      	movs	r2, #1
 80053ba:	409a      	lsls	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80053c0:	bf00      	nop
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	1000823f 	.word	0x1000823f
 80053d0:	40020940 	.word	0x40020940

080053d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053e2:	e166      	b.n	80056b2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	2101      	movs	r1, #1
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	fa01 f303 	lsl.w	r3, r1, r3
 80053f0:	4013      	ands	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 8158 	beq.w	80056ac <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d00b      	beq.n	800541c <HAL_GPIO_Init+0x48>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d007      	beq.n	800541c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005410:	2b11      	cmp	r3, #17
 8005412:	d003      	beq.n	800541c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b12      	cmp	r3, #18
 800541a:	d130      	bne.n	800547e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	2203      	movs	r2, #3
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	43db      	mvns	r3, r3
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4013      	ands	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005452:	2201      	movs	r2, #1
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	43db      	mvns	r3, r3
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4013      	ands	r3, r2
 8005460:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	091b      	lsrs	r3, r3, #4
 8005468:	f003 0201 	and.w	r2, r3, #1
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	2203      	movs	r2, #3
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	43db      	mvns	r3, r3
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4013      	ands	r3, r2
 8005494:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d003      	beq.n	80054be <HAL_GPIO_Init+0xea>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2b12      	cmp	r3, #18
 80054bc:	d123      	bne.n	8005506 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	08da      	lsrs	r2, r3, #3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3208      	adds	r2, #8
 80054c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	220f      	movs	r2, #15
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	43db      	mvns	r3, r3
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4013      	ands	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	08da      	lsrs	r2, r3, #3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3208      	adds	r2, #8
 8005500:	6939      	ldr	r1, [r7, #16]
 8005502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	2203      	movs	r2, #3
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43db      	mvns	r3, r3
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4013      	ands	r3, r2
 800551c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f003 0203 	and.w	r2, r3, #3
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 80b2 	beq.w	80056ac <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005548:	4b61      	ldr	r3, [pc, #388]	; (80056d0 <HAL_GPIO_Init+0x2fc>)
 800554a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800554c:	4a60      	ldr	r2, [pc, #384]	; (80056d0 <HAL_GPIO_Init+0x2fc>)
 800554e:	f043 0301 	orr.w	r3, r3, #1
 8005552:	6613      	str	r3, [r2, #96]	; 0x60
 8005554:	4b5e      	ldr	r3, [pc, #376]	; (80056d0 <HAL_GPIO_Init+0x2fc>)
 8005556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005560:	4a5c      	ldr	r2, [pc, #368]	; (80056d4 <HAL_GPIO_Init+0x300>)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	089b      	lsrs	r3, r3, #2
 8005566:	3302      	adds	r3, #2
 8005568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800556c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	220f      	movs	r2, #15
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43db      	mvns	r3, r3
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4013      	ands	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800558a:	d02b      	beq.n	80055e4 <HAL_GPIO_Init+0x210>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a52      	ldr	r2, [pc, #328]	; (80056d8 <HAL_GPIO_Init+0x304>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d025      	beq.n	80055e0 <HAL_GPIO_Init+0x20c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a51      	ldr	r2, [pc, #324]	; (80056dc <HAL_GPIO_Init+0x308>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d01f      	beq.n	80055dc <HAL_GPIO_Init+0x208>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a50      	ldr	r2, [pc, #320]	; (80056e0 <HAL_GPIO_Init+0x30c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d019      	beq.n	80055d8 <HAL_GPIO_Init+0x204>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a4f      	ldr	r2, [pc, #316]	; (80056e4 <HAL_GPIO_Init+0x310>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d013      	beq.n	80055d4 <HAL_GPIO_Init+0x200>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a4e      	ldr	r2, [pc, #312]	; (80056e8 <HAL_GPIO_Init+0x314>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00d      	beq.n	80055d0 <HAL_GPIO_Init+0x1fc>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a4d      	ldr	r2, [pc, #308]	; (80056ec <HAL_GPIO_Init+0x318>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d007      	beq.n	80055cc <HAL_GPIO_Init+0x1f8>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a4c      	ldr	r2, [pc, #304]	; (80056f0 <HAL_GPIO_Init+0x31c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d101      	bne.n	80055c8 <HAL_GPIO_Init+0x1f4>
 80055c4:	2307      	movs	r3, #7
 80055c6:	e00e      	b.n	80055e6 <HAL_GPIO_Init+0x212>
 80055c8:	2308      	movs	r3, #8
 80055ca:	e00c      	b.n	80055e6 <HAL_GPIO_Init+0x212>
 80055cc:	2306      	movs	r3, #6
 80055ce:	e00a      	b.n	80055e6 <HAL_GPIO_Init+0x212>
 80055d0:	2305      	movs	r3, #5
 80055d2:	e008      	b.n	80055e6 <HAL_GPIO_Init+0x212>
 80055d4:	2304      	movs	r3, #4
 80055d6:	e006      	b.n	80055e6 <HAL_GPIO_Init+0x212>
 80055d8:	2303      	movs	r3, #3
 80055da:	e004      	b.n	80055e6 <HAL_GPIO_Init+0x212>
 80055dc:	2302      	movs	r3, #2
 80055de:	e002      	b.n	80055e6 <HAL_GPIO_Init+0x212>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <HAL_GPIO_Init+0x212>
 80055e4:	2300      	movs	r3, #0
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	f002 0203 	and.w	r2, r2, #3
 80055ec:	0092      	lsls	r2, r2, #2
 80055ee:	4093      	lsls	r3, r2
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80055f6:	4937      	ldr	r1, [pc, #220]	; (80056d4 <HAL_GPIO_Init+0x300>)
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	089b      	lsrs	r3, r3, #2
 80055fc:	3302      	adds	r3, #2
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005604:	4b3b      	ldr	r3, [pc, #236]	; (80056f4 <HAL_GPIO_Init+0x320>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	43db      	mvns	r3, r3
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4013      	ands	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005628:	4a32      	ldr	r2, [pc, #200]	; (80056f4 <HAL_GPIO_Init+0x320>)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800562e:	4b31      	ldr	r3, [pc, #196]	; (80056f4 <HAL_GPIO_Init+0x320>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	43db      	mvns	r3, r3
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4013      	ands	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005652:	4a28      	ldr	r2, [pc, #160]	; (80056f4 <HAL_GPIO_Init+0x320>)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005658:	4b26      	ldr	r3, [pc, #152]	; (80056f4 <HAL_GPIO_Init+0x320>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	43db      	mvns	r3, r3
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4013      	ands	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800567c:	4a1d      	ldr	r2, [pc, #116]	; (80056f4 <HAL_GPIO_Init+0x320>)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005682:	4b1c      	ldr	r3, [pc, #112]	; (80056f4 <HAL_GPIO_Init+0x320>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	43db      	mvns	r3, r3
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4013      	ands	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056a6:	4a13      	ldr	r2, [pc, #76]	; (80056f4 <HAL_GPIO_Init+0x320>)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	3301      	adds	r3, #1
 80056b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	fa22 f303 	lsr.w	r3, r2, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f47f ae91 	bne.w	80053e4 <HAL_GPIO_Init+0x10>
  }
}
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40021000 	.word	0x40021000
 80056d4:	40010000 	.word	0x40010000
 80056d8:	48000400 	.word	0x48000400
 80056dc:	48000800 	.word	0x48000800
 80056e0:	48000c00 	.word	0x48000c00
 80056e4:	48001000 	.word	0x48001000
 80056e8:	48001400 	.word	0x48001400
 80056ec:	48001800 	.word	0x48001800
 80056f0:	48001c00 	.word	0x48001c00
 80056f4:	40010400 	.word	0x40010400

080056f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	460b      	mov	r3, r1
 8005702:	807b      	strh	r3, [r7, #2]
 8005704:	4613      	mov	r3, r2
 8005706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005708:	787b      	ldrb	r3, [r7, #1]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800570e:	887a      	ldrh	r2, [r7, #2]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005714:	e002      	b.n	800571c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005716:	887a      	ldrh	r2, [r7, #2]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e081      	b.n	800583e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fd f94c 	bl	80029ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2224      	movs	r2, #36	; 0x24
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0201 	bic.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005778:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005788:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d107      	bne.n	80057a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800579e:	609a      	str	r2, [r3, #8]
 80057a0:	e006      	b.n	80057b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80057ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d104      	bne.n	80057c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	ea42 0103 	orr.w	r1, r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	021a      	lsls	r2, r3, #8
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	69d9      	ldr	r1, [r3, #28]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a1a      	ldr	r2, [r3, #32]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b20      	cmp	r3, #32
 800585a:	d138      	bne.n	80058ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005862:	2b01      	cmp	r3, #1
 8005864:	d101      	bne.n	800586a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005866:	2302      	movs	r3, #2
 8005868:	e032      	b.n	80058d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2224      	movs	r2, #36	; 0x24
 8005876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0201 	bic.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005898:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6819      	ldr	r1, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0201 	orr.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e000      	b.n	80058d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058ce:	2302      	movs	r3, #2
  }
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b20      	cmp	r3, #32
 80058f0:	d139      	bne.n	8005966 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e033      	b.n	8005968 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2224      	movs	r2, #36	; 0x24
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0201 	bic.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800592e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f042 0201 	orr.w	r2, r2, #1
 8005950:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	e000      	b.n	8005968 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005966:	2302      	movs	r3, #2
  }
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e0bf      	b.n	8005b06 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fd f8a0 	bl	8002ae0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80059b6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6999      	ldr	r1, [r3, #24]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80059cc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6899      	ldr	r1, [r3, #8]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	4b4a      	ldr	r3, [pc, #296]	; (8005b10 <HAL_LTDC_Init+0x19c>)
 80059e8:	400b      	ands	r3, r1
 80059ea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	041b      	lsls	r3, r3, #16
 80059f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6899      	ldr	r1, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68d9      	ldr	r1, [r3, #12]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	4b3e      	ldr	r3, [pc, #248]	; (8005b10 <HAL_LTDC_Init+0x19c>)
 8005a16:	400b      	ands	r3, r1
 8005a18:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	041b      	lsls	r3, r3, #16
 8005a20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68d9      	ldr	r1, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1a      	ldr	r2, [r3, #32]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6919      	ldr	r1, [r3, #16]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b33      	ldr	r3, [pc, #204]	; (8005b10 <HAL_LTDC_Init+0x19c>)
 8005a44:	400b      	ands	r3, r1
 8005a46:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	041b      	lsls	r3, r3, #16
 8005a4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6919      	ldr	r1, [r3, #16]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6959      	ldr	r1, [r3, #20]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	4b27      	ldr	r3, [pc, #156]	; (8005b10 <HAL_LTDC_Init+0x19c>)
 8005a72:	400b      	ands	r3, r1
 8005a74:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7a:	041b      	lsls	r3, r3, #16
 8005a7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6959      	ldr	r1, [r3, #20]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a9a:	021b      	lsls	r3, r3, #8
 8005a9c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005aa4:	041b      	lsls	r3, r3, #16
 8005aa6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0206 	orr.w	r2, r2, #6
 8005ae2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0201 	orr.w	r2, r2, #1
 8005af2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	f000f800 	.word	0xf000f800

08005b14 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005b14:	b5b0      	push	{r4, r5, r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d101      	bne.n	8005b2e <HAL_LTDC_ConfigLayer+0x1a>
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	e02c      	b.n	8005b88 <HAL_LTDC_ConfigLayer+0x74>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2134      	movs	r1, #52	; 0x34
 8005b44:	fb01 f303 	mul.w	r3, r1, r3
 8005b48:	4413      	add	r3, r2
 8005b4a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	4614      	mov	r4, r2
 8005b52:	461d      	mov	r5, r3
 8005b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	68b9      	ldr	r1, [r7, #8]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 f897 	bl	8005c9c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2201      	movs	r2, #1
 8005b74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bdb0      	pop	{r4, r5, r7, pc}

08005b90 <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b089      	sub	sp, #36	; 0x24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d101      	bne.n	8005baa <HAL_LTDC_SetPitch+0x1a>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e06f      	b.n	8005c8a <HAL_LTDC_SetPitch+0xfa>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2134      	movs	r1, #52	; 0x34
 8005bc0:	fb01 f303 	mul.w	r3, r1, r3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	3348      	adds	r3, #72	; 0x48
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d102      	bne.n	8005bd8 <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 8005bd2:	2304      	movs	r3, #4
 8005bd4:	61fb      	str	r3, [r7, #28]
 8005bd6:	e016      	b.n	8005c06 <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d102      	bne.n	8005be4 <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 8005bde:	2303      	movs	r3, #3
 8005be0:	61fb      	str	r3, [r7, #28]
 8005be2:	e010      	b.n	8005c06 <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d008      	beq.n	8005bfc <HAL_LTDC_SetPitch+0x6c>
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d005      	beq.n	8005bfc <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d002      	beq.n	8005bfc <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b07      	cmp	r3, #7
 8005bfa:	d102      	bne.n	8005c02 <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	61fb      	str	r3, [r7, #28]
 8005c00:	e001      	b.n	8005c06 <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 8005c02:	2301      	movs	r3, #1
 8005c04:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	fb02 f303 	mul.w	r3, r2, r3
 8005c0e:	041b      	lsls	r3, r3, #16
 8005c10:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	01db      	lsls	r3, r3, #7
 8005c1c:	4413      	add	r3, r2
 8005c1e:	3384      	adds	r3, #132	; 0x84
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	6812      	ldr	r2, [r2, #0]
 8005c26:	4611      	mov	r1, r2
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	01d2      	lsls	r2, r2, #7
 8005c2c:	440a      	add	r2, r1
 8005c2e:	3284      	adds	r2, #132	; 0x84
 8005c30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c38:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8005c3a:	4b17      	ldr	r3, [pc, #92]	; (8005c98 <HAL_LTDC_SetPitch+0x108>)
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	4a16      	ldr	r2, [pc, #88]	; (8005c98 <HAL_LTDC_SetPitch+0x108>)
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	01db      	lsls	r3, r3, #7
 8005c50:	4413      	add	r3, r2
 8005c52:	3384      	adds	r3, #132	; 0x84
 8005c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	01db      	lsls	r3, r3, #7
 8005c60:	440b      	add	r3, r1
 8005c62:	3384      	adds	r3, #132	; 0x84
 8005c64:	4619      	mov	r1, r3
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8005c6c:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <HAL_LTDC_SetPitch+0x108>)
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	4a09      	ldr	r2, [pc, #36]	; (8005c98 <HAL_LTDC_SetPitch+0x108>)
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3724      	adds	r7, #36	; 0x24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40016800 	.word	0x40016800

08005c9c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b089      	sub	sp, #36	; 0x24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	0c1b      	lsrs	r3, r3, #16
 8005cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb8:	4413      	add	r3, r2
 8005cba:	041b      	lsls	r3, r3, #16
 8005cbc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	01db      	lsls	r3, r3, #7
 8005cc8:	4413      	add	r3, r2
 8005cca:	3384      	adds	r3, #132	; 0x84
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	6812      	ldr	r2, [r2, #0]
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	01d2      	lsls	r2, r2, #7
 8005cd8:	440a      	add	r2, r1
 8005cda:	3284      	adds	r2, #132	; 0x84
 8005cdc:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8005ce0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	0c1b      	lsrs	r3, r3, #16
 8005cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cf2:	4413      	add	r3, r2
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	01db      	lsls	r3, r3, #7
 8005d00:	440b      	add	r3, r1
 8005d02:	3384      	adds	r3, #132	; 0x84
 8005d04:	4619      	mov	r1, r3
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d1a:	4413      	add	r3, r2
 8005d1c:	041b      	lsls	r3, r3, #16
 8005d1e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	01db      	lsls	r3, r3, #7
 8005d2a:	4413      	add	r3, r2
 8005d2c:	3384      	adds	r3, #132	; 0x84
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	6812      	ldr	r2, [r2, #0]
 8005d34:	4611      	mov	r1, r2
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	01d2      	lsls	r2, r2, #7
 8005d3a:	440a      	add	r2, r1
 8005d3c:	3284      	adds	r2, #132	; 0x84
 8005d3e:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8005d42:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d52:	4413      	add	r3, r2
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	01db      	lsls	r3, r3, #7
 8005d60:	440b      	add	r3, r1
 8005d62:	3384      	adds	r3, #132	; 0x84
 8005d64:	4619      	mov	r1, r3
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	01db      	lsls	r3, r3, #7
 8005d76:	4413      	add	r3, r2
 8005d78:	3384      	adds	r3, #132	; 0x84
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	6812      	ldr	r2, [r2, #0]
 8005d80:	4611      	mov	r1, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	01d2      	lsls	r2, r2, #7
 8005d86:	440a      	add	r2, r1
 8005d88:	3284      	adds	r2, #132	; 0x84
 8005d8a:	f023 0307 	bic.w	r3, r3, #7
 8005d8e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	461a      	mov	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	01db      	lsls	r3, r3, #7
 8005d9a:	4413      	add	r3, r2
 8005d9c:	3384      	adds	r3, #132	; 0x84
 8005d9e:	461a      	mov	r2, r3
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005db6:	041b      	lsls	r3, r3, #16
 8005db8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	061b      	lsls	r3, r3, #24
 8005dc0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	01db      	lsls	r3, r3, #7
 8005dcc:	4413      	add	r3, r2
 8005dce:	3384      	adds	r3, #132	; 0x84
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	01db      	lsls	r3, r3, #7
 8005ddc:	4413      	add	r3, r2
 8005dde:	3384      	adds	r3, #132	; 0x84
 8005de0:	461a      	mov	r2, r3
 8005de2:	2300      	movs	r3, #0
 8005de4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dec:	461a      	mov	r2, r3
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	431a      	orrs	r2, r3
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	431a      	orrs	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	01db      	lsls	r3, r3, #7
 8005e00:	440b      	add	r3, r1
 8005e02:	3384      	adds	r3, #132	; 0x84
 8005e04:	4619      	mov	r1, r3
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	01db      	lsls	r3, r3, #7
 8005e16:	4413      	add	r3, r2
 8005e18:	3384      	adds	r3, #132	; 0x84
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	6812      	ldr	r2, [r2, #0]
 8005e20:	4611      	mov	r1, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	01d2      	lsls	r2, r2, #7
 8005e26:	440a      	add	r2, r1
 8005e28:	3284      	adds	r2, #132	; 0x84
 8005e2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e2e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	01db      	lsls	r3, r3, #7
 8005e3a:	4413      	add	r3, r2
 8005e3c:	3384      	adds	r3, #132	; 0x84
 8005e3e:	461a      	mov	r2, r3
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	01db      	lsls	r3, r3, #7
 8005e50:	4413      	add	r3, r2
 8005e52:	3384      	adds	r3, #132	; 0x84
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	6812      	ldr	r2, [r2, #0]
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	01d2      	lsls	r2, r2, #7
 8005e60:	440a      	add	r2, r1
 8005e62:	3284      	adds	r2, #132	; 0x84
 8005e64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005e68:	f023 0307 	bic.w	r3, r3, #7
 8005e6c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	69da      	ldr	r2, [r3, #28]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	68f9      	ldr	r1, [r7, #12]
 8005e78:	6809      	ldr	r1, [r1, #0]
 8005e7a:	4608      	mov	r0, r1
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	01c9      	lsls	r1, r1, #7
 8005e80:	4401      	add	r1, r0
 8005e82:	3184      	adds	r1, #132	; 0x84
 8005e84:	4313      	orrs	r3, r2
 8005e86:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	01db      	lsls	r3, r3, #7
 8005e92:	4413      	add	r3, r2
 8005e94:	3384      	adds	r3, #132	; 0x84
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	01db      	lsls	r3, r3, #7
 8005ea2:	4413      	add	r3, r2
 8005ea4:	3384      	adds	r3, #132	; 0x84
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	01db      	lsls	r3, r3, #7
 8005eb6:	4413      	add	r3, r2
 8005eb8:	3384      	adds	r3, #132	; 0x84
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d102      	bne.n	8005ed0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005eca:	2304      	movs	r3, #4
 8005ecc:	61fb      	str	r3, [r7, #28]
 8005ece:	e01b      	b.n	8005f08 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d102      	bne.n	8005ede <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	e014      	b.n	8005f08 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	d00b      	beq.n	8005efe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d007      	beq.n	8005efe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d003      	beq.n	8005efe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005efa:	2b07      	cmp	r3, #7
 8005efc:	d102      	bne.n	8005f04 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005efe:	2302      	movs	r3, #2
 8005f00:	61fb      	str	r3, [r7, #28]
 8005f02:	e001      	b.n	8005f08 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005f04:	2301      	movs	r3, #1
 8005f06:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	01db      	lsls	r3, r3, #7
 8005f12:	4413      	add	r3, r2
 8005f14:	3384      	adds	r3, #132	; 0x84
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	6812      	ldr	r2, [r2, #0]
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	01d2      	lsls	r2, r2, #7
 8005f22:	440a      	add	r2, r1
 8005f24:	3284      	adds	r2, #132	; 0x84
 8005f26:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005f2a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f30:	69fa      	ldr	r2, [r7, #28]
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
 8005f36:	041a      	lsls	r2, r3, #16
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	6859      	ldr	r1, [r3, #4]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	1acb      	subs	r3, r1, r3
 8005f42:	69f9      	ldr	r1, [r7, #28]
 8005f44:	fb01 f303 	mul.w	r3, r1, r3
 8005f48:	3303      	adds	r3, #3
 8005f4a:	68f9      	ldr	r1, [r7, #12]
 8005f4c:	6809      	ldr	r1, [r1, #0]
 8005f4e:	4608      	mov	r0, r1
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	01c9      	lsls	r1, r1, #7
 8005f54:	4401      	add	r1, r0
 8005f56:	3184      	adds	r1, #132	; 0x84
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	01db      	lsls	r3, r3, #7
 8005f66:	4413      	add	r3, r2
 8005f68:	3384      	adds	r3, #132	; 0x84
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	6812      	ldr	r2, [r2, #0]
 8005f70:	4611      	mov	r1, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	01d2      	lsls	r2, r2, #7
 8005f76:	440a      	add	r2, r1
 8005f78:	3284      	adds	r2, #132	; 0x84
 8005f7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f7e:	f023 0307 	bic.w	r3, r3, #7
 8005f82:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	01db      	lsls	r3, r3, #7
 8005f8e:	4413      	add	r3, r2
 8005f90:	3384      	adds	r3, #132	; 0x84
 8005f92:	461a      	mov	r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	01db      	lsls	r3, r3, #7
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3384      	adds	r3, #132	; 0x84
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	4611      	mov	r1, r2
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	01d2      	lsls	r2, r2, #7
 8005fb4:	440a      	add	r2, r1
 8005fb6:	3284      	adds	r2, #132	; 0x84
 8005fb8:	f043 0301 	orr.w	r3, r3, #1
 8005fbc:	6013      	str	r3, [r2, #0]
}
 8005fbe:	bf00      	nop
 8005fc0:	3724      	adds	r7, #36	; 0x24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005fca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fcc:	b08f      	sub	sp, #60	; 0x3c
 8005fce:	af0a      	add	r7, sp, #40	; 0x28
 8005fd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e116      	b.n	800620a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f009 fe04 	bl	800fc04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2203      	movs	r2, #3
 8006000:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d102      	bne.n	8006016 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	f006 fe65 	bl	800ccea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	687e      	ldr	r6, [r7, #4]
 8006028:	466d      	mov	r5, sp
 800602a:	f106 0410 	add.w	r4, r6, #16
 800602e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006036:	e894 0003 	ldmia.w	r4, {r0, r1}
 800603a:	e885 0003 	stmia.w	r5, {r0, r1}
 800603e:	1d33      	adds	r3, r6, #4
 8006040:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006042:	6838      	ldr	r0, [r7, #0]
 8006044:	f006 fd52 	bl	800caec <USB_CoreInit>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d005      	beq.n	800605a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2202      	movs	r2, #2
 8006052:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e0d7      	b.n	800620a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2100      	movs	r1, #0
 8006060:	4618      	mov	r0, r3
 8006062:	f006 fe53 	bl	800cd0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006066:	2300      	movs	r3, #0
 8006068:	73fb      	strb	r3, [r7, #15]
 800606a:	e04a      	b.n	8006102 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800606c:	7bfa      	ldrb	r2, [r7, #15]
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	4613      	mov	r3, r2
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	1a9b      	subs	r3, r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	440b      	add	r3, r1
 800607a:	333d      	adds	r3, #61	; 0x3d
 800607c:	2201      	movs	r2, #1
 800607e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006080:	7bfa      	ldrb	r2, [r7, #15]
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	4613      	mov	r3, r2
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	1a9b      	subs	r3, r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	333c      	adds	r3, #60	; 0x3c
 8006090:	7bfa      	ldrb	r2, [r7, #15]
 8006092:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006094:	7bfa      	ldrb	r2, [r7, #15]
 8006096:	7bfb      	ldrb	r3, [r7, #15]
 8006098:	b298      	uxth	r0, r3
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	4613      	mov	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	3342      	adds	r3, #66	; 0x42
 80060a8:	4602      	mov	r2, r0
 80060aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060ac:	7bfa      	ldrb	r2, [r7, #15]
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	4613      	mov	r3, r2
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	1a9b      	subs	r3, r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	440b      	add	r3, r1
 80060ba:	333f      	adds	r3, #63	; 0x3f
 80060bc:	2200      	movs	r2, #0
 80060be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060c0:	7bfa      	ldrb	r2, [r7, #15]
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	4613      	mov	r3, r2
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	1a9b      	subs	r3, r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	440b      	add	r3, r1
 80060ce:	3344      	adds	r3, #68	; 0x44
 80060d0:	2200      	movs	r2, #0
 80060d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060d4:	7bfa      	ldrb	r2, [r7, #15]
 80060d6:	6879      	ldr	r1, [r7, #4]
 80060d8:	4613      	mov	r3, r2
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	1a9b      	subs	r3, r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	440b      	add	r3, r1
 80060e2:	3348      	adds	r3, #72	; 0x48
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80060e8:	7bfa      	ldrb	r2, [r7, #15]
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	4613      	mov	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	1a9b      	subs	r3, r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	3350      	adds	r3, #80	; 0x50
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	3301      	adds	r3, #1
 8006100:	73fb      	strb	r3, [r7, #15]
 8006102:	7bfa      	ldrb	r2, [r7, #15]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	429a      	cmp	r2, r3
 800610a:	d3af      	bcc.n	800606c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800610c:	2300      	movs	r3, #0
 800610e:	73fb      	strb	r3, [r7, #15]
 8006110:	e044      	b.n	800619c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006112:	7bfa      	ldrb	r2, [r7, #15]
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	4613      	mov	r3, r2
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	440b      	add	r3, r1
 8006120:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006124:	2200      	movs	r2, #0
 8006126:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006128:	7bfa      	ldrb	r2, [r7, #15]
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	4613      	mov	r3, r2
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	1a9b      	subs	r3, r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800613a:	7bfa      	ldrb	r2, [r7, #15]
 800613c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800613e:	7bfa      	ldrb	r2, [r7, #15]
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	440b      	add	r3, r1
 800614c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006154:	7bfa      	ldrb	r2, [r7, #15]
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	4613      	mov	r3, r2
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	1a9b      	subs	r3, r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800616a:	7bfa      	ldrb	r2, [r7, #15]
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	1a9b      	subs	r3, r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006180:	7bfa      	ldrb	r2, [r7, #15]
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	4613      	mov	r3, r2
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	1a9b      	subs	r3, r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	3301      	adds	r3, #1
 800619a:	73fb      	strb	r3, [r7, #15]
 800619c:	7bfa      	ldrb	r2, [r7, #15]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d3b5      	bcc.n	8006112 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	603b      	str	r3, [r7, #0]
 80061ac:	687e      	ldr	r6, [r7, #4]
 80061ae:	466d      	mov	r5, sp
 80061b0:	f106 0410 	add.w	r4, r6, #16
 80061b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80061c4:	1d33      	adds	r3, r6, #4
 80061c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061c8:	6838      	ldr	r0, [r7, #0]
 80061ca:	f006 fdc9 	bl	800cd60 <USB_DevInit>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e014      	b.n	800620a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d102      	bne.n	80061fe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 ff61 	bl	80070c0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f007 fd4b 	bl	800dc9e <USB_DevDisconnect>

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006212 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_PCD_Start+0x1c>
 800622a:	2302      	movs	r3, #2
 800622c:	e01c      	b.n	8006268 <HAL_PCD_Start+0x56>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	2b01      	cmp	r3, #1
 800623c:	d105      	bne.n	800624a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f006 fd3a 	bl	800ccc8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4618      	mov	r0, r3
 800625a:	f007 fcff 	bl	800dc5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006270:	b590      	push	{r4, r7, lr}
 8006272:	b08d      	sub	sp, #52	; 0x34
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4618      	mov	r0, r3
 8006288:	f007 fdbd 	bl	800de06 <USB_GetMode>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	f040 838f 	bne.w	80069b2 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	f007 fd21 	bl	800dce0 <USB_ReadInterrupts>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8385 	beq.w	80069b0 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f007 fd18 	bl	800dce0 <USB_ReadInterrupts>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d107      	bne.n	80062ca <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	695a      	ldr	r2, [r3, #20]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f002 0202 	and.w	r2, r2, #2
 80062c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f007 fd06 	bl	800dce0 <USB_ReadInterrupts>
 80062d4:	4603      	mov	r3, r0
 80062d6:	f003 0310 	and.w	r3, r3, #16
 80062da:	2b10      	cmp	r3, #16
 80062dc:	d161      	bne.n	80063a2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	699a      	ldr	r2, [r3, #24]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0210 	bic.w	r2, r2, #16
 80062ec:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	f003 020f 	and.w	r2, r3, #15
 80062fa:	4613      	mov	r3, r2
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	1a9b      	subs	r3, r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4413      	add	r3, r2
 800630a:	3304      	adds	r3, #4
 800630c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	0c5b      	lsrs	r3, r3, #17
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	2b02      	cmp	r3, #2
 8006318:	d124      	bne.n	8006364 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006320:	4013      	ands	r3, r2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d035      	beq.n	8006392 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	091b      	lsrs	r3, r3, #4
 800632e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006330:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006334:	b29b      	uxth	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	6a38      	ldr	r0, [r7, #32]
 800633a:	f007 fb6c 	bl	800da16 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	091b      	lsrs	r3, r3, #4
 8006346:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800634a:	441a      	add	r2, r3
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	699a      	ldr	r2, [r3, #24]
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	091b      	lsrs	r3, r3, #4
 8006358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800635c:	441a      	add	r2, r3
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	619a      	str	r2, [r3, #24]
 8006362:	e016      	b.n	8006392 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	0c5b      	lsrs	r3, r3, #17
 8006368:	f003 030f 	and.w	r3, r3, #15
 800636c:	2b06      	cmp	r3, #6
 800636e:	d110      	bne.n	8006392 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006376:	2208      	movs	r2, #8
 8006378:	4619      	mov	r1, r3
 800637a:	6a38      	ldr	r0, [r7, #32]
 800637c:	f007 fb4b 	bl	800da16 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	699a      	ldr	r2, [r3, #24]
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	091b      	lsrs	r3, r3, #4
 8006388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800638c:	441a      	add	r2, r3
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	699a      	ldr	r2, [r3, #24]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0210 	orr.w	r2, r2, #16
 80063a0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f007 fc9a 	bl	800dce0 <USB_ReadInterrupts>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063b6:	d16e      	bne.n	8006496 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f007 fca0 	bl	800dd06 <USB_ReadDevAllOutEpInterrupt>
 80063c6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80063c8:	e062      	b.n	8006490 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80063ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d057      	beq.n	8006484 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	4611      	mov	r1, r2
 80063de:	4618      	mov	r0, r3
 80063e0:	f007 fcc5 	bl	800dd6e <USB_ReadDevOutEPInterrupt>
 80063e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00c      	beq.n	800640a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fc:	461a      	mov	r2, r3
 80063fe:	2301      	movs	r3, #1
 8006400:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fd81 	bl	8006f0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f003 0308 	and.w	r3, r3, #8
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00c      	beq.n	800642e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006420:	461a      	mov	r2, r3
 8006422:	2308      	movs	r3, #8
 8006424:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006426:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fdbd 	bl	8006fa8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f003 0310 	and.w	r3, r3, #16
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006444:	461a      	mov	r2, r3
 8006446:	2310      	movs	r3, #16
 8006448:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f003 0320 	and.w	r3, r3, #32
 8006450:	2b00      	cmp	r3, #0
 8006452:	d008      	beq.n	8006466 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006460:	461a      	mov	r2, r3
 8006462:	2320      	movs	r3, #32
 8006464:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d009      	beq.n	8006484 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647c:	461a      	mov	r2, r3
 800647e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006482:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	3301      	adds	r3, #1
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	085b      	lsrs	r3, r3, #1
 800648e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	2b00      	cmp	r3, #0
 8006494:	d199      	bne.n	80063ca <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4618      	mov	r0, r3
 800649c:	f007 fc20 	bl	800dce0 <USB_ReadInterrupts>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064aa:	f040 8087 	bne.w	80065bc <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f007 fc41 	bl	800dd3a <USB_ReadDevAllInEpInterrupt>
 80064b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80064be:	e07a      	b.n	80065b6 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d06f      	beq.n	80065aa <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	4611      	mov	r1, r2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f007 fc68 	bl	800ddaa <USB_ReadDevInEPInterrupt>
 80064da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d020      	beq.n	8006528 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	2201      	movs	r2, #1
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	43db      	mvns	r3, r3
 8006500:	69f9      	ldr	r1, [r7, #28]
 8006502:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006506:	4013      	ands	r3, r2
 8006508:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006516:	461a      	mov	r2, r3
 8006518:	2301      	movs	r3, #1
 800651a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	b2db      	uxtb	r3, r3
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f009 fc01 	bl	800fd2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f003 0308 	and.w	r3, r3, #8
 800652e:	2b00      	cmp	r3, #0
 8006530:	d008      	beq.n	8006544 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653e:	461a      	mov	r2, r3
 8006540:	2308      	movs	r3, #8
 8006542:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f003 0310 	and.w	r3, r3, #16
 800654a:	2b00      	cmp	r3, #0
 800654c:	d008      	beq.n	8006560 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655a:	461a      	mov	r2, r3
 800655c:	2310      	movs	r3, #16
 800655e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	d008      	beq.n	800657c <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006576:	461a      	mov	r2, r3
 8006578:	2340      	movs	r3, #64	; 0x40
 800657a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d008      	beq.n	8006598 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006592:	461a      	mov	r2, r3
 8006594:	2302      	movs	r3, #2
 8006596:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80065a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fc29 	bl	8006dfc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	3301      	adds	r3, #1
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	085b      	lsrs	r3, r3, #1
 80065b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d181      	bne.n	80064c0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f007 fb8d 	bl	800dce0 <USB_ReadInterrupts>
 80065c6:	4603      	mov	r3, r0
 80065c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065d0:	d122      	bne.n	8006618 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	69fa      	ldr	r2, [r7, #28]
 80065dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e0:	f023 0301 	bic.w	r3, r3, #1
 80065e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d108      	bne.n	8006602 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80065f8:	2100      	movs	r1, #0
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f009 feac 	bl	8010358 <HAL_PCDEx_LPM_Callback>
 8006600:	e002      	b.n	8006608 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f009 fbfe 	bl	800fe04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695a      	ldr	r2, [r3, #20]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006616:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4618      	mov	r0, r3
 800661e:	f007 fb5f 	bl	800dce0 <USB_ReadInterrupts>
 8006622:	4603      	mov	r3, r0
 8006624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800662c:	d112      	bne.n	8006654 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b01      	cmp	r3, #1
 800663c:	d102      	bne.n	8006644 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f009 fbba 	bl	800fdb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695a      	ldr	r2, [r3, #20]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006652:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f007 fb41 	bl	800dce0 <USB_ReadInterrupts>
 800665e:	4603      	mov	r3, r0
 8006660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006668:	d121      	bne.n	80066ae <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695a      	ldr	r2, [r3, #20]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006678:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d111      	bne.n	80066a8 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006692:	089b      	lsrs	r3, r3, #2
 8006694:	f003 020f 	and.w	r2, r3, #15
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800669e:	2101      	movs	r1, #1
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f009 fe59 	bl	8010358 <HAL_PCDEx_LPM_Callback>
 80066a6:	e002      	b.n	80066ae <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f009 fb85 	bl	800fdb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f007 fb14 	bl	800dce0 <USB_ReadInterrupts>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c2:	f040 80c5 	bne.w	8006850 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	69fa      	ldr	r2, [r7, #28]
 80066d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066d4:	f023 0301 	bic.w	r3, r3, #1
 80066d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2110      	movs	r1, #16
 80066e0:	4618      	mov	r0, r3
 80066e2:	f006 fc89 	bl	800cff8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066e6:	2300      	movs	r3, #0
 80066e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ea:	e056      	b.n	800679a <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f8:	461a      	mov	r2, r3
 80066fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006710:	0151      	lsls	r1, r2, #5
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	440a      	add	r2, r1
 8006716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800671a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800671e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006730:	0151      	lsls	r1, r2, #5
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	440a      	add	r2, r1
 8006736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800673a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800673e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674c:	461a      	mov	r2, r3
 800674e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006752:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006764:	0151      	lsls	r1, r2, #5
 8006766:	69fa      	ldr	r2, [r7, #28]
 8006768:	440a      	add	r2, r1
 800676a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800676e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006772:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006784:	0151      	lsls	r1, r2, #5
 8006786:	69fa      	ldr	r2, [r7, #28]
 8006788:	440a      	add	r2, r1
 800678a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006792:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	3301      	adds	r3, #1
 8006798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d3a3      	bcc.n	80066ec <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067b2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80067b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d016      	beq.n	80067ee <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ca:	69fa      	ldr	r2, [r7, #28]
 80067cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067d0:	f043 030b 	orr.w	r3, r3, #11
 80067d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e0:	69fa      	ldr	r2, [r7, #28]
 80067e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067e6:	f043 030b 	orr.w	r3, r3, #11
 80067ea:	6453      	str	r3, [r2, #68]	; 0x44
 80067ec:	e015      	b.n	800681a <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006800:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006804:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006814:	f043 030b 	orr.w	r3, r3, #11
 8006818:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006828:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800682c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006838:	4619      	mov	r1, r3
 800683a:	4610      	mov	r0, r2
 800683c:	f007 fb14 	bl	800de68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695a      	ldr	r2, [r3, #20]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800684e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4618      	mov	r0, r3
 8006856:	f007 fa43 	bl	800dce0 <USB_ReadInterrupts>
 800685a:	4603      	mov	r3, r0
 800685c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006864:	d124      	bne.n	80068b0 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4618      	mov	r0, r3
 800686c:	f007 fad9 	bl	800de22 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4618      	mov	r0, r3
 8006876:	f006 fc20 	bl	800d0ba <USB_GetDevSpeed>
 800687a:	4603      	mov	r3, r0
 800687c:	461a      	mov	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681c      	ldr	r4, [r3, #0]
 8006886:	f001 fb0d 	bl	8007ea4 <HAL_RCC_GetHCLKFreq>
 800688a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006890:	b2db      	uxtb	r3, r3
 8006892:	461a      	mov	r2, r3
 8006894:	4620      	mov	r0, r4
 8006896:	f006 f97b 	bl	800cb90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f009 fa6d 	bl	800fd7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695a      	ldr	r2, [r3, #20]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80068ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f007 fa13 	bl	800dce0 <USB_ReadInterrupts>
 80068ba:	4603      	mov	r3, r0
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d10a      	bne.n	80068da <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f009 fa4a 	bl	800fd5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695a      	ldr	r2, [r3, #20]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f002 0208 	and.w	r2, r2, #8
 80068d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4618      	mov	r0, r3
 80068e0:	f007 f9fe 	bl	800dce0 <USB_ReadInterrupts>
 80068e4:	4603      	mov	r3, r0
 80068e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ee:	d10f      	bne.n	8006910 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f009 fabc 	bl	800fe78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695a      	ldr	r2, [r3, #20]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800690e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4618      	mov	r0, r3
 8006916:	f007 f9e3 	bl	800dce0 <USB_ReadInterrupts>
 800691a:	4603      	mov	r3, r0
 800691c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006920:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006924:	d10f      	bne.n	8006946 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	b2db      	uxtb	r3, r3
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f009 fa8f 	bl	800fe54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	695a      	ldr	r2, [r3, #20]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006944:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f007 f9c8 	bl	800dce0 <USB_ReadInterrupts>
 8006950:	4603      	mov	r3, r0
 8006952:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695a:	d10a      	bne.n	8006972 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f009 fa9d 	bl	800fe9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	695a      	ldr	r2, [r3, #20]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006970:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4618      	mov	r0, r3
 8006978:	f007 f9b2 	bl	800dce0 <USB_ReadInterrupts>
 800697c:	4603      	mov	r3, r0
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b04      	cmp	r3, #4
 8006984:	d115      	bne.n	80069b2 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f009 fa8d 	bl	800feb8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6859      	ldr	r1, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	605a      	str	r2, [r3, #4]
 80069ae:	e000      	b.n	80069b2 <HAL_PCD_IRQHandler+0x742>
      return;
 80069b0:	bf00      	nop
    }
  }
}
 80069b2:	3734      	adds	r7, #52	; 0x34
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd90      	pop	{r4, r7, pc}

080069b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <HAL_PCD_SetAddress+0x1a>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e013      	b.n	80069fa <HAL_PCD_SetAddress+0x42>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	78fa      	ldrb	r2, [r7, #3]
 80069e8:	4611      	mov	r1, r2
 80069ea:	4618      	mov	r0, r3
 80069ec:	f007 f910 	bl	800dc10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	4608      	mov	r0, r1
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	461a      	mov	r2, r3
 8006a10:	4603      	mov	r3, r0
 8006a12:	70fb      	strb	r3, [r7, #3]
 8006a14:	460b      	mov	r3, r1
 8006a16:	803b      	strh	r3, [r7, #0]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	da0f      	bge.n	8006a48 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	f003 020f 	and.w	r2, r3, #15
 8006a2e:	4613      	mov	r3, r2
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	1a9b      	subs	r3, r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	3338      	adds	r3, #56	; 0x38
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2201      	movs	r2, #1
 8006a44:	705a      	strb	r2, [r3, #1]
 8006a46:	e00f      	b.n	8006a68 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	f003 020f 	and.w	r2, r3, #15
 8006a4e:	4613      	mov	r3, r2
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	1a9b      	subs	r3, r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	3304      	adds	r3, #4
 8006a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006a74:	883a      	ldrh	r2, [r7, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	78ba      	ldrb	r2, [r7, #2]
 8006a7e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d004      	beq.n	8006a92 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a92:	78bb      	ldrb	r3, [r7, #2]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d102      	bne.n	8006a9e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d101      	bne.n	8006aac <HAL_PCD_EP_Open+0xaa>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e00e      	b.n	8006aca <HAL_PCD_EP_Open+0xc8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68f9      	ldr	r1, [r7, #12]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f006 fb1c 	bl	800d0f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006ac8:	7afb      	ldrb	r3, [r7, #11]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	460b      	mov	r3, r1
 8006adc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	da0f      	bge.n	8006b06 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ae6:	78fb      	ldrb	r3, [r7, #3]
 8006ae8:	f003 020f 	and.w	r2, r3, #15
 8006aec:	4613      	mov	r3, r2
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	1a9b      	subs	r3, r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	3338      	adds	r3, #56	; 0x38
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	4413      	add	r3, r2
 8006afa:	3304      	adds	r3, #4
 8006afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2201      	movs	r2, #1
 8006b02:	705a      	strb	r2, [r3, #1]
 8006b04:	e00f      	b.n	8006b26 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b06:	78fb      	ldrb	r3, [r7, #3]
 8006b08:	f003 020f 	and.w	r2, r3, #15
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	1a9b      	subs	r3, r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_PCD_EP_Close+0x6e>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e00e      	b.n	8006b5e <HAL_PCD_EP_Close+0x8c>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68f9      	ldr	r1, [r7, #12]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f006 fb5a 	bl	800d208 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b086      	sub	sp, #24
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	60f8      	str	r0, [r7, #12]
 8006b6e:	607a      	str	r2, [r7, #4]
 8006b70:	603b      	str	r3, [r7, #0]
 8006b72:	460b      	mov	r3, r1
 8006b74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b76:	7afb      	ldrb	r3, [r7, #11]
 8006b78:	f003 020f 	and.w	r2, r3, #15
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	1a9b      	subs	r3, r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ba8:	7afb      	ldrb	r3, [r7, #11]
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006bb4:	7afb      	ldrb	r3, [r7, #11]
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d106      	bne.n	8006bcc <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6979      	ldr	r1, [r7, #20]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f006 fdd7 	bl	800d778 <USB_EP0StartXfer>
 8006bca:	e005      	b.n	8006bd8 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6979      	ldr	r1, [r7, #20]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f006 fbf4 	bl	800d3c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	460b      	mov	r3, r1
 8006bec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006bee:	78fb      	ldrb	r3, [r7, #3]
 8006bf0:	f003 020f 	and.w	r2, r3, #15
 8006bf4:	6879      	ldr	r1, [r7, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	1a9b      	subs	r3, r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
 8006c00:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006c04:	681b      	ldr	r3, [r3, #0]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b086      	sub	sp, #24
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
 8006c1e:	460b      	mov	r3, r1
 8006c20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c22:	7afb      	ldrb	r3, [r7, #11]
 8006c24:	f003 020f 	and.w	r2, r3, #15
 8006c28:	4613      	mov	r3, r2
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	1a9b      	subs	r3, r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	3338      	adds	r3, #56	; 0x38
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	3304      	adds	r3, #4
 8006c38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c52:	7afb      	ldrb	r3, [r7, #11]
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c5e:	7afb      	ldrb	r3, [r7, #11]
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d106      	bne.n	8006c76 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6979      	ldr	r1, [r7, #20]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f006 fd82 	bl	800d778 <USB_EP0StartXfer>
 8006c74:	e005      	b.n	8006c82 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6979      	ldr	r1, [r7, #20]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f006 fb9f 	bl	800d3c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	f003 020f 	and.w	r2, r3, #15
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d901      	bls.n	8006caa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e04e      	b.n	8006d48 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006caa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	da0f      	bge.n	8006cd2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cb2:	78fb      	ldrb	r3, [r7, #3]
 8006cb4:	f003 020f 	and.w	r2, r3, #15
 8006cb8:	4613      	mov	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	3338      	adds	r3, #56	; 0x38
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	705a      	strb	r2, [r3, #1]
 8006cd0:	e00d      	b.n	8006cee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006cd2:	78fa      	ldrb	r2, [r7, #3]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	00db      	lsls	r3, r3, #3
 8006cd8:	1a9b      	subs	r3, r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d101      	bne.n	8006d0e <HAL_PCD_EP_SetStall+0x82>
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	e01c      	b.n	8006d48 <HAL_PCD_EP_SetStall+0xbc>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68f9      	ldr	r1, [r7, #12]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f006 fea3 	bl	800da68 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d22:	78fb      	ldrb	r3, [r7, #3]
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d108      	bne.n	8006d3e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d36:	4619      	mov	r1, r3
 8006d38:	4610      	mov	r0, r2
 8006d3a:	f007 f895 	bl	800de68 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	f003 020f 	and.w	r2, r3, #15
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d901      	bls.n	8006d6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e042      	b.n	8006df4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da0f      	bge.n	8006d96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	f003 020f 	and.w	r2, r3, #15
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	1a9b      	subs	r3, r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	3338      	adds	r3, #56	; 0x38
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	4413      	add	r3, r2
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	705a      	strb	r2, [r3, #1]
 8006d94:	e00f      	b.n	8006db6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d96:	78fb      	ldrb	r3, [r7, #3]
 8006d98:	f003 020f 	and.w	r2, r3, #15
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	1a9b      	subs	r3, r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	4413      	add	r3, r2
 8006dac:	3304      	adds	r3, #4
 8006dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	f003 030f 	and.w	r3, r3, #15
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <HAL_PCD_EP_ClrStall+0x86>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	e00e      	b.n	8006df4 <HAL_PCD_EP_ClrStall+0xa4>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68f9      	ldr	r1, [r7, #12]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f006 fead 	bl	800db44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	4613      	mov	r3, r2
 8006e14:	00db      	lsls	r3, r3, #3
 8006e16:	1a9b      	subs	r3, r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	3338      	adds	r3, #56	; 0x38
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	4413      	add	r3, r2
 8006e20:	3304      	adds	r3, #4
 8006e22:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	699a      	ldr	r2, [r3, #24]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d901      	bls.n	8006e34 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e067      	b.n	8006f04 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	695a      	ldr	r2, [r3, #20]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d902      	bls.n	8006e50 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	3303      	adds	r3, #3
 8006e54:	089b      	lsrs	r3, r3, #2
 8006e56:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e58:	e026      	b.n	8006ea8 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	695a      	ldr	r2, [r3, #20]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	69fa      	ldr	r2, [r7, #28]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d902      	bls.n	8006e76 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	3303      	adds	r3, #3
 8006e7a:	089b      	lsrs	r3, r3, #2
 8006e7c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	68d9      	ldr	r1, [r3, #12]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	6978      	ldr	r0, [r7, #20]
 8006e8c:	f006 fd92 	bl	800d9b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	441a      	add	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	699a      	ldr	r2, [r3, #24]
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	441a      	add	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d809      	bhi.n	8006ed2 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	699a      	ldr	r2, [r3, #24]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d203      	bcs.n	8006ed2 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1c3      	bne.n	8006e5a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	695a      	ldr	r2, [r3, #20]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d811      	bhi.n	8006f02 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	43db      	mvns	r3, r3
 8006ef8:	6939      	ldr	r1, [r7, #16]
 8006efa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006efe:	4013      	ands	r3, r2
 8006f00:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3720      	adds	r7, #32
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	333c      	adds	r3, #60	; 0x3c
 8006f24:	3304      	adds	r3, #4
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4a19      	ldr	r2, [pc, #100]	; (8006fa4 <PCD_EP_OutXfrComplete_int+0x98>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d124      	bne.n	8006f8c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f58:	461a      	mov	r2, r3
 8006f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f5e:	6093      	str	r3, [r2, #8]
 8006f60:	e01a      	b.n	8006f98 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f003 0320 	and.w	r3, r3, #32
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d008      	beq.n	8006f7e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f78:	461a      	mov	r2, r3
 8006f7a:	2320      	movs	r3, #32
 8006f7c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f008 feb5 	bl	800fcf4 <HAL_PCD_DataOutStageCallback>
 8006f8a:	e005      	b.n	8006f98 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f008 feae 	bl	800fcf4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	4f54310a 	.word	0x4f54310a

08006fa8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	333c      	adds	r3, #60	; 0x3c
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4a0c      	ldr	r2, [pc, #48]	; (800700c <PCD_EP_OutSetupPacket_int+0x64>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d90e      	bls.n	8006ffc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d009      	beq.n	8006ffc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ffa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f008 fe67 	bl	800fcd0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	4f54300a 	.word	0x4f54300a

08007010 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]
 800701c:	4613      	mov	r3, r2
 800701e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007028:	78fb      	ldrb	r3, [r7, #3]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d107      	bne.n	800703e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800702e:	883b      	ldrh	r3, [r7, #0]
 8007030:	0419      	lsls	r1, r3, #16
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	430a      	orrs	r2, r1
 800703a:	629a      	str	r2, [r3, #40]	; 0x28
 800703c:	e028      	b.n	8007090 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007044:	0c1b      	lsrs	r3, r3, #16
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	4413      	add	r3, r2
 800704a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800704c:	2300      	movs	r3, #0
 800704e:	73fb      	strb	r3, [r7, #15]
 8007050:	e00d      	b.n	800706e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	3340      	adds	r3, #64	; 0x40
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	0c1b      	lsrs	r3, r3, #16
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	4413      	add	r3, r2
 8007066:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	3301      	adds	r3, #1
 800706c:	73fb      	strb	r3, [r7, #15]
 800706e:	7bfa      	ldrb	r2, [r7, #15]
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	3b01      	subs	r3, #1
 8007074:	429a      	cmp	r2, r3
 8007076:	d3ec      	bcc.n	8007052 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007078:	883b      	ldrh	r3, [r7, #0]
 800707a:	0418      	lsls	r0, r3, #16
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6819      	ldr	r1, [r3, #0]
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	3b01      	subs	r3, #1
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	4302      	orrs	r2, r0
 8007088:	3340      	adds	r3, #64	; 0x40
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	440b      	add	r3, r1
 800708e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	460b      	mov	r3, r1
 80070a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	887a      	ldrh	r2, [r7, #2]
 80070b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070f2:	f043 0303 	orr.w	r3, r3, #3
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800710c:	4b05      	ldr	r3, [pc, #20]	; (8007124 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a04      	ldr	r2, [pc, #16]	; (8007124 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007116:	6013      	str	r3, [r2, #0]
}
 8007118:	bf00      	nop
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40007000 	.word	0x40007000

08007128 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007128:	b480      	push	{r7}
 800712a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800712c:	4b0d      	ldr	r3, [pc, #52]	; (8007164 <HAL_PWREx_GetVoltageRange+0x3c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007138:	d102      	bne.n	8007140 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800713a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800713e:	e00b      	b.n	8007158 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8007140:	4b08      	ldr	r3, [pc, #32]	; (8007164 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800714e:	d102      	bne.n	8007156 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8007150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007154:	e000      	b.n	8007158 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8007156:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8007158:	4618      	mov	r0, r3
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	40007000 	.word	0x40007000

08007168 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d141      	bne.n	80071fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007176:	4b4b      	ldr	r3, [pc, #300]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800717e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007182:	d131      	bne.n	80071e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007184:	4b47      	ldr	r3, [pc, #284]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800718a:	4a46      	ldr	r2, [pc, #280]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800718c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007190:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007194:	4b43      	ldr	r3, [pc, #268]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800719c:	4a41      	ldr	r2, [pc, #260]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800719e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80071a4:	4b40      	ldr	r3, [pc, #256]	; (80072a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2232      	movs	r2, #50	; 0x32
 80071aa:	fb02 f303 	mul.w	r3, r2, r3
 80071ae:	4a3f      	ldr	r2, [pc, #252]	; (80072ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80071b0:	fba2 2303 	umull	r2, r3, r2, r3
 80071b4:	0c9b      	lsrs	r3, r3, #18
 80071b6:	3301      	adds	r3, #1
 80071b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071ba:	e002      	b.n	80071c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3b01      	subs	r3, #1
 80071c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071c2:	4b38      	ldr	r3, [pc, #224]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ce:	d102      	bne.n	80071d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f2      	bne.n	80071bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80071d6:	4b33      	ldr	r3, [pc, #204]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e2:	d158      	bne.n	8007296 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e057      	b.n	8007298 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071e8:	4b2e      	ldr	r3, [pc, #184]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ee:	4a2d      	ldr	r2, [pc, #180]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80071f8:	e04d      	b.n	8007296 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007200:	d141      	bne.n	8007286 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007202:	4b28      	ldr	r3, [pc, #160]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800720a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800720e:	d131      	bne.n	8007274 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007210:	4b24      	ldr	r3, [pc, #144]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007216:	4a23      	ldr	r2, [pc, #140]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800721c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007220:	4b20      	ldr	r3, [pc, #128]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007228:	4a1e      	ldr	r2, [pc, #120]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800722a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800722e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007230:	4b1d      	ldr	r3, [pc, #116]	; (80072a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2232      	movs	r2, #50	; 0x32
 8007236:	fb02 f303 	mul.w	r3, r2, r3
 800723a:	4a1c      	ldr	r2, [pc, #112]	; (80072ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800723c:	fba2 2303 	umull	r2, r3, r2, r3
 8007240:	0c9b      	lsrs	r3, r3, #18
 8007242:	3301      	adds	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007246:	e002      	b.n	800724e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3b01      	subs	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800724e:	4b15      	ldr	r3, [pc, #84]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800725a:	d102      	bne.n	8007262 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f2      	bne.n	8007248 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007262:	4b10      	ldr	r3, [pc, #64]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800726a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800726e:	d112      	bne.n	8007296 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e011      	b.n	8007298 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007274:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800727a:	4a0a      	ldr	r2, [pc, #40]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800727c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007280:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007284:	e007      	b.n	8007296 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007286:	4b07      	ldr	r3, [pc, #28]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800728e:	4a05      	ldr	r2, [pc, #20]	; (80072a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007290:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007294:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	40007000 	.word	0x40007000
 80072a8:	20000000 	.word	0x20000000
 80072ac:	431bde83 	.word	0x431bde83

080072b0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	4a04      	ldr	r2, [pc, #16]	; (80072cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80072ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072be:	6053      	str	r3, [r2, #4]
}
 80072c0:	bf00      	nop
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40007000 	.word	0x40007000

080072d0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80072d0:	b480      	push	{r7}
 80072d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	4a04      	ldr	r2, [pc, #16]	; (80072ec <HAL_PWREx_EnableVddIO2+0x1c>)
 80072da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072de:	6053      	str	r3, [r2, #4]
}
 80072e0:	bf00      	nop
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	40007000 	.word	0x40007000

080072f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d102      	bne.n	8007304 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	f000 bc16 	b.w	8007b30 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007304:	4ba0      	ldr	r3, [pc, #640]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f003 030c 	and.w	r3, r3, #12
 800730c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800730e:	4b9e      	ldr	r3, [pc, #632]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0310 	and.w	r3, r3, #16
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 80e4 	beq.w	80074ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d007      	beq.n	800733c <HAL_RCC_OscConfig+0x4c>
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	2b0c      	cmp	r3, #12
 8007330:	f040 808b 	bne.w	800744a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2b01      	cmp	r3, #1
 8007338:	f040 8087 	bne.w	800744a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800733c:	4b92      	ldr	r3, [pc, #584]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d005      	beq.n	8007354 <HAL_RCC_OscConfig+0x64>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e3ed      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a1a      	ldr	r2, [r3, #32]
 8007358:	4b8b      	ldr	r3, [pc, #556]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <HAL_RCC_OscConfig+0x7e>
 8007364:	4b88      	ldr	r3, [pc, #544]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800736c:	e005      	b.n	800737a <HAL_RCC_OscConfig+0x8a>
 800736e:	4b86      	ldr	r3, [pc, #536]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007374:	091b      	lsrs	r3, r3, #4
 8007376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800737a:	4293      	cmp	r3, r2
 800737c:	d223      	bcs.n	80073c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fdc6 	bl	8007f14 <RCC_SetFlashLatencyFromMSIRange>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e3ce      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007392:	4b7d      	ldr	r3, [pc, #500]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a7c      	ldr	r2, [pc, #496]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007398:	f043 0308 	orr.w	r3, r3, #8
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	4b7a      	ldr	r3, [pc, #488]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	4977      	ldr	r1, [pc, #476]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073b0:	4b75      	ldr	r3, [pc, #468]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	021b      	lsls	r3, r3, #8
 80073be:	4972      	ldr	r1, [pc, #456]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	604b      	str	r3, [r1, #4]
 80073c4:	e025      	b.n	8007412 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073c6:	4b70      	ldr	r3, [pc, #448]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a6f      	ldr	r2, [pc, #444]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073cc:	f043 0308 	orr.w	r3, r3, #8
 80073d0:	6013      	str	r3, [r2, #0]
 80073d2:	4b6d      	ldr	r3, [pc, #436]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	496a      	ldr	r1, [pc, #424]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073e4:	4b68      	ldr	r3, [pc, #416]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	021b      	lsls	r3, r3, #8
 80073f2:	4965      	ldr	r1, [pc, #404]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d109      	bne.n	8007412 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fd86 	bl	8007f14 <RCC_SetFlashLatencyFromMSIRange>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e38e      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007412:	f000 fcbf 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8007416:	4601      	mov	r1, r0
 8007418:	4b5b      	ldr	r3, [pc, #364]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	091b      	lsrs	r3, r3, #4
 800741e:	f003 030f 	and.w	r3, r3, #15
 8007422:	4a5a      	ldr	r2, [pc, #360]	; (800758c <HAL_RCC_OscConfig+0x29c>)
 8007424:	5cd3      	ldrb	r3, [r2, r3]
 8007426:	f003 031f 	and.w	r3, r3, #31
 800742a:	fa21 f303 	lsr.w	r3, r1, r3
 800742e:	4a58      	ldr	r2, [pc, #352]	; (8007590 <HAL_RCC_OscConfig+0x2a0>)
 8007430:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007432:	4b58      	ldr	r3, [pc, #352]	; (8007594 <HAL_RCC_OscConfig+0x2a4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4618      	mov	r0, r3
 8007438:	f7fb ff82 	bl	8003340 <HAL_InitTick>
 800743c:	4603      	mov	r3, r0
 800743e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d052      	beq.n	80074ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	e372      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d032      	beq.n	80074b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007452:	4b4d      	ldr	r3, [pc, #308]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a4c      	ldr	r2, [pc, #304]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007458:	f043 0301 	orr.w	r3, r3, #1
 800745c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800745e:	f7fb ffbf 	bl	80033e0 <HAL_GetTick>
 8007462:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007464:	e008      	b.n	8007478 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007466:	f7fb ffbb 	bl	80033e0 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d901      	bls.n	8007478 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e35b      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007478:	4b43      	ldr	r3, [pc, #268]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0f0      	beq.n	8007466 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007484:	4b40      	ldr	r3, [pc, #256]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a3f      	ldr	r2, [pc, #252]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800748a:	f043 0308 	orr.w	r3, r3, #8
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	4b3d      	ldr	r3, [pc, #244]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	493a      	ldr	r1, [pc, #232]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074a2:	4b39      	ldr	r3, [pc, #228]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	021b      	lsls	r3, r3, #8
 80074b0:	4935      	ldr	r1, [pc, #212]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	604b      	str	r3, [r1, #4]
 80074b6:	e01a      	b.n	80074ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80074b8:	4b33      	ldr	r3, [pc, #204]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a32      	ldr	r2, [pc, #200]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80074be:	f023 0301 	bic.w	r3, r3, #1
 80074c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80074c4:	f7fb ff8c 	bl	80033e0 <HAL_GetTick>
 80074c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80074ca:	e008      	b.n	80074de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80074cc:	f7fb ff88 	bl	80033e0 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e328      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80074de:	4b2a      	ldr	r3, [pc, #168]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1f0      	bne.n	80074cc <HAL_RCC_OscConfig+0x1dc>
 80074ea:	e000      	b.n	80074ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80074ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d073      	beq.n	80075e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d005      	beq.n	800750c <HAL_RCC_OscConfig+0x21c>
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	2b0c      	cmp	r3, #12
 8007504:	d10e      	bne.n	8007524 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2b03      	cmp	r3, #3
 800750a:	d10b      	bne.n	8007524 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800750c:	4b1e      	ldr	r3, [pc, #120]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d063      	beq.n	80075e0 <HAL_RCC_OscConfig+0x2f0>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d15f      	bne.n	80075e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e305      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800752c:	d106      	bne.n	800753c <HAL_RCC_OscConfig+0x24c>
 800752e:	4b16      	ldr	r3, [pc, #88]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a15      	ldr	r2, [pc, #84]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	e01d      	b.n	8007578 <HAL_RCC_OscConfig+0x288>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007544:	d10c      	bne.n	8007560 <HAL_RCC_OscConfig+0x270>
 8007546:	4b10      	ldr	r3, [pc, #64]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a0f      	ldr	r2, [pc, #60]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800754c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	4b0d      	ldr	r3, [pc, #52]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a0c      	ldr	r2, [pc, #48]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	e00b      	b.n	8007578 <HAL_RCC_OscConfig+0x288>
 8007560:	4b09      	ldr	r3, [pc, #36]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a08      	ldr	r2, [pc, #32]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800756a:	6013      	str	r3, [r2, #0]
 800756c:	4b06      	ldr	r3, [pc, #24]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a05      	ldr	r2, [pc, #20]	; (8007588 <HAL_RCC_OscConfig+0x298>)
 8007572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d01b      	beq.n	80075b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007580:	f7fb ff2e 	bl	80033e0 <HAL_GetTick>
 8007584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007586:	e010      	b.n	80075aa <HAL_RCC_OscConfig+0x2ba>
 8007588:	40021000 	.word	0x40021000
 800758c:	080168c4 	.word	0x080168c4
 8007590:	20000000 	.word	0x20000000
 8007594:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007598:	f7fb ff22 	bl	80033e0 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b64      	cmp	r3, #100	; 0x64
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e2c2      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075aa:	4baf      	ldr	r3, [pc, #700]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0f0      	beq.n	8007598 <HAL_RCC_OscConfig+0x2a8>
 80075b6:	e014      	b.n	80075e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b8:	f7fb ff12 	bl	80033e0 <HAL_GetTick>
 80075bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075be:	e008      	b.n	80075d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075c0:	f7fb ff0e 	bl	80033e0 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b64      	cmp	r3, #100	; 0x64
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e2ae      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075d2:	4ba5      	ldr	r3, [pc, #660]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1f0      	bne.n	80075c0 <HAL_RCC_OscConfig+0x2d0>
 80075de:	e000      	b.n	80075e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d060      	beq.n	80076b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d005      	beq.n	8007600 <HAL_RCC_OscConfig+0x310>
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	2b0c      	cmp	r3, #12
 80075f8:	d119      	bne.n	800762e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d116      	bne.n	800762e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007600:	4b99      	ldr	r3, [pc, #612]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_RCC_OscConfig+0x328>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e28b      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007618:	4b93      	ldr	r3, [pc, #588]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	061b      	lsls	r3, r3, #24
 8007626:	4990      	ldr	r1, [pc, #576]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007628:	4313      	orrs	r3, r2
 800762a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800762c:	e040      	b.n	80076b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d023      	beq.n	800767e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007636:	4b8c      	ldr	r3, [pc, #560]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a8b      	ldr	r2, [pc, #556]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800763c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007642:	f7fb fecd 	bl	80033e0 <HAL_GetTick>
 8007646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007648:	e008      	b.n	800765c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800764a:	f7fb fec9 	bl	80033e0 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d901      	bls.n	800765c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e269      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800765c:	4b82      	ldr	r3, [pc, #520]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007664:	2b00      	cmp	r3, #0
 8007666:	d0f0      	beq.n	800764a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007668:	4b7f      	ldr	r3, [pc, #508]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	061b      	lsls	r3, r3, #24
 8007676:	497c      	ldr	r1, [pc, #496]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007678:	4313      	orrs	r3, r2
 800767a:	604b      	str	r3, [r1, #4]
 800767c:	e018      	b.n	80076b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800767e:	4b7a      	ldr	r3, [pc, #488]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a79      	ldr	r2, [pc, #484]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800768a:	f7fb fea9 	bl	80033e0 <HAL_GetTick>
 800768e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007690:	e008      	b.n	80076a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007692:	f7fb fea5 	bl	80033e0 <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	2b02      	cmp	r3, #2
 800769e:	d901      	bls.n	80076a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e245      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80076a4:	4b70      	ldr	r3, [pc, #448]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1f0      	bne.n	8007692 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0308 	and.w	r3, r3, #8
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d03c      	beq.n	8007736 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01c      	beq.n	80076fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076c4:	4b68      	ldr	r3, [pc, #416]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80076c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076ca:	4a67      	ldr	r2, [pc, #412]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80076cc:	f043 0301 	orr.w	r3, r3, #1
 80076d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d4:	f7fb fe84 	bl	80033e0 <HAL_GetTick>
 80076d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076da:	e008      	b.n	80076ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076dc:	f7fb fe80 	bl	80033e0 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e220      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076ee:	4b5e      	ldr	r3, [pc, #376]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80076f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0ef      	beq.n	80076dc <HAL_RCC_OscConfig+0x3ec>
 80076fc:	e01b      	b.n	8007736 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076fe:	4b5a      	ldr	r3, [pc, #360]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007704:	4a58      	ldr	r2, [pc, #352]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007706:	f023 0301 	bic.w	r3, r3, #1
 800770a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800770e:	f7fb fe67 	bl	80033e0 <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007714:	e008      	b.n	8007728 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007716:	f7fb fe63 	bl	80033e0 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	d901      	bls.n	8007728 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e203      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007728:	4b4f      	ldr	r3, [pc, #316]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800772a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1ef      	bne.n	8007716 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0304 	and.w	r3, r3, #4
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 80a6 	beq.w	8007890 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007744:	2300      	movs	r3, #0
 8007746:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007748:	4b47      	ldr	r3, [pc, #284]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800774a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10d      	bne.n	8007770 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007754:	4b44      	ldr	r3, [pc, #272]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007758:	4a43      	ldr	r2, [pc, #268]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800775a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800775e:	6593      	str	r3, [r2, #88]	; 0x58
 8007760:	4b41      	ldr	r3, [pc, #260]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007768:	60bb      	str	r3, [r7, #8]
 800776a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800776c:	2301      	movs	r3, #1
 800776e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007770:	4b3e      	ldr	r3, [pc, #248]	; (800786c <HAL_RCC_OscConfig+0x57c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007778:	2b00      	cmp	r3, #0
 800777a:	d118      	bne.n	80077ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800777c:	4b3b      	ldr	r3, [pc, #236]	; (800786c <HAL_RCC_OscConfig+0x57c>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a3a      	ldr	r2, [pc, #232]	; (800786c <HAL_RCC_OscConfig+0x57c>)
 8007782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007786:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007788:	f7fb fe2a 	bl	80033e0 <HAL_GetTick>
 800778c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800778e:	e008      	b.n	80077a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007790:	f7fb fe26 	bl	80033e0 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b02      	cmp	r3, #2
 800779c:	d901      	bls.n	80077a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e1c6      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077a2:	4b32      	ldr	r3, [pc, #200]	; (800786c <HAL_RCC_OscConfig+0x57c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0f0      	beq.n	8007790 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d108      	bne.n	80077c8 <HAL_RCC_OscConfig+0x4d8>
 80077b6:	4b2c      	ldr	r3, [pc, #176]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80077b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077bc:	4a2a      	ldr	r2, [pc, #168]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80077be:	f043 0301 	orr.w	r3, r3, #1
 80077c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077c6:	e024      	b.n	8007812 <HAL_RCC_OscConfig+0x522>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	2b05      	cmp	r3, #5
 80077ce:	d110      	bne.n	80077f2 <HAL_RCC_OscConfig+0x502>
 80077d0:	4b25      	ldr	r3, [pc, #148]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80077d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d6:	4a24      	ldr	r2, [pc, #144]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80077d8:	f043 0304 	orr.w	r3, r3, #4
 80077dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077e0:	4b21      	ldr	r3, [pc, #132]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80077e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e6:	4a20      	ldr	r2, [pc, #128]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80077e8:	f043 0301 	orr.w	r3, r3, #1
 80077ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077f0:	e00f      	b.n	8007812 <HAL_RCC_OscConfig+0x522>
 80077f2:	4b1d      	ldr	r3, [pc, #116]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80077f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f8:	4a1b      	ldr	r2, [pc, #108]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 80077fa:	f023 0301 	bic.w	r3, r3, #1
 80077fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007802:	4b19      	ldr	r3, [pc, #100]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 8007804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007808:	4a17      	ldr	r2, [pc, #92]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800780a:	f023 0304 	bic.w	r3, r3, #4
 800780e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d016      	beq.n	8007848 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800781a:	f7fb fde1 	bl	80033e0 <HAL_GetTick>
 800781e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007820:	e00a      	b.n	8007838 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007822:	f7fb fddd 	bl	80033e0 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007830:	4293      	cmp	r3, r2
 8007832:	d901      	bls.n	8007838 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e17b      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007838:	4b0b      	ldr	r3, [pc, #44]	; (8007868 <HAL_RCC_OscConfig+0x578>)
 800783a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0ed      	beq.n	8007822 <HAL_RCC_OscConfig+0x532>
 8007846:	e01a      	b.n	800787e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007848:	f7fb fdca 	bl	80033e0 <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800784e:	e00f      	b.n	8007870 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007850:	f7fb fdc6 	bl	80033e0 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	f241 3288 	movw	r2, #5000	; 0x1388
 800785e:	4293      	cmp	r3, r2
 8007860:	d906      	bls.n	8007870 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e164      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
 8007866:	bf00      	nop
 8007868:	40021000 	.word	0x40021000
 800786c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007870:	4ba8      	ldr	r3, [pc, #672]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e8      	bne.n	8007850 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800787e:	7ffb      	ldrb	r3, [r7, #31]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d105      	bne.n	8007890 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007884:	4ba3      	ldr	r3, [pc, #652]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007888:	4aa2      	ldr	r2, [pc, #648]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 800788a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800788e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0320 	and.w	r3, r3, #32
 8007898:	2b00      	cmp	r3, #0
 800789a:	d03c      	beq.n	8007916 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d01c      	beq.n	80078de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078a4:	4b9b      	ldr	r3, [pc, #620]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80078a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078aa:	4a9a      	ldr	r2, [pc, #616]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80078ac:	f043 0301 	orr.w	r3, r3, #1
 80078b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b4:	f7fb fd94 	bl	80033e0 <HAL_GetTick>
 80078b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078ba:	e008      	b.n	80078ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078bc:	f7fb fd90 	bl	80033e0 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e130      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078ce:	4b91      	ldr	r3, [pc, #580]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80078d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078d4:	f003 0302 	and.w	r3, r3, #2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0ef      	beq.n	80078bc <HAL_RCC_OscConfig+0x5cc>
 80078dc:	e01b      	b.n	8007916 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078de:	4b8d      	ldr	r3, [pc, #564]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80078e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078e4:	4a8b      	ldr	r2, [pc, #556]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80078e6:	f023 0301 	bic.w	r3, r3, #1
 80078ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ee:	f7fb fd77 	bl	80033e0 <HAL_GetTick>
 80078f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078f4:	e008      	b.n	8007908 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078f6:	f7fb fd73 	bl	80033e0 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e113      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007908:	4b82      	ldr	r3, [pc, #520]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 800790a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1ef      	bne.n	80078f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 8107 	beq.w	8007b2e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	2b02      	cmp	r3, #2
 8007926:	f040 80cb 	bne.w	8007ac0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800792a:	4b7a      	ldr	r3, [pc, #488]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f003 0203 	and.w	r2, r3, #3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793a:	429a      	cmp	r2, r3
 800793c:	d12c      	bne.n	8007998 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007948:	3b01      	subs	r3, #1
 800794a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800794c:	429a      	cmp	r2, r3
 800794e:	d123      	bne.n	8007998 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800795c:	429a      	cmp	r2, r3
 800795e:	d11b      	bne.n	8007998 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800796c:	429a      	cmp	r2, r3
 800796e:	d113      	bne.n	8007998 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797a:	085b      	lsrs	r3, r3, #1
 800797c:	3b01      	subs	r3, #1
 800797e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007980:	429a      	cmp	r2, r3
 8007982:	d109      	bne.n	8007998 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	085b      	lsrs	r3, r3, #1
 8007990:	3b01      	subs	r3, #1
 8007992:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007994:	429a      	cmp	r2, r3
 8007996:	d06d      	beq.n	8007a74 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b0c      	cmp	r3, #12
 800799c:	d068      	beq.n	8007a70 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800799e:	4b5d      	ldr	r3, [pc, #372]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d105      	bne.n	80079b6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80079aa:	4b5a      	ldr	r3, [pc, #360]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e0ba      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80079ba:	4b56      	ldr	r3, [pc, #344]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a55      	ldr	r2, [pc, #340]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80079c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80079c6:	f7fb fd0b 	bl	80033e0 <HAL_GetTick>
 80079ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079cc:	e008      	b.n	80079e0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079ce:	f7fb fd07 	bl	80033e0 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d901      	bls.n	80079e0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e0a7      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079e0:	4b4c      	ldr	r3, [pc, #304]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1f0      	bne.n	80079ce <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079ec:	4b49      	ldr	r3, [pc, #292]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	4b49      	ldr	r3, [pc, #292]	; (8007b18 <HAL_RCC_OscConfig+0x828>)
 80079f2:	4013      	ands	r3, r2
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80079fc:	3a01      	subs	r2, #1
 80079fe:	0112      	lsls	r2, r2, #4
 8007a00:	4311      	orrs	r1, r2
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a06:	0212      	lsls	r2, r2, #8
 8007a08:	4311      	orrs	r1, r2
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007a0e:	0852      	lsrs	r2, r2, #1
 8007a10:	3a01      	subs	r2, #1
 8007a12:	0552      	lsls	r2, r2, #21
 8007a14:	4311      	orrs	r1, r2
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007a1a:	0852      	lsrs	r2, r2, #1
 8007a1c:	3a01      	subs	r2, #1
 8007a1e:	0652      	lsls	r2, r2, #25
 8007a20:	4311      	orrs	r1, r2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a26:	06d2      	lsls	r2, r2, #27
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	493a      	ldr	r1, [pc, #232]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007a30:	4b38      	ldr	r3, [pc, #224]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a37      	ldr	r2, [pc, #220]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a3c:	4b35      	ldr	r3, [pc, #212]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	4a34      	ldr	r2, [pc, #208]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a48:	f7fb fcca 	bl	80033e0 <HAL_GetTick>
 8007a4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a4e:	e008      	b.n	8007a62 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a50:	f7fb fcc6 	bl	80033e0 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d901      	bls.n	8007a62 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e066      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a62:	4b2c      	ldr	r3, [pc, #176]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0f0      	beq.n	8007a50 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007a6e:	e05e      	b.n	8007b2e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e05d      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a74:	4b27      	ldr	r3, [pc, #156]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d156      	bne.n	8007b2e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007a80:	4b24      	ldr	r3, [pc, #144]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a23      	ldr	r2, [pc, #140]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a8c:	4b21      	ldr	r3, [pc, #132]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	4a20      	ldr	r2, [pc, #128]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007a98:	f7fb fca2 	bl	80033e0 <HAL_GetTick>
 8007a9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a9e:	e008      	b.n	8007ab2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aa0:	f7fb fc9e 	bl	80033e0 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d901      	bls.n	8007ab2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e03e      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ab2:	4b18      	ldr	r3, [pc, #96]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0f0      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x7b0>
 8007abe:	e036      	b.n	8007b2e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	2b0c      	cmp	r3, #12
 8007ac4:	d031      	beq.n	8007b2a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ac6:	4b13      	ldr	r3, [pc, #76]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a12      	ldr	r2, [pc, #72]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007acc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ad0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007ad2:	4b10      	ldr	r3, [pc, #64]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d105      	bne.n	8007aea <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007ade:	4b0d      	ldr	r3, [pc, #52]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	4a0c      	ldr	r2, [pc, #48]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007ae4:	f023 0303 	bic.w	r3, r3, #3
 8007ae8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007aea:	4b0a      	ldr	r3, [pc, #40]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	4a09      	ldr	r2, [pc, #36]	; (8007b14 <HAL_RCC_OscConfig+0x824>)
 8007af0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007af8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007afa:	f7fb fc71 	bl	80033e0 <HAL_GetTick>
 8007afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b00:	e00c      	b.n	8007b1c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b02:	f7fb fc6d 	bl	80033e0 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d905      	bls.n	8007b1c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e00d      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
 8007b14:	40021000 	.word	0x40021000
 8007b18:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b1c:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <HAL_RCC_OscConfig+0x848>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1ec      	bne.n	8007b02 <HAL_RCC_OscConfig+0x812>
 8007b28:	e001      	b.n	8007b2e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3720      	adds	r7, #32
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	40021000 	.word	0x40021000

08007b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007b46:	2300      	movs	r3, #0
 8007b48:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e10f      	b.n	8007d74 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b54:	4b89      	ldr	r3, [pc, #548]	; (8007d7c <HAL_RCC_ClockConfig+0x240>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 030f 	and.w	r3, r3, #15
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d910      	bls.n	8007b84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b62:	4b86      	ldr	r3, [pc, #536]	; (8007d7c <HAL_RCC_ClockConfig+0x240>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f023 020f 	bic.w	r2, r3, #15
 8007b6a:	4984      	ldr	r1, [pc, #528]	; (8007d7c <HAL_RCC_ClockConfig+0x240>)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b72:	4b82      	ldr	r3, [pc, #520]	; (8007d7c <HAL_RCC_ClockConfig+0x240>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 030f 	and.w	r3, r3, #15
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d001      	beq.n	8007b84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e0f7      	b.n	8007d74 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 8089 	beq.w	8007ca4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d133      	bne.n	8007c02 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b9a:	4b79      	ldr	r3, [pc, #484]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e0e4      	b.n	8007d74 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007baa:	f000 fa0d 	bl	8007fc8 <RCC_GetSysClockFreqFromPLLSource>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	4b74      	ldr	r3, [pc, #464]	; (8007d84 <HAL_RCC_ClockConfig+0x248>)
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d955      	bls.n	8007c62 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007bb6:	4b72      	ldr	r3, [pc, #456]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10a      	bne.n	8007bd8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007bc2:	4b6f      	ldr	r3, [pc, #444]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bca:	4a6d      	ldr	r2, [pc, #436]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007bd2:	2380      	movs	r3, #128	; 0x80
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	e044      	b.n	8007c62 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0302 	and.w	r3, r3, #2
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d03e      	beq.n	8007c62 <HAL_RCC_ClockConfig+0x126>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d13a      	bne.n	8007c62 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007bec:	4b64      	ldr	r3, [pc, #400]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bf4:	4a62      	ldr	r2, [pc, #392]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007bfc:	2380      	movs	r3, #128	; 0x80
 8007bfe:	617b      	str	r3, [r7, #20]
 8007c00:	e02f      	b.n	8007c62 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d107      	bne.n	8007c1a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c0a:	4b5d      	ldr	r3, [pc, #372]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d115      	bne.n	8007c42 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e0ac      	b.n	8007d74 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d107      	bne.n	8007c32 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007c22:	4b57      	ldr	r3, [pc, #348]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d109      	bne.n	8007c42 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e0a0      	b.n	8007d74 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c32:	4b53      	ldr	r3, [pc, #332]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e098      	b.n	8007d74 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007c42:	f000 f8a7 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8007c46:	4602      	mov	r2, r0
 8007c48:	4b4e      	ldr	r3, [pc, #312]	; (8007d84 <HAL_RCC_ClockConfig+0x248>)
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d909      	bls.n	8007c62 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c4e:	4b4c      	ldr	r3, [pc, #304]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c56:	4a4a      	ldr	r2, [pc, #296]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c5c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007c5e:	2380      	movs	r3, #128	; 0x80
 8007c60:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c62:	4b47      	ldr	r3, [pc, #284]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f023 0203 	bic.w	r2, r3, #3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	4944      	ldr	r1, [pc, #272]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c74:	f7fb fbb4 	bl	80033e0 <HAL_GetTick>
 8007c78:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c7a:	e00a      	b.n	8007c92 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c7c:	f7fb fbb0 	bl	80033e0 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d901      	bls.n	8007c92 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e070      	b.n	8007d74 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c92:	4b3b      	ldr	r3, [pc, #236]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f003 020c 	and.w	r2, r3, #12
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d1eb      	bne.n	8007c7c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d009      	beq.n	8007cc4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cb0:	4b33      	ldr	r3, [pc, #204]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	4930      	ldr	r1, [pc, #192]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	608b      	str	r3, [r1, #8]
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2b80      	cmp	r3, #128	; 0x80
 8007cc8:	d105      	bne.n	8007cd6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007cca:	4b2d      	ldr	r3, [pc, #180]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	4a2c      	ldr	r2, [pc, #176]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007cd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cd4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007cd6:	4b29      	ldr	r3, [pc, #164]	; (8007d7c <HAL_RCC_ClockConfig+0x240>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 030f 	and.w	r3, r3, #15
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d210      	bcs.n	8007d06 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ce4:	4b25      	ldr	r3, [pc, #148]	; (8007d7c <HAL_RCC_ClockConfig+0x240>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f023 020f 	bic.w	r2, r3, #15
 8007cec:	4923      	ldr	r1, [pc, #140]	; (8007d7c <HAL_RCC_ClockConfig+0x240>)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cf4:	4b21      	ldr	r3, [pc, #132]	; (8007d7c <HAL_RCC_ClockConfig+0x240>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 030f 	and.w	r3, r3, #15
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d001      	beq.n	8007d06 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e036      	b.n	8007d74 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0304 	and.w	r3, r3, #4
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d008      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d12:	4b1b      	ldr	r3, [pc, #108]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	4918      	ldr	r1, [pc, #96]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007d20:	4313      	orrs	r3, r2
 8007d22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0308 	and.w	r3, r3, #8
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d009      	beq.n	8007d44 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d30:	4b13      	ldr	r3, [pc, #76]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	00db      	lsls	r3, r3, #3
 8007d3e:	4910      	ldr	r1, [pc, #64]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d44:	f000 f826 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8007d48:	4601      	mov	r1, r0
 8007d4a:	4b0d      	ldr	r3, [pc, #52]	; (8007d80 <HAL_RCC_ClockConfig+0x244>)
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	091b      	lsrs	r3, r3, #4
 8007d50:	f003 030f 	and.w	r3, r3, #15
 8007d54:	4a0c      	ldr	r2, [pc, #48]	; (8007d88 <HAL_RCC_ClockConfig+0x24c>)
 8007d56:	5cd3      	ldrb	r3, [r2, r3]
 8007d58:	f003 031f 	and.w	r3, r3, #31
 8007d5c:	fa21 f303 	lsr.w	r3, r1, r3
 8007d60:	4a0a      	ldr	r2, [pc, #40]	; (8007d8c <HAL_RCC_ClockConfig+0x250>)
 8007d62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007d64:	4b0a      	ldr	r3, [pc, #40]	; (8007d90 <HAL_RCC_ClockConfig+0x254>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fb fae9 	bl	8003340 <HAL_InitTick>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73fb      	strb	r3, [r7, #15]

  return status;
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	40022000 	.word	0x40022000
 8007d80:	40021000 	.word	0x40021000
 8007d84:	04c4b400 	.word	0x04c4b400
 8007d88:	080168c4 	.word	0x080168c4
 8007d8c:	20000000 	.word	0x20000000
 8007d90:	20000004 	.word	0x20000004

08007d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b089      	sub	sp, #36	; 0x24
 8007d98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	61fb      	str	r3, [r7, #28]
 8007d9e:	2300      	movs	r3, #0
 8007da0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007da2:	4b3d      	ldr	r3, [pc, #244]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f003 030c 	and.w	r3, r3, #12
 8007daa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007dac:	4b3a      	ldr	r3, [pc, #232]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	f003 0303 	and.w	r3, r3, #3
 8007db4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d005      	beq.n	8007dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	2b0c      	cmp	r3, #12
 8007dc0:	d121      	bne.n	8007e06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d11e      	bne.n	8007e06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007dc8:	4b33      	ldr	r3, [pc, #204]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0308 	and.w	r3, r3, #8
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d107      	bne.n	8007de4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007dd4:	4b30      	ldr	r3, [pc, #192]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8007dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dda:	0a1b      	lsrs	r3, r3, #8
 8007ddc:	f003 030f 	and.w	r3, r3, #15
 8007de0:	61fb      	str	r3, [r7, #28]
 8007de2:	e005      	b.n	8007df0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007de4:	4b2c      	ldr	r3, [pc, #176]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	091b      	lsrs	r3, r3, #4
 8007dea:	f003 030f 	and.w	r3, r3, #15
 8007dee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007df0:	4a2a      	ldr	r2, [pc, #168]	; (8007e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007df8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10d      	bne.n	8007e1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e04:	e00a      	b.n	8007e1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	2b04      	cmp	r3, #4
 8007e0a:	d102      	bne.n	8007e12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007e0c:	4b24      	ldr	r3, [pc, #144]	; (8007ea0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007e0e:	61bb      	str	r3, [r7, #24]
 8007e10:	e004      	b.n	8007e1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	2b08      	cmp	r3, #8
 8007e16:	d101      	bne.n	8007e1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007e18:	4b21      	ldr	r3, [pc, #132]	; (8007ea0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007e1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	2b0c      	cmp	r3, #12
 8007e20:	d133      	bne.n	8007e8a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e22:	4b1d      	ldr	r3, [pc, #116]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d002      	beq.n	8007e38 <HAL_RCC_GetSysClockFreq+0xa4>
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d003      	beq.n	8007e3e <HAL_RCC_GetSysClockFreq+0xaa>
 8007e36:	e005      	b.n	8007e44 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007e38:	4b19      	ldr	r3, [pc, #100]	; (8007ea0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007e3a:	617b      	str	r3, [r7, #20]
      break;
 8007e3c:	e005      	b.n	8007e4a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007e3e:	4b18      	ldr	r3, [pc, #96]	; (8007ea0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007e40:	617b      	str	r3, [r7, #20]
      break;
 8007e42:	e002      	b.n	8007e4a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	617b      	str	r3, [r7, #20]
      break;
 8007e48:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e4a:	4b13      	ldr	r3, [pc, #76]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	091b      	lsrs	r3, r3, #4
 8007e50:	f003 030f 	and.w	r3, r3, #15
 8007e54:	3301      	adds	r3, #1
 8007e56:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007e58:	4b0f      	ldr	r3, [pc, #60]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	0a1b      	lsrs	r3, r3, #8
 8007e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	fb02 f203 	mul.w	r2, r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e70:	4b09      	ldr	r3, [pc, #36]	; (8007e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	0e5b      	lsrs	r3, r3, #25
 8007e76:	f003 0303 	and.w	r3, r3, #3
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e88:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3724      	adds	r7, #36	; 0x24
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	40021000 	.word	0x40021000
 8007e9c:	080168dc 	.word	0x080168dc
 8007ea0:	00f42400 	.word	0x00f42400

08007ea4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ea8:	4b03      	ldr	r3, [pc, #12]	; (8007eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	20000000 	.word	0x20000000

08007ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007ec0:	f7ff fff0 	bl	8007ea4 <HAL_RCC_GetHCLKFreq>
 8007ec4:	4601      	mov	r1, r0
 8007ec6:	4b06      	ldr	r3, [pc, #24]	; (8007ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	0a1b      	lsrs	r3, r3, #8
 8007ecc:	f003 0307 	and.w	r3, r3, #7
 8007ed0:	4a04      	ldr	r2, [pc, #16]	; (8007ee4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ed2:	5cd3      	ldrb	r3, [r2, r3]
 8007ed4:	f003 031f 	and.w	r3, r3, #31
 8007ed8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	40021000 	.word	0x40021000
 8007ee4:	080168d4 	.word	0x080168d4

08007ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007eec:	f7ff ffda 	bl	8007ea4 <HAL_RCC_GetHCLKFreq>
 8007ef0:	4601      	mov	r1, r0
 8007ef2:	4b06      	ldr	r3, [pc, #24]	; (8007f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	0adb      	lsrs	r3, r3, #11
 8007ef8:	f003 0307 	and.w	r3, r3, #7
 8007efc:	4a04      	ldr	r2, [pc, #16]	; (8007f10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007efe:	5cd3      	ldrb	r3, [r2, r3]
 8007f00:	f003 031f 	and.w	r3, r3, #31
 8007f04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	40021000 	.word	0x40021000
 8007f10:	080168d4 	.word	0x080168d4

08007f14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007f20:	4b27      	ldr	r3, [pc, #156]	; (8007fc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007f2c:	f7ff f8fc 	bl	8007128 <HAL_PWREx_GetVoltageRange>
 8007f30:	6178      	str	r0, [r7, #20]
 8007f32:	e014      	b.n	8007f5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f34:	4b22      	ldr	r3, [pc, #136]	; (8007fc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f38:	4a21      	ldr	r2, [pc, #132]	; (8007fc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f3e:	6593      	str	r3, [r2, #88]	; 0x58
 8007f40:	4b1f      	ldr	r3, [pc, #124]	; (8007fc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f48:	60fb      	str	r3, [r7, #12]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007f4c:	f7ff f8ec 	bl	8007128 <HAL_PWREx_GetVoltageRange>
 8007f50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007f52:	4b1b      	ldr	r3, [pc, #108]	; (8007fc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f56:	4a1a      	ldr	r2, [pc, #104]	; (8007fc0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f64:	d10b      	bne.n	8007f7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b80      	cmp	r3, #128	; 0x80
 8007f6a:	d913      	bls.n	8007f94 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2ba0      	cmp	r3, #160	; 0xa0
 8007f70:	d902      	bls.n	8007f78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007f72:	2302      	movs	r3, #2
 8007f74:	613b      	str	r3, [r7, #16]
 8007f76:	e00d      	b.n	8007f94 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007f78:	2301      	movs	r3, #1
 8007f7a:	613b      	str	r3, [r7, #16]
 8007f7c:	e00a      	b.n	8007f94 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b7f      	cmp	r3, #127	; 0x7f
 8007f82:	d902      	bls.n	8007f8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007f84:	2302      	movs	r3, #2
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	e004      	b.n	8007f94 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b70      	cmp	r3, #112	; 0x70
 8007f8e:	d101      	bne.n	8007f94 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007f90:	2301      	movs	r3, #1
 8007f92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007f94:	4b0b      	ldr	r3, [pc, #44]	; (8007fc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f023 020f 	bic.w	r2, r3, #15
 8007f9c:	4909      	ldr	r1, [pc, #36]	; (8007fc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007fa4:	4b07      	ldr	r3, [pc, #28]	; (8007fc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 030f 	and.w	r3, r3, #15
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d001      	beq.n	8007fb6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e000      	b.n	8007fb8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3718      	adds	r7, #24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	40021000 	.word	0x40021000
 8007fc4:	40022000 	.word	0x40022000

08007fc8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8007fd2:	4b2d      	ldr	r3, [pc, #180]	; (8008088 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f003 0303 	and.w	r3, r3, #3
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d118      	bne.n	8008010 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007fde:	4b2a      	ldr	r3, [pc, #168]	; (8008088 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0308 	and.w	r3, r3, #8
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d107      	bne.n	8007ffa <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007fea:	4b27      	ldr	r3, [pc, #156]	; (8008088 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ff0:	0a1b      	lsrs	r3, r3, #8
 8007ff2:	f003 030f 	and.w	r3, r3, #15
 8007ff6:	617b      	str	r3, [r7, #20]
 8007ff8:	e005      	b.n	8008006 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007ffa:	4b23      	ldr	r3, [pc, #140]	; (8008088 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	091b      	lsrs	r3, r3, #4
 8008000:	f003 030f 	and.w	r3, r3, #15
 8008004:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008006:	4a21      	ldr	r2, [pc, #132]	; (800808c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800800e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008010:	4b1d      	ldr	r3, [pc, #116]	; (8008088 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	f003 0303 	and.w	r3, r3, #3
 8008018:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d002      	beq.n	8008026 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8008020:	2b03      	cmp	r3, #3
 8008022:	d003      	beq.n	800802c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8008024:	e005      	b.n	8008032 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8008026:	4b1a      	ldr	r3, [pc, #104]	; (8008090 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8008028:	613b      	str	r3, [r7, #16]
    break;
 800802a:	e005      	b.n	8008038 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800802c:	4b18      	ldr	r3, [pc, #96]	; (8008090 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800802e:	613b      	str	r3, [r7, #16]
    break;
 8008030:	e002      	b.n	8008038 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	613b      	str	r3, [r7, #16]
    break;
 8008036:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008038:	4b13      	ldr	r3, [pc, #76]	; (8008088 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	091b      	lsrs	r3, r3, #4
 800803e:	f003 030f 	and.w	r3, r3, #15
 8008042:	3301      	adds	r3, #1
 8008044:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008046:	4b10      	ldr	r3, [pc, #64]	; (8008088 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	0a1b      	lsrs	r3, r3, #8
 800804c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	fb02 f203 	mul.w	r2, r2, r3
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	fbb2 f3f3 	udiv	r3, r2, r3
 800805c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800805e:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	0e5b      	lsrs	r3, r3, #25
 8008064:	f003 0303 	and.w	r3, r3, #3
 8008068:	3301      	adds	r3, #1
 800806a:	005b      	lsls	r3, r3, #1
 800806c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	fbb2 f3f3 	udiv	r3, r2, r3
 8008076:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8008078:	683b      	ldr	r3, [r7, #0]
}
 800807a:	4618      	mov	r0, r3
 800807c:	371c      	adds	r7, #28
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	40021000 	.word	0x40021000
 800808c:	080168dc 	.word	0x080168dc
 8008090:	00f42400 	.word	0x00f42400

08008094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800809c:	2300      	movs	r3, #0
 800809e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80080a0:	2300      	movs	r3, #0
 80080a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d03d      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b4:	2b40      	cmp	r3, #64	; 0x40
 80080b6:	d00b      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80080b8:	2b40      	cmp	r3, #64	; 0x40
 80080ba:	d804      	bhi.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00e      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80080c0:	2b20      	cmp	r3, #32
 80080c2:	d015      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80080c4:	e01d      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80080c6:	2b60      	cmp	r3, #96	; 0x60
 80080c8:	d01e      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80080ca:	2b80      	cmp	r3, #128	; 0x80
 80080cc:	d01c      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80080ce:	e018      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80080d0:	4b86      	ldr	r3, [pc, #536]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	4a85      	ldr	r2, [pc, #532]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80080d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080dc:	e015      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3304      	adds	r3, #4
 80080e2:	2100      	movs	r1, #0
 80080e4:	4618      	mov	r0, r3
 80080e6:	f001 f973 	bl	80093d0 <RCCEx_PLLSAI1_Config>
 80080ea:	4603      	mov	r3, r0
 80080ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80080ee:	e00c      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3320      	adds	r3, #32
 80080f4:	2100      	movs	r1, #0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f001 fa5a 	bl	80095b0 <RCCEx_PLLSAI2_Config>
 80080fc:	4603      	mov	r3, r0
 80080fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008100:	e003      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	74fb      	strb	r3, [r7, #19]
      break;
 8008106:	e000      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8008108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800810a:	7cfb      	ldrb	r3, [r7, #19]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10b      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008110:	4b76      	ldr	r3, [pc, #472]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008112:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008116:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800811e:	4973      	ldr	r1, [pc, #460]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008120:	4313      	orrs	r3, r2
 8008122:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8008126:	e001      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008128:	7cfb      	ldrb	r3, [r7, #19]
 800812a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d042      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008140:	d00f      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8008142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008146:	d805      	bhi.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8008148:	2b00      	cmp	r3, #0
 800814a:	d011      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800814c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008150:	d017      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8008152:	e01f      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8008154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008158:	d01f      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800815a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800815e:	d01c      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008160:	e018      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008162:	4b62      	ldr	r3, [pc, #392]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	4a61      	ldr	r2, [pc, #388]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800816c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800816e:	e015      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	3304      	adds	r3, #4
 8008174:	2100      	movs	r1, #0
 8008176:	4618      	mov	r0, r3
 8008178:	f001 f92a 	bl	80093d0 <RCCEx_PLLSAI1_Config>
 800817c:	4603      	mov	r3, r0
 800817e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008180:	e00c      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	3320      	adds	r3, #32
 8008186:	2100      	movs	r1, #0
 8008188:	4618      	mov	r0, r3
 800818a:	f001 fa11 	bl	80095b0 <RCCEx_PLLSAI2_Config>
 800818e:	4603      	mov	r3, r0
 8008190:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008192:	e003      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	74fb      	strb	r3, [r7, #19]
      break;
 8008198:	e000      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800819a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800819c:	7cfb      	ldrb	r3, [r7, #19]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10b      	bne.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80081a2:	4b52      	ldr	r3, [pc, #328]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80081a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b0:	494e      	ldr	r1, [pc, #312]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80081b8:	e001      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ba:	7cfb      	ldrb	r3, [r7, #19]
 80081bc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 809f 	beq.w	800830a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081cc:	2300      	movs	r3, #0
 80081ce:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80081d0:	4b46      	ldr	r3, [pc, #280]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80081d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d101      	bne.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80081dc:	2301      	movs	r3, #1
 80081de:	e000      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80081e0:	2300      	movs	r3, #0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00d      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081e6:	4b41      	ldr	r3, [pc, #260]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80081e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ea:	4a40      	ldr	r2, [pc, #256]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80081ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081f0:	6593      	str	r3, [r2, #88]	; 0x58
 80081f2:	4b3e      	ldr	r3, [pc, #248]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80081f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081fa:	60bb      	str	r3, [r7, #8]
 80081fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081fe:	2301      	movs	r3, #1
 8008200:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008202:	4b3b      	ldr	r3, [pc, #236]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a3a      	ldr	r2, [pc, #232]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800820c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800820e:	f7fb f8e7 	bl	80033e0 <HAL_GetTick>
 8008212:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008214:	e009      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008216:	f7fb f8e3 	bl	80033e0 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	2b02      	cmp	r3, #2
 8008222:	d902      	bls.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	74fb      	strb	r3, [r7, #19]
        break;
 8008228:	e005      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800822a:	4b31      	ldr	r3, [pc, #196]	; (80082f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0ef      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8008236:	7cfb      	ldrb	r3, [r7, #19]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d15b      	bne.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800823c:	4b2b      	ldr	r3, [pc, #172]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800823e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008246:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d01f      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	429a      	cmp	r2, r3
 8008258:	d019      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800825a:	4b24      	ldr	r3, [pc, #144]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800825c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008264:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008266:	4b21      	ldr	r3, [pc, #132]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800826c:	4a1f      	ldr	r2, [pc, #124]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800826e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008276:	4b1d      	ldr	r3, [pc, #116]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800827c:	4a1b      	ldr	r2, [pc, #108]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800827e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008286:	4a19      	ldr	r2, [pc, #100]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d016      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008298:	f7fb f8a2 	bl	80033e0 <HAL_GetTick>
 800829c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800829e:	e00b      	b.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082a0:	f7fb f89e 	bl	80033e0 <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d902      	bls.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	74fb      	strb	r3, [r7, #19]
            break;
 80082b6:	e006      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082b8:	4b0c      	ldr	r3, [pc, #48]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80082ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0ec      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80082c6:	7cfb      	ldrb	r3, [r7, #19]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10c      	bne.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082cc:	4b07      	ldr	r3, [pc, #28]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80082ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082dc:	4903      	ldr	r1, [pc, #12]	; (80082ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80082e4:	e008      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80082e6:	7cfb      	ldrb	r3, [r7, #19]
 80082e8:	74bb      	strb	r3, [r7, #18]
 80082ea:	e005      	b.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80082ec:	40021000 	.word	0x40021000
 80082f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f4:	7cfb      	ldrb	r3, [r7, #19]
 80082f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082f8:	7c7b      	ldrb	r3, [r7, #17]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d105      	bne.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082fe:	4ba0      	ldr	r3, [pc, #640]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008302:	4a9f      	ldr	r2, [pc, #636]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008308:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008316:	4b9a      	ldr	r3, [pc, #616]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800831c:	f023 0203 	bic.w	r2, r3, #3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008324:	4996      	ldr	r1, [pc, #600]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008326:	4313      	orrs	r3, r2
 8008328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00a      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008338:	4b91      	ldr	r3, [pc, #580]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800833a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800833e:	f023 020c 	bic.w	r2, r3, #12
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	498e      	ldr	r1, [pc, #568]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008348:	4313      	orrs	r3, r2
 800834a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0304 	and.w	r3, r3, #4
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800835a:	4b89      	ldr	r3, [pc, #548]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800835c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008360:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008368:	4985      	ldr	r1, [pc, #532]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800836a:	4313      	orrs	r3, r2
 800836c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0308 	and.w	r3, r3, #8
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00a      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800837c:	4b80      	ldr	r3, [pc, #512]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800837e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008382:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800838a:	497d      	ldr	r1, [pc, #500]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800838c:	4313      	orrs	r3, r2
 800838e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0310 	and.w	r3, r3, #16
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800839e:	4b78      	ldr	r3, [pc, #480]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ac:	4974      	ldr	r1, [pc, #464]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0320 	and.w	r3, r3, #32
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00a      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083c0:	4b6f      	ldr	r3, [pc, #444]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ce:	496c      	ldr	r1, [pc, #432]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083e2:	4b67      	ldr	r3, [pc, #412]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083f0:	4963      	ldr	r1, [pc, #396]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00a      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008404:	4b5e      	ldr	r3, [pc, #376]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800840a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008412:	495b      	ldr	r1, [pc, #364]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008414:	4313      	orrs	r3, r2
 8008416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00a      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008426:	4b56      	ldr	r3, [pc, #344]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800842c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008434:	4952      	ldr	r1, [pc, #328]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008436:	4313      	orrs	r3, r2
 8008438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00a      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008448:	4b4d      	ldr	r3, [pc, #308]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800844a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800844e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008456:	494a      	ldr	r1, [pc, #296]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008458:	4313      	orrs	r3, r2
 800845a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800846a:	4b45      	ldr	r3, [pc, #276]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800846c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008470:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008478:	4941      	ldr	r1, [pc, #260]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800847a:	4313      	orrs	r3, r2
 800847c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00a      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800848c:	4b3c      	ldr	r3, [pc, #240]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800848e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008492:	f023 0203 	bic.w	r2, r3, #3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800849a:	4939      	ldr	r1, [pc, #228]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800849c:	4313      	orrs	r3, r2
 800849e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d028      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084ae:	4b34      	ldr	r3, [pc, #208]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084bc:	4930      	ldr	r1, [pc, #192]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084cc:	d106      	bne.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084ce:	4b2c      	ldr	r3, [pc, #176]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	4a2b      	ldr	r2, [pc, #172]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084d8:	60d3      	str	r3, [r2, #12]
 80084da:	e011      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084e4:	d10c      	bne.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	3304      	adds	r3, #4
 80084ea:	2101      	movs	r1, #1
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 ff6f 	bl	80093d0 <RCCEx_PLLSAI1_Config>
 80084f2:	4603      	mov	r3, r0
 80084f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80084f6:	7cfb      	ldrb	r3, [r7, #19]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80084fc:	7cfb      	ldrb	r3, [r7, #19]
 80084fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d04d      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008514:	d108      	bne.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8008516:	4b1a      	ldr	r3, [pc, #104]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008518:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800851c:	4a18      	ldr	r2, [pc, #96]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800851e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008522:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008526:	e012      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8008528:	4b15      	ldr	r3, [pc, #84]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800852a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800852e:	4a14      	ldr	r2, [pc, #80]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008530:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008534:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008538:	4b11      	ldr	r3, [pc, #68]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800853a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800853e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008546:	490e      	ldr	r1, [pc, #56]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008548:	4313      	orrs	r3, r2
 800854a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008556:	d106      	bne.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008558:	4b09      	ldr	r3, [pc, #36]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	4a08      	ldr	r2, [pc, #32]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800855e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008562:	60d3      	str	r3, [r2, #12]
 8008564:	e020      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800856a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800856e:	d109      	bne.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008570:	4b03      	ldr	r3, [pc, #12]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	4a02      	ldr	r2, [pc, #8]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800857a:	60d3      	str	r3, [r2, #12]
 800857c:	e014      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800857e:	bf00      	nop
 8008580:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800858c:	d10c      	bne.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	3304      	adds	r3, #4
 8008592:	2101      	movs	r1, #1
 8008594:	4618      	mov	r0, r3
 8008596:	f000 ff1b 	bl	80093d0 <RCCEx_PLLSAI1_Config>
 800859a:	4603      	mov	r3, r0
 800859c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800859e:	7cfb      	ldrb	r3, [r7, #19]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80085a4:	7cfb      	ldrb	r3, [r7, #19]
 80085a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d028      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085b4:	4b7a      	ldr	r3, [pc, #488]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80085b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085c2:	4977      	ldr	r1, [pc, #476]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80085c4:	4313      	orrs	r3, r2
 80085c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085d2:	d106      	bne.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085d4:	4b72      	ldr	r3, [pc, #456]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	4a71      	ldr	r2, [pc, #452]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80085da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085de:	60d3      	str	r3, [r2, #12]
 80085e0:	e011      	b.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085ea:	d10c      	bne.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3304      	adds	r3, #4
 80085f0:	2101      	movs	r1, #1
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 feec 	bl	80093d0 <RCCEx_PLLSAI1_Config>
 80085f8:	4603      	mov	r3, r0
 80085fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085fc:	7cfb      	ldrb	r3, [r7, #19]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8008602:	7cfb      	ldrb	r3, [r7, #19]
 8008604:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d01e      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008612:	4b63      	ldr	r3, [pc, #396]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008618:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008622:	495f      	ldr	r1, [pc, #380]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008624:	4313      	orrs	r3, r2
 8008626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008634:	d10c      	bne.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3304      	adds	r3, #4
 800863a:	2102      	movs	r1, #2
 800863c:	4618      	mov	r0, r3
 800863e:	f000 fec7 	bl	80093d0 <RCCEx_PLLSAI1_Config>
 8008642:	4603      	mov	r3, r0
 8008644:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008646:	7cfb      	ldrb	r3, [r7, #19]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 800864c:	7cfb      	ldrb	r3, [r7, #19]
 800864e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800865c:	4b50      	ldr	r3, [pc, #320]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800865e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008662:	f023 0204 	bic.w	r2, r3, #4
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800866c:	494c      	ldr	r1, [pc, #304]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800866e:	4313      	orrs	r3, r2
 8008670:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00b      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008680:	4b47      	ldr	r3, [pc, #284]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008686:	f023 0218 	bic.w	r2, r3, #24
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008690:	4943      	ldr	r1, [pc, #268]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008692:	4313      	orrs	r3, r2
 8008694:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d035      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80086a4:	4b3e      	ldr	r3, [pc, #248]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a3d      	ldr	r2, [pc, #244]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80086aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086b0:	f7fa fe96 	bl	80033e0 <HAL_GetTick>
 80086b4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80086b6:	e009      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80086b8:	f7fa fe92 	bl	80033e0 <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d902      	bls.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	74fb      	strb	r3, [r7, #19]
        break;
 80086ca:	e005      	b.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80086cc:	4b34      	ldr	r3, [pc, #208]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1ef      	bne.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 80086d8:	7cfb      	ldrb	r3, [r7, #19]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d113      	bne.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80086de:	4b30      	ldr	r3, [pc, #192]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80086e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086ee:	492c      	ldr	r1, [pc, #176]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3320      	adds	r3, #32
 80086fa:	2102      	movs	r1, #2
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 ff57 	bl	80095b0 <RCCEx_PLLSAI2_Config>
 8008702:	4603      	mov	r3, r0
 8008704:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8008706:	7cfb      	ldrb	r3, [r7, #19]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 800870c:	7cfb      	ldrb	r3, [r7, #19]
 800870e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d01e      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800871c:	4b20      	ldr	r3, [pc, #128]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800871e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008722:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800872c:	491c      	ldr	r1, [pc, #112]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800872e:	4313      	orrs	r3, r2
 8008730:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800873a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800873e:	d10c      	bne.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	3320      	adds	r3, #32
 8008744:	2101      	movs	r1, #1
 8008746:	4618      	mov	r0, r3
 8008748:	f000 ff32 	bl	80095b0 <RCCEx_PLLSAI2_Config>
 800874c:	4603      	mov	r3, r0
 800874e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008750:	7cfb      	ldrb	r3, [r7, #19]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d001      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      {
        /* set overall return value */
        status = ret;
 8008756:	7cfb      	ldrb	r3, [r7, #19]
 8008758:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d017      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008766:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008768:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800876c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008776:	490a      	ldr	r1, [pc, #40]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008778:	4313      	orrs	r3, r2
 800877a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008784:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008788:	d105      	bne.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x702>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800878a:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	4a04      	ldr	r2, [pc, #16]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8008790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008794:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008796:	7cbb      	ldrb	r3, [r7, #18]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	40021000 	.word	0x40021000

080087a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b088      	sub	sp, #32
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087b6:	d137      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80087b8:	4baf      	ldr	r3, [pc, #700]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80087ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087c2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ca:	d014      	beq.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80087cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087d0:	d01e      	beq.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 80087d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087d6:	d001      	beq.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80087d8:	f000 bdf1 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80087dc:	4ba6      	ldr	r3, [pc, #664]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80087de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	f040 85e2 	bne.w	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
        frequency = LSE_VALUE;
 80087ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087f0:	61fb      	str	r3, [r7, #28]
      break;
 80087f2:	f000 bddd 	b.w	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80087f6:	4ba0      	ldr	r3, [pc, #640]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80087f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087fc:	f003 0302 	and.w	r3, r3, #2
 8008800:	2b02      	cmp	r3, #2
 8008802:	f040 85d7 	bne.w	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = LSI_VALUE;
 8008806:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800880a:	61fb      	str	r3, [r7, #28]
      break;
 800880c:	f000 bdd2 	b.w	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008810:	4b99      	ldr	r3, [pc, #612]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800881c:	f040 85cc 	bne.w	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
        frequency = HSE_VALUE / 32U;
 8008820:	4b96      	ldr	r3, [pc, #600]	; (8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008822:	61fb      	str	r3, [r7, #28]
      break;
 8008824:	f000 bdc8 	b.w	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008828:	4b93      	ldr	r3, [pc, #588]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	f003 0303 	and.w	r3, r3, #3
 8008830:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	2b02      	cmp	r3, #2
 8008836:	d023      	beq.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008838:	2b03      	cmp	r3, #3
 800883a:	d02e      	beq.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800883c:	2b01      	cmp	r3, #1
 800883e:	d139      	bne.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008840:	4b8d      	ldr	r3, [pc, #564]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0302 	and.w	r3, r3, #2
 8008848:	2b02      	cmp	r3, #2
 800884a:	d116      	bne.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800884c:	4b8a      	ldr	r3, [pc, #552]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 0308 	and.w	r3, r3, #8
 8008854:	2b00      	cmp	r3, #0
 8008856:	d005      	beq.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8008858:	4b87      	ldr	r3, [pc, #540]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	091b      	lsrs	r3, r3, #4
 800885e:	f003 030f 	and.w	r3, r3, #15
 8008862:	e005      	b.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8008864:	4b84      	ldr	r3, [pc, #528]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800886a:	0a1b      	lsrs	r3, r3, #8
 800886c:	f003 030f 	and.w	r3, r3, #15
 8008870:	4a83      	ldr	r2, [pc, #524]	; (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008876:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008878:	e01f      	b.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800887a:	2300      	movs	r3, #0
 800887c:	61bb      	str	r3, [r7, #24]
      break;
 800887e:	e01c      	b.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008880:	4b7d      	ldr	r3, [pc, #500]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800888c:	d102      	bne.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 800888e:	4b7d      	ldr	r3, [pc, #500]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8008890:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8008892:	e012      	b.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	61bb      	str	r3, [r7, #24]
      break;
 8008898:	e00f      	b.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800889a:	4b77      	ldr	r3, [pc, #476]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088a6:	d102      	bne.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 80088a8:	4b76      	ldr	r3, [pc, #472]	; (8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80088aa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80088ac:	e005      	b.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	61bb      	str	r3, [r7, #24]
      break;
 80088b2:	e002      	b.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	61bb      	str	r3, [r7, #24]
      break;
 80088b8:	bf00      	nop
    }

    switch(PeriphClk)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088c0:	f000 84cc 	beq.w	800925c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 80088c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088c8:	d82d      	bhi.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80088ca:	2b10      	cmp	r3, #16
 80088cc:	f000 82f7 	beq.w	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 80088d0:	2b10      	cmp	r3, #16
 80088d2:	d811      	bhi.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	f000 8241 	beq.w	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d804      	bhi.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80088de:	2b01      	cmp	r3, #1
 80088e0:	f000 81fb 	beq.w	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x536>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80088e4:	f000 bd6b 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
    switch(PeriphClk)
 80088e8:	2b04      	cmp	r3, #4
 80088ea:	f000 8280 	beq.w	8008dee <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80088ee:	2b08      	cmp	r3, #8
 80088f0:	f000 82b1 	beq.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
      break;
 80088f4:	f000 bd63 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
    switch(PeriphClk)
 80088f8:	2b80      	cmp	r3, #128	; 0x80
 80088fa:	f000 8407 	beq.w	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 80088fe:	2b80      	cmp	r3, #128	; 0x80
 8008900:	d807      	bhi.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8008902:	2b20      	cmp	r3, #32
 8008904:	f000 8313 	beq.w	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8008908:	2b40      	cmp	r3, #64	; 0x40
 800890a:	f000 83dc 	beq.w	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
      break;
 800890e:	f000 bd56 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
    switch(PeriphClk)
 8008912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008916:	f000 841c 	beq.w	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 800891a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800891e:	f000 845c 	beq.w	80091da <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      break;
 8008922:	f000 bd4c 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
    switch(PeriphClk)
 8008926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800892a:	f000 837b 	beq.w	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
 800892e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008932:	d813      	bhi.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8008934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008938:	d032      	beq.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800893a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800893e:	d804      	bhi.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8008940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008944:	d024      	beq.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
      break;
 8008946:	f000 bd3a 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
    switch(PeriphClk)
 800894a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800894e:	d02f      	beq.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8008950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008954:	f000 8323 	beq.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
      break;
 8008958:	f000 bd31 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
    switch(PeriphClk)
 800895c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008960:	f000 841a 	beq.w	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8008964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008968:	d808      	bhi.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800896a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800896e:	d01f      	beq.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8008970:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008974:	f000 80cb 	beq.w	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
      break;
 8008978:	f000 bd21 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
    switch(PeriphClk)
 800897c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008980:	f000 8361 	beq.w	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008988:	f000 84b0 	beq.w	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
      break;
 800898c:	f000 bd17 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8008990:	69b9      	ldr	r1, [r7, #24]
 8008992:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008996:	f000 fefb 	bl	8009790 <RCCEx_GetSAIxPeriphCLKFreq>
 800899a:	61f8      	str	r0, [r7, #28]
      break;
 800899c:	f000 bd0f 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80089a0:	69b9      	ldr	r1, [r7, #24]
 80089a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80089a6:	f000 fef3 	bl	8009790 <RCCEx_GetSAIxPeriphCLKFreq>
 80089aa:	61f8      	str	r0, [r7, #28]
      break;
 80089ac:	f000 bd07 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80089b0:	4b31      	ldr	r3, [pc, #196]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80089b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089b6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80089ba:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089c2:	d061      	beq.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80089c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089c8:	d803      	bhi.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 8089 	beq.w	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
          break;
 80089d0:	e09b      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
        switch(srcclk)
 80089d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089d6:	d021      	beq.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 80089d8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80089dc:	d000      	beq.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
          break;
 80089de:	e094      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80089e0:	4b25      	ldr	r3, [pc, #148]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	f040 8084 	bne.w	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80089ee:	4b22      	ldr	r3, [pc, #136]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0308 	and.w	r3, r3, #8
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d005      	beq.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80089fa:	4b1f      	ldr	r3, [pc, #124]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	091b      	lsrs	r3, r3, #4
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	e005      	b.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
 8008a06:	4b1c      	ldr	r3, [pc, #112]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a0c:	0a1b      	lsrs	r3, r3, #8
 8008a0e:	f003 030f 	and.w	r3, r3, #15
 8008a12:	4a1b      	ldr	r2, [pc, #108]	; (8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a18:	61fb      	str	r3, [r7, #28]
          break;
 8008a1a:	e06c      	b.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008a1c:	4b16      	ldr	r3, [pc, #88]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a28:	d168      	bne.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x358>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008a2a:	4b13      	ldr	r3, [pc, #76]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a36:	d161      	bne.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x358>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008a38:	4b0f      	ldr	r3, [pc, #60]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	0a1b      	lsrs	r3, r3, #8
 8008a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a42:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	fb02 f203 	mul.w	r2, r2, r3
 8008a4c:	4b0a      	ldr	r3, [pc, #40]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	091b      	lsrs	r3, r3, #4
 8008a52:	f003 030f 	and.w	r3, r3, #15
 8008a56:	3301      	adds	r3, #1
 8008a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a5c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008a5e:	4b06      	ldr	r3, [pc, #24]	; (8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	0d5b      	lsrs	r3, r3, #21
 8008a64:	f003 0303 	and.w	r3, r3, #3
 8008a68:	3301      	adds	r3, #1
 8008a6a:	005b      	lsls	r3, r3, #1
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a72:	61fb      	str	r3, [r7, #28]
          break;
 8008a74:	e042      	b.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x358>
 8008a76:	bf00      	nop
 8008a78:	40021000 	.word	0x40021000
 8008a7c:	0007a120 	.word	0x0007a120
 8008a80:	080168dc 	.word	0x080168dc
 8008a84:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8008a88:	4bb0      	ldr	r3, [pc, #704]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a94:	d135      	bne.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8008a96:	4bad      	ldr	r3, [pc, #692]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aa2:	d12e      	bne.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008aa4:	4ba9      	ldr	r3, [pc, #676]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	0a1b      	lsrs	r3, r3, #8
 8008aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aae:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	fb02 f203 	mul.w	r2, r2, r3
 8008ab8:	4ba4      	ldr	r3, [pc, #656]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	091b      	lsrs	r3, r3, #4
 8008abe:	f003 030f 	and.w	r3, r3, #15
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8008aca:	4ba0      	ldr	r3, [pc, #640]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	0d5b      	lsrs	r3, r3, #21
 8008ad0:	f003 0303 	and.w	r3, r3, #3
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	69ba      	ldr	r2, [r7, #24]
 8008ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ade:	61fb      	str	r3, [r7, #28]
          break;
 8008ae0:	e00f      	b.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8008ae2:	4b9a      	ldr	r3, [pc, #616]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d10b      	bne.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
            frequency = HSI48_VALUE;
 8008af0:	4b97      	ldr	r3, [pc, #604]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8008af2:	61fb      	str	r3, [r7, #28]
          break;
 8008af4:	e008      	b.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          break;
 8008af6:	bf00      	nop
 8008af8:	f000 bc61 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008afc:	bf00      	nop
 8008afe:	f000 bc5e 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008b02:	bf00      	nop
 8008b04:	f000 bc5b 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008b08:	bf00      	nop
        break;
 8008b0a:	f000 bc58 	b.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8008b0e:	4b8f      	ldr	r3, [pc, #572]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b1c:	d13d      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008b1e:	4b8b      	ldr	r3, [pc, #556]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b2a:	f040 8447 	bne.w	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8008b2e:	4b87      	ldr	r3, [pc, #540]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b3a:	f040 843f 	bne.w	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008b3e:	4b83      	ldr	r3, [pc, #524]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	0a1b      	lsrs	r3, r3, #8
 8008b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b48:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	fb02 f203 	mul.w	r2, r2, r3
 8008b52:	4b7e      	ldr	r3, [pc, #504]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	091b      	lsrs	r3, r3, #4
 8008b58:	f003 030f 	and.w	r3, r3, #15
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b62:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8008b64:	4b79      	ldr	r3, [pc, #484]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	0edb      	lsrs	r3, r3, #27
 8008b6a:	f003 031f 	and.w	r3, r3, #31
 8008b6e:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10a      	bne.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008b76:	4b75      	ldr	r3, [pc, #468]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d002      	beq.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
                pllp = 17U;
 8008b82:	2311      	movs	r3, #17
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	e001      	b.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
                pllp = 7U;
 8008b88:	2307      	movs	r3, #7
 8008b8a:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8008b8c:	69ba      	ldr	r2, [r7, #24]
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b94:	61fb      	str	r3, [r7, #28]
      break;
 8008b96:	f000 bc11 	b.w	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8008b9a:	4b6c      	ldr	r3, [pc, #432]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ba0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008ba4:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bac:	d056      	beq.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008bae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bb2:	d802      	bhi.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d07e      	beq.n	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
          break;
 8008bb8:	e08e      	b.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
        switch(srcclk)
 8008bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bbe:	d020      	beq.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8008bc0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008bc4:	d000      	beq.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
          break;
 8008bc6:	e087      	b.n	8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008bc8:	4b60      	ldr	r3, [pc, #384]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0302 	and.w	r3, r3, #2
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d17a      	bne.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x526>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008bd4:	4b5d      	ldr	r3, [pc, #372]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0308 	and.w	r3, r3, #8
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d005      	beq.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8008be0:	4b5a      	ldr	r3, [pc, #360]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	091b      	lsrs	r3, r3, #4
 8008be6:	f003 030f 	and.w	r3, r3, #15
 8008bea:	e005      	b.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 8008bec:	4b57      	ldr	r3, [pc, #348]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bf2:	0a1b      	lsrs	r3, r3, #8
 8008bf4:	f003 030f 	and.w	r3, r3, #15
 8008bf8:	4a56      	ldr	r2, [pc, #344]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8008bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bfe:	61fb      	str	r3, [r7, #28]
          break;
 8008c00:	e063      	b.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x526>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008c02:	4b52      	ldr	r3, [pc, #328]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c0e:	d15e      	bne.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008c10:	4b4e      	ldr	r3, [pc, #312]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c1c:	d157      	bne.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008c1e:	4b4b      	ldr	r3, [pc, #300]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	0a1b      	lsrs	r3, r3, #8
 8008c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c28:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	fb02 f203 	mul.w	r2, r2, r3
 8008c32:	4b46      	ldr	r3, [pc, #280]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	091b      	lsrs	r3, r3, #4
 8008c38:	f003 030f 	and.w	r3, r3, #15
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c42:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008c44:	4b41      	ldr	r3, [pc, #260]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	0d5b      	lsrs	r3, r3, #21
 8008c4a:	f003 0303 	and.w	r3, r3, #3
 8008c4e:	3301      	adds	r3, #1
 8008c50:	005b      	lsls	r3, r3, #1
 8008c52:	69ba      	ldr	r2, [r7, #24]
 8008c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c58:	61fb      	str	r3, [r7, #28]
          break;
 8008c5a:	e038      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8008c5c:	4b3b      	ldr	r3, [pc, #236]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c68:	d133      	bne.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8008c6a:	4b38      	ldr	r3, [pc, #224]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c76:	d12c      	bne.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008c78:	4b34      	ldr	r3, [pc, #208]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	0a1b      	lsrs	r3, r3, #8
 8008c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c82:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	fb02 f203 	mul.w	r2, r2, r3
 8008c8c:	4b2f      	ldr	r3, [pc, #188]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	091b      	lsrs	r3, r3, #4
 8008c92:	f003 030f 	and.w	r3, r3, #15
 8008c96:	3301      	adds	r3, #1
 8008c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c9c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8008c9e:	4b2b      	ldr	r3, [pc, #172]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	0d5b      	lsrs	r3, r3, #21
 8008ca4:	f003 0303 	and.w	r3, r3, #3
 8008ca8:	3301      	adds	r3, #1
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb2:	61fb      	str	r3, [r7, #28]
          break;
 8008cb4:	e00d      	b.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8008cb6:	4b25      	ldr	r3, [pc, #148]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008cbc:	f003 0302 	and.w	r3, r3, #2
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d108      	bne.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x532>
            frequency = HSI48_VALUE;
 8008cc4:	4b22      	ldr	r3, [pc, #136]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8008cc6:	61fb      	str	r3, [r7, #28]
          break;
 8008cc8:	e005      	b.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x532>
          break;
 8008cca:	bf00      	nop
 8008ccc:	e376      	b.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
          break;
 8008cce:	bf00      	nop
 8008cd0:	e374      	b.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
          break;
 8008cd2:	bf00      	nop
 8008cd4:	e372      	b.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
          break;
 8008cd6:	bf00      	nop
      break;
 8008cd8:	e370      	b.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0xc18>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008cda:	4b1c      	ldr	r3, [pc, #112]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ce0:	f003 0303 	and.w	r3, r3, #3
 8008ce4:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	d828      	bhi.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8008cec:	a201      	add	r2, pc, #4	; (adr r2, 8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8008cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf2:	bf00      	nop
 8008cf4:	08008d05 	.word	0x08008d05
 8008cf8:	08008d0d 	.word	0x08008d0d
 8008cfc:	08008d15 	.word	0x08008d15
 8008d00:	08008d29 	.word	0x08008d29
          frequency = HAL_RCC_GetPCLK2Freq();
 8008d04:	f7ff f8f0 	bl	8007ee8 <HAL_RCC_GetPCLK2Freq>
 8008d08:	61f8      	str	r0, [r7, #28]
          break;
 8008d0a:	e01d      	b.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d0c:	f7ff f842 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8008d10:	61f8      	str	r0, [r7, #28]
          break;
 8008d12:	e019      	b.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d14:	4b0d      	ldr	r3, [pc, #52]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d20:	d10f      	bne.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
            frequency = HSI_VALUE;
 8008d22:	4b0d      	ldr	r3, [pc, #52]	; (8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8008d24:	61fb      	str	r3, [r7, #28]
          break;
 8008d26:	e00c      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008d28:	4b08      	ldr	r3, [pc, #32]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8008d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d2e:	f003 0302 	and.w	r3, r3, #2
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d107      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
            frequency = LSE_VALUE;
 8008d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d3a:	61fb      	str	r3, [r7, #28]
          break;
 8008d3c:	e003      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
          break;
 8008d3e:	bf00      	nop
 8008d40:	e33d      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008d42:	bf00      	nop
 8008d44:	e33b      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008d46:	bf00      	nop
        break;
 8008d48:	e339      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
 8008d4a:	bf00      	nop
 8008d4c:	40021000 	.word	0x40021000
 8008d50:	02dc6c00 	.word	0x02dc6c00
 8008d54:	080168dc 	.word	0x080168dc
 8008d58:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008d5c:	4baf      	ldr	r3, [pc, #700]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d62:	f003 030c 	and.w	r3, r3, #12
 8008d66:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b0c      	cmp	r3, #12
 8008d6c:	d839      	bhi.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8008d6e:	a201      	add	r2, pc, #4	; (adr r2, 8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d74:	08008da9 	.word	0x08008da9
 8008d78:	08008de3 	.word	0x08008de3
 8008d7c:	08008de3 	.word	0x08008de3
 8008d80:	08008de3 	.word	0x08008de3
 8008d84:	08008db1 	.word	0x08008db1
 8008d88:	08008de3 	.word	0x08008de3
 8008d8c:	08008de3 	.word	0x08008de3
 8008d90:	08008de3 	.word	0x08008de3
 8008d94:	08008db9 	.word	0x08008db9
 8008d98:	08008de3 	.word	0x08008de3
 8008d9c:	08008de3 	.word	0x08008de3
 8008da0:	08008de3 	.word	0x08008de3
 8008da4:	08008dcd 	.word	0x08008dcd
          frequency = HAL_RCC_GetPCLK1Freq();
 8008da8:	f7ff f888 	bl	8007ebc <HAL_RCC_GetPCLK1Freq>
 8008dac:	61f8      	str	r0, [r7, #28]
          break;
 8008dae:	e01d      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x648>
          frequency = HAL_RCC_GetSysClockFreq();
 8008db0:	f7fe fff0 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8008db4:	61f8      	str	r0, [r7, #28]
          break;
 8008db6:	e019      	b.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x648>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008db8:	4b98      	ldr	r3, [pc, #608]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dc4:	d10f      	bne.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x642>
            frequency = HSI_VALUE;
 8008dc6:	4b96      	ldr	r3, [pc, #600]	; (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>)
 8008dc8:	61fb      	str	r3, [r7, #28]
          break;
 8008dca:	e00c      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x642>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008dcc:	4b93      	ldr	r3, [pc, #588]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dd2:	f003 0302 	and.w	r3, r3, #2
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d107      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x646>
            frequency = LSE_VALUE;
 8008dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dde:	61fb      	str	r3, [r7, #28]
          break;
 8008de0:	e003      	b.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x646>
          break;
 8008de2:	bf00      	nop
 8008de4:	e2eb      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008de6:	bf00      	nop
 8008de8:	e2e9      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008dea:	bf00      	nop
        break;
 8008dec:	e2e7      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008dee:	4b8b      	ldr	r3, [pc, #556]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008df4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008df8:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2b10      	cmp	r3, #16
 8008dfe:	d00d      	beq.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 8008e00:	2b10      	cmp	r3, #16
 8008e02:	d802      	bhi.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d005      	beq.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8008e08:	e024      	b.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
        switch(srcclk)
 8008e0a:	2b20      	cmp	r3, #32
 8008e0c:	d00a      	beq.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8008e0e:	2b30      	cmp	r3, #48	; 0x30
 8008e10:	d012      	beq.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
          break;
 8008e12:	e01f      	b.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e14:	f7ff f852 	bl	8007ebc <HAL_RCC_GetPCLK1Freq>
 8008e18:	61f8      	str	r0, [r7, #28]
          break;
 8008e1a:	e01b      	b.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e1c:	f7fe ffba 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8008e20:	61f8      	str	r0, [r7, #28]
          break;
 8008e22:	e017      	b.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e24:	4b7d      	ldr	r3, [pc, #500]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e30:	d10d      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
            frequency = HSI_VALUE;
 8008e32:	4b7b      	ldr	r3, [pc, #492]	; (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>)
 8008e34:	61fb      	str	r3, [r7, #28]
          break;
 8008e36:	e00a      	b.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008e38:	4b78      	ldr	r3, [pc, #480]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d105      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            frequency = LSE_VALUE;
 8008e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e4a:	61fb      	str	r3, [r7, #28]
          break;
 8008e4c:	e001      	b.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          break;
 8008e4e:	bf00      	nop
 8008e50:	e2b5      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008e52:	bf00      	nop
        break;
 8008e54:	e2b3      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008e56:	4b71      	ldr	r3, [pc, #452]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e60:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b40      	cmp	r3, #64	; 0x40
 8008e66:	d00d      	beq.n	8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008e68:	2b40      	cmp	r3, #64	; 0x40
 8008e6a:	d802      	bhi.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d005      	beq.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          break;
 8008e70:	e024      	b.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
        switch(srcclk)
 8008e72:	2b80      	cmp	r3, #128	; 0x80
 8008e74:	d00a      	beq.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8008e76:	2bc0      	cmp	r3, #192	; 0xc0
 8008e78:	d012      	beq.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
          break;
 8008e7a:	e01f      	b.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e7c:	f7ff f81e 	bl	8007ebc <HAL_RCC_GetPCLK1Freq>
 8008e80:	61f8      	str	r0, [r7, #28]
          break;
 8008e82:	e01b      	b.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e84:	f7fe ff86 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8008e88:	61f8      	str	r0, [r7, #28]
          break;
 8008e8a:	e017      	b.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e8c:	4b63      	ldr	r3, [pc, #396]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e98:	d10d      	bne.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
            frequency = HSI_VALUE;
 8008e9a:	4b61      	ldr	r3, [pc, #388]	; (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>)
 8008e9c:	61fb      	str	r3, [r7, #28]
          break;
 8008e9e:	e00a      	b.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008ea0:	4b5e      	ldr	r3, [pc, #376]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d105      	bne.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            frequency = LSE_VALUE;
 8008eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008eb2:	61fb      	str	r3, [r7, #28]
          break;
 8008eb4:	e001      	b.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x716>
          break;
 8008eb6:	bf00      	nop
 8008eb8:	e281      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008eba:	bf00      	nop
        break;
 8008ebc:	e27f      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008ebe:	4b57      	ldr	r3, [pc, #348]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ec8:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ed0:	d010      	beq.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 8008ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ed6:	d802      	bhi.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d007      	beq.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          break;
 8008edc:	e026      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
        switch(srcclk)
 8008ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ee2:	d00b      	beq.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8008ee4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ee8:	d012      	beq.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
          break;
 8008eea:	e01f      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008eec:	f7fe ffe6 	bl	8007ebc <HAL_RCC_GetPCLK1Freq>
 8008ef0:	61f8      	str	r0, [r7, #28]
          break;
 8008ef2:	e01b      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
          frequency = HAL_RCC_GetSysClockFreq();
 8008ef4:	f7fe ff4e 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8008ef8:	61f8      	str	r0, [r7, #28]
          break;
 8008efa:	e017      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008efc:	4b47      	ldr	r3, [pc, #284]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f08:	d10d      	bne.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
            frequency = HSI_VALUE;
 8008f0a:	4b45      	ldr	r3, [pc, #276]	; (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>)
 8008f0c:	61fb      	str	r3, [r7, #28]
          break;
 8008f0e:	e00a      	b.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f10:	4b42      	ldr	r3, [pc, #264]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d105      	bne.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = LSE_VALUE;
 8008f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f22:	61fb      	str	r3, [r7, #28]
          break;
 8008f24:	e001      	b.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
          break;
 8008f26:	bf00      	nop
 8008f28:	e249      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008f2a:	bf00      	nop
        break;
 8008f2c:	e247      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008f2e:	4b3b      	ldr	r3, [pc, #236]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008f38:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f40:	d010      	beq.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
 8008f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f46:	d802      	bhi.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d007      	beq.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
          break;
 8008f4c:	e026      	b.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
        switch(srcclk)
 8008f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f52:	d00b      	beq.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 8008f54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f58:	d012      	beq.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          break;
 8008f5a:	e01f      	b.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f5c:	f7fe ffae 	bl	8007ebc <HAL_RCC_GetPCLK1Freq>
 8008f60:	61f8      	str	r0, [r7, #28]
          break;
 8008f62:	e01b      	b.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f64:	f7fe ff16 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8008f68:	61f8      	str	r0, [r7, #28]
          break;
 8008f6a:	e017      	b.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f6c:	4b2b      	ldr	r3, [pc, #172]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f78:	d10d      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
            frequency = HSI_VALUE;
 8008f7a:	4b29      	ldr	r3, [pc, #164]	; (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>)
 8008f7c:	61fb      	str	r3, [r7, #28]
          break;
 8008f7e:	e00a      	b.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f80:	4b26      	ldr	r3, [pc, #152]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f86:	f003 0302 	and.w	r3, r3, #2
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d105      	bne.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
            frequency = LSE_VALUE;
 8008f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f92:	61fb      	str	r3, [r7, #28]
          break;
 8008f94:	e001      	b.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
          break;
 8008f96:	bf00      	nop
 8008f98:	e211      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8008f9a:	bf00      	nop
        break;
 8008f9c:	e20f      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008f9e:	4b1f      	ldr	r3, [pc, #124]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fa8:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fb0:	d007      	beq.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
 8008fb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fb6:	d000      	beq.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          break;
 8008fb8:	e02f      	b.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          frequency = HAL_RCC_GetSysClockFreq();
 8008fba:	f7fe feeb 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8008fbe:	61f8      	str	r0, [r7, #28]
          break;
 8008fc0:	e02b      	b.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008fc2:	4b16      	ldr	r3, [pc, #88]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fce:	d123      	bne.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8008fd0:	4b12      	ldr	r3, [pc, #72]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d01d      	beq.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008fdc:	4b0f      	ldr	r3, [pc, #60]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	0a1b      	lsrs	r3, r3, #8
 8008fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fe6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	fb02 f203 	mul.w	r2, r2, r3
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	091b      	lsrs	r3, r3, #4
 8008ff6:	f003 030f 	and.w	r3, r3, #15
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009000:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8009002:	4b06      	ldr	r3, [pc, #24]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x878>)
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	0e5b      	lsrs	r3, r3, #25
 8009008:	f003 0303 	and.w	r3, r3, #3
 800900c:	3301      	adds	r3, #1
 800900e:	005b      	lsls	r3, r3, #1
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	fbb2 f3f3 	udiv	r3, r2, r3
 8009016:	61fb      	str	r3, [r7, #28]
          break;
 8009018:	bf00      	nop
        break;
 800901a:	e1d0      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
 800901c:	40021000 	.word	0x40021000
 8009020:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8009024:	4bac      	ldr	r3, [pc, #688]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800902a:	f003 0304 	and.w	r3, r3, #4
 800902e:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d103      	bne.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8009036:	f7fe ff57 	bl	8007ee8 <HAL_RCC_GetPCLK2Freq>
 800903a:	61f8      	str	r0, [r7, #28]
        break;
 800903c:	e1bf      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          frequency = HAL_RCC_GetSysClockFreq();
 800903e:	f7fe fea9 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8009042:	61f8      	str	r0, [r7, #28]
        break;
 8009044:	e1bb      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8009046:	4ba4      	ldr	r3, [pc, #656]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009048:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800904c:	f003 0318 	and.w	r3, r3, #24
 8009050:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2b08      	cmp	r3, #8
 8009056:	d028      	beq.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 8009058:	2b10      	cmp	r3, #16
 800905a:	d009      	beq.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800905c:	2b00      	cmp	r3, #0
 800905e:	d000      	beq.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
          break;
 8009060:	e030      	b.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8009062:	69b9      	ldr	r1, [r7, #24]
 8009064:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009068:	f000 fb92 	bl	8009790 <RCCEx_GetSAIxPeriphCLKFreq>
 800906c:	61f8      	str	r0, [r7, #28]
          break;
 800906e:	e029      	b.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009070:	4b99      	ldr	r3, [pc, #612]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0302 	and.w	r3, r3, #2
 8009078:	2b02      	cmp	r3, #2
 800907a:	d120      	bne.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800907c:	4b96      	ldr	r3, [pc, #600]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0308 	and.w	r3, r3, #8
 8009084:	2b00      	cmp	r3, #0
 8009086:	d005      	beq.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 8009088:	4b93      	ldr	r3, [pc, #588]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	091b      	lsrs	r3, r3, #4
 800908e:	f003 030f 	and.w	r3, r3, #15
 8009092:	e005      	b.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8009094:	4b90      	ldr	r3, [pc, #576]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800909a:	0a1b      	lsrs	r3, r3, #8
 800909c:	f003 030f 	and.w	r3, r3, #15
 80090a0:	4a8e      	ldr	r2, [pc, #568]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0xb38>)
 80090a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090a6:	61fb      	str	r3, [r7, #28]
          break;
 80090a8:	e009      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090aa:	4b8b      	ldr	r3, [pc, #556]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090b6:	d104      	bne.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
            frequency = HSI_VALUE;
 80090b8:	4b89      	ldr	r3, [pc, #548]	; (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80090ba:	61fb      	str	r3, [r7, #28]
          break;
 80090bc:	e001      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
          break;
 80090be:	bf00      	nop
 80090c0:	e17d      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 80090c2:	bf00      	nop
        break;
 80090c4:	e17b      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80090c6:	4b84      	ldr	r3, [pc, #528]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 80090c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80090d0:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d8:	d009      	beq.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80090da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090de:	d00a      	beq.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d000      	beq.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          break;
 80090e4:	e011      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x966>
          frequency = HAL_RCC_GetPCLK1Freq();
 80090e6:	f7fe fee9 	bl	8007ebc <HAL_RCC_GetPCLK1Freq>
 80090ea:	61f8      	str	r0, [r7, #28]
          break;
 80090ec:	e00d      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x966>
          frequency = HAL_RCC_GetSysClockFreq();
 80090ee:	f7fe fe51 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 80090f2:	61f8      	str	r0, [r7, #28]
          break;
 80090f4:	e009      	b.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x966>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090f6:	4b78      	ldr	r3, [pc, #480]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009102:	d101      	bne.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
            frequency = HSI_VALUE;
 8009104:	4b76      	ldr	r3, [pc, #472]	; (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009106:	61fb      	str	r3, [r7, #28]
          break;
 8009108:	bf00      	nop
        break;
 800910a:	e158      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800910c:	4b72      	ldr	r3, [pc, #456]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 800910e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009112:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009116:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800911e:	d009      	beq.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 8009120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009124:	d00a      	beq.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8009126:	2b00      	cmp	r3, #0
 8009128:	d000      	beq.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
 800912a:	e011      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800912c:	f7fe fec6 	bl	8007ebc <HAL_RCC_GetPCLK1Freq>
 8009130:	61f8      	str	r0, [r7, #28]
          break;
 8009132:	e00d      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
          frequency = HAL_RCC_GetSysClockFreq();
 8009134:	f7fe fe2e 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8009138:	61f8      	str	r0, [r7, #28]
          break;
 800913a:	e009      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800913c:	4b66      	ldr	r3, [pc, #408]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009148:	d101      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
            frequency = HSI_VALUE;
 800914a:	4b65      	ldr	r3, [pc, #404]	; (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800914c:	61fb      	str	r3, [r7, #28]
          break;
 800914e:	bf00      	nop
        break;
 8009150:	e135      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009152:	4b61      	ldr	r3, [pc, #388]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800915c:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009164:	d009      	beq.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
 8009166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800916a:	d00a      	beq.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800916c:	2b00      	cmp	r3, #0
 800916e:	d000      	beq.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          break;
 8009170:	e011      	b.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009172:	f7fe fea3 	bl	8007ebc <HAL_RCC_GetPCLK1Freq>
 8009176:	61f8      	str	r0, [r7, #28]
          break;
 8009178:	e00d      	b.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800917a:	f7fe fe0b 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 800917e:	61f8      	str	r0, [r7, #28]
          break;
 8009180:	e009      	b.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009182:	4b55      	ldr	r3, [pc, #340]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800918a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800918e:	d101      	bne.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x9f0>
            frequency = HSI_VALUE;
 8009190:	4b53      	ldr	r3, [pc, #332]	; (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009192:	61fb      	str	r3, [r7, #28]
          break;
 8009194:	bf00      	nop
        break;
 8009196:	e112      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009198:	4b4f      	ldr	r3, [pc, #316]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 800919a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800919e:	f003 0303 	and.w	r3, r3, #3
 80091a2:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d008      	beq.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d302      	bcc.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d008      	beq.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          break;
 80091b2:	e011      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
          frequency = HAL_RCC_GetPCLK1Freq();
 80091b4:	f7fe fe82 	bl	8007ebc <HAL_RCC_GetPCLK1Freq>
 80091b8:	61f8      	str	r0, [r7, #28]
          break;
 80091ba:	e00d      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
          frequency = HAL_RCC_GetSysClockFreq();
 80091bc:	f7fe fdea 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 80091c0:	61f8      	str	r0, [r7, #28]
          break;
 80091c2:	e009      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091c4:	4b44      	ldr	r3, [pc, #272]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091d0:	d101      	bne.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
            frequency = HSI_VALUE;
 80091d2:	4b43      	ldr	r3, [pc, #268]	; (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80091d4:	61fb      	str	r3, [r7, #28]
          break;
 80091d6:	bf00      	nop
        break;
 80091d8:	e0f1      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80091da:	4b3f      	ldr	r3, [pc, #252]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 80091dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80091e4:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091ec:	d010      	beq.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
 80091ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091f2:	d802      	bhi.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d007      	beq.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          break;
 80091f8:	e02f      	b.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
        switch(srcclk)
 80091fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80091fe:	d012      	beq.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009200:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009204:	d019      	beq.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
          break;
 8009206:	e028      	b.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009208:	f7fe fe58 	bl	8007ebc <HAL_RCC_GetPCLK1Freq>
 800920c:	61f8      	str	r0, [r7, #28]
          break;
 800920e:	e024      	b.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009210:	4b31      	ldr	r3, [pc, #196]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009216:	f003 0302 	and.w	r3, r3, #2
 800921a:	2b02      	cmp	r3, #2
 800921c:	d118      	bne.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
              frequency = LSI_VALUE;
 800921e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009222:	61fb      	str	r3, [r7, #28]
          break;
 8009224:	e014      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009226:	4b2c      	ldr	r3, [pc, #176]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800922e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009232:	d10f      	bne.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
            frequency = HSI_VALUE;
 8009234:	4b2a      	ldr	r3, [pc, #168]	; (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009236:	61fb      	str	r3, [r7, #28]
          break;
 8009238:	e00c      	b.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800923a:	4b27      	ldr	r3, [pc, #156]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 800923c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009240:	f003 0302 	and.w	r3, r3, #2
 8009244:	2b02      	cmp	r3, #2
 8009246:	d107      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
            frequency = LSE_VALUE;
 8009248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800924c:	61fb      	str	r3, [r7, #28]
          break;
 800924e:	e003      	b.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          break;
 8009250:	bf00      	nop
 8009252:	e0b4      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8009254:	bf00      	nop
 8009256:	e0b2      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 8009258:	bf00      	nop
        break;
 800925a:	e0b0      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800925c:	4b1e      	ldr	r3, [pc, #120]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 800925e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009262:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009266:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800926e:	d010      	beq.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009274:	d802      	bhi.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
 8009276:	2b00      	cmp	r3, #0
 8009278:	d007      	beq.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
          break;
 800927a:	e036      	b.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
        switch(srcclk)
 800927c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009280:	d012      	beq.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
 8009282:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009286:	d019      	beq.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
          break;
 8009288:	e02f      	b.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = HAL_RCC_GetPCLK1Freq();
 800928a:	f7fe fe17 	bl	8007ebc <HAL_RCC_GetPCLK1Freq>
 800928e:	61f8      	str	r0, [r7, #28]
          break;
 8009290:	e02b      	b.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009292:	4b11      	ldr	r3, [pc, #68]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 8009294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009298:	f003 0302 	and.w	r3, r3, #2
 800929c:	2b02      	cmp	r3, #2
 800929e:	d118      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
              frequency = LSI_VALUE;
 80092a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80092a4:	61fb      	str	r3, [r7, #28]
          break;
 80092a6:	e014      	b.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80092a8:	4b0b      	ldr	r3, [pc, #44]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092b4:	d116      	bne.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
            frequency = HSI_VALUE;
 80092b6:	4b0a      	ldr	r3, [pc, #40]	; (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80092b8:	61fb      	str	r3, [r7, #28]
          break;
 80092ba:	e013      	b.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80092bc:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>)
 80092be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d10e      	bne.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
            frequency = LSE_VALUE;
 80092ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092ce:	61fb      	str	r3, [r7, #28]
          break;
 80092d0:	e00a      	b.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 80092d2:	bf00      	nop
 80092d4:	e073      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
 80092d6:	bf00      	nop
 80092d8:	40021000 	.word	0x40021000
 80092dc:	080168dc 	.word	0x080168dc
 80092e0:	00f42400 	.word	0x00f42400
          break;
 80092e4:	bf00      	nop
 80092e6:	e06a      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 80092e8:	bf00      	nop
        break;
 80092ea:	e068      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80092ec:	4b36      	ldr	r3, [pc, #216]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 80092ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80092f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80092f6:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092fe:	d009      	beq.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8009300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009304:	d023      	beq.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8009306:	2b00      	cmp	r3, #0
 8009308:	d000      	beq.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800930a:	e050      	b.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetSysClockFreq();
 800930c:	f7fe fd42 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 8009310:	61f8      	str	r0, [r7, #28]
          break;
 8009312:	e04c      	b.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009314:	4b2c      	ldr	r3, [pc, #176]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b02      	cmp	r3, #2
 800931e:	d143      	bne.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009320:	4b29      	ldr	r3, [pc, #164]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0308 	and.w	r3, r3, #8
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 800932c:	4b26      	ldr	r3, [pc, #152]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	091b      	lsrs	r3, r3, #4
 8009332:	f003 030f 	and.w	r3, r3, #15
 8009336:	e005      	b.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
 8009338:	4b23      	ldr	r3, [pc, #140]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 800933a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800933e:	0a1b      	lsrs	r3, r3, #8
 8009340:	f003 030f 	and.w	r3, r3, #15
 8009344:	4a21      	ldr	r2, [pc, #132]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0xc28>)
 8009346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800934a:	61fb      	str	r3, [r7, #28]
          break;
 800934c:	e02c      	b.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800934e:	4b1e      	ldr	r3, [pc, #120]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800935a:	d127      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800935c:	4b1a      	ldr	r3, [pc, #104]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009368:	d120      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800936a:	4b17      	ldr	r3, [pc, #92]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	0a1b      	lsrs	r3, r3, #8
 8009370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009374:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	68ba      	ldr	r2, [r7, #8]
 800937a:	fb02 f203 	mul.w	r2, r2, r3
 800937e:	4b12      	ldr	r3, [pc, #72]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	091b      	lsrs	r3, r3, #4
 8009384:	f003 030f 	and.w	r3, r3, #15
 8009388:	3301      	adds	r3, #1
 800938a:	fbb2 f3f3 	udiv	r3, r2, r3
 800938e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009390:	4b0d      	ldr	r3, [pc, #52]	; (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc24>)
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	0d5b      	lsrs	r3, r3, #21
 8009396:	f003 0303 	and.w	r3, r3, #3
 800939a:	3301      	adds	r3, #1
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	69ba      	ldr	r2, [r7, #24]
 80093a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80093a4:	61fb      	str	r3, [r7, #28]
          break;
 80093a6:	e001      	b.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0xc08>
          break;
 80093a8:	bf00      	nop
 80093aa:	e008      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 80093ac:	bf00      	nop
        break;
 80093ae:	e006      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
      break;
 80093b0:	bf00      	nop
 80093b2:	e004      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
      break;
 80093b4:	bf00      	nop
 80093b6:	e002      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
      break;
 80093b8:	bf00      	nop
 80093ba:	e000      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
      break;
 80093bc:	bf00      	nop
    }
  }

  return(frequency);
 80093be:	69fb      	ldr	r3, [r7, #28]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3720      	adds	r7, #32
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	40021000 	.word	0x40021000
 80093cc:	080168dc 	.word	0x080168dc

080093d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80093de:	4b70      	ldr	r3, [pc, #448]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	f003 0303 	and.w	r3, r3, #3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00e      	beq.n	8009408 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80093ea:	4b6d      	ldr	r3, [pc, #436]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	f003 0203 	and.w	r2, r3, #3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d103      	bne.n	8009402 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
       ||
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d13f      	bne.n	8009482 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	73fb      	strb	r3, [r7, #15]
 8009406:	e03c      	b.n	8009482 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b02      	cmp	r3, #2
 800940e:	d00c      	beq.n	800942a <RCCEx_PLLSAI1_Config+0x5a>
 8009410:	2b03      	cmp	r3, #3
 8009412:	d013      	beq.n	800943c <RCCEx_PLLSAI1_Config+0x6c>
 8009414:	2b01      	cmp	r3, #1
 8009416:	d120      	bne.n	800945a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009418:	4b61      	ldr	r3, [pc, #388]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0302 	and.w	r3, r3, #2
 8009420:	2b00      	cmp	r3, #0
 8009422:	d11d      	bne.n	8009460 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009428:	e01a      	b.n	8009460 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800942a:	4b5d      	ldr	r3, [pc, #372]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009432:	2b00      	cmp	r3, #0
 8009434:	d116      	bne.n	8009464 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800943a:	e013      	b.n	8009464 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800943c:	4b58      	ldr	r3, [pc, #352]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10f      	bne.n	8009468 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009448:	4b55      	ldr	r3, [pc, #340]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d109      	bne.n	8009468 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009458:	e006      	b.n	8009468 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	73fb      	strb	r3, [r7, #15]
      break;
 800945e:	e004      	b.n	800946a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8009460:	bf00      	nop
 8009462:	e002      	b.n	800946a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8009464:	bf00      	nop
 8009466:	e000      	b.n	800946a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8009468:	bf00      	nop
    }

    if(status == HAL_OK)
 800946a:	7bfb      	ldrb	r3, [r7, #15]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d108      	bne.n	8009482 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8009470:	4b4b      	ldr	r3, [pc, #300]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f023 0203 	bic.w	r2, r3, #3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4948      	ldr	r1, [pc, #288]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800947e:	4313      	orrs	r3, r2
 8009480:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	2b00      	cmp	r3, #0
 8009486:	f040 8086 	bne.w	8009596 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800948a:	4b45      	ldr	r3, [pc, #276]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a44      	ldr	r2, [pc, #272]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009490:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009496:	f7f9 ffa3 	bl	80033e0 <HAL_GetTick>
 800949a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800949c:	e009      	b.n	80094b2 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800949e:	f7f9 ff9f 	bl	80033e0 <HAL_GetTick>
 80094a2:	4602      	mov	r2, r0
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d902      	bls.n	80094b2 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80094ac:	2303      	movs	r3, #3
 80094ae:	73fb      	strb	r3, [r7, #15]
        break;
 80094b0:	e005      	b.n	80094be <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80094b2:	4b3b      	ldr	r3, [pc, #236]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1ef      	bne.n	800949e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80094be:	7bfb      	ldrb	r3, [r7, #15]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d168      	bne.n	8009596 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d113      	bne.n	80094f2 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80094ca:	4b35      	ldr	r3, [pc, #212]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80094cc:	691a      	ldr	r2, [r3, #16]
 80094ce:	4b35      	ldr	r3, [pc, #212]	; (80095a4 <RCCEx_PLLSAI1_Config+0x1d4>)
 80094d0:	4013      	ands	r3, r2
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	6892      	ldr	r2, [r2, #8]
 80094d6:	0211      	lsls	r1, r2, #8
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	68d2      	ldr	r2, [r2, #12]
 80094dc:	06d2      	lsls	r2, r2, #27
 80094de:	4311      	orrs	r1, r2
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	6852      	ldr	r2, [r2, #4]
 80094e4:	3a01      	subs	r2, #1
 80094e6:	0112      	lsls	r2, r2, #4
 80094e8:	430a      	orrs	r2, r1
 80094ea:	492d      	ldr	r1, [pc, #180]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	610b      	str	r3, [r1, #16]
 80094f0:	e02d      	b.n	800954e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d115      	bne.n	8009524 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80094f8:	4b29      	ldr	r3, [pc, #164]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 80094fa:	691a      	ldr	r2, [r3, #16]
 80094fc:	4b2a      	ldr	r3, [pc, #168]	; (80095a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80094fe:	4013      	ands	r3, r2
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	6892      	ldr	r2, [r2, #8]
 8009504:	0211      	lsls	r1, r2, #8
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	6912      	ldr	r2, [r2, #16]
 800950a:	0852      	lsrs	r2, r2, #1
 800950c:	3a01      	subs	r2, #1
 800950e:	0552      	lsls	r2, r2, #21
 8009510:	4311      	orrs	r1, r2
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	6852      	ldr	r2, [r2, #4]
 8009516:	3a01      	subs	r2, #1
 8009518:	0112      	lsls	r2, r2, #4
 800951a:	430a      	orrs	r2, r1
 800951c:	4920      	ldr	r1, [pc, #128]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800951e:	4313      	orrs	r3, r2
 8009520:	610b      	str	r3, [r1, #16]
 8009522:	e014      	b.n	800954e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009524:	4b1e      	ldr	r3, [pc, #120]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009526:	691a      	ldr	r2, [r3, #16]
 8009528:	4b20      	ldr	r3, [pc, #128]	; (80095ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800952a:	4013      	ands	r3, r2
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	6892      	ldr	r2, [r2, #8]
 8009530:	0211      	lsls	r1, r2, #8
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	6952      	ldr	r2, [r2, #20]
 8009536:	0852      	lsrs	r2, r2, #1
 8009538:	3a01      	subs	r2, #1
 800953a:	0652      	lsls	r2, r2, #25
 800953c:	4311      	orrs	r1, r2
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	6852      	ldr	r2, [r2, #4]
 8009542:	3a01      	subs	r2, #1
 8009544:	0112      	lsls	r2, r2, #4
 8009546:	430a      	orrs	r2, r1
 8009548:	4915      	ldr	r1, [pc, #84]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800954a:	4313      	orrs	r3, r2
 800954c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800954e:	4b14      	ldr	r3, [pc, #80]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a13      	ldr	r2, [pc, #76]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009554:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009558:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800955a:	f7f9 ff41 	bl	80033e0 <HAL_GetTick>
 800955e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009560:	e009      	b.n	8009576 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009562:	f7f9 ff3d 	bl	80033e0 <HAL_GetTick>
 8009566:	4602      	mov	r2, r0
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	1ad3      	subs	r3, r2, r3
 800956c:	2b02      	cmp	r3, #2
 800956e:	d902      	bls.n	8009576 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8009570:	2303      	movs	r3, #3
 8009572:	73fb      	strb	r3, [r7, #15]
          break;
 8009574:	e005      	b.n	8009582 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009576:	4b0a      	ldr	r3, [pc, #40]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d0ef      	beq.n	8009562 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d106      	bne.n	8009596 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009588:	4b05      	ldr	r3, [pc, #20]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 800958a:	691a      	ldr	r2, [r3, #16]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	4903      	ldr	r1, [pc, #12]	; (80095a0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8009592:	4313      	orrs	r3, r2
 8009594:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009596:	7bfb      	ldrb	r3, [r7, #15]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	40021000 	.word	0x40021000
 80095a4:	07ff800f 	.word	0x07ff800f
 80095a8:	ff9f800f 	.word	0xff9f800f
 80095ac:	f9ff800f 	.word	0xf9ff800f

080095b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80095be:	4b70      	ldr	r3, [pc, #448]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	f003 0303 	and.w	r3, r3, #3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00e      	beq.n	80095e8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80095ca:	4b6d      	ldr	r3, [pc, #436]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	f003 0203 	and.w	r2, r3, #3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d103      	bne.n	80095e2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
       ||
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d13f      	bne.n	8009662 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	73fb      	strb	r3, [r7, #15]
 80095e6:	e03c      	b.n	8009662 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d00c      	beq.n	800960a <RCCEx_PLLSAI2_Config+0x5a>
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d013      	beq.n	800961c <RCCEx_PLLSAI2_Config+0x6c>
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d120      	bne.n	800963a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80095f8:	4b61      	ldr	r3, [pc, #388]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 0302 	and.w	r3, r3, #2
 8009600:	2b00      	cmp	r3, #0
 8009602:	d11d      	bne.n	8009640 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009608:	e01a      	b.n	8009640 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800960a:	4b5d      	ldr	r3, [pc, #372]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009612:	2b00      	cmp	r3, #0
 8009614:	d116      	bne.n	8009644 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800961a:	e013      	b.n	8009644 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800961c:	4b58      	ldr	r3, [pc, #352]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10f      	bne.n	8009648 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009628:	4b55      	ldr	r3, [pc, #340]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d109      	bne.n	8009648 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009638:	e006      	b.n	8009648 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	73fb      	strb	r3, [r7, #15]
      break;
 800963e:	e004      	b.n	800964a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8009640:	bf00      	nop
 8009642:	e002      	b.n	800964a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8009644:	bf00      	nop
 8009646:	e000      	b.n	800964a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8009648:	bf00      	nop
    }

    if(status == HAL_OK)
 800964a:	7bfb      	ldrb	r3, [r7, #15]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d108      	bne.n	8009662 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8009650:	4b4b      	ldr	r3, [pc, #300]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	f023 0203 	bic.w	r2, r3, #3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4948      	ldr	r1, [pc, #288]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 800965e:	4313      	orrs	r3, r2
 8009660:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	2b00      	cmp	r3, #0
 8009666:	f040 8086 	bne.w	8009776 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800966a:	4b45      	ldr	r3, [pc, #276]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a44      	ldr	r2, [pc, #272]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009676:	f7f9 feb3 	bl	80033e0 <HAL_GetTick>
 800967a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800967c:	e009      	b.n	8009692 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800967e:	f7f9 feaf 	bl	80033e0 <HAL_GetTick>
 8009682:	4602      	mov	r2, r0
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	2b02      	cmp	r3, #2
 800968a:	d902      	bls.n	8009692 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800968c:	2303      	movs	r3, #3
 800968e:	73fb      	strb	r3, [r7, #15]
        break;
 8009690:	e005      	b.n	800969e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009692:	4b3b      	ldr	r3, [pc, #236]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1ef      	bne.n	800967e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800969e:	7bfb      	ldrb	r3, [r7, #15]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d168      	bne.n	8009776 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d113      	bne.n	80096d2 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80096aa:	4b35      	ldr	r3, [pc, #212]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 80096ac:	695a      	ldr	r2, [r3, #20]
 80096ae:	4b35      	ldr	r3, [pc, #212]	; (8009784 <RCCEx_PLLSAI2_Config+0x1d4>)
 80096b0:	4013      	ands	r3, r2
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	6892      	ldr	r2, [r2, #8]
 80096b6:	0211      	lsls	r1, r2, #8
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	68d2      	ldr	r2, [r2, #12]
 80096bc:	06d2      	lsls	r2, r2, #27
 80096be:	4311      	orrs	r1, r2
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	6852      	ldr	r2, [r2, #4]
 80096c4:	3a01      	subs	r2, #1
 80096c6:	0112      	lsls	r2, r2, #4
 80096c8:	430a      	orrs	r2, r1
 80096ca:	492d      	ldr	r1, [pc, #180]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 80096cc:	4313      	orrs	r3, r2
 80096ce:	614b      	str	r3, [r1, #20]
 80096d0:	e02d      	b.n	800972e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d115      	bne.n	8009704 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80096d8:	4b29      	ldr	r3, [pc, #164]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 80096da:	695a      	ldr	r2, [r3, #20]
 80096dc:	4b2a      	ldr	r3, [pc, #168]	; (8009788 <RCCEx_PLLSAI2_Config+0x1d8>)
 80096de:	4013      	ands	r3, r2
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	6892      	ldr	r2, [r2, #8]
 80096e4:	0211      	lsls	r1, r2, #8
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	6912      	ldr	r2, [r2, #16]
 80096ea:	0852      	lsrs	r2, r2, #1
 80096ec:	3a01      	subs	r2, #1
 80096ee:	0552      	lsls	r2, r2, #21
 80096f0:	4311      	orrs	r1, r2
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	6852      	ldr	r2, [r2, #4]
 80096f6:	3a01      	subs	r2, #1
 80096f8:	0112      	lsls	r2, r2, #4
 80096fa:	430a      	orrs	r2, r1
 80096fc:	4920      	ldr	r1, [pc, #128]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 80096fe:	4313      	orrs	r3, r2
 8009700:	614b      	str	r3, [r1, #20]
 8009702:	e014      	b.n	800972e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009704:	4b1e      	ldr	r3, [pc, #120]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009706:	695a      	ldr	r2, [r3, #20]
 8009708:	4b20      	ldr	r3, [pc, #128]	; (800978c <RCCEx_PLLSAI2_Config+0x1dc>)
 800970a:	4013      	ands	r3, r2
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	6892      	ldr	r2, [r2, #8]
 8009710:	0211      	lsls	r1, r2, #8
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	6952      	ldr	r2, [r2, #20]
 8009716:	0852      	lsrs	r2, r2, #1
 8009718:	3a01      	subs	r2, #1
 800971a:	0652      	lsls	r2, r2, #25
 800971c:	4311      	orrs	r1, r2
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	6852      	ldr	r2, [r2, #4]
 8009722:	3a01      	subs	r2, #1
 8009724:	0112      	lsls	r2, r2, #4
 8009726:	430a      	orrs	r2, r1
 8009728:	4915      	ldr	r1, [pc, #84]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 800972a:	4313      	orrs	r3, r2
 800972c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800972e:	4b14      	ldr	r3, [pc, #80]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a13      	ldr	r2, [pc, #76]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009738:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800973a:	f7f9 fe51 	bl	80033e0 <HAL_GetTick>
 800973e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009740:	e009      	b.n	8009756 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009742:	f7f9 fe4d 	bl	80033e0 <HAL_GetTick>
 8009746:	4602      	mov	r2, r0
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	1ad3      	subs	r3, r2, r3
 800974c:	2b02      	cmp	r3, #2
 800974e:	d902      	bls.n	8009756 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	73fb      	strb	r3, [r7, #15]
          break;
 8009754:	e005      	b.n	8009762 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009756:	4b0a      	ldr	r3, [pc, #40]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800975e:	2b00      	cmp	r3, #0
 8009760:	d0ef      	beq.n	8009742 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d106      	bne.n	8009776 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009768:	4b05      	ldr	r3, [pc, #20]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 800976a:	695a      	ldr	r2, [r3, #20]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	4903      	ldr	r1, [pc, #12]	; (8009780 <RCCEx_PLLSAI2_Config+0x1d0>)
 8009772:	4313      	orrs	r3, r2
 8009774:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009776:	7bfb      	ldrb	r3, [r7, #15]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	40021000 	.word	0x40021000
 8009784:	07ff800f 	.word	0x07ff800f
 8009788:	ff9f800f 	.word	0xff9f800f
 800978c:	f9ff800f 	.word	0xf9ff800f

08009790 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8009790:	b480      	push	{r7}
 8009792:	b089      	sub	sp, #36	; 0x24
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800979a:	2300      	movs	r3, #0
 800979c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800979e:	2300      	movs	r3, #0
 80097a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80097a2:	2300      	movs	r3, #0
 80097a4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097ac:	d10b      	bne.n	80097c6 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80097ae:	4b7e      	ldr	r3, [pc, #504]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80097b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097b4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80097b8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	2b60      	cmp	r3, #96	; 0x60
 80097be:	d112      	bne.n	80097e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80097c0:	4b7a      	ldr	r3, [pc, #488]	; (80099ac <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80097c2:	61fb      	str	r3, [r7, #28]
 80097c4:	e00f      	b.n	80097e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097cc:	d10b      	bne.n	80097e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80097ce:	4b76      	ldr	r3, [pc, #472]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80097d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097d8:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097e0:	d101      	bne.n	80097e6 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80097e2:	4b72      	ldr	r3, [pc, #456]	; (80099ac <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80097e4:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f040 80d6 	bne.w	800999a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	2b40      	cmp	r3, #64	; 0x40
 80097f6:	d003      	beq.n	8009800 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097fe:	d13b      	bne.n	8009878 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009800:	4b69      	ldr	r3, [pc, #420]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800980c:	f040 80c4 	bne.w	8009998 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8009810:	4b65      	ldr	r3, [pc, #404]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 80bd 	beq.w	8009998 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800981e:	4b62      	ldr	r3, [pc, #392]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	091b      	lsrs	r3, r3, #4
 8009824:	f003 030f 	and.w	r3, r3, #15
 8009828:	3301      	adds	r3, #1
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009830:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009832:	4b5d      	ldr	r3, [pc, #372]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	0a1b      	lsrs	r3, r3, #8
 8009838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800983c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800983e:	4b5a      	ldr	r3, [pc, #360]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	0edb      	lsrs	r3, r3, #27
 8009844:	f003 031f 	and.w	r3, r3, #31
 8009848:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10a      	bne.n	8009866 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009850:	4b55      	ldr	r3, [pc, #340]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d002      	beq.n	8009862 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800985c:	2311      	movs	r3, #17
 800985e:	617b      	str	r3, [r7, #20]
 8009860:	e001      	b.n	8009866 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8009862:	2307      	movs	r3, #7
 8009864:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	fb02 f203 	mul.w	r2, r2, r3
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	fbb2 f3f3 	udiv	r3, r2, r3
 8009874:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009876:	e08f      	b.n	8009998 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d13a      	bne.n	80098f4 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800987e:	4b4a      	ldr	r3, [pc, #296]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800988a:	f040 8086 	bne.w	800999a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800988e:	4b46      	ldr	r3, [pc, #280]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d07f      	beq.n	800999a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800989a:	4b43      	ldr	r3, [pc, #268]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	091b      	lsrs	r3, r3, #4
 80098a0:	f003 030f 	and.w	r3, r3, #15
 80098a4:	3301      	adds	r3, #1
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ac:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80098ae:	4b3e      	ldr	r3, [pc, #248]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	0a1b      	lsrs	r3, r3, #8
 80098b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80098ba:	4b3b      	ldr	r3, [pc, #236]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	0edb      	lsrs	r3, r3, #27
 80098c0:	f003 031f 	and.w	r3, r3, #31
 80098c4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10a      	bne.n	80098e2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80098cc:	4b36      	ldr	r3, [pc, #216]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d002      	beq.n	80098de <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80098d8:	2311      	movs	r3, #17
 80098da:	617b      	str	r3, [r7, #20]
 80098dc:	e001      	b.n	80098e2 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80098de:	2307      	movs	r3, #7
 80098e0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	fb02 f203 	mul.w	r2, r2, r3
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80098f0:	61fb      	str	r3, [r7, #28]
 80098f2:	e052      	b.n	800999a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	2b80      	cmp	r3, #128	; 0x80
 80098f8:	d003      	beq.n	8009902 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009900:	d109      	bne.n	8009916 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009902:	4b29      	ldr	r3, [pc, #164]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800990a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800990e:	d144      	bne.n	800999a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8009910:	4b27      	ldr	r3, [pc, #156]	; (80099b0 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8009912:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009914:	e041      	b.n	800999a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	2b20      	cmp	r3, #32
 800991a:	d003      	beq.n	8009924 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009922:	d13a      	bne.n	800999a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8009924:	4b20      	ldr	r3, [pc, #128]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800992c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009930:	d133      	bne.n	800999a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8009932:	4b1d      	ldr	r3, [pc, #116]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d02d      	beq.n	800999a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800993e:	4b1a      	ldr	r3, [pc, #104]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	091b      	lsrs	r3, r3, #4
 8009944:	f003 030f 	and.w	r3, r3, #15
 8009948:	3301      	adds	r3, #1
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009950:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8009952:	4b15      	ldr	r3, [pc, #84]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	0a1b      	lsrs	r3, r3, #8
 8009958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800995c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800995e:	4b12      	ldr	r3, [pc, #72]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009960:	695b      	ldr	r3, [r3, #20]
 8009962:	0edb      	lsrs	r3, r3, #27
 8009964:	f003 031f 	and.w	r3, r3, #31
 8009968:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10a      	bne.n	8009986 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8009970:	4b0d      	ldr	r3, [pc, #52]	; (80099a8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800997c:	2311      	movs	r3, #17
 800997e:	617b      	str	r3, [r7, #20]
 8009980:	e001      	b.n	8009986 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8009982:	2307      	movs	r3, #7
 8009984:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	fb02 f203 	mul.w	r2, r2, r3
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	fbb2 f3f3 	udiv	r3, r2, r3
 8009994:	61fb      	str	r3, [r7, #28]
 8009996:	e000      	b.n	800999a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8009998:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800999a:	69fb      	ldr	r3, [r7, #28]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3724      	adds	r7, #36	; 0x24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	40021000 	.word	0x40021000
 80099ac:	001fff68 	.word	0x001fff68
 80099b0:	00f42400 	.word	0x00f42400

080099b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d06c      	beq.n	8009aa0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d106      	bne.n	80099e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7f9 f8a0 	bl	8002b20 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2202      	movs	r2, #2
 80099e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	22ca      	movs	r2, #202	; 0xca
 80099ee:	625a      	str	r2, [r3, #36]	; 0x24
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2253      	movs	r2, #83	; 0x53
 80099f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f87c 	bl	8009af6 <RTC_EnterInitMode>
 80099fe:	4603      	mov	r3, r0
 8009a00:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009a02:	7bfb      	ldrb	r3, [r7, #15]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d14b      	bne.n	8009aa0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	6812      	ldr	r2, [r2, #0]
 8009a12:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a1a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6899      	ldr	r1, [r3, #8]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685a      	ldr	r2, [r3, #4]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	431a      	orrs	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	430a      	orrs	r2, r1
 8009a38:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	68d2      	ldr	r2, [r2, #12]
 8009a42:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6919      	ldr	r1, [r3, #16]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	041a      	lsls	r2, r3, #16
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	430a      	orrs	r2, r1
 8009a56:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f87f 	bl	8009b5c <RTC_ExitInitMode>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d11b      	bne.n	8009aa0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f022 0203 	bic.w	r2, r2, #3
 8009a76:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	69da      	ldr	r2, [r3, #28]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	431a      	orrs	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	430a      	orrs	r2, r1
 8009a8e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	22ff      	movs	r2, #255	; 0xff
 8009a96:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68da      	ldr	r2, [r3, #12]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009ac0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009ac2:	f7f9 fc8d 	bl	80033e0 <HAL_GetTick>
 8009ac6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ac8:	e009      	b.n	8009ade <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009aca:	f7f9 fc89 	bl	80033e0 <HAL_GetTick>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	1ad3      	subs	r3, r2, r3
 8009ad4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ad8:	d901      	bls.n	8009ade <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e007      	b.n	8009aee <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	f003 0320 	and.w	r3, r3, #32
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d0ee      	beq.n	8009aca <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b084      	sub	sp, #16
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d120      	bne.n	8009b52 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f04f 32ff 	mov.w	r2, #4294967295
 8009b18:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009b1a:	f7f9 fc61 	bl	80033e0 <HAL_GetTick>
 8009b1e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009b20:	e00d      	b.n	8009b3e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009b22:	f7f9 fc5d 	bl	80033e0 <HAL_GetTick>
 8009b26:	4602      	mov	r2, r0
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b30:	d905      	bls.n	8009b3e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2203      	movs	r2, #3
 8009b3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d102      	bne.n	8009b52 <RTC_EnterInitMode+0x5c>
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d1e7      	bne.n	8009b22 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009b68:	4b1a      	ldr	r3, [pc, #104]	; (8009bd4 <RTC_ExitInitMode+0x78>)
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	4a19      	ldr	r2, [pc, #100]	; (8009bd4 <RTC_ExitInitMode+0x78>)
 8009b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b72:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009b74:	4b17      	ldr	r3, [pc, #92]	; (8009bd4 <RTC_ExitInitMode+0x78>)
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	f003 0320 	and.w	r3, r3, #32
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10c      	bne.n	8009b9a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff ff92 	bl	8009aaa <HAL_RTC_WaitForSynchro>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d01e      	beq.n	8009bca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2203      	movs	r2, #3
 8009b90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	73fb      	strb	r3, [r7, #15]
 8009b98:	e017      	b.n	8009bca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009b9a:	4b0e      	ldr	r3, [pc, #56]	; (8009bd4 <RTC_ExitInitMode+0x78>)
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	4a0d      	ldr	r2, [pc, #52]	; (8009bd4 <RTC_ExitInitMode+0x78>)
 8009ba0:	f023 0320 	bic.w	r3, r3, #32
 8009ba4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7ff ff7f 	bl	8009aaa <HAL_RTC_WaitForSynchro>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d005      	beq.n	8009bbe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2203      	movs	r2, #3
 8009bb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009bbe:	4b05      	ldr	r3, [pc, #20]	; (8009bd4 <RTC_ExitInitMode+0x78>)
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	4a04      	ldr	r2, [pc, #16]	; (8009bd4 <RTC_ExitInitMode+0x78>)
 8009bc4:	f043 0320 	orr.w	r3, r3, #32
 8009bc8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	40002800 	.word	0x40002800

08009bd8 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d101      	bne.n	8009bf0 <HAL_RTCEx_SetTamper+0x18>
 8009bec:	2302      	movs	r3, #2
 8009bee:	e0a9      	b.n	8009d44 <HAL_RTCEx_SetTamper+0x16c>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Read register */
  tmpreg = hrtc->Instance->TAMPCR;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c06:	60fb      	str	r3, [r7, #12]

#if defined(RTC_TAMPER1_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_1) != 0)
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d021      	beq.n	8009c58 <HAL_RTCEx_SetTamper+0x80>
  {
    MODIFY_REG(tmpreg,
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f023 1207 	bic.w	r2, r3, #458759	; 0x70007
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6889      	ldr	r1, [r1, #8]
 8009c22:	2900      	cmp	r1, #0
 8009c24:	d101      	bne.n	8009c2a <HAL_RTCEx_SetTamper+0x52>
 8009c26:	2100      	movs	r1, #0
 8009c28:	e000      	b.n	8009c2c <HAL_RTCEx_SetTamper+0x54>
 8009c2a:	2102      	movs	r1, #2
 8009c2c:	430b      	orrs	r3, r1
 8009c2e:	6839      	ldr	r1, [r7, #0]
 8009c30:	68c9      	ldr	r1, [r1, #12]
 8009c32:	2900      	cmp	r1, #0
 8009c34:	d101      	bne.n	8009c3a <HAL_RTCEx_SetTamper+0x62>
 8009c36:	2100      	movs	r1, #0
 8009c38:	e001      	b.n	8009c3e <HAL_RTCEx_SetTamper+0x66>
 8009c3a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8009c3e:	430b      	orrs	r3, r1
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6909      	ldr	r1, [r1, #16]
 8009c44:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8009c48:	d102      	bne.n	8009c50 <HAL_RTCEx_SetTamper+0x78>
 8009c4a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009c4e:	e000      	b.n	8009c52 <HAL_RTCEx_SetTamper+0x7a>
 8009c50:	2100      	movs	r1, #0
 8009c52:	430b      	orrs	r3, r1
 8009c54:	4313      	orrs	r3, r2
 8009c56:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER1_SUPPORT */

#if defined(RTC_TAMPER2_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_2) != 0)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 0308 	and.w	r3, r3, #8
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d023      	beq.n	8009cac <HAL_RTCEx_SetTamper+0xd4>
  {
    MODIFY_REG(tmpreg,
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8009c6a:	f023 031c 	bic.w	r3, r3, #28
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	6812      	ldr	r2, [r2, #0]
 8009c72:	6839      	ldr	r1, [r7, #0]
 8009c74:	6889      	ldr	r1, [r1, #8]
 8009c76:	2900      	cmp	r1, #0
 8009c78:	d101      	bne.n	8009c7e <HAL_RTCEx_SetTamper+0xa6>
 8009c7a:	2100      	movs	r1, #0
 8009c7c:	e000      	b.n	8009c80 <HAL_RTCEx_SetTamper+0xa8>
 8009c7e:	2110      	movs	r1, #16
 8009c80:	430a      	orrs	r2, r1
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	68c9      	ldr	r1, [r1, #12]
 8009c86:	2900      	cmp	r1, #0
 8009c88:	d101      	bne.n	8009c8e <HAL_RTCEx_SetTamper+0xb6>
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	e001      	b.n	8009c92 <HAL_RTCEx_SetTamper+0xba>
 8009c8e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8009c92:	430a      	orrs	r2, r1
 8009c94:	6839      	ldr	r1, [r7, #0]
 8009c96:	6909      	ldr	r1, [r1, #16]
 8009c98:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8009c9c:	d102      	bne.n	8009ca4 <HAL_RTCEx_SetTamper+0xcc>
 8009c9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ca2:	e000      	b.n	8009ca6 <HAL_RTCEx_SetTamper+0xce>
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER2_SUPPORT */

#if defined(RTC_TAMPER3_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_3) != 0)
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0320 	and.w	r3, r3, #32
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d023      	beq.n	8009d00 <HAL_RTCEx_SetTamper+0x128>
  {
    MODIFY_REG(tmpreg,
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8009cbe:	f023 0364 	bic.w	r3, r3, #100	; 0x64
 8009cc2:	683a      	ldr	r2, [r7, #0]
 8009cc4:	6812      	ldr	r2, [r2, #0]
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6889      	ldr	r1, [r1, #8]
 8009cca:	2900      	cmp	r1, #0
 8009ccc:	d101      	bne.n	8009cd2 <HAL_RTCEx_SetTamper+0xfa>
 8009cce:	2100      	movs	r1, #0
 8009cd0:	e000      	b.n	8009cd4 <HAL_RTCEx_SetTamper+0xfc>
 8009cd2:	2140      	movs	r1, #64	; 0x40
 8009cd4:	430a      	orrs	r2, r1
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	68c9      	ldr	r1, [r1, #12]
 8009cda:	2900      	cmp	r1, #0
 8009cdc:	d101      	bne.n	8009ce2 <HAL_RTCEx_SetTamper+0x10a>
 8009cde:	2100      	movs	r1, #0
 8009ce0:	e001      	b.n	8009ce6 <HAL_RTCEx_SetTamper+0x10e>
 8009ce2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6909      	ldr	r1, [r1, #16]
 8009cec:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8009cf0:	d102      	bne.n	8009cf8 <HAL_RTCEx_SetTamper+0x120>
 8009cf2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8009cf6:	e000      	b.n	8009cfa <HAL_RTCEx_SetTamper+0x122>
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	430a      	orrs	r2, r1
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER3_SUPPORT */

  /* Update common parameters */
  MODIFY_REG(tmpreg,
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	6951      	ldr	r1, [r2, #20]
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	6992      	ldr	r2, [r2, #24]
 8009d12:	4311      	orrs	r1, r2
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	69d2      	ldr	r2, [r2, #28]
 8009d18:	4311      	orrs	r1, r2
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	6a12      	ldr	r2, [r2, #32]
 8009d1e:	4311      	orrs	r1, r2
 8009d20:	683a      	ldr	r2, [r7, #0]
 8009d22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d24:	430a      	orrs	r2, r1
 8009d26:	4313      	orrs	r3, r2
 8009d28:	60fb      	str	r3, [r7, #12]
             sTamper->Filter | sTamper->SamplingFrequency | sTamper->PrechargeDuration | sTamper->TamperPullUp | \
             sTamper->TimeStampOnTamperDetection \
             );

  /* Set register */
  WRITE_REG (hrtc->Instance->TAMPCR, tmpreg);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b08a      	sub	sp, #40	; 0x28
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d101      	bne.n	8009d62 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e1c5      	b.n	800a0ee <HAL_SAI_Init+0x39e>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d10e      	bne.n	8009d8a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a80      	ldr	r2, [pc, #512]	; (8009f74 <HAL_SAI_Init+0x224>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d107      	bne.n	8009d86 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d103      	bne.n	8009d86 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d001      	beq.n	8009d8a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e1b1      	b.n	800a0ee <HAL_SAI_Init+0x39e>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d106      	bne.n	8009da4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f7f9 f8f0 	bl	8002f84 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f9af 	bl	800a108 <SAI_Disable>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	e19c      	b.n	800a0ee <HAL_SAI_Init+0x39e>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2202      	movs	r2, #2
 8009db8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d007      	beq.n	8009dd4 <HAL_SAI_Init+0x84>
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d302      	bcc.n	8009dce <HAL_SAI_Init+0x7e>
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d006      	beq.n	8009dda <HAL_SAI_Init+0x8a>
 8009dcc:	e008      	b.n	8009de0 <HAL_SAI_Init+0x90>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009dd2:	e008      	b.n	8009de6 <HAL_SAI_Init+0x96>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009dd4:	2310      	movs	r3, #16
 8009dd6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009dd8:	e005      	b.n	8009de6 <HAL_SAI_Init+0x96>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009dda:	2320      	movs	r3, #32
 8009ddc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009dde:	e002      	b.n	8009de6 <HAL_SAI_Init+0x96>
    default :
      tmpregisterGCR = 0;
 8009de0:	2300      	movs	r3, #0
 8009de2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009de4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	d81d      	bhi.n	8009e2a <HAL_SAI_Init+0xda>
 8009dee:	a201      	add	r2, pc, #4	; (adr r2, 8009df4 <HAL_SAI_Init+0xa4>)
 8009df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df4:	08009e05 	.word	0x08009e05
 8009df8:	08009e0b 	.word	0x08009e0b
 8009dfc:	08009e13 	.word	0x08009e13
 8009e00:	08009e1b 	.word	0x08009e1b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009e04:	2300      	movs	r3, #0
 8009e06:	61fb      	str	r3, [r7, #28]
      break;
 8009e08:	e012      	b.n	8009e30 <HAL_SAI_Init+0xe0>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e0e:	61fb      	str	r3, [r7, #28]
      break;
 8009e10:	e00e      	b.n	8009e30 <HAL_SAI_Init+0xe0>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009e12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e16:	61fb      	str	r3, [r7, #28]
      break;
 8009e18:	e00a      	b.n	8009e30 <HAL_SAI_Init+0xe0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009e1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e1e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	f043 0301 	orr.w	r3, r3, #1
 8009e26:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009e28:	e002      	b.n	8009e30 <HAL_SAI_Init+0xe0>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	61fb      	str	r3, [r7, #28]
      break;
 8009e2e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a4f      	ldr	r2, [pc, #316]	; (8009f74 <HAL_SAI_Init+0x224>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d004      	beq.n	8009e44 <HAL_SAI_Init+0xf4>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a4e      	ldr	r2, [pc, #312]	; (8009f78 <HAL_SAI_Init+0x228>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d103      	bne.n	8009e4c <HAL_SAI_Init+0xfc>
  {
    SAI1->GCR = tmpregisterGCR;
 8009e44:	4a4d      	ldr	r2, [pc, #308]	; (8009f7c <HAL_SAI_Init+0x22c>)
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	6013      	str	r3, [r2, #0]
 8009e4a:	e002      	b.n	8009e52 <HAL_SAI_Init+0x102>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009e4c:	4a4c      	ldr	r2, [pc, #304]	; (8009f80 <HAL_SAI_Init+0x230>)
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	69db      	ldr	r3, [r3, #28]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d073      	beq.n	8009f42 <HAL_SAI_Init+0x1f2>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a45      	ldr	r2, [pc, #276]	; (8009f74 <HAL_SAI_Init+0x224>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d004      	beq.n	8009e6e <HAL_SAI_Init+0x11e>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a43      	ldr	r2, [pc, #268]	; (8009f78 <HAL_SAI_Init+0x228>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d105      	bne.n	8009e7a <HAL_SAI_Init+0x12a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009e6e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009e72:	f7fe fc97 	bl	80087a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e76:	61b8      	str	r0, [r7, #24]
 8009e78:	e004      	b.n	8009e84 <HAL_SAI_Init+0x134>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009e7a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009e7e:	f7fe fc91 	bl	80087a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e82:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009e8c:	d120      	bne.n	8009ed0 <HAL_SAI_Init+0x180>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e92:	2b04      	cmp	r3, #4
 8009e94:	d102      	bne.n	8009e9c <HAL_SAI_Init+0x14c>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 8009e96:	2340      	movs	r3, #64	; 0x40
 8009e98:	613b      	str	r3, [r7, #16]
 8009e9a:	e00a      	b.n	8009eb2 <HAL_SAI_Init+0x162>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea0:	2b08      	cmp	r3, #8
 8009ea2:	d103      	bne.n	8009eac <HAL_SAI_Init+0x15c>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 8009ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ea8:	613b      	str	r3, [r7, #16]
 8009eaa:	e002      	b.n	8009eb2 <HAL_SAI_Init+0x162>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb0:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009eb2:	69ba      	ldr	r2, [r7, #24]
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	4413      	add	r3, r2
 8009eba:	005b      	lsls	r3, r3, #1
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	69db      	ldr	r3, [r3, #28]
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	fb02 f303 	mul.w	r3, r2, r3
 8009ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8009ecc:	617b      	str	r3, [r7, #20]
 8009ece:	e017      	b.n	8009f00 <HAL_SAI_Init+0x1b0>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ed8:	d101      	bne.n	8009ede <HAL_SAI_Init+0x18e>
 8009eda:	2302      	movs	r3, #2
 8009edc:	e000      	b.n	8009ee0 <HAL_SAI_Init+0x190>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009ee2:	69ba      	ldr	r2, [r7, #24]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	4413      	add	r3, r2
 8009eea:	005b      	lsls	r3, r3, #1
 8009eec:	4619      	mov	r1, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	69db      	ldr	r3, [r3, #28]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	fb02 f303 	mul.w	r3, r2, r3
 8009ef8:	021b      	lsls	r3, r3, #8
 8009efa:	fbb1 f3f3 	udiv	r3, r1, r3
 8009efe:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	4a20      	ldr	r2, [pc, #128]	; (8009f84 <HAL_SAI_Init+0x234>)
 8009f04:	fba2 2303 	umull	r2, r3, r2, r3
 8009f08:	08da      	lsrs	r2, r3, #3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009f0e:	6979      	ldr	r1, [r7, #20]
 8009f10:	4b1c      	ldr	r3, [pc, #112]	; (8009f84 <HAL_SAI_Init+0x234>)
 8009f12:	fba3 2301 	umull	r2, r3, r3, r1
 8009f16:	08da      	lsrs	r2, r3, #3
 8009f18:	4613      	mov	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	4413      	add	r3, r2
 8009f1e:	005b      	lsls	r3, r3, #1
 8009f20:	1aca      	subs	r2, r1, r3
 8009f22:	2a08      	cmp	r2, #8
 8009f24:	d904      	bls.n	8009f30 <HAL_SAI_Init+0x1e0>
    {
      hsai->Init.Mckdiv += 1U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	1c5a      	adds	r2, r3, #1
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f34:	2b04      	cmp	r3, #4
 8009f36:	d104      	bne.n	8009f42 <HAL_SAI_Init+0x1f2>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	085a      	lsrs	r2, r3, #1
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <HAL_SAI_Init+0x202>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d109      	bne.n	8009f66 <HAL_SAI_Init+0x216>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d101      	bne.n	8009f5e <HAL_SAI_Init+0x20e>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	e001      	b.n	8009f62 <HAL_SAI_Init+0x212>
 8009f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f62:	623b      	str	r3, [r7, #32]
 8009f64:	e012      	b.n	8009f8c <HAL_SAI_Init+0x23c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d10c      	bne.n	8009f88 <HAL_SAI_Init+0x238>
 8009f6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f72:	e00a      	b.n	8009f8a <HAL_SAI_Init+0x23a>
 8009f74:	40015404 	.word	0x40015404
 8009f78:	40015424 	.word	0x40015424
 8009f7c:	40015400 	.word	0x40015400
 8009f80:	40015800 	.word	0x40015800
 8009f84:	cccccccd 	.word	0xcccccccd
 8009f88:	2300      	movs	r3, #0
 8009f8a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6819      	ldr	r1, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	4b58      	ldr	r3, [pc, #352]	; (800a0f8 <HAL_SAI_Init+0x3a8>)
 8009f98:	400b      	ands	r3, r1
 8009f9a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6819      	ldr	r1, [r3, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009faa:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009fb0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fb6:	431a      	orrs	r2, r3
 8009fb8:	6a3b      	ldr	r3, [r7, #32]
 8009fba:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8009fc4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009fd0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
 8009fd6:	051b      	lsls	r3, r3, #20
 8009fd8:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009fde:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	6812      	ldr	r2, [r2, #0]
 8009ff2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009ff6:	f023 030f 	bic.w	r3, r3, #15
 8009ffa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6859      	ldr	r1, [r3, #4]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	699a      	ldr	r2, [r3, #24]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00a:	431a      	orrs	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a010:	431a      	orrs	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	430a      	orrs	r2, r1
 800a018:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6899      	ldr	r1, [r3, #8]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	4b35      	ldr	r3, [pc, #212]	; (800a0fc <HAL_SAI_Init+0x3ac>)
 800a026:	400b      	ands	r3, r1
 800a028:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6899      	ldr	r1, [r3, #8]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a034:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a03a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 800a040:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 800a046:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a04c:	3b01      	subs	r3, #1
 800a04e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a050:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	430a      	orrs	r2, r1
 800a058:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68d9      	ldr	r1, [r3, #12]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a068:	400b      	ands	r3, r1
 800a06a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68d9      	ldr	r1, [r3, #12]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a07a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a080:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a082:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a088:	3b01      	subs	r3, #1
 800a08a:	021b      	lsls	r3, r3, #8
 800a08c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	430a      	orrs	r2, r1
 800a094:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a19      	ldr	r2, [pc, #100]	; (800a100 <HAL_SAI_Init+0x3b0>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d119      	bne.n	800a0d4 <HAL_SAI_Init+0x384>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a0a0:	4b18      	ldr	r3, [pc, #96]	; (800a104 <HAL_SAI_Init+0x3b4>)
 800a0a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0a4:	4a17      	ldr	r2, [pc, #92]	; (800a104 <HAL_SAI_Init+0x3b4>)
 800a0a6:	f023 0301 	bic.w	r3, r3, #1
 800a0aa:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d10e      	bne.n	800a0d4 <HAL_SAI_Init+0x384>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a0c2:	4910      	ldr	r1, [pc, #64]	; (800a104 <HAL_SAI_Init+0x3b4>)
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800a0c8:	4b0e      	ldr	r3, [pc, #56]	; (800a104 <HAL_SAI_Init+0x3b4>)
 800a0ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0cc:	4a0d      	ldr	r2, [pc, #52]	; (800a104 <HAL_SAI_Init+0x3b4>)
 800a0ce:	f043 0301 	orr.w	r3, r3, #1
 800a0d2:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3728      	adds	r7, #40	; 0x28
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	f805c010 	.word	0xf805c010
 800a0fc:	fff88000 	.word	0xfff88000
 800a100:	40015404 	.word	0x40015404
 800a104:	40015400 	.word	0x40015400

0800a108 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a110:	4b18      	ldr	r3, [pc, #96]	; (800a174 <SAI_Disable+0x6c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a18      	ldr	r2, [pc, #96]	; (800a178 <SAI_Disable+0x70>)
 800a116:	fba2 2303 	umull	r2, r3, r2, r3
 800a11a:	0b1b      	lsrs	r3, r3, #12
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a120:	2300      	movs	r3, #0
 800a122:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a132:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10a      	bne.n	800a150 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a140:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 800a14a:	2303      	movs	r3, #3
 800a14c:	72fb      	strb	r3, [r7, #11]
      break;
 800a14e:	e009      	b.n	800a164 <SAI_Disable+0x5c>
    }
    count--;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	3b01      	subs	r3, #1
 800a154:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1e7      	bne.n	800a134 <SAI_Disable+0x2c>

  return status;
 800a164:	7afb      	ldrb	r3, [r7, #11]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	20000000 	.word	0x20000000
 800a178:	95cbec1b 	.word	0x95cbec1b

0800a17c <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e0aa      	b.n	800a2e4 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a192:	2b00      	cmp	r3, #0
 800a194:	d106      	bne.n	800a1a4 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7f8 fbd0 	bl	8002944 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2202      	movs	r2, #2
 800a1a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f022 0201 	bic.w	r2, r2, #1
 800a1b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a1c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	695a      	ldr	r2, [r3, #20]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a1d6:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	695a      	ldr	r2, [r3, #20]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800a1e6:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a1f0:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	689a      	ldr	r2, [r3, #8]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a200:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d012      	beq.n	800a230 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d107      	bne.n	800a222 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	68da      	ldr	r2, [r3, #12]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a21e:	609a      	str	r2, [r3, #8]
 800a220:	e006      	b.n	800a230 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68da      	ldr	r2, [r3, #12]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a22e:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	2b02      	cmp	r3, #2
 800a236:	d104      	bne.n	800a242 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a240:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	6812      	ldr	r2, [r2, #0]
 800a24c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a254:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | (hsmbus->Init.OwnAddress2Masks << 8U));
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	695a      	ldr	r2, [r3, #20]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	ea42 0103 	orr.w	r1, r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	69db      	ldr	r3, [r3, #28]
 800a266:	021a      	lsls	r2, r3, #8
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	430a      	orrs	r2, r1
 800a26e:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | hsmbus->Init.AnalogFilter);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a1a      	ldr	r2, [r3, #32]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a278:	431a      	orrs	r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a27e:	431a      	orrs	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a284:	ea42 0103 	orr.w	r1, r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	689a      	ldr	r2, [r3, #8]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	430a      	orrs	r2, r1
 800a292:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a298:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a29c:	d110      	bne.n	800a2c0 <HAL_SMBUS_Init+0x144>
      && ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d004      	beq.n	800a2b0 <HAL_SMBUS_Init+0x134>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2ae:	d107      	bne.n	800a2c0 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a2be:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f042 0201 	orr.w	r2, r2, #1
 800a2ce:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800a302:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a30c:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 800a30e:	2180      	movs	r1, #128	; 0x80
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 fcc3 	bl	800ac9c <SMBUS_Enable_IRQ>

  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <HAL_SMBUS_EV_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_EV_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* Use a local variable to store the current ISR flags */
  /* This action will avoid a wrong treatment due to ISR flags change during interrupt handler */
  uint32_t tmpisrvalue = READ_REG(hsmbus->Instance->ISR);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	699b      	ldr	r3, [r3, #24]
 800a32e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr1value = READ_REG(hsmbus->Instance->CR1);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	60bb      	str	r3, [r7, #8]

  /* SMBUS in mode Transmitter ---------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	f003 0372 	and.w	r3, r3, #114	; 0x72
 800a33e:	2b72      	cmp	r3, #114	; 0x72
 800a340:	d132      	bne.n	800a3a8 <HAL_SMBUS_EV_IRQHandler+0x88>
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	085b      	lsrs	r3, r3, #1
 800a346:	f003 0301 	and.w	r3, r3, #1
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d117      	bne.n	800a37e <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	09db      	lsrs	r3, r3, #7
 800a352:	f003 0301 	and.w	r3, r3, #1
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 800a356:	2b00      	cmp	r3, #0
 800a358:	d111      	bne.n	800a37e <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	099b      	lsrs	r3, r3, #6
 800a35e:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10b      	bne.n	800a37e <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	095b      	lsrs	r3, r3, #5
 800a36a:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d105      	bne.n	800a37e <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	091b      	lsrs	r3, r3, #4
 800a376:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d014      	beq.n	800a3a8 <HAL_SMBUS_EV_IRQHandler+0x88>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a382:	f003 0332 	and.w	r3, r3, #50	; 0x32
 800a386:	2b32      	cmp	r3, #50	; 0x32
 800a388:	d104      	bne.n	800a394 <HAL_SMBUS_EV_IRQHandler+0x74>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 800a38a:	68f9      	ldr	r1, [r7, #12]
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 faa5 	bl	800a8dc <SMBUS_Slave_ISR>
 800a392:	e009      	b.n	800a3a8 <HAL_SMBUS_EV_IRQHandler+0x88>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_TX) == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a398:	f003 0312 	and.w	r3, r3, #18
 800a39c:	2b12      	cmp	r3, #18
 800a39e:	d103      	bne.n	800a3a8 <HAL_SMBUS_EV_IRQHandler+0x88>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 800a3a0:	68f9      	ldr	r1, [r7, #12]
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f8c0 	bl	800a528 <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Receiver ----------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	f003 0374 	and.w	r3, r3, #116	; 0x74
 800a3ae:	2b74      	cmp	r3, #116	; 0x74
 800a3b0:	d132      	bne.n	800a418 <HAL_SMBUS_EV_IRQHandler+0xf8>
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	089b      	lsrs	r3, r3, #2
 800a3b6:	f003 0301 	and.w	r3, r3, #1
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d117      	bne.n	800a3ee <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	09db      	lsrs	r3, r3, #7
 800a3c2:	f003 0301 	and.w	r3, r3, #1
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d111      	bne.n	800a3ee <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	099b      	lsrs	r3, r3, #6
 800a3ce:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d10b      	bne.n	800a3ee <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	095b      	lsrs	r3, r3, #5
 800a3da:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d105      	bne.n	800a3ee <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	091b      	lsrs	r3, r3, #4
 800a3e6:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d014      	beq.n	800a418 <HAL_SMBUS_EV_IRQHandler+0xf8>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3f2:	f003 0342 	and.w	r3, r3, #66	; 0x42
 800a3f6:	2b42      	cmp	r3, #66	; 0x42
 800a3f8:	d104      	bne.n	800a404 <HAL_SMBUS_EV_IRQHandler+0xe4>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 800a3fa:	68f9      	ldr	r1, [r7, #12]
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 fa6d 	bl	800a8dc <SMBUS_Slave_ISR>
 800a402:	e009      	b.n	800a418 <HAL_SMBUS_EV_IRQHandler+0xf8>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_RX) == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a408:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800a40c:	2b22      	cmp	r3, #34	; 0x22
 800a40e:	d103      	bne.n	800a418 <HAL_SMBUS_EV_IRQHandler+0xf8>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 800a410:	68f9      	ldr	r1, [r7, #12]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f888 	bl	800a528 <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Listener Only --------------------------------------------------*/
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	08db      	lsrs	r3, r3, #3
 800a41c:	f003 0301 	and.w	r3, r3, #1
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10b      	bne.n	800a43c <HAL_SMBUS_EV_IRQHandler+0x11c>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	095b      	lsrs	r3, r3, #5
 800a428:	f003 0301 	and.w	r3, r3, #1
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d105      	bne.n	800a43c <HAL_SMBUS_EV_IRQHandler+0x11c>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	091b      	lsrs	r3, r3, #4
 800a434:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d01b      	beq.n	800a474 <HAL_SMBUS_EV_IRQHandler+0x154>
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	08db      	lsrs	r3, r3, #3
 800a440:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10b      	bne.n	800a460 <HAL_SMBUS_EV_IRQHandler+0x140>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	095b      	lsrs	r3, r3, #5
 800a44c:	f003 0301 	and.w	r3, r3, #1
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 800a450:	2b00      	cmp	r3, #0
 800a452:	d105      	bne.n	800a460 <HAL_SMBUS_EV_IRQHandler+0x140>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	091b      	lsrs	r3, r3, #4
 800a458:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d009      	beq.n	800a474 <HAL_SMBUS_EV_IRQHandler+0x154>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a464:	f003 0308 	and.w	r3, r3, #8
 800a468:	2b08      	cmp	r3, #8
 800a46a:	d103      	bne.n	800a474 <HAL_SMBUS_EV_IRQHandler+0x154>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 800a46c:	68f9      	ldr	r1, [r7, #12]
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fa34 	bl	800a8dc <SMBUS_Slave_ISR>
    }
  }
}
 800a474:	bf00      	nop
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <HAL_SMBUS_ER_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_ER_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  SMBUS_ITErrorHandler(hsmbus);
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 fcbf 	bl	800ae08 <SMBUS_ITErrorHandler>
}
 800a48a:	bf00      	nop
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <HAL_SMBUS_MasterTxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_MasterTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800a492:	b480      	push	{r7}
 800a494:	b083      	sub	sp, #12
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_MasterTxCpltCallback() could be implemented in the user file
   */
}
 800a49a:	bf00      	nop
 800a49c:	370c      	adds	r7, #12
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr

0800a4a6 <HAL_SMBUS_MasterRxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_MasterRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	b083      	sub	sp, #12
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_MasterRxCpltCallback() could be implemented in the user file
   */
}
 800a4ae:	bf00      	nop
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <HAL_SMBUS_SlaveTxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_SlaveTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b083      	sub	sp, #12
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_SlaveTxCpltCallback() could be implemented in the user file
   */
}
 800a4c2:	bf00      	nop
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <HAL_SMBUS_SlaveRxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_SlaveRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b083      	sub	sp, #12
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_SlaveRxCpltCallback() could be implemented in the user file
   */
}
 800a4d6:	bf00      	nop
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <HAL_SMBUS_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read)
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_SMBUS_AddrCallback(SMBUS_HandleTypeDef *hsmbus, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b083      	sub	sp, #12
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	70fb      	strb	r3, [r7, #3]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_AddrCallback() could be implemented in the user file
   */
}
 800a4f2:	bf00      	nop
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <HAL_SMBUS_ListenCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_ListenCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b083      	sub	sp, #12
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_ListenCpltCallback() could be implemented in the user file
   */
}
 800a506:	bf00      	nop
 800a508:	370c      	adds	r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr

0800a512 <HAL_SMBUS_ErrorCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_ErrorCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800a512:	b480      	push	{r7}
 800a514:	b083      	sub	sp, #12
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_ErrorCallback() could be implemented in the user file
   */
}
 800a51a:	bf00      	nop
 800a51c:	370c      	adds	r7, #12
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
	...

0800a528 <SMBUS_Master_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Master_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b086      	sub	sp, #24
 800a52c:	af02      	add	r7, sp, #8
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  uint16_t DevAddress;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d101      	bne.n	800a540 <SMBUS_Master_ISR+0x18>
 800a53c:	2302      	movs	r3, #2
 800a53e:	e1c8      	b.n	800a8d2 <SMBUS_Master_ISR+0x3aa>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	091b      	lsrs	r3, r3, #4
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	2b00      	cmp	r3, #0
 800a552:	d011      	beq.n	800a578 <SMBUS_Master_ISR+0x50>
  {
    /* Clear NACK Flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2210      	movs	r2, #16
 800a55a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a560:	f043 0204 	orr.w	r2, r3, #4
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f7ff ffce 	bl	800a512 <HAL_SMBUS_ErrorCallback>
 800a576:	e1a7      	b.n	800a8c8 <SMBUS_Master_ISR+0x3a0>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	095b      	lsrs	r3, r3, #5
 800a57c:	f003 0301 	and.w	r3, r3, #1
 800a580:	2b00      	cmp	r3, #0
 800a582:	d07a      	beq.n	800a67a <SMBUS_Master_ISR+0x152>
  {
    /* Check and treat errors if errors occurs during STOP process */
    SMBUS_ITErrorHandler(hsmbus);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 fc3f 	bl	800ae08 <SMBUS_ITErrorHandler>

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a58e:	2b12      	cmp	r3, #18
 800a590:	d12d      	bne.n	800a5ee <SMBUS_Master_ISR+0xc6>
    {
      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800a592:	21f2      	movs	r1, #242	; 0xf2
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fbba 	bl	800ad0e <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	6859      	ldr	r1, [r3, #4]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	4b92      	ldr	r3, [pc, #584]	; (800a7f8 <SMBUS_Master_ISR+0x2d0>)
 800a5ae:	400b      	ands	r3, r1
 800a5b0:	6053      	str	r3, [r2, #4]

      /* Flush remaining data in Fifo register in case of error occurs before TXEmpty */
      /* Disable the selected SMBUS peripheral */
      __HAL_SMBUS_DISABLE(hsmbus);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f022 0201 	bic.w	r2, r2, #1
 800a5c0:	601a      	str	r2, [r3, #0]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Re-enable the selected SMBUS peripheral */
      __HAL_SMBUS_ENABLE(hsmbus);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f042 0201 	orr.w	r2, r2, #1
 800a5e4:	601a      	str	r2, [r3, #0]

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7ff ff53 	bl	800a492 <HAL_SMBUS_MasterTxCpltCallback>
 800a5ec:	e16c      	b.n	800a8c8 <SMBUS_Master_ISR+0x3a0>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
    else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5f2:	2b22      	cmp	r3, #34	; 0x22
 800a5f4:	f040 8168 	bne.w	800a8c8 <SMBUS_Master_ISR+0x3a0>
    {
      /* Store Last receive data if any */
      if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	089b      	lsrs	r3, r3, #2
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	d01c      	beq.n	800a63e <SMBUS_Master_ISR+0x116>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a60e:	b2d2      	uxtb	r2, r2
 800a610:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a616:	1c5a      	adds	r2, r3, #1
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	635a      	str	r2, [r3, #52]	; 0x34

        if ((hsmbus->XferSize > 0U))
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00c      	beq.n	800a63e <SMBUS_Master_ISR+0x116>
        {
          hsmbus->XferSize--;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a628:	3b01      	subs	r3, #1
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a634:	b29b      	uxth	r3, r3
 800a636:	3b01      	subs	r3, #1
 800a638:	b29a      	uxth	r2, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
      }

      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 800a63e:	21d4      	movs	r1, #212	; 0xd4
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fb64 	bl	800ad0e <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2220      	movs	r2, #32
 800a64c:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	6859      	ldr	r1, [r3, #4]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	4b67      	ldr	r3, [pc, #412]	; (800a7f8 <SMBUS_Master_ISR+0x2d0>)
 800a65a:	400b      	ands	r3, r1
 800a65c:	6053      	str	r3, [r2, #4]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterRxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f7ff ff17 	bl	800a4a6 <HAL_SMBUS_MasterRxCpltCallback>
 800a678:	e126      	b.n	800a8c8 <SMBUS_Master_ISR+0x3a0>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	089b      	lsrs	r3, r3, #2
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	2b00      	cmp	r3, #0
 800a684:	d019      	beq.n	800a6ba <SMBUS_Master_ISR+0x192>
  {
    /* Read data from RXDR */
    *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a690:	b2d2      	uxtb	r2, r2
 800a692:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a698:	1c5a      	adds	r2, r3, #1
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount--;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	875a      	strh	r2, [r3, #58]	; 0x3a
 800a6b8:	e106      	b.n	800a8c8 <SMBUS_Master_ISR+0x3a0>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	085b      	lsrs	r3, r3, #1
 800a6be:	f003 0301 	and.w	r3, r3, #1
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d018      	beq.n	800a6f8 <SMBUS_Master_ISR+0x1d0>
  {
    /* Write data to TXDR */
    hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ca:	781a      	ldrb	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d6:	1c5a      	adds	r2, r3, #1
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount--;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	b29a      	uxth	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	875a      	strh	r2, [r3, #58]	; 0x3a
 800a6f6:	e0e7      	b.n	800a8c8 <SMBUS_Master_ISR+0x3a0>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET)
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	09db      	lsrs	r3, r3, #7
 800a6fc:	f003 0301 	and.w	r3, r3, #1
 800a700:	2b00      	cmp	r3, #0
 800a702:	f000 8092 	beq.w	800a82a <SMBUS_Master_ISR+0x302>
  {
    if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d048      	beq.n	800a7a2 <SMBUS_Master_ISR+0x27a>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a714:	2b00      	cmp	r3, #0
 800a716:	d144      	bne.n	800a7a2 <SMBUS_Master_ISR+0x27a>
    {
      DevAddress = (uint16_t)(hsmbus->Instance->CR2 & I2C_CR2_SADD);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	b29b      	uxth	r3, r3
 800a720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a724:	81fb      	strh	r3, [r7, #14]

      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	2bff      	cmp	r3, #255	; 0xff
 800a72e:	d911      	bls.n	800a754 <SMBUS_Master_ISR+0x22c>
      {
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
                             (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)), SMBUS_NO_STARTSTOP);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a734:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
 800a738:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800a73c:	89f9      	ldrh	r1, [r7, #14]
 800a73e:	2300      	movs	r3, #0
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	4613      	mov	r3, r2
 800a744:	22ff      	movs	r2, #255	; 0xff
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 fc10 	bl	800af6c <SMBUS_TransferConfig>
        hsmbus->XferSize = MAX_NBYTE_SIZE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	22ff      	movs	r2, #255	; 0xff
 800a750:	871a      	strh	r2, [r3, #56]	; 0x38
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800a752:	e0b8      	b.n	800a8c6 <SMBUS_Master_ISR+0x39e>
      }
      else
      {
        hsmbus->XferSize = hsmbus->XferCount;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a758:	b29a      	uxth	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	871a      	strh	r2, [r3, #56]	; 0x38
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a762:	b2da      	uxtb	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a768:	89f9      	ldrh	r1, [r7, #14]
 800a76a:	2300      	movs	r3, #0
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	4603      	mov	r3, r0
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fbfb 	bl	800af6c <SMBUS_TransferConfig>
        /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
        /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
        if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a780:	2b00      	cmp	r3, #0
 800a782:	f000 80a0 	beq.w	800a8c6 <SMBUS_Master_ISR+0x39e>
        {
          hsmbus->XferSize--;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a78a:	3b01      	subs	r3, #1
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a796:	b29b      	uxth	r3, r3
 800a798:	3b01      	subs	r3, #1
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	875a      	strh	r2, [r3, #58]	; 0x3a
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800a7a0:	e091      	b.n	800a8c6 <SMBUS_Master_ISR+0x39e>
        }
      }
    }
    else if ((hsmbus->XferCount == 0U) && (hsmbus->XferSize == 0U))
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f040 808d 	bne.w	800a8c8 <SMBUS_Master_ISR+0x3a0>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f040 8088 	bne.w	800a8c8 <SMBUS_Master_ISR+0x3a0>
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7c6:	d07f      	beq.n	800a8c8 <SMBUS_Master_ISR+0x3a0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7cc:	2b12      	cmp	r3, #18
 800a7ce:	d115      	bne.n	800a7fc <SMBUS_Master_ISR+0x2d4>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800a7d0:	21f2      	movs	r1, #242	; 0xf2
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fa9b 	bl	800ad0e <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7ff fe4f 	bl	800a492 <HAL_SMBUS_MasterTxCpltCallback>
 800a7f4:	e068      	b.n	800a8c8 <SMBUS_Master_ISR+0x3a0>
 800a7f6:	bf00      	nop
 800a7f8:	fe00e800 	.word	0xfe00e800
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a800:	2b22      	cmp	r3, #34	; 0x22
 800a802:	d161      	bne.n	800a8c8 <SMBUS_Master_ISR+0x3a0>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 800a804:	21d4      	movs	r1, #212	; 0xd4
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fa81 	bl	800ad0e <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7ff fe3f 	bl	800a4a6 <HAL_SMBUS_MasterRxCpltCallback>
 800a828:	e04e      	b.n	800a8c8 <SMBUS_Master_ISR+0x3a0>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TC) != RESET)
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	099b      	lsrs	r3, r3, #6
 800a82e:	f003 0301 	and.w	r3, r3, #1
 800a832:	2b00      	cmp	r3, #0
 800a834:	d048      	beq.n	800a8c8 <SMBUS_Master_ISR+0x3a0>
  {
    if (hsmbus->XferCount == 0U)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d143      	bne.n	800a8c8 <SMBUS_Master_ISR+0x3a0>
    {
      /* Specific use case for Quick command */
      if (hsmbus->pBuffPtr == NULL)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a844:	2b00      	cmp	r3, #0
 800a846:	d108      	bne.n	800a85a <SMBUS_Master_ISR+0x332>
      {
        /* Generate a Stop command */
        hsmbus->Instance->CR2 |= I2C_CR2_STOP;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	685a      	ldr	r2, [r3, #4]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a856:	605a      	str	r2, [r3, #4]
 800a858:	e036      	b.n	800a8c8 <SMBUS_Master_ISR+0x3a0>
      }
      /* Call TxCpltCallback() if no stop mode is set */
      else if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a864:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a868:	d02e      	beq.n	800a8c8 <SMBUS_Master_ISR+0x3a0>
      {
        /* No Generate Stop, to permit restart mode */
        /* The stop will be done at the end of transfer, when SMBUS_AUTOEND_MODE enable */

        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a86e:	2b12      	cmp	r3, #18
 800a870:	d112      	bne.n	800a898 <SMBUS_Master_ISR+0x370>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800a872:	21f2      	movs	r1, #242	; 0xf2
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 fa4a 	bl	800ad0e <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2201      	movs	r2, #1
 800a886:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff fdfe 	bl	800a492 <HAL_SMBUS_MasterTxCpltCallback>
 800a896:	e017      	b.n	800a8c8 <SMBUS_Master_ISR+0x3a0>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a89c:	2b22      	cmp	r3, #34	; 0x22
 800a89e:	d113      	bne.n	800a8c8 <SMBUS_Master_ISR+0x3a0>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 800a8a0:	21d4      	movs	r1, #212	; 0xd4
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fa33 	bl	800ad0e <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f7ff fdf1 	bl	800a4a6 <HAL_SMBUS_MasterRxCpltCallback>
 800a8c4:	e000      	b.n	800a8c8 <SMBUS_Master_ISR+0x3a0>
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800a8c6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop

0800a8dc <SMBUS_Slave_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Slave_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af02      	add	r7, sp, #8
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection;
  uint16_t SlaveAddrCode;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d101      	bne.n	800a8f4 <SMBUS_Slave_ISR+0x18>
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	e1cc      	b.n	800ac8e <SMBUS_Slave_ISR+0x3b2>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	091b      	lsrs	r3, r3, #4
 800a900:	f003 0301 	and.w	r3, r3, #1
 800a904:	2b00      	cmp	r3, #0
 800a906:	d033      	beq.n	800a970 <SMBUS_Slave_ISR+0x94>
  {
    /* Check that SMBUS transfer finished */
    /* if yes, normal usecase, a NACK is sent by the HOST when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hsmbus->XferCount == 0U)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d108      	bne.n	800a924 <SMBUS_Slave_ISR+0x48>
    {
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2210      	movs	r2, #16
 800a918:	61da      	str	r2, [r3, #28]

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a922:	e14e      	b.n	800abc2 <SMBUS_Slave_ISR+0x2e6>
    }
    else
    {
      /* if no, error usecase, a Non-Acknowledge of last Data is generated by the HOST*/
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2210      	movs	r2, #16
 800a92a:	61da      	str	r2, [r3, #28]

      /* Set HAL State to "Idle" State, mean to LISTEN state */
      /* So reset Slave Busy state */
      hsmbus->PreviousState = hsmbus->State;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a938:	f023 0232 	bic.w	r2, r3, #50	; 0x32
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	649a      	str	r2, [r3, #72]	; 0x48
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a944:	f023 0242 	bic.w	r2, r3, #66	; 0x42
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	649a      	str	r2, [r3, #72]	; 0x48

      /* Disable RX/TX Interrupts, keep only ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 800a94c:	21f6      	movs	r1, #246	; 0xf6
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f9dd 	bl	800ad0e <SMBUS_Disable_IRQ>

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a958:	f043 0204 	orr.w	r2, r3, #4
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ErrorCallback(hsmbus);
#else
      HAL_SMBUS_ErrorCallback(hsmbus);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f7ff fdd2 	bl	800a512 <HAL_SMBUS_ErrorCallback>
 800a96e:	e128      	b.n	800abc2 <SMBUS_Slave_ISR+0x2e6>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_ADDR) != RESET)
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	08db      	lsrs	r3, r3, #3
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d022      	beq.n	800a9c2 <SMBUS_Slave_ISR+0xe6>
  {
    TransferDirection = (uint8_t)(SMBUS_GET_DIR(hsmbus));
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	0c1b      	lsrs	r3, r3, #16
 800a984:	b2db      	uxtb	r3, r3
 800a986:	f003 0301 	and.w	r3, r3, #1
 800a98a:	73fb      	strb	r3, [r7, #15]
    SlaveAddrCode = (uint16_t)(SMBUS_GET_ADDR_MATCH(hsmbus));
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	0c5b      	lsrs	r3, r3, #17
 800a994:	b29b      	uxth	r3, r3
 800a996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a99a:	81bb      	strh	r3, [r7, #12]

    /* Disable ADDR interrupt to prevent multiple ADDRInterrupt*/
    /* Other ADDRInterrupt will be treat in next Listen usecase */
    __HAL_SMBUS_DISABLE_IT(hsmbus, SMBUS_IT_ADDRI);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f022 0208 	bic.w	r2, r2, #8
 800a9aa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Call Slave Addr callback */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
#else
    HAL_SMBUS_AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
 800a9b4:	89ba      	ldrh	r2, [r7, #12]
 800a9b6:	7bfb      	ldrb	r3, [r7, #15]
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7ff fd91 	bl	800a4e2 <HAL_SMBUS_AddrCallback>
 800a9c0:	e0ff      	b.n	800abc2 <SMBUS_Slave_ISR+0x2e6>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	089b      	lsrs	r3, r3, #2
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d106      	bne.n	800a9dc <SMBUS_Slave_ISR+0x100>
           (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET))
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	09db      	lsrs	r3, r3, #7
 800a9d2:	f003 0301 	and.w	r3, r3, #1
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f000 80b4 	beq.w	800ab44 <SMBUS_Slave_ISR+0x268>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9e0:	f003 0342 	and.w	r3, r3, #66	; 0x42
 800a9e4:	2b42      	cmp	r3, #66	; 0x42
 800a9e6:	d160      	bne.n	800aaaa <SMBUS_Slave_ISR+0x1ce>
    {
      /* Read data from RXDR */
      *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9f2:	b2d2      	uxtb	r2, r2
 800a9f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9fa:	1c5a      	adds	r2, r3, #1
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	635a      	str	r2, [r3, #52]	; 0x34

      hsmbus->XferSize--;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800aa04:	3b01      	subs	r3, #1
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	871a      	strh	r2, [r3, #56]	; 0x38
      hsmbus->XferCount--;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	3b01      	subs	r3, #1
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	875a      	strh	r2, [r3, #58]	; 0x3a

      if (hsmbus->XferCount == 1U)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d110      	bne.n	800aa46 <SMBUS_Slave_ISR+0x16a>
      {
        /* Receive last Byte, can be PEC byte in case of PEC BYTE enabled */
        /* or only the last Byte of Transfer */
        /* So reset the RELOAD bit mode */
        hsmbus->XferOptions &= ~SMBUS_RELOAD_MODE;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa28:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	63da      	str	r2, [r3, #60]	; 0x3c
        SMBUS_TransferConfig(hsmbus, 0, 1, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa34:	2300      	movs	r3, #0
 800aa36:	9300      	str	r3, [sp, #0]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fa94 	bl	800af6c <SMBUS_TransferConfig>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800aa44:	e0bc      	b.n	800abc0 <SMBUS_Slave_ISR+0x2e4>
      }
      else if (hsmbus->XferCount == 0U)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d115      	bne.n	800aa7c <SMBUS_Slave_ISR+0x1a0>
      {
        /* Last Byte is received, disable Interrupt */
        SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 800aa50:	21d4      	movs	r1, #212	; 0xd4
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f95b 	bl	800ad0e <SMBUS_Disable_IRQ>

        /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_RX, keep only HAL_SMBUS_STATE_LISTEN */
        hsmbus->PreviousState = hsmbus->State;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa64:	f023 0242 	bic.w	r2, r3, #66	; 0x42
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	649a      	str	r2, [r3, #72]	; 0x48

        /* Process Unlocked */
        __HAL_UNLOCK(hsmbus);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
        hsmbus->SlaveRxCpltCallback(hsmbus);
#else
        HAL_SMBUS_SlaveRxCpltCallback(hsmbus);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7ff fd2a 	bl	800a4ce <HAL_SMBUS_SlaveRxCpltCallback>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800aa7a:	e0a1      	b.n	800abc0 <SMBUS_Slave_ISR+0x2e4>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
      }
      else
      {
        /* Set Reload for next Bytes */
        SMBUS_TransferConfig(hsmbus, 0, 1, SMBUS_RELOAD_MODE  | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE), SMBUS_NO_STARTSTOP);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa84:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800aa88:	2300      	movs	r3, #0
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	2201      	movs	r2, #1
 800aa90:	2100      	movs	r1, #0
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fa6a 	bl	800af6c <SMBUS_TransferConfig>

        /* Ack last Byte Read */
        hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	685a      	ldr	r2, [r3, #4]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aaa6:	605a      	str	r2, [r3, #4]
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800aaa8:	e08a      	b.n	800abc0 <SMBUS_Slave_ISR+0x2e4>
      }
    }
    else if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaae:	f003 0332 	and.w	r3, r3, #50	; 0x32
 800aab2:	2b32      	cmp	r3, #50	; 0x32
 800aab4:	f040 8084 	bne.w	800abc0 <SMBUS_Slave_ISR+0x2e4>
    {
      if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d07e      	beq.n	800abc0 <SMBUS_Slave_ISR+0x2e4>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d17a      	bne.n	800abc0 <SMBUS_Slave_ISR+0x2e4>
      {
        if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aace:	b29b      	uxth	r3, r3
 800aad0:	2bff      	cmp	r3, #255	; 0xff
 800aad2:	d911      	bls.n	800aaf8 <SMBUS_Slave_ISR+0x21c>
        {
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE, (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)),
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aadc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800aae0:	2300      	movs	r3, #0
 800aae2:	9300      	str	r3, [sp, #0]
 800aae4:	4613      	mov	r3, r2
 800aae6:	22ff      	movs	r2, #255	; 0xff
 800aae8:	2100      	movs	r1, #0
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 fa3e 	bl	800af6c <SMBUS_TransferConfig>
                               SMBUS_NO_STARTSTOP);
          hsmbus->XferSize = MAX_NBYTE_SIZE;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	22ff      	movs	r2, #255	; 0xff
 800aaf4:	871a      	strh	r2, [r3, #56]	; 0x38
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800aaf6:	e063      	b.n	800abc0 <SMBUS_Slave_ISR+0x2e4>
        }
        else
        {
          hsmbus->XferSize = hsmbus->XferCount;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800aafc:	b29a      	uxth	r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	871a      	strh	r2, [r3, #56]	; 0x38
          SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ab06:	b2da      	uxtb	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	460b      	mov	r3, r1
 800ab12:	2100      	movs	r1, #0
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fa29 	bl	800af6c <SMBUS_TransferConfig>
          /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
          /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
          if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d04b      	beq.n	800abc0 <SMBUS_Slave_ISR+0x2e4>
          {
            hsmbus->XferSize--;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	871a      	strh	r2, [r3, #56]	; 0x38
            hsmbus->XferCount--;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	b29a      	uxth	r2, r3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	875a      	strh	r2, [r3, #58]	; 0x3a
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800ab42:	e03d      	b.n	800abc0 <SMBUS_Slave_ISR+0x2e4>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	085b      	lsrs	r3, r3, #1
 800ab48:	f003 0301 	and.w	r3, r3, #1
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d038      	beq.n	800abc2 <SMBUS_Slave_ISR+0x2e6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hsmbus->XferCount > 0U)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d017      	beq.n	800ab8a <SMBUS_Slave_ISR+0x2ae>
    {
      /* Write data to TXDR */
      hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab5e:	781a      	ldrb	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab6a:	1c5a      	adds	r2, r3, #1
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	635a      	str	r2, [r3, #52]	; 0x34

      hsmbus->XferCount--;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	3b01      	subs	r3, #1
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	875a      	strh	r2, [r3, #58]	; 0x3a
      hsmbus->XferSize--;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ab82:	3b01      	subs	r3, #1
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	871a      	strh	r2, [r3, #56]	; 0x38
    }

    if (hsmbus->XferCount == 0U)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d116      	bne.n	800abc2 <SMBUS_Slave_ISR+0x2e6>
    {
      /* Last Byte is Transmitted */
      /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_TX, keep only HAL_SMBUS_STATE_LISTEN */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800ab94:	21f2      	movs	r1, #242	; 0xf2
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f8b9 	bl	800ad0e <SMBUS_Disable_IRQ>
      hsmbus->PreviousState = hsmbus->State;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aba8:	f023 0232 	bic.w	r2, r3, #50	; 0x32
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->SlaveTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_SlaveTxCpltCallback(hsmbus);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7ff fc7e 	bl	800a4ba <HAL_SMBUS_SlaveTxCpltCallback>
 800abbe:	e000      	b.n	800abc2 <SMBUS_Slave_ISR+0x2e6>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800abc0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	095b      	lsrs	r3, r3, #5
 800abc6:	f003 0301 	and.w	r3, r3, #1
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d05a      	beq.n	800ac84 <SMBUS_Slave_ISR+0x3a8>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abd2:	f003 0308 	and.w	r3, r3, #8
 800abd6:	2b08      	cmp	r3, #8
 800abd8:	d154      	bne.n	800ac84 <SMBUS_Slave_ISR+0x3a8>
    {
      /* Store Last receive data if any */
      if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_RXNE) != RESET)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	f003 0304 	and.w	r3, r3, #4
 800abe4:	2b04      	cmp	r3, #4
 800abe6:	d11c      	bne.n	800ac22 <SMBUS_Slave_ISR+0x346>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf2:	b2d2      	uxtb	r2, r2
 800abf4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abfa:	1c5a      	adds	r2, r3, #1
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	635a      	str	r2, [r3, #52]	; 0x34

        if ((hsmbus->XferSize > 0U))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00c      	beq.n	800ac22 <SMBUS_Slave_ISR+0x346>
        {
          hsmbus->XferSize--;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	b29a      	uxth	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
      }

      /* Disable RX and TX Interrupts */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 800ac22:	21f6      	movs	r1, #246	; 0xf6
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 f872 	bl	800ad0e <SMBUS_Disable_IRQ>

      /* Disable ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR);
 800ac2a:	2138      	movs	r1, #56	; 0x38
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f86e 	bl	800ad0e <SMBUS_Disable_IRQ>

      /* Disable Address Acknowledge */
      hsmbus->Instance->CR2 |= I2C_CR2_NACK;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac40:	605a      	str	r2, [r3, #4]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	6859      	ldr	r1, [r3, #4]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	4b12      	ldr	r3, [pc, #72]	; (800ac98 <SMBUS_Slave_ISR+0x3bc>)
 800ac4e:	400b      	ands	r3, r1
 800ac50:	6053      	str	r3, [r2, #4]

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2220      	movs	r2, #32
 800ac58:	61da      	str	r2, [r3, #28]

      /* Clear ADDR flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ADDR);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2208      	movs	r2, #8
 800ac60:	61da      	str	r2, [r3, #28]

      hsmbus->XferOptions = 0;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	63da      	str	r2, [r3, #60]	; 0x3c
      hsmbus->PreviousState = hsmbus->State;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ListenCpltCallback(hsmbus);
#else
      HAL_SMBUS_ListenCpltCallback(hsmbus);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7ff fc3d 	bl	800a4fe <HAL_SMBUS_ListenCpltCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	fe00e800 	.word	0xfe00e800

0800ac9c <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 800aca6:	2300      	movs	r3, #0
 800aca8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d003      	beq.n	800acbc <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acba:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acc2:	2b38      	cmp	r3, #56	; 0x38
 800acc4:	d103      	bne.n	800acce <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800accc:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800acd4:	2bf2      	cmp	r3, #242	; 0xf2
 800acd6:	d103      	bne.n	800ace0 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800acde:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 800ace6:	2bd4      	cmp	r3, #212	; 0xd4
 800ace8:	d103      	bne.n	800acf2 <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800acf0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	6819      	ldr	r1, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	430a      	orrs	r2, r1
 800ad00:	601a      	str	r2, [r3, #0]
}
 800ad02:	bf00      	nop
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <SMBUS_Disable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Disable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b085      	sub	sp, #20
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpstate = hsmbus->State;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad20:	60bb      	str	r3, [r7, #8]

  if ((tmpstate == HAL_SMBUS_STATE_READY) && ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT))
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d108      	bne.n	800ad3a <SMBUS_Disable_IRQ+0x2c>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d003      	beq.n	800ad3a <SMBUS_Disable_IRQ+0x2c>
  {
    /* Disable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad38:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800ad40:	2bf2      	cmp	r3, #242	; 0xf2
 800ad42:	d11c      	bne.n	800ad7e <SMBUS_Disable_IRQ+0x70>
  {
    /* Disable TC, STOP, NACK and TXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_TXI;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800ad4a:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d108      	bne.n	800ad6c <SMBUS_Disable_IRQ+0x5e>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	f003 0308 	and.w	r3, r3, #8
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d103      	bne.n	800ad6c <SMBUS_Disable_IRQ+0x5e>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad6a:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	f003 0308 	and.w	r3, r3, #8
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d103      	bne.n	800ad7e <SMBUS_Disable_IRQ+0x70>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800ad7c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 800ad84:	2bd4      	cmp	r3, #212	; 0xd4
 800ad86:	d11c      	bne.n	800adc2 <SMBUS_Disable_IRQ+0xb4>
  {
    /* Disable TC, STOP, NACK and RXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_RXI;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800ad8e:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d108      	bne.n	800adb0 <SMBUS_Disable_IRQ+0xa2>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	f003 0308 	and.w	r3, r3, #8
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d103      	bne.n	800adb0 <SMBUS_Disable_IRQ+0xa2>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adae:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	f003 0308 	and.w	r3, r3, #8
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d103      	bne.n	800adc2 <SMBUS_Disable_IRQ+0xb4>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800adc0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adc8:	2b38      	cmp	r3, #56	; 0x38
 800adca:	d10e      	bne.n	800adea <SMBUS_Disable_IRQ+0xdc>
  {
    /* Disable ADDR, STOP and NACK interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800add2:	60fb      	str	r3, [r7, #12]

    if (SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d103      	bne.n	800adea <SMBUS_Disable_IRQ+0xdc>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ade8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_SMBUS_DISABLE_IT(hsmbus, tmpisr);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	6819      	ldr	r1, [r3, #0]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	43da      	mvns	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	400a      	ands	r2, r1
 800adfa:	601a      	str	r2, [r3, #0]
}
 800adfc:	bf00      	nop
 800adfe:	3714      	adds	r7, #20
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <SMBUS_ITErrorHandler>:
  * @brief  SMBUS interrupts error handler.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_ITErrorHandler(SMBUS_HandleTypeDef *hsmbus)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b086      	sub	sp, #24
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hsmbus->Instance->ISR);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hsmbus->Instance->CR1);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpstate;
  uint32_t tmperror;

  /* SMBUS Bus error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00f      	beq.n	800ae4a <SMBUS_ITErrorHandler+0x42>
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00a      	beq.n	800ae4a <SMBUS_ITErrorHandler+0x42>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BERR;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae38:	f043 0201 	orr.w	r2, r3, #1
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear BERR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_BERR);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae48:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00f      	beq.n	800ae74 <SMBUS_ITErrorHandler+0x6c>
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00a      	beq.n	800ae74 <SMBUS_ITErrorHandler+0x6c>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_OVR;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae62:	f043 0208 	orr.w	r2, r3, #8
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear OVR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_OVR);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae72:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Arbitration Loss error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00f      	beq.n	800ae9e <SMBUS_ITErrorHandler+0x96>
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d00a      	beq.n	800ae9e <SMBUS_ITErrorHandler+0x96>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ARLO;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae8c:	f043 0202 	orr.w	r2, r3, #2
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear ARLO flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ARLO);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae9c:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Timeout error interrupt occurred ---------------------------------------------*/
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00f      	beq.n	800aec8 <SMBUS_ITErrorHandler+0xc0>
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d00a      	beq.n	800aec8 <SMBUS_ITErrorHandler+0xc0>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BUSTIMEOUT;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeb6:	f043 0220 	orr.w	r2, r3, #32
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear TIMEOUT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_TIMEOUT);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aec6:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Alert error interrupt occurred -----------------------------------------------*/
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00f      	beq.n	800aef2 <SMBUS_ITErrorHandler+0xea>
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00a      	beq.n	800aef2 <SMBUS_ITErrorHandler+0xea>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ALERT;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aee0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear ALERT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800aef0:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Packet Error Check error interrupt occurred ----------------------------------*/
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00f      	beq.n	800af1c <SMBUS_ITErrorHandler+0x114>
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00a      	beq.n	800af1c <SMBUS_ITErrorHandler+0x114>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_PECERR;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af0a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear PEC error flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_PECERR);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af1a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hsmbus->State, misra rule */
  tmperror = hsmbus->ErrorCode;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af20:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror != HAL_SMBUS_ERROR_NONE) && (tmperror != HAL_SMBUS_ERROR_ACKF))
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d01d      	beq.n	800af64 <SMBUS_ITErrorHandler+0x15c>
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2b04      	cmp	r3, #4
 800af2c:	d01a      	beq.n	800af64 <SMBUS_ITErrorHandler+0x15c>
  {
    /* Do not Reset the HAL state in case of ALERT error */
    if ((tmperror & HAL_SMBUS_ERROR_ALERT) != HAL_SMBUS_ERROR_ALERT)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af34:	2b00      	cmp	r3, #0
 800af36:	d112      	bne.n	800af5e <SMBUS_ITErrorHandler+0x156>
    {
      /* Store current volatile hsmbus->State, misra rule */
      tmpstate = hsmbus->State;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af3c:	60bb      	str	r3, [r7, #8]

      if (((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	f003 0332 	and.w	r3, r3, #50	; 0x32
 800af44:	2b32      	cmp	r3, #50	; 0x32
 800af46:	d004      	beq.n	800af52 <SMBUS_ITErrorHandler+0x14a>
          || ((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX))
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	f003 0342 	and.w	r3, r3, #66	; 0x42
 800af4e:	2b42      	cmp	r3, #66	; 0x42
 800af50:	d105      	bne.n	800af5e <SMBUS_ITErrorHandler+0x156>
      {
        /* Reset only HAL_SMBUS_STATE_SLAVE_BUSY_XX */
        /* keep HAL_SMBUS_STATE_LISTEN if set */
        hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2201      	movs	r2, #1
 800af56:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State = HAL_SMBUS_STATE_LISTEN;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2208      	movs	r2, #8
 800af5c:	649a      	str	r2, [r3, #72]	; 0x48

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f7ff fad7 	bl	800a512 <HAL_SMBUS_ErrorCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
}
 800af64:	bf00      	nop
 800af66:	3718      	adds	r7, #24
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <SMBUS_TransferConfig>:
  *     @arg @ref SMBUS_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void SMBUS_TransferConfig(SMBUS_HandleTypeDef *hsmbus,  uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                                 uint32_t Request)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	607b      	str	r3, [r7, #4]
 800af76:	460b      	mov	r3, r1
 800af78:	817b      	strh	r3, [r7, #10]
 800af7a:	4613      	mov	r3, r2
 800af7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_TRANSFER_MODE(Mode));
  assert_param(IS_SMBUS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hsmbus->Instance->CR2,
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	685a      	ldr	r2, [r3, #4]
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	0d5b      	lsrs	r3, r3, #21
 800af88:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800af8c:	4b0d      	ldr	r3, [pc, #52]	; (800afc4 <SMBUS_TransferConfig+0x58>)
 800af8e:	430b      	orrs	r3, r1
 800af90:	43db      	mvns	r3, r3
 800af92:	ea02 0103 	and.w	r1, r2, r3
 800af96:	897b      	ldrh	r3, [r7, #10]
 800af98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800af9c:	7a7b      	ldrb	r3, [r7, #9]
 800af9e:	041b      	lsls	r3, r3, #16
 800afa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800afa4:	431a      	orrs	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	431a      	orrs	r2, r3
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	431a      	orrs	r2, r3
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	430a      	orrs	r2, r1
 800afb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31UL - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP  | I2C_CR2_PECBYTE)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800afb6:	bf00      	nop
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	07ff63ff 	.word	0x07ff63ff

0800afc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d101      	bne.n	800afda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	e095      	b.n	800b106 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d108      	bne.n	800aff4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afea:	d009      	beq.n	800b000 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	61da      	str	r2, [r3, #28]
 800aff2:	e005      	b.n	800b000 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d106      	bne.n	800b020 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7f7 fd9c 	bl	8002b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2202      	movs	r2, #2
 800b024:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b036:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b040:	d902      	bls.n	800b048 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b042:	2300      	movs	r3, #0
 800b044:	60fb      	str	r3, [r7, #12]
 800b046:	e002      	b.n	800b04e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b04c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b056:	d007      	beq.n	800b068 <HAL_SPI_Init+0xa0>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b060:	d002      	beq.n	800b068 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b078:	431a      	orrs	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	f003 0302 	and.w	r3, r3, #2
 800b082:	431a      	orrs	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	695b      	ldr	r3, [r3, #20]
 800b088:	f003 0301 	and.w	r3, r3, #1
 800b08c:	431a      	orrs	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	699b      	ldr	r3, [r3, #24]
 800b092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b096:	431a      	orrs	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	69db      	ldr	r3, [r3, #28]
 800b09c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0a0:	431a      	orrs	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6a1b      	ldr	r3, [r3, #32]
 800b0a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0aa:	ea42 0103 	orr.w	r1, r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	430a      	orrs	r2, r1
 800b0bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	699b      	ldr	r3, [r3, #24]
 800b0c2:	0c1b      	lsrs	r3, r3, #16
 800b0c4:	f003 0204 	and.w	r2, r3, #4
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0cc:	f003 0310 	and.w	r3, r3, #16
 800b0d0:	431a      	orrs	r2, r3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d6:	f003 0308 	and.w	r3, r3, #8
 800b0da:	431a      	orrs	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b0e4:	ea42 0103 	orr.w	r1, r2, r3
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	430a      	orrs	r2, r1
 800b0f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b082      	sub	sp, #8
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e049      	b.n	800b1b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b126:	b2db      	uxtb	r3, r3
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d106      	bne.n	800b13a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f7f7 fe15 	bl	8002d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2202      	movs	r2, #2
 800b13e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	3304      	adds	r3, #4
 800b14a:	4619      	mov	r1, r3
 800b14c:	4610      	mov	r0, r2
 800b14e:	f000 fb2b 	bl	800b7a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2201      	movs	r2, #1
 800b156:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2201      	movs	r2, #1
 800b16e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2201      	movs	r2, #1
 800b176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2201      	movs	r2, #1
 800b17e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2201      	movs	r2, #1
 800b186:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2201      	movs	r2, #1
 800b18e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2201      	movs	r2, #1
 800b196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2201      	movs	r2, #1
 800b19e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1b2:	2300      	movs	r3, #0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d001      	beq.n	800b1d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e047      	b.n	800b264 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a23      	ldr	r2, [pc, #140]	; (800b270 <HAL_TIM_Base_Start+0xb4>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d01d      	beq.n	800b222 <HAL_TIM_Base_Start+0x66>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1ee:	d018      	beq.n	800b222 <HAL_TIM_Base_Start+0x66>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a1f      	ldr	r2, [pc, #124]	; (800b274 <HAL_TIM_Base_Start+0xb8>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d013      	beq.n	800b222 <HAL_TIM_Base_Start+0x66>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a1e      	ldr	r2, [pc, #120]	; (800b278 <HAL_TIM_Base_Start+0xbc>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d00e      	beq.n	800b222 <HAL_TIM_Base_Start+0x66>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a1c      	ldr	r2, [pc, #112]	; (800b27c <HAL_TIM_Base_Start+0xc0>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d009      	beq.n	800b222 <HAL_TIM_Base_Start+0x66>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a1b      	ldr	r2, [pc, #108]	; (800b280 <HAL_TIM_Base_Start+0xc4>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d004      	beq.n	800b222 <HAL_TIM_Base_Start+0x66>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a19      	ldr	r2, [pc, #100]	; (800b284 <HAL_TIM_Base_Start+0xc8>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d115      	bne.n	800b24e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	689a      	ldr	r2, [r3, #8]
 800b228:	4b17      	ldr	r3, [pc, #92]	; (800b288 <HAL_TIM_Base_Start+0xcc>)
 800b22a:	4013      	ands	r3, r2
 800b22c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2b06      	cmp	r3, #6
 800b232:	d015      	beq.n	800b260 <HAL_TIM_Base_Start+0xa4>
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b23a:	d011      	beq.n	800b260 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f042 0201 	orr.w	r2, r2, #1
 800b24a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b24c:	e008      	b.n	800b260 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f042 0201 	orr.w	r2, r2, #1
 800b25c:	601a      	str	r2, [r3, #0]
 800b25e:	e000      	b.n	800b262 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b260:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr
 800b270:	40012c00 	.word	0x40012c00
 800b274:	40000400 	.word	0x40000400
 800b278:	40000800 	.word	0x40000800
 800b27c:	40000c00 	.word	0x40000c00
 800b280:	40013400 	.word	0x40013400
 800b284:	40014000 	.word	0x40014000
 800b288:	00010007 	.word	0x00010007

0800b28c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d101      	bne.n	800b29e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	e049      	b.n	800b332 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d106      	bne.n	800b2b8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f7f7 fd36 	bl	8002d24 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2202      	movs	r2, #2
 800b2bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	f000 fa6c 	bl	800b7a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b082      	sub	sp, #8
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d101      	bne.n	800b34c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	e049      	b.n	800b3e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b352:	b2db      	uxtb	r3, r3
 800b354:	2b00      	cmp	r3, #0
 800b356:	d106      	bne.n	800b366 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f7f7 fcc1 	bl	8002ce8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2202      	movs	r2, #2
 800b36a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	3304      	adds	r3, #4
 800b376:	4619      	mov	r1, r3
 800b378:	4610      	mov	r0, r2
 800b37a:	f000 fa15 	bl	800b7a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2201      	movs	r2, #1
 800b382:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2201      	movs	r2, #1
 800b38a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2201      	movs	r2, #1
 800b392:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d101      	bne.n	800b3fc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e041      	b.n	800b480 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b402:	b2db      	uxtb	r3, r3
 800b404:	2b00      	cmp	r3, #0
 800b406:	d106      	bne.n	800b416 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f839 	bl	800b488 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2202      	movs	r2, #2
 800b41a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	3304      	adds	r3, #4
 800b426:	4619      	mov	r1, r3
 800b428:	4610      	mov	r0, r2
 800b42a:	f000 f9bd 	bl	800b7a8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f022 0208 	bic.w	r2, r2, #8
 800b43c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	6819      	ldr	r1, [r3, #0]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	683a      	ldr	r2, [r7, #0]
 800b44a:	430a      	orrs	r2, r1
 800b44c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2201      	movs	r2, #1
 800b452:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2201      	movs	r2, #1
 800b462:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2201      	movs	r2, #1
 800b46a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b490:	bf00      	nop
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d101      	bne.n	800b4b6 <HAL_TIM_OC_ConfigChannel+0x1a>
 800b4b2:	2302      	movs	r3, #2
 800b4b4:	e064      	b.n	800b580 <HAL_TIM_OC_ConfigChannel+0xe4>
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2b14      	cmp	r3, #20
 800b4c2:	d857      	bhi.n	800b574 <HAL_TIM_OC_ConfigChannel+0xd8>
 800b4c4:	a201      	add	r2, pc, #4	; (adr r2, 800b4cc <HAL_TIM_OC_ConfigChannel+0x30>)
 800b4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ca:	bf00      	nop
 800b4cc:	0800b521 	.word	0x0800b521
 800b4d0:	0800b575 	.word	0x0800b575
 800b4d4:	0800b575 	.word	0x0800b575
 800b4d8:	0800b575 	.word	0x0800b575
 800b4dc:	0800b52f 	.word	0x0800b52f
 800b4e0:	0800b575 	.word	0x0800b575
 800b4e4:	0800b575 	.word	0x0800b575
 800b4e8:	0800b575 	.word	0x0800b575
 800b4ec:	0800b53d 	.word	0x0800b53d
 800b4f0:	0800b575 	.word	0x0800b575
 800b4f4:	0800b575 	.word	0x0800b575
 800b4f8:	0800b575 	.word	0x0800b575
 800b4fc:	0800b54b 	.word	0x0800b54b
 800b500:	0800b575 	.word	0x0800b575
 800b504:	0800b575 	.word	0x0800b575
 800b508:	0800b575 	.word	0x0800b575
 800b50c:	0800b559 	.word	0x0800b559
 800b510:	0800b575 	.word	0x0800b575
 800b514:	0800b575 	.word	0x0800b575
 800b518:	0800b575 	.word	0x0800b575
 800b51c:	0800b567 	.word	0x0800b567
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68b9      	ldr	r1, [r7, #8]
 800b526:	4618      	mov	r0, r3
 800b528:	f000 f9d8 	bl	800b8dc <TIM_OC1_SetConfig>
      break;
 800b52c:	e023      	b.n	800b576 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	68b9      	ldr	r1, [r7, #8]
 800b534:	4618      	mov	r0, r3
 800b536:	f000 fa61 	bl	800b9fc <TIM_OC2_SetConfig>
      break;
 800b53a:	e01c      	b.n	800b576 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	68b9      	ldr	r1, [r7, #8]
 800b542:	4618      	mov	r0, r3
 800b544:	f000 fae4 	bl	800bb10 <TIM_OC3_SetConfig>
      break;
 800b548:	e015      	b.n	800b576 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	68b9      	ldr	r1, [r7, #8]
 800b550:	4618      	mov	r0, r3
 800b552:	f000 fb65 	bl	800bc20 <TIM_OC4_SetConfig>
      break;
 800b556:	e00e      	b.n	800b576 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68b9      	ldr	r1, [r7, #8]
 800b55e:	4618      	mov	r0, r3
 800b560:	f000 fbc8 	bl	800bcf4 <TIM_OC5_SetConfig>
      break;
 800b564:	e007      	b.n	800b576 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	68b9      	ldr	r1, [r7, #8]
 800b56c:	4618      	mov	r0, r3
 800b56e:	f000 fc25 	bl	800bdbc <TIM_OC6_SetConfig>
      break;
 800b572:	e000      	b.n	800b576 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800b574:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d101      	bne.n	800b5a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b59e:	2302      	movs	r3, #2
 800b5a0:	e0fd      	b.n	800b79e <HAL_TIM_PWM_ConfigChannel+0x216>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b14      	cmp	r3, #20
 800b5ae:	f200 80f0 	bhi.w	800b792 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b5b2:	a201      	add	r2, pc, #4	; (adr r2, 800b5b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b8:	0800b60d 	.word	0x0800b60d
 800b5bc:	0800b793 	.word	0x0800b793
 800b5c0:	0800b793 	.word	0x0800b793
 800b5c4:	0800b793 	.word	0x0800b793
 800b5c8:	0800b64d 	.word	0x0800b64d
 800b5cc:	0800b793 	.word	0x0800b793
 800b5d0:	0800b793 	.word	0x0800b793
 800b5d4:	0800b793 	.word	0x0800b793
 800b5d8:	0800b68f 	.word	0x0800b68f
 800b5dc:	0800b793 	.word	0x0800b793
 800b5e0:	0800b793 	.word	0x0800b793
 800b5e4:	0800b793 	.word	0x0800b793
 800b5e8:	0800b6cf 	.word	0x0800b6cf
 800b5ec:	0800b793 	.word	0x0800b793
 800b5f0:	0800b793 	.word	0x0800b793
 800b5f4:	0800b793 	.word	0x0800b793
 800b5f8:	0800b711 	.word	0x0800b711
 800b5fc:	0800b793 	.word	0x0800b793
 800b600:	0800b793 	.word	0x0800b793
 800b604:	0800b793 	.word	0x0800b793
 800b608:	0800b751 	.word	0x0800b751
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68b9      	ldr	r1, [r7, #8]
 800b612:	4618      	mov	r0, r3
 800b614:	f000 f962 	bl	800b8dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	699a      	ldr	r2, [r3, #24]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f042 0208 	orr.w	r2, r2, #8
 800b626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	699a      	ldr	r2, [r3, #24]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f022 0204 	bic.w	r2, r2, #4
 800b636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	6999      	ldr	r1, [r3, #24]
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	691a      	ldr	r2, [r3, #16]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	430a      	orrs	r2, r1
 800b648:	619a      	str	r2, [r3, #24]
      break;
 800b64a:	e0a3      	b.n	800b794 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	68b9      	ldr	r1, [r7, #8]
 800b652:	4618      	mov	r0, r3
 800b654:	f000 f9d2 	bl	800b9fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	699a      	ldr	r2, [r3, #24]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	699a      	ldr	r2, [r3, #24]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6999      	ldr	r1, [r3, #24]
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	021a      	lsls	r2, r3, #8
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	430a      	orrs	r2, r1
 800b68a:	619a      	str	r2, [r3, #24]
      break;
 800b68c:	e082      	b.n	800b794 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68b9      	ldr	r1, [r7, #8]
 800b694:	4618      	mov	r0, r3
 800b696:	f000 fa3b 	bl	800bb10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	69da      	ldr	r2, [r3, #28]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f042 0208 	orr.w	r2, r2, #8
 800b6a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	69da      	ldr	r2, [r3, #28]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f022 0204 	bic.w	r2, r2, #4
 800b6b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	69d9      	ldr	r1, [r3, #28]
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	691a      	ldr	r2, [r3, #16]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	430a      	orrs	r2, r1
 800b6ca:	61da      	str	r2, [r3, #28]
      break;
 800b6cc:	e062      	b.n	800b794 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	68b9      	ldr	r1, [r7, #8]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f000 faa3 	bl	800bc20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	69da      	ldr	r2, [r3, #28]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	69da      	ldr	r2, [r3, #28]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	69d9      	ldr	r1, [r3, #28]
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	021a      	lsls	r2, r3, #8
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	430a      	orrs	r2, r1
 800b70c:	61da      	str	r2, [r3, #28]
      break;
 800b70e:	e041      	b.n	800b794 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68b9      	ldr	r1, [r7, #8]
 800b716:	4618      	mov	r0, r3
 800b718:	f000 faec 	bl	800bcf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f042 0208 	orr.w	r2, r2, #8
 800b72a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f022 0204 	bic.w	r2, r2, #4
 800b73a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	691a      	ldr	r2, [r3, #16]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	430a      	orrs	r2, r1
 800b74c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b74e:	e021      	b.n	800b794 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	68b9      	ldr	r1, [r7, #8]
 800b756:	4618      	mov	r0, r3
 800b758:	f000 fb30 	bl	800bdbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b76a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b77a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	021a      	lsls	r2, r3, #8
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	430a      	orrs	r2, r1
 800b78e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b790:	e000      	b.n	800b794 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b792:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2200      	movs	r2, #0
 800b798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop

0800b7a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a40      	ldr	r2, [pc, #256]	; (800b8bc <TIM_Base_SetConfig+0x114>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d013      	beq.n	800b7e8 <TIM_Base_SetConfig+0x40>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7c6:	d00f      	beq.n	800b7e8 <TIM_Base_SetConfig+0x40>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4a3d      	ldr	r2, [pc, #244]	; (800b8c0 <TIM_Base_SetConfig+0x118>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d00b      	beq.n	800b7e8 <TIM_Base_SetConfig+0x40>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4a3c      	ldr	r2, [pc, #240]	; (800b8c4 <TIM_Base_SetConfig+0x11c>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d007      	beq.n	800b7e8 <TIM_Base_SetConfig+0x40>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a3b      	ldr	r2, [pc, #236]	; (800b8c8 <TIM_Base_SetConfig+0x120>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d003      	beq.n	800b7e8 <TIM_Base_SetConfig+0x40>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a3a      	ldr	r2, [pc, #232]	; (800b8cc <TIM_Base_SetConfig+0x124>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d108      	bne.n	800b7fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a2f      	ldr	r2, [pc, #188]	; (800b8bc <TIM_Base_SetConfig+0x114>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d01f      	beq.n	800b842 <TIM_Base_SetConfig+0x9a>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b808:	d01b      	beq.n	800b842 <TIM_Base_SetConfig+0x9a>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a2c      	ldr	r2, [pc, #176]	; (800b8c0 <TIM_Base_SetConfig+0x118>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d017      	beq.n	800b842 <TIM_Base_SetConfig+0x9a>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a2b      	ldr	r2, [pc, #172]	; (800b8c4 <TIM_Base_SetConfig+0x11c>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d013      	beq.n	800b842 <TIM_Base_SetConfig+0x9a>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a2a      	ldr	r2, [pc, #168]	; (800b8c8 <TIM_Base_SetConfig+0x120>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d00f      	beq.n	800b842 <TIM_Base_SetConfig+0x9a>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a29      	ldr	r2, [pc, #164]	; (800b8cc <TIM_Base_SetConfig+0x124>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d00b      	beq.n	800b842 <TIM_Base_SetConfig+0x9a>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a28      	ldr	r2, [pc, #160]	; (800b8d0 <TIM_Base_SetConfig+0x128>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d007      	beq.n	800b842 <TIM_Base_SetConfig+0x9a>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4a27      	ldr	r2, [pc, #156]	; (800b8d4 <TIM_Base_SetConfig+0x12c>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d003      	beq.n	800b842 <TIM_Base_SetConfig+0x9a>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4a26      	ldr	r2, [pc, #152]	; (800b8d8 <TIM_Base_SetConfig+0x130>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d108      	bne.n	800b854 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	68fa      	ldr	r2, [r7, #12]
 800b850:	4313      	orrs	r3, r2
 800b852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	695b      	ldr	r3, [r3, #20]
 800b85e:	4313      	orrs	r3, r2
 800b860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	689a      	ldr	r2, [r3, #8]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a10      	ldr	r2, [pc, #64]	; (800b8bc <TIM_Base_SetConfig+0x114>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d00f      	beq.n	800b8a0 <TIM_Base_SetConfig+0xf8>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4a12      	ldr	r2, [pc, #72]	; (800b8cc <TIM_Base_SetConfig+0x124>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d00b      	beq.n	800b8a0 <TIM_Base_SetConfig+0xf8>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4a11      	ldr	r2, [pc, #68]	; (800b8d0 <TIM_Base_SetConfig+0x128>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d007      	beq.n	800b8a0 <TIM_Base_SetConfig+0xf8>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	4a10      	ldr	r2, [pc, #64]	; (800b8d4 <TIM_Base_SetConfig+0x12c>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d003      	beq.n	800b8a0 <TIM_Base_SetConfig+0xf8>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4a0f      	ldr	r2, [pc, #60]	; (800b8d8 <TIM_Base_SetConfig+0x130>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d103      	bne.n	800b8a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	691a      	ldr	r2, [r3, #16]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	615a      	str	r2, [r3, #20]
}
 800b8ae:	bf00      	nop
 800b8b0:	3714      	adds	r7, #20
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	40012c00 	.word	0x40012c00
 800b8c0:	40000400 	.word	0x40000400
 800b8c4:	40000800 	.word	0x40000800
 800b8c8:	40000c00 	.word	0x40000c00
 800b8cc:	40013400 	.word	0x40013400
 800b8d0:	40014000 	.word	0x40014000
 800b8d4:	40014400 	.word	0x40014400
 800b8d8:	40014800 	.word	0x40014800

0800b8dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a1b      	ldr	r3, [r3, #32]
 800b8ea:	f023 0201 	bic.w	r2, r3, #1
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	699b      	ldr	r3, [r3, #24]
 800b902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b90a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b90e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f023 0303 	bic.w	r3, r3, #3
 800b916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	4313      	orrs	r3, r2
 800b920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	f023 0302 	bic.w	r3, r3, #2
 800b928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	4313      	orrs	r3, r2
 800b932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a2c      	ldr	r2, [pc, #176]	; (800b9e8 <TIM_OC1_SetConfig+0x10c>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d00f      	beq.n	800b95c <TIM_OC1_SetConfig+0x80>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a2b      	ldr	r2, [pc, #172]	; (800b9ec <TIM_OC1_SetConfig+0x110>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d00b      	beq.n	800b95c <TIM_OC1_SetConfig+0x80>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4a2a      	ldr	r2, [pc, #168]	; (800b9f0 <TIM_OC1_SetConfig+0x114>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d007      	beq.n	800b95c <TIM_OC1_SetConfig+0x80>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4a29      	ldr	r2, [pc, #164]	; (800b9f4 <TIM_OC1_SetConfig+0x118>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d003      	beq.n	800b95c <TIM_OC1_SetConfig+0x80>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a28      	ldr	r2, [pc, #160]	; (800b9f8 <TIM_OC1_SetConfig+0x11c>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d10c      	bne.n	800b976 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	f023 0308 	bic.w	r3, r3, #8
 800b962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	697a      	ldr	r2, [r7, #20]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f023 0304 	bic.w	r3, r3, #4
 800b974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	4a1b      	ldr	r2, [pc, #108]	; (800b9e8 <TIM_OC1_SetConfig+0x10c>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d00f      	beq.n	800b99e <TIM_OC1_SetConfig+0xc2>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4a1a      	ldr	r2, [pc, #104]	; (800b9ec <TIM_OC1_SetConfig+0x110>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d00b      	beq.n	800b99e <TIM_OC1_SetConfig+0xc2>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4a19      	ldr	r2, [pc, #100]	; (800b9f0 <TIM_OC1_SetConfig+0x114>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d007      	beq.n	800b99e <TIM_OC1_SetConfig+0xc2>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4a18      	ldr	r2, [pc, #96]	; (800b9f4 <TIM_OC1_SetConfig+0x118>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d003      	beq.n	800b99e <TIM_OC1_SetConfig+0xc2>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4a17      	ldr	r2, [pc, #92]	; (800b9f8 <TIM_OC1_SetConfig+0x11c>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d111      	bne.n	800b9c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b9ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	695b      	ldr	r3, [r3, #20]
 800b9b2:	693a      	ldr	r2, [r7, #16]
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	699b      	ldr	r3, [r3, #24]
 800b9bc:	693a      	ldr	r2, [r7, #16]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	685a      	ldr	r2, [r3, #4]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	697a      	ldr	r2, [r7, #20]
 800b9da:	621a      	str	r2, [r3, #32]
}
 800b9dc:	bf00      	nop
 800b9de:	371c      	adds	r7, #28
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	40012c00 	.word	0x40012c00
 800b9ec:	40013400 	.word	0x40013400
 800b9f0:	40014000 	.word	0x40014000
 800b9f4:	40014400 	.word	0x40014400
 800b9f8:	40014800 	.word	0x40014800

0800b9fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b087      	sub	sp, #28
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a1b      	ldr	r3, [r3, #32]
 800ba0a:	f023 0210 	bic.w	r2, r3, #16
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a1b      	ldr	r3, [r3, #32]
 800ba16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	699b      	ldr	r3, [r3, #24]
 800ba22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	021b      	lsls	r3, r3, #8
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	f023 0320 	bic.w	r3, r3, #32
 800ba4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	011b      	lsls	r3, r3, #4
 800ba52:	697a      	ldr	r2, [r7, #20]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a28      	ldr	r2, [pc, #160]	; (800bafc <TIM_OC2_SetConfig+0x100>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d003      	beq.n	800ba68 <TIM_OC2_SetConfig+0x6c>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a27      	ldr	r2, [pc, #156]	; (800bb00 <TIM_OC2_SetConfig+0x104>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d10d      	bne.n	800ba84 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	011b      	lsls	r3, r3, #4
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4a1d      	ldr	r2, [pc, #116]	; (800bafc <TIM_OC2_SetConfig+0x100>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d00f      	beq.n	800baac <TIM_OC2_SetConfig+0xb0>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4a1c      	ldr	r2, [pc, #112]	; (800bb00 <TIM_OC2_SetConfig+0x104>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d00b      	beq.n	800baac <TIM_OC2_SetConfig+0xb0>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4a1b      	ldr	r2, [pc, #108]	; (800bb04 <TIM_OC2_SetConfig+0x108>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d007      	beq.n	800baac <TIM_OC2_SetConfig+0xb0>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	4a1a      	ldr	r2, [pc, #104]	; (800bb08 <TIM_OC2_SetConfig+0x10c>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d003      	beq.n	800baac <TIM_OC2_SetConfig+0xb0>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a19      	ldr	r2, [pc, #100]	; (800bb0c <TIM_OC2_SetConfig+0x110>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d113      	bne.n	800bad4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800baba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	695b      	ldr	r3, [r3, #20]
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	693a      	ldr	r2, [r7, #16]
 800bac4:	4313      	orrs	r3, r2
 800bac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	699b      	ldr	r3, [r3, #24]
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	693a      	ldr	r2, [r7, #16]
 800bad0:	4313      	orrs	r3, r2
 800bad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	693a      	ldr	r2, [r7, #16]
 800bad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	68fa      	ldr	r2, [r7, #12]
 800bade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	685a      	ldr	r2, [r3, #4]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	621a      	str	r2, [r3, #32]
}
 800baee:	bf00      	nop
 800baf0:	371c      	adds	r7, #28
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop
 800bafc:	40012c00 	.word	0x40012c00
 800bb00:	40013400 	.word	0x40013400
 800bb04:	40014000 	.word	0x40014000
 800bb08:	40014400 	.word	0x40014400
 800bb0c:	40014800 	.word	0x40014800

0800bb10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b087      	sub	sp, #28
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a1b      	ldr	r3, [r3, #32]
 800bb2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	69db      	ldr	r3, [r3, #28]
 800bb36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f023 0303 	bic.w	r3, r3, #3
 800bb4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	021b      	lsls	r3, r3, #8
 800bb64:	697a      	ldr	r2, [r7, #20]
 800bb66:	4313      	orrs	r3, r2
 800bb68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4a27      	ldr	r2, [pc, #156]	; (800bc0c <TIM_OC3_SetConfig+0xfc>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d003      	beq.n	800bb7a <TIM_OC3_SetConfig+0x6a>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4a26      	ldr	r2, [pc, #152]	; (800bc10 <TIM_OC3_SetConfig+0x100>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d10d      	bne.n	800bb96 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	021b      	lsls	r3, r3, #8
 800bb88:	697a      	ldr	r2, [r7, #20]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4a1c      	ldr	r2, [pc, #112]	; (800bc0c <TIM_OC3_SetConfig+0xfc>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d00f      	beq.n	800bbbe <TIM_OC3_SetConfig+0xae>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a1b      	ldr	r2, [pc, #108]	; (800bc10 <TIM_OC3_SetConfig+0x100>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d00b      	beq.n	800bbbe <TIM_OC3_SetConfig+0xae>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a1a      	ldr	r2, [pc, #104]	; (800bc14 <TIM_OC3_SetConfig+0x104>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d007      	beq.n	800bbbe <TIM_OC3_SetConfig+0xae>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a19      	ldr	r2, [pc, #100]	; (800bc18 <TIM_OC3_SetConfig+0x108>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d003      	beq.n	800bbbe <TIM_OC3_SetConfig+0xae>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a18      	ldr	r2, [pc, #96]	; (800bc1c <TIM_OC3_SetConfig+0x10c>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d113      	bne.n	800bbe6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bbcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	695b      	ldr	r3, [r3, #20]
 800bbd2:	011b      	lsls	r3, r3, #4
 800bbd4:	693a      	ldr	r2, [r7, #16]
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	699b      	ldr	r3, [r3, #24]
 800bbde:	011b      	lsls	r3, r3, #4
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	693a      	ldr	r2, [r7, #16]
 800bbea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	685a      	ldr	r2, [r3, #4]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	621a      	str	r2, [r3, #32]
}
 800bc00:	bf00      	nop
 800bc02:	371c      	adds	r7, #28
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr
 800bc0c:	40012c00 	.word	0x40012c00
 800bc10:	40013400 	.word	0x40013400
 800bc14:	40014000 	.word	0x40014000
 800bc18:	40014400 	.word	0x40014400
 800bc1c:	40014800 	.word	0x40014800

0800bc20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b087      	sub	sp, #28
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6a1b      	ldr	r3, [r3, #32]
 800bc2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a1b      	ldr	r3, [r3, #32]
 800bc3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	69db      	ldr	r3, [r3, #28]
 800bc46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	021b      	lsls	r3, r3, #8
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	031b      	lsls	r3, r3, #12
 800bc76:	693a      	ldr	r2, [r7, #16]
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a18      	ldr	r2, [pc, #96]	; (800bce0 <TIM_OC4_SetConfig+0xc0>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d00f      	beq.n	800bca4 <TIM_OC4_SetConfig+0x84>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a17      	ldr	r2, [pc, #92]	; (800bce4 <TIM_OC4_SetConfig+0xc4>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d00b      	beq.n	800bca4 <TIM_OC4_SetConfig+0x84>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a16      	ldr	r2, [pc, #88]	; (800bce8 <TIM_OC4_SetConfig+0xc8>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d007      	beq.n	800bca4 <TIM_OC4_SetConfig+0x84>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a15      	ldr	r2, [pc, #84]	; (800bcec <TIM_OC4_SetConfig+0xcc>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d003      	beq.n	800bca4 <TIM_OC4_SetConfig+0x84>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	4a14      	ldr	r2, [pc, #80]	; (800bcf0 <TIM_OC4_SetConfig+0xd0>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d109      	bne.n	800bcb8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bcaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	695b      	ldr	r3, [r3, #20]
 800bcb0:	019b      	lsls	r3, r3, #6
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	697a      	ldr	r2, [r7, #20]
 800bcbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	685a      	ldr	r2, [r3, #4]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	693a      	ldr	r2, [r7, #16]
 800bcd0:	621a      	str	r2, [r3, #32]
}
 800bcd2:	bf00      	nop
 800bcd4:	371c      	adds	r7, #28
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	40012c00 	.word	0x40012c00
 800bce4:	40013400 	.word	0x40013400
 800bce8:	40014000 	.word	0x40014000
 800bcec:	40014400 	.word	0x40014400
 800bcf0:	40014800 	.word	0x40014800

0800bcf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b087      	sub	sp, #28
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6a1b      	ldr	r3, [r3, #32]
 800bd02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a1b      	ldr	r3, [r3, #32]
 800bd0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	68fa      	ldr	r2, [r7, #12]
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bd38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	041b      	lsls	r3, r3, #16
 800bd40:	693a      	ldr	r2, [r7, #16]
 800bd42:	4313      	orrs	r3, r2
 800bd44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4a17      	ldr	r2, [pc, #92]	; (800bda8 <TIM_OC5_SetConfig+0xb4>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d00f      	beq.n	800bd6e <TIM_OC5_SetConfig+0x7a>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4a16      	ldr	r2, [pc, #88]	; (800bdac <TIM_OC5_SetConfig+0xb8>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d00b      	beq.n	800bd6e <TIM_OC5_SetConfig+0x7a>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a15      	ldr	r2, [pc, #84]	; (800bdb0 <TIM_OC5_SetConfig+0xbc>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d007      	beq.n	800bd6e <TIM_OC5_SetConfig+0x7a>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a14      	ldr	r2, [pc, #80]	; (800bdb4 <TIM_OC5_SetConfig+0xc0>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d003      	beq.n	800bd6e <TIM_OC5_SetConfig+0x7a>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a13      	ldr	r2, [pc, #76]	; (800bdb8 <TIM_OC5_SetConfig+0xc4>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d109      	bne.n	800bd82 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	695b      	ldr	r3, [r3, #20]
 800bd7a:	021b      	lsls	r3, r3, #8
 800bd7c:	697a      	ldr	r2, [r7, #20]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	685a      	ldr	r2, [r3, #4]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	621a      	str	r2, [r3, #32]
}
 800bd9c:	bf00      	nop
 800bd9e:	371c      	adds	r7, #28
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr
 800bda8:	40012c00 	.word	0x40012c00
 800bdac:	40013400 	.word	0x40013400
 800bdb0:	40014000 	.word	0x40014000
 800bdb4:	40014400 	.word	0x40014400
 800bdb8:	40014800 	.word	0x40014800

0800bdbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b087      	sub	sp, #28
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a1b      	ldr	r3, [r3, #32]
 800bdca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6a1b      	ldr	r3, [r3, #32]
 800bdd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bde2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bdea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	021b      	lsls	r3, r3, #8
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800be02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	051b      	lsls	r3, r3, #20
 800be0a:	693a      	ldr	r2, [r7, #16]
 800be0c:	4313      	orrs	r3, r2
 800be0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	4a18      	ldr	r2, [pc, #96]	; (800be74 <TIM_OC6_SetConfig+0xb8>)
 800be14:	4293      	cmp	r3, r2
 800be16:	d00f      	beq.n	800be38 <TIM_OC6_SetConfig+0x7c>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4a17      	ldr	r2, [pc, #92]	; (800be78 <TIM_OC6_SetConfig+0xbc>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d00b      	beq.n	800be38 <TIM_OC6_SetConfig+0x7c>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	4a16      	ldr	r2, [pc, #88]	; (800be7c <TIM_OC6_SetConfig+0xc0>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d007      	beq.n	800be38 <TIM_OC6_SetConfig+0x7c>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	4a15      	ldr	r2, [pc, #84]	; (800be80 <TIM_OC6_SetConfig+0xc4>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d003      	beq.n	800be38 <TIM_OC6_SetConfig+0x7c>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4a14      	ldr	r2, [pc, #80]	; (800be84 <TIM_OC6_SetConfig+0xc8>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d109      	bne.n	800be4c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	695b      	ldr	r3, [r3, #20]
 800be44:	029b      	lsls	r3, r3, #10
 800be46:	697a      	ldr	r2, [r7, #20]
 800be48:	4313      	orrs	r3, r2
 800be4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	697a      	ldr	r2, [r7, #20]
 800be50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	685a      	ldr	r2, [r3, #4]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	693a      	ldr	r2, [r7, #16]
 800be64:	621a      	str	r2, [r3, #32]
}
 800be66:	bf00      	nop
 800be68:	371c      	adds	r7, #28
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	40012c00 	.word	0x40012c00
 800be78:	40013400 	.word	0x40013400
 800be7c:	40014000 	.word	0x40014000
 800be80:	40014400 	.word	0x40014400
 800be84:	40014800 	.word	0x40014800

0800be88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be88:	b480      	push	{r7}
 800be8a:	b085      	sub	sp, #20
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d101      	bne.n	800bea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be9c:	2302      	movs	r3, #2
 800be9e:	e068      	b.n	800bf72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2201      	movs	r2, #1
 800bea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2202      	movs	r2, #2
 800beac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a2e      	ldr	r2, [pc, #184]	; (800bf80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d004      	beq.n	800bed4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a2d      	ldr	r2, [pc, #180]	; (800bf84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d108      	bne.n	800bee6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800beda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	68fa      	ldr	r2, [r7, #12]
 800bef4:	4313      	orrs	r3, r2
 800bef6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a1e      	ldr	r2, [pc, #120]	; (800bf80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d01d      	beq.n	800bf46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf12:	d018      	beq.n	800bf46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a1b      	ldr	r2, [pc, #108]	; (800bf88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d013      	beq.n	800bf46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a1a      	ldr	r2, [pc, #104]	; (800bf8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d00e      	beq.n	800bf46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a18      	ldr	r2, [pc, #96]	; (800bf90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d009      	beq.n	800bf46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a13      	ldr	r2, [pc, #76]	; (800bf84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d004      	beq.n	800bf46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a14      	ldr	r2, [pc, #80]	; (800bf94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d10c      	bne.n	800bf60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	68ba      	ldr	r2, [r7, #8]
 800bf54:	4313      	orrs	r3, r2
 800bf56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2201      	movs	r2, #1
 800bf64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3714      	adds	r7, #20
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	40012c00 	.word	0x40012c00
 800bf84:	40013400 	.word	0x40013400
 800bf88:	40000400 	.word	0x40000400
 800bf8c:	40000800 	.word	0x40000800
 800bf90:	40000c00 	.word	0x40000c00
 800bf94:	40014000 	.word	0x40014000

0800bf98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d101      	bne.n	800bfaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e042      	b.n	800c030 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d106      	bne.n	800bfc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f7f6 ff4d 	bl	8002e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2224      	movs	r2, #36	; 0x24
 800bfc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f022 0201 	bic.w	r2, r2, #1
 800bfd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f82c 	bl	800c038 <UART_SetConfig>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d101      	bne.n	800bfea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e022      	b.n	800c030 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d002      	beq.n	800bff8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 faf2 	bl	800c5dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	685a      	ldr	r2, [r3, #4]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c006:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	689a      	ldr	r2, [r3, #8]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c016:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f042 0201 	orr.w	r2, r2, #1
 800c026:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 fb79 	bl	800c720 <UART_CheckIdleState>
 800c02e:	4603      	mov	r3, r0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3708      	adds	r7, #8
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c038:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c03c:	b088      	sub	sp, #32
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	689a      	ldr	r2, [r3, #8]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	431a      	orrs	r2, r3
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	695b      	ldr	r3, [r3, #20]
 800c054:	431a      	orrs	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	69db      	ldr	r3, [r3, #28]
 800c05a:	4313      	orrs	r3, r2
 800c05c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c062:	69fa      	ldr	r2, [r7, #28]
 800c064:	4313      	orrs	r3, r2
 800c066:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	4bb1      	ldr	r3, [pc, #708]	; (800c334 <UART_SetConfig+0x2fc>)
 800c070:	4013      	ands	r3, r2
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	6812      	ldr	r2, [r2, #0]
 800c076:	69f9      	ldr	r1, [r7, #28]
 800c078:	430b      	orrs	r3, r1
 800c07a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	68da      	ldr	r2, [r3, #12]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	430a      	orrs	r2, r1
 800c090:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	699b      	ldr	r3, [r3, #24]
 800c096:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4aa6      	ldr	r2, [pc, #664]	; (800c338 <UART_SetConfig+0x300>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d004      	beq.n	800c0ac <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a1b      	ldr	r3, [r3, #32]
 800c0a6:	69fa      	ldr	r2, [r7, #28]
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c0b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	6812      	ldr	r2, [r2, #0]
 800c0be:	69f9      	ldr	r1, [r7, #28]
 800c0c0:	430b      	orrs	r3, r1
 800c0c2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ca:	f023 010f 	bic.w	r1, r3, #15
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	430a      	orrs	r2, r1
 800c0d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a97      	ldr	r2, [pc, #604]	; (800c33c <UART_SetConfig+0x304>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d121      	bne.n	800c128 <UART_SetConfig+0xf0>
 800c0e4:	4b96      	ldr	r3, [pc, #600]	; (800c340 <UART_SetConfig+0x308>)
 800c0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0ea:	f003 0303 	and.w	r3, r3, #3
 800c0ee:	2b03      	cmp	r3, #3
 800c0f0:	d816      	bhi.n	800c120 <UART_SetConfig+0xe8>
 800c0f2:	a201      	add	r2, pc, #4	; (adr r2, 800c0f8 <UART_SetConfig+0xc0>)
 800c0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f8:	0800c109 	.word	0x0800c109
 800c0fc:	0800c115 	.word	0x0800c115
 800c100:	0800c10f 	.word	0x0800c10f
 800c104:	0800c11b 	.word	0x0800c11b
 800c108:	2301      	movs	r3, #1
 800c10a:	76fb      	strb	r3, [r7, #27]
 800c10c:	e0e8      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c10e:	2302      	movs	r3, #2
 800c110:	76fb      	strb	r3, [r7, #27]
 800c112:	e0e5      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c114:	2304      	movs	r3, #4
 800c116:	76fb      	strb	r3, [r7, #27]
 800c118:	e0e2      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c11a:	2308      	movs	r3, #8
 800c11c:	76fb      	strb	r3, [r7, #27]
 800c11e:	e0df      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c120:	2310      	movs	r3, #16
 800c122:	76fb      	strb	r3, [r7, #27]
 800c124:	bf00      	nop
 800c126:	e0db      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a85      	ldr	r2, [pc, #532]	; (800c344 <UART_SetConfig+0x30c>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d134      	bne.n	800c19c <UART_SetConfig+0x164>
 800c132:	4b83      	ldr	r3, [pc, #524]	; (800c340 <UART_SetConfig+0x308>)
 800c134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c138:	f003 030c 	and.w	r3, r3, #12
 800c13c:	2b0c      	cmp	r3, #12
 800c13e:	d829      	bhi.n	800c194 <UART_SetConfig+0x15c>
 800c140:	a201      	add	r2, pc, #4	; (adr r2, 800c148 <UART_SetConfig+0x110>)
 800c142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c146:	bf00      	nop
 800c148:	0800c17d 	.word	0x0800c17d
 800c14c:	0800c195 	.word	0x0800c195
 800c150:	0800c195 	.word	0x0800c195
 800c154:	0800c195 	.word	0x0800c195
 800c158:	0800c189 	.word	0x0800c189
 800c15c:	0800c195 	.word	0x0800c195
 800c160:	0800c195 	.word	0x0800c195
 800c164:	0800c195 	.word	0x0800c195
 800c168:	0800c183 	.word	0x0800c183
 800c16c:	0800c195 	.word	0x0800c195
 800c170:	0800c195 	.word	0x0800c195
 800c174:	0800c195 	.word	0x0800c195
 800c178:	0800c18f 	.word	0x0800c18f
 800c17c:	2300      	movs	r3, #0
 800c17e:	76fb      	strb	r3, [r7, #27]
 800c180:	e0ae      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c182:	2302      	movs	r3, #2
 800c184:	76fb      	strb	r3, [r7, #27]
 800c186:	e0ab      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c188:	2304      	movs	r3, #4
 800c18a:	76fb      	strb	r3, [r7, #27]
 800c18c:	e0a8      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c18e:	2308      	movs	r3, #8
 800c190:	76fb      	strb	r3, [r7, #27]
 800c192:	e0a5      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c194:	2310      	movs	r3, #16
 800c196:	76fb      	strb	r3, [r7, #27]
 800c198:	bf00      	nop
 800c19a:	e0a1      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a69      	ldr	r2, [pc, #420]	; (800c348 <UART_SetConfig+0x310>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d120      	bne.n	800c1e8 <UART_SetConfig+0x1b0>
 800c1a6:	4b66      	ldr	r3, [pc, #408]	; (800c340 <UART_SetConfig+0x308>)
 800c1a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c1b0:	2b10      	cmp	r3, #16
 800c1b2:	d00f      	beq.n	800c1d4 <UART_SetConfig+0x19c>
 800c1b4:	2b10      	cmp	r3, #16
 800c1b6:	d802      	bhi.n	800c1be <UART_SetConfig+0x186>
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d005      	beq.n	800c1c8 <UART_SetConfig+0x190>
 800c1bc:	e010      	b.n	800c1e0 <UART_SetConfig+0x1a8>
 800c1be:	2b20      	cmp	r3, #32
 800c1c0:	d005      	beq.n	800c1ce <UART_SetConfig+0x196>
 800c1c2:	2b30      	cmp	r3, #48	; 0x30
 800c1c4:	d009      	beq.n	800c1da <UART_SetConfig+0x1a2>
 800c1c6:	e00b      	b.n	800c1e0 <UART_SetConfig+0x1a8>
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	76fb      	strb	r3, [r7, #27]
 800c1cc:	e088      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c1ce:	2302      	movs	r3, #2
 800c1d0:	76fb      	strb	r3, [r7, #27]
 800c1d2:	e085      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c1d4:	2304      	movs	r3, #4
 800c1d6:	76fb      	strb	r3, [r7, #27]
 800c1d8:	e082      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c1da:	2308      	movs	r3, #8
 800c1dc:	76fb      	strb	r3, [r7, #27]
 800c1de:	e07f      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c1e0:	2310      	movs	r3, #16
 800c1e2:	76fb      	strb	r3, [r7, #27]
 800c1e4:	bf00      	nop
 800c1e6:	e07b      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a57      	ldr	r2, [pc, #348]	; (800c34c <UART_SetConfig+0x314>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d120      	bne.n	800c234 <UART_SetConfig+0x1fc>
 800c1f2:	4b53      	ldr	r3, [pc, #332]	; (800c340 <UART_SetConfig+0x308>)
 800c1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c1fc:	2b40      	cmp	r3, #64	; 0x40
 800c1fe:	d00f      	beq.n	800c220 <UART_SetConfig+0x1e8>
 800c200:	2b40      	cmp	r3, #64	; 0x40
 800c202:	d802      	bhi.n	800c20a <UART_SetConfig+0x1d2>
 800c204:	2b00      	cmp	r3, #0
 800c206:	d005      	beq.n	800c214 <UART_SetConfig+0x1dc>
 800c208:	e010      	b.n	800c22c <UART_SetConfig+0x1f4>
 800c20a:	2b80      	cmp	r3, #128	; 0x80
 800c20c:	d005      	beq.n	800c21a <UART_SetConfig+0x1e2>
 800c20e:	2bc0      	cmp	r3, #192	; 0xc0
 800c210:	d009      	beq.n	800c226 <UART_SetConfig+0x1ee>
 800c212:	e00b      	b.n	800c22c <UART_SetConfig+0x1f4>
 800c214:	2300      	movs	r3, #0
 800c216:	76fb      	strb	r3, [r7, #27]
 800c218:	e062      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c21a:	2302      	movs	r3, #2
 800c21c:	76fb      	strb	r3, [r7, #27]
 800c21e:	e05f      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c220:	2304      	movs	r3, #4
 800c222:	76fb      	strb	r3, [r7, #27]
 800c224:	e05c      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c226:	2308      	movs	r3, #8
 800c228:	76fb      	strb	r3, [r7, #27]
 800c22a:	e059      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c22c:	2310      	movs	r3, #16
 800c22e:	76fb      	strb	r3, [r7, #27]
 800c230:	bf00      	nop
 800c232:	e055      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a45      	ldr	r2, [pc, #276]	; (800c350 <UART_SetConfig+0x318>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d124      	bne.n	800c288 <UART_SetConfig+0x250>
 800c23e:	4b40      	ldr	r3, [pc, #256]	; (800c340 <UART_SetConfig+0x308>)
 800c240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c24c:	d012      	beq.n	800c274 <UART_SetConfig+0x23c>
 800c24e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c252:	d802      	bhi.n	800c25a <UART_SetConfig+0x222>
 800c254:	2b00      	cmp	r3, #0
 800c256:	d007      	beq.n	800c268 <UART_SetConfig+0x230>
 800c258:	e012      	b.n	800c280 <UART_SetConfig+0x248>
 800c25a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c25e:	d006      	beq.n	800c26e <UART_SetConfig+0x236>
 800c260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c264:	d009      	beq.n	800c27a <UART_SetConfig+0x242>
 800c266:	e00b      	b.n	800c280 <UART_SetConfig+0x248>
 800c268:	2300      	movs	r3, #0
 800c26a:	76fb      	strb	r3, [r7, #27]
 800c26c:	e038      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c26e:	2302      	movs	r3, #2
 800c270:	76fb      	strb	r3, [r7, #27]
 800c272:	e035      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c274:	2304      	movs	r3, #4
 800c276:	76fb      	strb	r3, [r7, #27]
 800c278:	e032      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c27a:	2308      	movs	r3, #8
 800c27c:	76fb      	strb	r3, [r7, #27]
 800c27e:	e02f      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c280:	2310      	movs	r3, #16
 800c282:	76fb      	strb	r3, [r7, #27]
 800c284:	bf00      	nop
 800c286:	e02b      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a2a      	ldr	r2, [pc, #168]	; (800c338 <UART_SetConfig+0x300>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d124      	bne.n	800c2dc <UART_SetConfig+0x2a4>
 800c292:	4b2b      	ldr	r3, [pc, #172]	; (800c340 <UART_SetConfig+0x308>)
 800c294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c298:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c29c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2a0:	d012      	beq.n	800c2c8 <UART_SetConfig+0x290>
 800c2a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2a6:	d802      	bhi.n	800c2ae <UART_SetConfig+0x276>
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d007      	beq.n	800c2bc <UART_SetConfig+0x284>
 800c2ac:	e012      	b.n	800c2d4 <UART_SetConfig+0x29c>
 800c2ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2b2:	d006      	beq.n	800c2c2 <UART_SetConfig+0x28a>
 800c2b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c2b8:	d009      	beq.n	800c2ce <UART_SetConfig+0x296>
 800c2ba:	e00b      	b.n	800c2d4 <UART_SetConfig+0x29c>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	76fb      	strb	r3, [r7, #27]
 800c2c0:	e00e      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c2c2:	2302      	movs	r3, #2
 800c2c4:	76fb      	strb	r3, [r7, #27]
 800c2c6:	e00b      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c2c8:	2304      	movs	r3, #4
 800c2ca:	76fb      	strb	r3, [r7, #27]
 800c2cc:	e008      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c2ce:	2308      	movs	r3, #8
 800c2d0:	76fb      	strb	r3, [r7, #27]
 800c2d2:	e005      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c2d4:	2310      	movs	r3, #16
 800c2d6:	76fb      	strb	r3, [r7, #27]
 800c2d8:	bf00      	nop
 800c2da:	e001      	b.n	800c2e0 <UART_SetConfig+0x2a8>
 800c2dc:	2310      	movs	r3, #16
 800c2de:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a14      	ldr	r2, [pc, #80]	; (800c338 <UART_SetConfig+0x300>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	f040 80a1 	bne.w	800c42e <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c2ec:	7efb      	ldrb	r3, [r7, #27]
 800c2ee:	2b08      	cmp	r3, #8
 800c2f0:	d836      	bhi.n	800c360 <UART_SetConfig+0x328>
 800c2f2:	a201      	add	r2, pc, #4	; (adr r2, 800c2f8 <UART_SetConfig+0x2c0>)
 800c2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f8:	0800c31d 	.word	0x0800c31d
 800c2fc:	0800c361 	.word	0x0800c361
 800c300:	0800c325 	.word	0x0800c325
 800c304:	0800c361 	.word	0x0800c361
 800c308:	0800c32b 	.word	0x0800c32b
 800c30c:	0800c361 	.word	0x0800c361
 800c310:	0800c361 	.word	0x0800c361
 800c314:	0800c361 	.word	0x0800c361
 800c318:	0800c359 	.word	0x0800c359
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c31c:	f7fb fdce 	bl	8007ebc <HAL_RCC_GetPCLK1Freq>
 800c320:	6178      	str	r0, [r7, #20]
        break;
 800c322:	e022      	b.n	800c36a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c324:	4b0b      	ldr	r3, [pc, #44]	; (800c354 <UART_SetConfig+0x31c>)
 800c326:	617b      	str	r3, [r7, #20]
        break;
 800c328:	e01f      	b.n	800c36a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c32a:	f7fb fd33 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 800c32e:	6178      	str	r0, [r7, #20]
        break;
 800c330:	e01b      	b.n	800c36a <UART_SetConfig+0x332>
 800c332:	bf00      	nop
 800c334:	cfff69f3 	.word	0xcfff69f3
 800c338:	40008000 	.word	0x40008000
 800c33c:	40013800 	.word	0x40013800
 800c340:	40021000 	.word	0x40021000
 800c344:	40004400 	.word	0x40004400
 800c348:	40004800 	.word	0x40004800
 800c34c:	40004c00 	.word	0x40004c00
 800c350:	40005000 	.word	0x40005000
 800c354:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c35c:	617b      	str	r3, [r7, #20]
        break;
 800c35e:	e004      	b.n	800c36a <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 800c360:	2300      	movs	r3, #0
 800c362:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c364:	2301      	movs	r3, #1
 800c366:	76bb      	strb	r3, [r7, #26]
        break;
 800c368:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f000 811d 	beq.w	800c5ac <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c376:	4a97      	ldr	r2, [pc, #604]	; (800c5d4 <UART_SetConfig+0x59c>)
 800c378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c37c:	461a      	mov	r2, r3
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	fbb3 f3f2 	udiv	r3, r3, r2
 800c384:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	685a      	ldr	r2, [r3, #4]
 800c38a:	4613      	mov	r3, r2
 800c38c:	005b      	lsls	r3, r3, #1
 800c38e:	4413      	add	r3, r2
 800c390:	68ba      	ldr	r2, [r7, #8]
 800c392:	429a      	cmp	r2, r3
 800c394:	d305      	bcc.n	800c3a2 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d902      	bls.n	800c3a8 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	76bb      	strb	r3, [r7, #26]
 800c3a6:	e101      	b.n	800c5ac <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f04f 0100 	mov.w	r1, #0
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b4:	4a87      	ldr	r2, [pc, #540]	; (800c5d4 <UART_SetConfig+0x59c>)
 800c3b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	f04f 0400 	mov.w	r4, #0
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	4623      	mov	r3, r4
 800c3c4:	f7f4 fc08 	bl	8000bd8 <__aeabi_uldivmod>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	4622      	mov	r2, r4
 800c3d0:	f04f 0300 	mov.w	r3, #0
 800c3d4:	f04f 0400 	mov.w	r4, #0
 800c3d8:	0214      	lsls	r4, r2, #8
 800c3da:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c3de:	020b      	lsls	r3, r1, #8
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	6852      	ldr	r2, [r2, #4]
 800c3e4:	0852      	lsrs	r2, r2, #1
 800c3e6:	4611      	mov	r1, r2
 800c3e8:	f04f 0200 	mov.w	r2, #0
 800c3ec:	eb13 0b01 	adds.w	fp, r3, r1
 800c3f0:	eb44 0c02 	adc.w	ip, r4, r2
 800c3f4:	4658      	mov	r0, fp
 800c3f6:	4661      	mov	r1, ip
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	f04f 0400 	mov.w	r4, #0
 800c400:	461a      	mov	r2, r3
 800c402:	4623      	mov	r3, r4
 800c404:	f7f4 fbe8 	bl	8000bd8 <__aeabi_uldivmod>
 800c408:	4603      	mov	r3, r0
 800c40a:	460c      	mov	r4, r1
 800c40c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c414:	d308      	bcc.n	800c428 <UART_SetConfig+0x3f0>
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c41c:	d204      	bcs.n	800c428 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	693a      	ldr	r2, [r7, #16]
 800c424:	60da      	str	r2, [r3, #12]
 800c426:	e0c1      	b.n	800c5ac <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 800c428:	2301      	movs	r3, #1
 800c42a:	76bb      	strb	r3, [r7, #26]
 800c42c:	e0be      	b.n	800c5ac <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	69db      	ldr	r3, [r3, #28]
 800c432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c436:	d164      	bne.n	800c502 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 800c438:	7efb      	ldrb	r3, [r7, #27]
 800c43a:	2b08      	cmp	r3, #8
 800c43c:	d827      	bhi.n	800c48e <UART_SetConfig+0x456>
 800c43e:	a201      	add	r2, pc, #4	; (adr r2, 800c444 <UART_SetConfig+0x40c>)
 800c440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c444:	0800c469 	.word	0x0800c469
 800c448:	0800c471 	.word	0x0800c471
 800c44c:	0800c479 	.word	0x0800c479
 800c450:	0800c48f 	.word	0x0800c48f
 800c454:	0800c47f 	.word	0x0800c47f
 800c458:	0800c48f 	.word	0x0800c48f
 800c45c:	0800c48f 	.word	0x0800c48f
 800c460:	0800c48f 	.word	0x0800c48f
 800c464:	0800c487 	.word	0x0800c487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c468:	f7fb fd28 	bl	8007ebc <HAL_RCC_GetPCLK1Freq>
 800c46c:	6178      	str	r0, [r7, #20]
        break;
 800c46e:	e013      	b.n	800c498 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c470:	f7fb fd3a 	bl	8007ee8 <HAL_RCC_GetPCLK2Freq>
 800c474:	6178      	str	r0, [r7, #20]
        break;
 800c476:	e00f      	b.n	800c498 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c478:	4b57      	ldr	r3, [pc, #348]	; (800c5d8 <UART_SetConfig+0x5a0>)
 800c47a:	617b      	str	r3, [r7, #20]
        break;
 800c47c:	e00c      	b.n	800c498 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c47e:	f7fb fc89 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 800c482:	6178      	str	r0, [r7, #20]
        break;
 800c484:	e008      	b.n	800c498 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c48a:	617b      	str	r3, [r7, #20]
        break;
 800c48c:	e004      	b.n	800c498 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800c48e:	2300      	movs	r3, #0
 800c490:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c492:	2301      	movs	r3, #1
 800c494:	76bb      	strb	r3, [r7, #26]
        break;
 800c496:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f000 8086 	beq.w	800c5ac <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a4:	4a4b      	ldr	r2, [pc, #300]	; (800c5d4 <UART_SetConfig+0x59c>)
 800c4a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4b2:	005a      	lsls	r2, r3, #1
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	085b      	lsrs	r3, r3, #1
 800c4ba:	441a      	add	r2, r3
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	2b0f      	cmp	r3, #15
 800c4cc:	d916      	bls.n	800c4fc <UART_SetConfig+0x4c4>
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4d4:	d212      	bcs.n	800c4fc <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	f023 030f 	bic.w	r3, r3, #15
 800c4de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	085b      	lsrs	r3, r3, #1
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	f003 0307 	and.w	r3, r3, #7
 800c4ea:	b29a      	uxth	r2, r3
 800c4ec:	89fb      	ldrh	r3, [r7, #14]
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	89fa      	ldrh	r2, [r7, #14]
 800c4f8:	60da      	str	r2, [r3, #12]
 800c4fa:	e057      	b.n	800c5ac <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	76bb      	strb	r3, [r7, #26]
 800c500:	e054      	b.n	800c5ac <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c502:	7efb      	ldrb	r3, [r7, #27]
 800c504:	2b08      	cmp	r3, #8
 800c506:	d828      	bhi.n	800c55a <UART_SetConfig+0x522>
 800c508:	a201      	add	r2, pc, #4	; (adr r2, 800c510 <UART_SetConfig+0x4d8>)
 800c50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50e:	bf00      	nop
 800c510:	0800c535 	.word	0x0800c535
 800c514:	0800c53d 	.word	0x0800c53d
 800c518:	0800c545 	.word	0x0800c545
 800c51c:	0800c55b 	.word	0x0800c55b
 800c520:	0800c54b 	.word	0x0800c54b
 800c524:	0800c55b 	.word	0x0800c55b
 800c528:	0800c55b 	.word	0x0800c55b
 800c52c:	0800c55b 	.word	0x0800c55b
 800c530:	0800c553 	.word	0x0800c553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c534:	f7fb fcc2 	bl	8007ebc <HAL_RCC_GetPCLK1Freq>
 800c538:	6178      	str	r0, [r7, #20]
        break;
 800c53a:	e013      	b.n	800c564 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c53c:	f7fb fcd4 	bl	8007ee8 <HAL_RCC_GetPCLK2Freq>
 800c540:	6178      	str	r0, [r7, #20]
        break;
 800c542:	e00f      	b.n	800c564 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c544:	4b24      	ldr	r3, [pc, #144]	; (800c5d8 <UART_SetConfig+0x5a0>)
 800c546:	617b      	str	r3, [r7, #20]
        break;
 800c548:	e00c      	b.n	800c564 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c54a:	f7fb fc23 	bl	8007d94 <HAL_RCC_GetSysClockFreq>
 800c54e:	6178      	str	r0, [r7, #20]
        break;
 800c550:	e008      	b.n	800c564 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c556:	617b      	str	r3, [r7, #20]
        break;
 800c558:	e004      	b.n	800c564 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800c55a:	2300      	movs	r3, #0
 800c55c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	76bb      	strb	r3, [r7, #26]
        break;
 800c562:	bf00      	nop
    }

    if (pclk != 0U)
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d020      	beq.n	800c5ac <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c56e:	4a19      	ldr	r2, [pc, #100]	; (800c5d4 <UART_SetConfig+0x59c>)
 800c570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c574:	461a      	mov	r2, r3
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	fbb3 f2f2 	udiv	r2, r3, r2
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	085b      	lsrs	r3, r3, #1
 800c582:	441a      	add	r2, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	fbb2 f3f3 	udiv	r3, r2, r3
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	2b0f      	cmp	r3, #15
 800c594:	d908      	bls.n	800c5a8 <UART_SetConfig+0x570>
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c59c:	d204      	bcs.n	800c5a8 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	693a      	ldr	r2, [r7, #16]
 800c5a4:	60da      	str	r2, [r3, #12]
 800c5a6:	e001      	b.n	800c5ac <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800c5c8:	7ebb      	ldrb	r3, [r7, #26]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3720      	adds	r7, #32
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800c5d4:	0801690c 	.word	0x0801690c
 800c5d8:	00f42400 	.word	0x00f42400

0800c5dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5e8:	f003 0301 	and.w	r3, r3, #1
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00a      	beq.n	800c606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	430a      	orrs	r2, r1
 800c604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c60a:	f003 0302 	and.w	r3, r3, #2
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00a      	beq.n	800c628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	430a      	orrs	r2, r1
 800c626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c62c:	f003 0304 	and.w	r3, r3, #4
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00a      	beq.n	800c64a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	430a      	orrs	r2, r1
 800c648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c64e:	f003 0308 	and.w	r3, r3, #8
 800c652:	2b00      	cmp	r3, #0
 800c654:	d00a      	beq.n	800c66c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	430a      	orrs	r2, r1
 800c66a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c670:	f003 0310 	and.w	r3, r3, #16
 800c674:	2b00      	cmp	r3, #0
 800c676:	d00a      	beq.n	800c68e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	430a      	orrs	r2, r1
 800c68c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c692:	f003 0320 	and.w	r3, r3, #32
 800c696:	2b00      	cmp	r3, #0
 800c698:	d00a      	beq.n	800c6b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	430a      	orrs	r2, r1
 800c6ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d01a      	beq.n	800c6f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	430a      	orrs	r2, r1
 800c6d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6da:	d10a      	bne.n	800c6f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	430a      	orrs	r2, r1
 800c6f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00a      	beq.n	800c714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	430a      	orrs	r2, r1
 800c712:	605a      	str	r2, [r3, #4]
  }
}
 800c714:	bf00      	nop
 800c716:	370c      	adds	r7, #12
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b086      	sub	sp, #24
 800c724:	af02      	add	r7, sp, #8
 800c726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c730:	f7f6 fe56 	bl	80033e0 <HAL_GetTick>
 800c734:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 0308 	and.w	r3, r3, #8
 800c740:	2b08      	cmp	r3, #8
 800c742:	d10e      	bne.n	800c762 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c748:	9300      	str	r3, [sp, #0]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2200      	movs	r2, #0
 800c74e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 f82c 	bl	800c7b0 <UART_WaitOnFlagUntilTimeout>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d001      	beq.n	800c762 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c75e:	2303      	movs	r3, #3
 800c760:	e022      	b.n	800c7a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f003 0304 	and.w	r3, r3, #4
 800c76c:	2b04      	cmp	r3, #4
 800c76e:	d10e      	bne.n	800c78e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c774:	9300      	str	r3, [sp, #0]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2200      	movs	r2, #0
 800c77a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 f816 	bl	800c7b0 <UART_WaitOnFlagUntilTimeout>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d001      	beq.n	800c78e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c78a:	2303      	movs	r3, #3
 800c78c:	e00c      	b.n	800c7a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2220      	movs	r2, #32
 800c792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2220      	movs	r2, #32
 800c79a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3710      	adds	r7, #16
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	603b      	str	r3, [r7, #0]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7c0:	e062      	b.n	800c888 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c8:	d05e      	beq.n	800c888 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7ca:	f7f6 fe09 	bl	80033e0 <HAL_GetTick>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	69ba      	ldr	r2, [r7, #24]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d302      	bcc.n	800c7e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d11d      	bne.n	800c81c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c7ee:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	689a      	ldr	r2, [r3, #8]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f022 0201 	bic.w	r2, r2, #1
 800c7fe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2220      	movs	r2, #32
 800c804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2220      	movs	r2, #32
 800c80c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2200      	movs	r2, #0
 800c814:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c818:	2303      	movs	r3, #3
 800c81a:	e045      	b.n	800c8a8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f003 0304 	and.w	r3, r3, #4
 800c826:	2b00      	cmp	r3, #0
 800c828:	d02e      	beq.n	800c888 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	69db      	ldr	r3, [r3, #28]
 800c830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c838:	d126      	bne.n	800c888 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c842:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c852:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	689a      	ldr	r2, [r3, #8]
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f022 0201 	bic.w	r2, r2, #1
 800c862:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2220      	movs	r2, #32
 800c868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2220      	movs	r2, #32
 800c870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2220      	movs	r2, #32
 800c878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2200      	movs	r2, #0
 800c880:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800c884:	2303      	movs	r3, #3
 800c886:	e00f      	b.n	800c8a8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	69da      	ldr	r2, [r3, #28]
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	4013      	ands	r3, r2
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	429a      	cmp	r2, r3
 800c896:	bf0c      	ite	eq
 800c898:	2301      	moveq	r3, #1
 800c89a:	2300      	movne	r3, #0
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	461a      	mov	r2, r3
 800c8a0:	79fb      	ldrb	r3, [r7, #7]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d08d      	beq.n	800c7c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3710      	adds	r7, #16
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b085      	sub	sp, #20
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d101      	bne.n	800c8c6 <HAL_UARTEx_DisableFifoMode+0x16>
 800c8c2:	2302      	movs	r3, #2
 800c8c4:	e027      	b.n	800c916 <HAL_UARTEx_DisableFifoMode+0x66>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2224      	movs	r2, #36	; 0x24
 800c8d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f022 0201 	bic.w	r2, r2, #1
 800c8ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c8f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	68fa      	ldr	r2, [r7, #12]
 800c902:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2220      	movs	r2, #32
 800c908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c914:	2300      	movs	r3, #0
}
 800c916:	4618      	mov	r0, r3
 800c918:	3714      	adds	r7, #20
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr

0800c922 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b084      	sub	sp, #16
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
 800c92a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c932:	2b01      	cmp	r3, #1
 800c934:	d101      	bne.n	800c93a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c936:	2302      	movs	r3, #2
 800c938:	e02d      	b.n	800c996 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2201      	movs	r2, #1
 800c93e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2224      	movs	r2, #36	; 0x24
 800c946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f022 0201 	bic.w	r2, r2, #1
 800c960:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	683a      	ldr	r2, [r7, #0]
 800c972:	430a      	orrs	r2, r1
 800c974:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f850 	bl	800ca1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2220      	movs	r2, #32
 800c988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2200      	movs	r2, #0
 800c990:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c994:	2300      	movs	r3, #0
}
 800c996:	4618      	mov	r0, r3
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b084      	sub	sp, #16
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
 800c9a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d101      	bne.n	800c9b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c9b2:	2302      	movs	r3, #2
 800c9b4:	e02d      	b.n	800ca12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2224      	movs	r2, #36	; 0x24
 800c9c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f022 0201 	bic.w	r2, r2, #1
 800c9dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	683a      	ldr	r2, [r7, #0]
 800c9ee:	430a      	orrs	r2, r1
 800c9f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 f812 	bl	800ca1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2220      	movs	r2, #32
 800ca04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ca10:	2300      	movs	r3, #0
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3710      	adds	r7, #16
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
	...

0800ca1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b089      	sub	sp, #36	; 0x24
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ca24:	4a2f      	ldr	r2, [pc, #188]	; (800cae4 <UARTEx_SetNbDataToProcess+0xc8>)
 800ca26:	f107 0314 	add.w	r3, r7, #20
 800ca2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ca2e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ca32:	4a2d      	ldr	r2, [pc, #180]	; (800cae8 <UARTEx_SetNbDataToProcess+0xcc>)
 800ca34:	f107 030c 	add.w	r3, r7, #12
 800ca38:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ca3c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d108      	bne.n	800ca5a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ca58:	e03d      	b.n	800cad6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ca5a:	2308      	movs	r3, #8
 800ca5c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ca5e:	2308      	movs	r3, #8
 800ca60:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	0e5b      	lsrs	r3, r3, #25
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	f003 0307 	and.w	r3, r3, #7
 800ca70:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	689b      	ldr	r3, [r3, #8]
 800ca78:	0f5b      	lsrs	r3, r3, #29
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	f003 0307 	and.w	r3, r3, #7
 800ca80:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ca82:	7fbb      	ldrb	r3, [r7, #30]
 800ca84:	7f3a      	ldrb	r2, [r7, #28]
 800ca86:	f107 0120 	add.w	r1, r7, #32
 800ca8a:	440a      	add	r2, r1
 800ca8c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ca90:	fb02 f303 	mul.w	r3, r2, r3
 800ca94:	7f3a      	ldrb	r2, [r7, #28]
 800ca96:	f107 0120 	add.w	r1, r7, #32
 800ca9a:	440a      	add	r2, r1
 800ca9c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800caa0:	fb93 f3f2 	sdiv	r3, r3, r2
 800caa4:	b29a      	uxth	r2, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800caac:	7ffb      	ldrb	r3, [r7, #31]
 800caae:	7f7a      	ldrb	r2, [r7, #29]
 800cab0:	f107 0120 	add.w	r1, r7, #32
 800cab4:	440a      	add	r2, r1
 800cab6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800caba:	fb02 f303 	mul.w	r3, r2, r3
 800cabe:	7f7a      	ldrb	r2, [r7, #29]
 800cac0:	f107 0120 	add.w	r1, r7, #32
 800cac4:	440a      	add	r2, r1
 800cac6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800caca:	fb93 f3f2 	sdiv	r3, r3, r2
 800cace:	b29a      	uxth	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cad6:	bf00      	nop
 800cad8:	3724      	adds	r7, #36	; 0x24
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	080166a4 	.word	0x080166a4
 800cae8:	080166ac 	.word	0x080166ac

0800caec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800caec:	b084      	sub	sp, #16
 800caee:	b580      	push	{r7, lr}
 800caf0:	b084      	sub	sp, #16
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
 800caf6:	f107 001c 	add.w	r0, r7, #28
 800cafa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d122      	bne.n	800cb4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800cb18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	68db      	ldr	r3, [r3, #12]
 800cb24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cb2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d105      	bne.n	800cb3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f001 f9da 	bl	800def8 <USB_CoreReset>
 800cb44:	4603      	mov	r3, r0
 800cb46:	73fb      	strb	r3, [r7, #15]
 800cb48:	e01a      	b.n	800cb80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f001 f9ce 	bl	800def8 <USB_CoreReset>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cb60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d106      	bne.n	800cb74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	639a      	str	r2, [r3, #56]	; 0x38
 800cb72:	e005      	b.n	800cb80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800cb80:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb8c:	b004      	add	sp, #16
 800cb8e:	4770      	bx	lr

0800cb90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b087      	sub	sp, #28
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cb9e:	79fb      	ldrb	r3, [r7, #7]
 800cba0:	2b02      	cmp	r3, #2
 800cba2:	d165      	bne.n	800cc70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	4a3e      	ldr	r2, [pc, #248]	; (800cca0 <USB_SetTurnaroundTime+0x110>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d906      	bls.n	800cbba <USB_SetTurnaroundTime+0x2a>
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	4a3d      	ldr	r2, [pc, #244]	; (800cca4 <USB_SetTurnaroundTime+0x114>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d802      	bhi.n	800cbba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cbb4:	230f      	movs	r3, #15
 800cbb6:	617b      	str	r3, [r7, #20]
 800cbb8:	e05c      	b.n	800cc74 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	4a39      	ldr	r2, [pc, #228]	; (800cca4 <USB_SetTurnaroundTime+0x114>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d906      	bls.n	800cbd0 <USB_SetTurnaroundTime+0x40>
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	4a38      	ldr	r2, [pc, #224]	; (800cca8 <USB_SetTurnaroundTime+0x118>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d802      	bhi.n	800cbd0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cbca:	230e      	movs	r3, #14
 800cbcc:	617b      	str	r3, [r7, #20]
 800cbce:	e051      	b.n	800cc74 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	4a35      	ldr	r2, [pc, #212]	; (800cca8 <USB_SetTurnaroundTime+0x118>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d906      	bls.n	800cbe6 <USB_SetTurnaroundTime+0x56>
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	4a34      	ldr	r2, [pc, #208]	; (800ccac <USB_SetTurnaroundTime+0x11c>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d802      	bhi.n	800cbe6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cbe0:	230d      	movs	r3, #13
 800cbe2:	617b      	str	r3, [r7, #20]
 800cbe4:	e046      	b.n	800cc74 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	4a30      	ldr	r2, [pc, #192]	; (800ccac <USB_SetTurnaroundTime+0x11c>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d906      	bls.n	800cbfc <USB_SetTurnaroundTime+0x6c>
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	4a2f      	ldr	r2, [pc, #188]	; (800ccb0 <USB_SetTurnaroundTime+0x120>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d802      	bhi.n	800cbfc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cbf6:	230c      	movs	r3, #12
 800cbf8:	617b      	str	r3, [r7, #20]
 800cbfa:	e03b      	b.n	800cc74 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	4a2c      	ldr	r2, [pc, #176]	; (800ccb0 <USB_SetTurnaroundTime+0x120>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d906      	bls.n	800cc12 <USB_SetTurnaroundTime+0x82>
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	4a2b      	ldr	r2, [pc, #172]	; (800ccb4 <USB_SetTurnaroundTime+0x124>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d802      	bhi.n	800cc12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cc0c:	230b      	movs	r3, #11
 800cc0e:	617b      	str	r3, [r7, #20]
 800cc10:	e030      	b.n	800cc74 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	4a27      	ldr	r2, [pc, #156]	; (800ccb4 <USB_SetTurnaroundTime+0x124>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d906      	bls.n	800cc28 <USB_SetTurnaroundTime+0x98>
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	4a26      	ldr	r2, [pc, #152]	; (800ccb8 <USB_SetTurnaroundTime+0x128>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d802      	bhi.n	800cc28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cc22:	230a      	movs	r3, #10
 800cc24:	617b      	str	r3, [r7, #20]
 800cc26:	e025      	b.n	800cc74 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	4a23      	ldr	r2, [pc, #140]	; (800ccb8 <USB_SetTurnaroundTime+0x128>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d906      	bls.n	800cc3e <USB_SetTurnaroundTime+0xae>
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	4a22      	ldr	r2, [pc, #136]	; (800ccbc <USB_SetTurnaroundTime+0x12c>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d802      	bhi.n	800cc3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cc38:	2309      	movs	r3, #9
 800cc3a:	617b      	str	r3, [r7, #20]
 800cc3c:	e01a      	b.n	800cc74 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	4a1e      	ldr	r2, [pc, #120]	; (800ccbc <USB_SetTurnaroundTime+0x12c>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d906      	bls.n	800cc54 <USB_SetTurnaroundTime+0xc4>
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	4a1d      	ldr	r2, [pc, #116]	; (800ccc0 <USB_SetTurnaroundTime+0x130>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d802      	bhi.n	800cc54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cc4e:	2308      	movs	r3, #8
 800cc50:	617b      	str	r3, [r7, #20]
 800cc52:	e00f      	b.n	800cc74 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	4a1a      	ldr	r2, [pc, #104]	; (800ccc0 <USB_SetTurnaroundTime+0x130>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d906      	bls.n	800cc6a <USB_SetTurnaroundTime+0xda>
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	4a19      	ldr	r2, [pc, #100]	; (800ccc4 <USB_SetTurnaroundTime+0x134>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d802      	bhi.n	800cc6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cc64:	2307      	movs	r3, #7
 800cc66:	617b      	str	r3, [r7, #20]
 800cc68:	e004      	b.n	800cc74 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cc6a:	2306      	movs	r3, #6
 800cc6c:	617b      	str	r3, [r7, #20]
 800cc6e:	e001      	b.n	800cc74 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cc70:	2309      	movs	r3, #9
 800cc72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	68da      	ldr	r2, [r3, #12]
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	029b      	lsls	r3, r3, #10
 800cc88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cc8c:	431a      	orrs	r2, r3
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cc92:	2300      	movs	r3, #0
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	371c      	adds	r7, #28
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	00d8acbf 	.word	0x00d8acbf
 800cca4:	00e4e1bf 	.word	0x00e4e1bf
 800cca8:	00f423ff 	.word	0x00f423ff
 800ccac:	0106737f 	.word	0x0106737f
 800ccb0:	011a499f 	.word	0x011a499f
 800ccb4:	01312cff 	.word	0x01312cff
 800ccb8:	014ca43f 	.word	0x014ca43f
 800ccbc:	016e35ff 	.word	0x016e35ff
 800ccc0:	01a6ab1f 	.word	0x01a6ab1f
 800ccc4:	01e847ff 	.word	0x01e847ff

0800ccc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b083      	sub	sp, #12
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	f043 0201 	orr.w	r2, r3, #1
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ccdc:	2300      	movs	r3, #0
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	370c      	adds	r7, #12
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr

0800ccea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ccea:	b480      	push	{r7}
 800ccec:	b083      	sub	sp, #12
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	f023 0201 	bic.w	r2, r3, #1
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ccfe:	2300      	movs	r3, #0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	460b      	mov	r3, r1
 800cd16:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cd24:	78fb      	ldrb	r3, [r7, #3]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d106      	bne.n	800cd38 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	60da      	str	r2, [r3, #12]
 800cd36:	e00b      	b.n	800cd50 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cd38:	78fb      	ldrb	r3, [r7, #3]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d106      	bne.n	800cd4c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	68db      	ldr	r3, [r3, #12]
 800cd42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	60da      	str	r2, [r3, #12]
 800cd4a:	e001      	b.n	800cd50 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e003      	b.n	800cd58 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cd50:	2032      	movs	r0, #50	; 0x32
 800cd52:	f7f6 fb51 	bl	80033f8 <HAL_Delay>

  return HAL_OK;
 800cd56:	2300      	movs	r3, #0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cd60:	b084      	sub	sp, #16
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b086      	sub	sp, #24
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
 800cd6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cd6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cd72:	2300      	movs	r3, #0
 800cd74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	613b      	str	r3, [r7, #16]
 800cd7e:	e009      	b.n	800cd94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	3340      	adds	r3, #64	; 0x40
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	4413      	add	r3, r2
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	3301      	adds	r3, #1
 800cd92:	613b      	str	r3, [r7, #16]
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	2b0e      	cmp	r3, #14
 800cd98:	d9f2      	bls.n	800cd80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cd9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d11c      	bne.n	800cdda <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdae:	f043 0302 	orr.w	r3, r3, #2
 800cdb2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	601a      	str	r2, [r3, #0]
 800cdd8:	e005      	b.n	800cde6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdde:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cdec:	461a      	mov	r2, r3
 800cdee:	2300      	movs	r3, #0
 800cdf0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce00:	461a      	mov	r2, r3
 800ce02:	680b      	ldr	r3, [r1, #0]
 800ce04:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ce06:	2103      	movs	r1, #3
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 f93d 	bl	800d088 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ce0e:	2110      	movs	r1, #16
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 f8f1 	bl	800cff8 <USB_FlushTxFifo>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d001      	beq.n	800ce20 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 f90f 	bl	800d044 <USB_FlushRxFifo>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d001      	beq.n	800ce30 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce36:	461a      	mov	r2, r3
 800ce38:	2300      	movs	r3, #0
 800ce3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce42:	461a      	mov	r2, r3
 800ce44:	2300      	movs	r3, #0
 800ce46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce4e:	461a      	mov	r2, r3
 800ce50:	2300      	movs	r3, #0
 800ce52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce54:	2300      	movs	r3, #0
 800ce56:	613b      	str	r3, [r7, #16]
 800ce58:	e043      	b.n	800cee2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	015a      	lsls	r2, r3, #5
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	4413      	add	r3, r2
 800ce62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce70:	d118      	bne.n	800cea4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d10a      	bne.n	800ce8e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	015a      	lsls	r2, r3, #5
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	4413      	add	r3, r2
 800ce80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce84:	461a      	mov	r2, r3
 800ce86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ce8a:	6013      	str	r3, [r2, #0]
 800ce8c:	e013      	b.n	800ceb6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	015a      	lsls	r2, r3, #5
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	4413      	add	r3, r2
 800ce96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cea0:	6013      	str	r3, [r2, #0]
 800cea2:	e008      	b.n	800ceb6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	015a      	lsls	r2, r3, #5
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	4413      	add	r3, r2
 800ceac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	015a      	lsls	r2, r3, #5
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	4413      	add	r3, r2
 800cebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cec2:	461a      	mov	r2, r3
 800cec4:	2300      	movs	r3, #0
 800cec6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	015a      	lsls	r2, r3, #5
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	4413      	add	r3, r2
 800ced0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ced4:	461a      	mov	r2, r3
 800ced6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ceda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	3301      	adds	r3, #1
 800cee0:	613b      	str	r3, [r7, #16]
 800cee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee4:	693a      	ldr	r2, [r7, #16]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d3b7      	bcc.n	800ce5a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ceea:	2300      	movs	r3, #0
 800ceec:	613b      	str	r3, [r7, #16]
 800ceee:	e043      	b.n	800cf78 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	015a      	lsls	r2, r3, #5
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	4413      	add	r3, r2
 800cef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf06:	d118      	bne.n	800cf3a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d10a      	bne.n	800cf24 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	015a      	lsls	r2, r3, #5
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	4413      	add	r3, r2
 800cf16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cf20:	6013      	str	r3, [r2, #0]
 800cf22:	e013      	b.n	800cf4c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	015a      	lsls	r2, r3, #5
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	4413      	add	r3, r2
 800cf2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf30:	461a      	mov	r2, r3
 800cf32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cf36:	6013      	str	r3, [r2, #0]
 800cf38:	e008      	b.n	800cf4c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	015a      	lsls	r2, r3, #5
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	4413      	add	r3, r2
 800cf42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf46:	461a      	mov	r2, r3
 800cf48:	2300      	movs	r3, #0
 800cf4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	015a      	lsls	r2, r3, #5
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	4413      	add	r3, r2
 800cf54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf58:	461a      	mov	r2, r3
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	015a      	lsls	r2, r3, #5
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	4413      	add	r3, r2
 800cf66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cf70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	3301      	adds	r3, #1
 800cf76:	613b      	str	r3, [r7, #16]
 800cf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7a:	693a      	ldr	r2, [r7, #16]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d3b7      	bcc.n	800cef0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf86:	691b      	ldr	r3, [r3, #16]
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cfa0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	699b      	ldr	r3, [r3, #24]
 800cfa6:	f043 0210 	orr.w	r2, r3, #16
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	699a      	ldr	r2, [r3, #24]
 800cfb2:	4b10      	ldr	r3, [pc, #64]	; (800cff4 <USB_DevInit+0x294>)
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cfba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d005      	beq.n	800cfcc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	699b      	ldr	r3, [r3, #24]
 800cfc4:	f043 0208 	orr.w	r2, r3, #8
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cfcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d107      	bne.n	800cfe2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	699b      	ldr	r3, [r3, #24]
 800cfd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cfda:	f043 0304 	orr.w	r3, r3, #4
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cfe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3718      	adds	r7, #24
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cfee:	b004      	add	sp, #16
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	803c3800 	.word	0x803c3800

0800cff8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d002:	2300      	movs	r3, #0
 800d004:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	019b      	lsls	r3, r3, #6
 800d00a:	f043 0220 	orr.w	r2, r3, #32
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	3301      	adds	r3, #1
 800d016:	60fb      	str	r3, [r7, #12]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	4a09      	ldr	r2, [pc, #36]	; (800d040 <USB_FlushTxFifo+0x48>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d901      	bls.n	800d024 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d020:	2303      	movs	r3, #3
 800d022:	e006      	b.n	800d032 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	f003 0320 	and.w	r3, r3, #32
 800d02c:	2b20      	cmp	r3, #32
 800d02e:	d0f0      	beq.n	800d012 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3714      	adds	r7, #20
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	00030d40 	.word	0x00030d40

0800d044 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d044:	b480      	push	{r7}
 800d046:	b085      	sub	sp, #20
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d04c:	2300      	movs	r3, #0
 800d04e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2210      	movs	r2, #16
 800d054:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	3301      	adds	r3, #1
 800d05a:	60fb      	str	r3, [r7, #12]
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	4a09      	ldr	r2, [pc, #36]	; (800d084 <USB_FlushRxFifo+0x40>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d901      	bls.n	800d068 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d064:	2303      	movs	r3, #3
 800d066:	e006      	b.n	800d076 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	691b      	ldr	r3, [r3, #16]
 800d06c:	f003 0310 	and.w	r3, r3, #16
 800d070:	2b10      	cmp	r3, #16
 800d072:	d0f0      	beq.n	800d056 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3714      	adds	r7, #20
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr
 800d082:	bf00      	nop
 800d084:	00030d40 	.word	0x00030d40

0800d088 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d088:	b480      	push	{r7}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	460b      	mov	r3, r1
 800d092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	78fb      	ldrb	r3, [r7, #3]
 800d0a2:	68f9      	ldr	r1, [r7, #12]
 800d0a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d0ac:	2300      	movs	r3, #0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3714      	adds	r7, #20
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr

0800d0ba <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d0ba:	b480      	push	{r7}
 800d0bc:	b087      	sub	sp, #28
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0cc:	689b      	ldr	r3, [r3, #8]
 800d0ce:	f003 0306 	and.w	r3, r3, #6
 800d0d2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b02      	cmp	r3, #2
 800d0d8:	d002      	beq.n	800d0e0 <USB_GetDevSpeed+0x26>
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2b06      	cmp	r3, #6
 800d0de:	d102      	bne.n	800d0e6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	75fb      	strb	r3, [r7, #23]
 800d0e4:	e001      	b.n	800d0ea <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800d0e6:	230f      	movs	r3, #15
 800d0e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d0ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	371c      	adds	r7, #28
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	785b      	ldrb	r3, [r3, #1]
 800d110:	2b01      	cmp	r3, #1
 800d112:	d13a      	bne.n	800d18a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d11a:	69da      	ldr	r2, [r3, #28]
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	f003 030f 	and.w	r3, r3, #15
 800d124:	2101      	movs	r1, #1
 800d126:	fa01 f303 	lsl.w	r3, r1, r3
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	68f9      	ldr	r1, [r7, #12]
 800d12e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d132:	4313      	orrs	r3, r2
 800d134:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	015a      	lsls	r2, r3, #5
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	4413      	add	r3, r2
 800d13e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d155      	bne.n	800d1f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	015a      	lsls	r2, r3, #5
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	4413      	add	r3, r2
 800d154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	78db      	ldrb	r3, [r3, #3]
 800d166:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d168:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	059b      	lsls	r3, r3, #22
 800d16e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d170:	4313      	orrs	r3, r2
 800d172:	68ba      	ldr	r2, [r7, #8]
 800d174:	0151      	lsls	r1, r2, #5
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	440a      	add	r2, r1
 800d17a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d17e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d186:	6013      	str	r3, [r2, #0]
 800d188:	e036      	b.n	800d1f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d190:	69da      	ldr	r2, [r3, #28]
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	f003 030f 	and.w	r3, r3, #15
 800d19a:	2101      	movs	r1, #1
 800d19c:	fa01 f303 	lsl.w	r3, r1, r3
 800d1a0:	041b      	lsls	r3, r3, #16
 800d1a2:	68f9      	ldr	r1, [r7, #12]
 800d1a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	015a      	lsls	r2, r3, #5
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d11a      	bne.n	800d1f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	015a      	lsls	r2, r3, #5
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	4413      	add	r3, r2
 800d1ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	78db      	ldrb	r3, [r3, #3]
 800d1dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d1de:	430b      	orrs	r3, r1
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	68ba      	ldr	r2, [r7, #8]
 800d1e4:	0151      	lsls	r1, r2, #5
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	440a      	add	r2, r1
 800d1ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d1f8:	2300      	movs	r3, #0
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3714      	adds	r7, #20
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr
	...

0800d208 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	785b      	ldrb	r3, [r3, #1]
 800d220:	2b01      	cmp	r3, #1
 800d222:	d161      	bne.n	800d2e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	015a      	lsls	r2, r3, #5
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	4413      	add	r3, r2
 800d22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d23a:	d11f      	bne.n	800d27c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	015a      	lsls	r2, r3, #5
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	4413      	add	r3, r2
 800d244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	68ba      	ldr	r2, [r7, #8]
 800d24c:	0151      	lsls	r1, r2, #5
 800d24e:	68fa      	ldr	r2, [r7, #12]
 800d250:	440a      	add	r2, r1
 800d252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d256:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d25a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	015a      	lsls	r2, r3, #5
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	4413      	add	r3, r2
 800d264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	68ba      	ldr	r2, [r7, #8]
 800d26c:	0151      	lsls	r1, r2, #5
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	440a      	add	r2, r1
 800d272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d276:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d27a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	f003 030f 	and.w	r3, r3, #15
 800d28c:	2101      	movs	r1, #1
 800d28e:	fa01 f303 	lsl.w	r3, r1, r3
 800d292:	b29b      	uxth	r3, r3
 800d294:	43db      	mvns	r3, r3
 800d296:	68f9      	ldr	r1, [r7, #12]
 800d298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d29c:	4013      	ands	r3, r2
 800d29e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2a6:	69da      	ldr	r2, [r3, #28]
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	f003 030f 	and.w	r3, r3, #15
 800d2b0:	2101      	movs	r1, #1
 800d2b2:	fa01 f303 	lsl.w	r3, r1, r3
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	43db      	mvns	r3, r3
 800d2ba:	68f9      	ldr	r1, [r7, #12]
 800d2bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2c0:	4013      	ands	r3, r2
 800d2c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	015a      	lsls	r2, r3, #5
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	0159      	lsls	r1, r3, #5
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	440b      	add	r3, r1
 800d2da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2de:	4619      	mov	r1, r3
 800d2e0:	4b35      	ldr	r3, [pc, #212]	; (800d3b8 <USB_DeactivateEndpoint+0x1b0>)
 800d2e2:	4013      	ands	r3, r2
 800d2e4:	600b      	str	r3, [r1, #0]
 800d2e6:	e060      	b.n	800d3aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	015a      	lsls	r2, r3, #5
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d2fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d2fe:	d11f      	bne.n	800d340 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	015a      	lsls	r2, r3, #5
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	4413      	add	r3, r2
 800d308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	68ba      	ldr	r2, [r7, #8]
 800d310:	0151      	lsls	r1, r2, #5
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	440a      	add	r2, r1
 800d316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d31a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d31e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	015a      	lsls	r2, r3, #5
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	4413      	add	r3, r2
 800d328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	0151      	lsls	r1, r2, #5
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	440a      	add	r2, r1
 800d336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d33a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d33e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	f003 030f 	and.w	r3, r3, #15
 800d350:	2101      	movs	r1, #1
 800d352:	fa01 f303 	lsl.w	r3, r1, r3
 800d356:	041b      	lsls	r3, r3, #16
 800d358:	43db      	mvns	r3, r3
 800d35a:	68f9      	ldr	r1, [r7, #12]
 800d35c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d360:	4013      	ands	r3, r2
 800d362:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d36a:	69da      	ldr	r2, [r3, #28]
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	f003 030f 	and.w	r3, r3, #15
 800d374:	2101      	movs	r1, #1
 800d376:	fa01 f303 	lsl.w	r3, r1, r3
 800d37a:	041b      	lsls	r3, r3, #16
 800d37c:	43db      	mvns	r3, r3
 800d37e:	68f9      	ldr	r1, [r7, #12]
 800d380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d384:	4013      	ands	r3, r2
 800d386:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	015a      	lsls	r2, r3, #5
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	4413      	add	r3, r2
 800d390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	0159      	lsls	r1, r3, #5
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	440b      	add	r3, r1
 800d39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	4b05      	ldr	r3, [pc, #20]	; (800d3bc <USB_DeactivateEndpoint+0x1b4>)
 800d3a6:	4013      	ands	r3, r2
 800d3a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d3aa:	2300      	movs	r3, #0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3714      	adds	r7, #20
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr
 800d3b8:	ec337800 	.word	0xec337800
 800d3bc:	eff37800 	.word	0xeff37800

0800d3c0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b086      	sub	sp, #24
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	785b      	ldrb	r3, [r3, #1]
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	f040 810a 	bne.w	800d5f2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	695b      	ldr	r3, [r3, #20]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d132      	bne.n	800d44c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	015a      	lsls	r2, r3, #5
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3f2:	691b      	ldr	r3, [r3, #16]
 800d3f4:	693a      	ldr	r2, [r7, #16]
 800d3f6:	0151      	lsls	r1, r2, #5
 800d3f8:	697a      	ldr	r2, [r7, #20]
 800d3fa:	440a      	add	r2, r1
 800d3fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d400:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d404:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d408:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	015a      	lsls	r2, r3, #5
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	4413      	add	r3, r2
 800d412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d416:	691b      	ldr	r3, [r3, #16]
 800d418:	693a      	ldr	r2, [r7, #16]
 800d41a:	0151      	lsls	r1, r2, #5
 800d41c:	697a      	ldr	r2, [r7, #20]
 800d41e:	440a      	add	r2, r1
 800d420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	015a      	lsls	r2, r3, #5
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	4413      	add	r3, r2
 800d432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d436:	691b      	ldr	r3, [r3, #16]
 800d438:	693a      	ldr	r2, [r7, #16]
 800d43a:	0151      	lsls	r1, r2, #5
 800d43c:	697a      	ldr	r2, [r7, #20]
 800d43e:	440a      	add	r2, r1
 800d440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d444:	0cdb      	lsrs	r3, r3, #19
 800d446:	04db      	lsls	r3, r3, #19
 800d448:	6113      	str	r3, [r2, #16]
 800d44a:	e074      	b.n	800d536 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	015a      	lsls	r2, r3, #5
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	4413      	add	r3, r2
 800d454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d458:	691b      	ldr	r3, [r3, #16]
 800d45a:	693a      	ldr	r2, [r7, #16]
 800d45c:	0151      	lsls	r1, r2, #5
 800d45e:	697a      	ldr	r2, [r7, #20]
 800d460:	440a      	add	r2, r1
 800d462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d466:	0cdb      	lsrs	r3, r3, #19
 800d468:	04db      	lsls	r3, r3, #19
 800d46a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	015a      	lsls	r2, r3, #5
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	4413      	add	r3, r2
 800d474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d478:	691b      	ldr	r3, [r3, #16]
 800d47a:	693a      	ldr	r2, [r7, #16]
 800d47c:	0151      	lsls	r1, r2, #5
 800d47e:	697a      	ldr	r2, [r7, #20]
 800d480:	440a      	add	r2, r1
 800d482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d486:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d48a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d48e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	015a      	lsls	r2, r3, #5
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	4413      	add	r3, r2
 800d498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d49c:	691a      	ldr	r2, [r3, #16]
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	6959      	ldr	r1, [r3, #20]
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	689b      	ldr	r3, [r3, #8]
 800d4a6:	440b      	add	r3, r1
 800d4a8:	1e59      	subs	r1, r3, #1
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	689b      	ldr	r3, [r3, #8]
 800d4ae:	fbb1 f3f3 	udiv	r3, r1, r3
 800d4b2:	04d9      	lsls	r1, r3, #19
 800d4b4:	4baf      	ldr	r3, [pc, #700]	; (800d774 <USB_EPStartXfer+0x3b4>)
 800d4b6:	400b      	ands	r3, r1
 800d4b8:	6939      	ldr	r1, [r7, #16]
 800d4ba:	0148      	lsls	r0, r1, #5
 800d4bc:	6979      	ldr	r1, [r7, #20]
 800d4be:	4401      	add	r1, r0
 800d4c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d4c4:	4313      	orrs	r3, r2
 800d4c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	015a      	lsls	r2, r3, #5
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	4413      	add	r3, r2
 800d4d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4d4:	691a      	ldr	r2, [r3, #16]
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	695b      	ldr	r3, [r3, #20]
 800d4da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4de:	6939      	ldr	r1, [r7, #16]
 800d4e0:	0148      	lsls	r0, r1, #5
 800d4e2:	6979      	ldr	r1, [r7, #20]
 800d4e4:	4401      	add	r1, r0
 800d4e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	78db      	ldrb	r3, [r3, #3]
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d11f      	bne.n	800d536 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	015a      	lsls	r2, r3, #5
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d502:	691b      	ldr	r3, [r3, #16]
 800d504:	693a      	ldr	r2, [r7, #16]
 800d506:	0151      	lsls	r1, r2, #5
 800d508:	697a      	ldr	r2, [r7, #20]
 800d50a:	440a      	add	r2, r1
 800d50c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d510:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d514:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	015a      	lsls	r2, r3, #5
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	4413      	add	r3, r2
 800d51e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d522:	691b      	ldr	r3, [r3, #16]
 800d524:	693a      	ldr	r2, [r7, #16]
 800d526:	0151      	lsls	r1, r2, #5
 800d528:	697a      	ldr	r2, [r7, #20]
 800d52a:	440a      	add	r2, r1
 800d52c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d530:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d534:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	015a      	lsls	r2, r3, #5
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	4413      	add	r3, r2
 800d53e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	693a      	ldr	r2, [r7, #16]
 800d546:	0151      	lsls	r1, r2, #5
 800d548:	697a      	ldr	r2, [r7, #20]
 800d54a:	440a      	add	r2, r1
 800d54c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d550:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d554:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	78db      	ldrb	r3, [r3, #3]
 800d55a:	2b01      	cmp	r3, #1
 800d55c:	d015      	beq.n	800d58a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	695b      	ldr	r3, [r3, #20]
 800d562:	2b00      	cmp	r3, #0
 800d564:	f000 8100 	beq.w	800d768 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d56e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	f003 030f 	and.w	r3, r3, #15
 800d578:	2101      	movs	r1, #1
 800d57a:	fa01 f303 	lsl.w	r3, r1, r3
 800d57e:	6979      	ldr	r1, [r7, #20]
 800d580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d584:	4313      	orrs	r3, r2
 800d586:	634b      	str	r3, [r1, #52]	; 0x34
 800d588:	e0ee      	b.n	800d768 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d596:	2b00      	cmp	r3, #0
 800d598:	d110      	bne.n	800d5bc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	015a      	lsls	r2, r3, #5
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	693a      	ldr	r2, [r7, #16]
 800d5aa:	0151      	lsls	r1, r2, #5
 800d5ac:	697a      	ldr	r2, [r7, #20]
 800d5ae:	440a      	add	r2, r1
 800d5b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d5b8:	6013      	str	r3, [r2, #0]
 800d5ba:	e00f      	b.n	800d5dc <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	015a      	lsls	r2, r3, #5
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	693a      	ldr	r2, [r7, #16]
 800d5cc:	0151      	lsls	r1, r2, #5
 800d5ce:	697a      	ldr	r2, [r7, #20]
 800d5d0:	440a      	add	r2, r1
 800d5d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5da:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	68d9      	ldr	r1, [r3, #12]
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	781a      	ldrb	r2, [r3, #0]
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	695b      	ldr	r3, [r3, #20]
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 f9e2 	bl	800d9b4 <USB_WritePacket>
 800d5f0:	e0ba      	b.n	800d768 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	015a      	lsls	r2, r3, #5
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	4413      	add	r3, r2
 800d5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5fe:	691b      	ldr	r3, [r3, #16]
 800d600:	693a      	ldr	r2, [r7, #16]
 800d602:	0151      	lsls	r1, r2, #5
 800d604:	697a      	ldr	r2, [r7, #20]
 800d606:	440a      	add	r2, r1
 800d608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d60c:	0cdb      	lsrs	r3, r3, #19
 800d60e:	04db      	lsls	r3, r3, #19
 800d610:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	015a      	lsls	r2, r3, #5
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	4413      	add	r3, r2
 800d61a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d61e:	691b      	ldr	r3, [r3, #16]
 800d620:	693a      	ldr	r2, [r7, #16]
 800d622:	0151      	lsls	r1, r2, #5
 800d624:	697a      	ldr	r2, [r7, #20]
 800d626:	440a      	add	r2, r1
 800d628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d62c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d630:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d634:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	695b      	ldr	r3, [r3, #20]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d123      	bne.n	800d686 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	015a      	lsls	r2, r3, #5
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	4413      	add	r3, r2
 800d646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d64a:	691a      	ldr	r2, [r3, #16]
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	689b      	ldr	r3, [r3, #8]
 800d650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d654:	6939      	ldr	r1, [r7, #16]
 800d656:	0148      	lsls	r0, r1, #5
 800d658:	6979      	ldr	r1, [r7, #20]
 800d65a:	4401      	add	r1, r0
 800d65c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d660:	4313      	orrs	r3, r2
 800d662:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	015a      	lsls	r2, r3, #5
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	4413      	add	r3, r2
 800d66c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	693a      	ldr	r2, [r7, #16]
 800d674:	0151      	lsls	r1, r2, #5
 800d676:	697a      	ldr	r2, [r7, #20]
 800d678:	440a      	add	r2, r1
 800d67a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d67e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d682:	6113      	str	r3, [r2, #16]
 800d684:	e033      	b.n	800d6ee <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	695a      	ldr	r2, [r3, #20]
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	4413      	add	r3, r2
 800d690:	1e5a      	subs	r2, r3, #1
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	689b      	ldr	r3, [r3, #8]
 800d696:	fbb2 f3f3 	udiv	r3, r2, r3
 800d69a:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	015a      	lsls	r2, r3, #5
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	4413      	add	r3, r2
 800d6a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6a8:	691a      	ldr	r2, [r3, #16]
 800d6aa:	89fb      	ldrh	r3, [r7, #14]
 800d6ac:	04d9      	lsls	r1, r3, #19
 800d6ae:	4b31      	ldr	r3, [pc, #196]	; (800d774 <USB_EPStartXfer+0x3b4>)
 800d6b0:	400b      	ands	r3, r1
 800d6b2:	6939      	ldr	r1, [r7, #16]
 800d6b4:	0148      	lsls	r0, r1, #5
 800d6b6:	6979      	ldr	r1, [r7, #20]
 800d6b8:	4401      	add	r1, r0
 800d6ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	015a      	lsls	r2, r3, #5
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6ce:	691a      	ldr	r2, [r3, #16]
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	689b      	ldr	r3, [r3, #8]
 800d6d4:	89f9      	ldrh	r1, [r7, #14]
 800d6d6:	fb01 f303 	mul.w	r3, r1, r3
 800d6da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d6de:	6939      	ldr	r1, [r7, #16]
 800d6e0:	0148      	lsls	r0, r1, #5
 800d6e2:	6979      	ldr	r1, [r7, #20]
 800d6e4:	4401      	add	r1, r0
 800d6e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	78db      	ldrb	r3, [r3, #3]
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d128      	bne.n	800d748 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6fc:	689b      	ldr	r3, [r3, #8]
 800d6fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d702:	2b00      	cmp	r3, #0
 800d704:	d110      	bne.n	800d728 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	015a      	lsls	r2, r3, #5
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	4413      	add	r3, r2
 800d70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	693a      	ldr	r2, [r7, #16]
 800d716:	0151      	lsls	r1, r2, #5
 800d718:	697a      	ldr	r2, [r7, #20]
 800d71a:	440a      	add	r2, r1
 800d71c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d720:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d724:	6013      	str	r3, [r2, #0]
 800d726:	e00f      	b.n	800d748 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	015a      	lsls	r2, r3, #5
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	4413      	add	r3, r2
 800d730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	693a      	ldr	r2, [r7, #16]
 800d738:	0151      	lsls	r1, r2, #5
 800d73a:	697a      	ldr	r2, [r7, #20]
 800d73c:	440a      	add	r2, r1
 800d73e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d746:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	015a      	lsls	r2, r3, #5
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	4413      	add	r3, r2
 800d750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	693a      	ldr	r2, [r7, #16]
 800d758:	0151      	lsls	r1, r2, #5
 800d75a:	697a      	ldr	r2, [r7, #20]
 800d75c:	440a      	add	r2, r1
 800d75e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d762:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d766:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3718      	adds	r7, #24
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	1ff80000 	.word	0x1ff80000

0800d778 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d778:	b480      	push	{r7}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	785b      	ldrb	r3, [r3, #1]
 800d790:	2b01      	cmp	r3, #1
 800d792:	f040 80ab 	bne.w	800d8ec <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	695b      	ldr	r3, [r3, #20]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d132      	bne.n	800d804 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	015a      	lsls	r2, r3, #5
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7aa:	691b      	ldr	r3, [r3, #16]
 800d7ac:	68ba      	ldr	r2, [r7, #8]
 800d7ae:	0151      	lsls	r1, r2, #5
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	440a      	add	r2, r1
 800d7b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d7bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d7c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	015a      	lsls	r2, r3, #5
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7ce:	691b      	ldr	r3, [r3, #16]
 800d7d0:	68ba      	ldr	r2, [r7, #8]
 800d7d2:	0151      	lsls	r1, r2, #5
 800d7d4:	68fa      	ldr	r2, [r7, #12]
 800d7d6:	440a      	add	r2, r1
 800d7d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d7e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	015a      	lsls	r2, r3, #5
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	4413      	add	r3, r2
 800d7ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7ee:	691b      	ldr	r3, [r3, #16]
 800d7f0:	68ba      	ldr	r2, [r7, #8]
 800d7f2:	0151      	lsls	r1, r2, #5
 800d7f4:	68fa      	ldr	r2, [r7, #12]
 800d7f6:	440a      	add	r2, r1
 800d7f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7fc:	0cdb      	lsrs	r3, r3, #19
 800d7fe:	04db      	lsls	r3, r3, #19
 800d800:	6113      	str	r3, [r2, #16]
 800d802:	e04e      	b.n	800d8a2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	015a      	lsls	r2, r3, #5
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	4413      	add	r3, r2
 800d80c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d810:	691b      	ldr	r3, [r3, #16]
 800d812:	68ba      	ldr	r2, [r7, #8]
 800d814:	0151      	lsls	r1, r2, #5
 800d816:	68fa      	ldr	r2, [r7, #12]
 800d818:	440a      	add	r2, r1
 800d81a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d81e:	0cdb      	lsrs	r3, r3, #19
 800d820:	04db      	lsls	r3, r3, #19
 800d822:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	015a      	lsls	r2, r3, #5
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	4413      	add	r3, r2
 800d82c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	68ba      	ldr	r2, [r7, #8]
 800d834:	0151      	lsls	r1, r2, #5
 800d836:	68fa      	ldr	r2, [r7, #12]
 800d838:	440a      	add	r2, r1
 800d83a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d83e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d842:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d846:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	695a      	ldr	r2, [r3, #20]
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	689b      	ldr	r3, [r3, #8]
 800d850:	429a      	cmp	r2, r3
 800d852:	d903      	bls.n	800d85c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	689a      	ldr	r2, [r3, #8]
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	015a      	lsls	r2, r3, #5
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	4413      	add	r3, r2
 800d864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	68ba      	ldr	r2, [r7, #8]
 800d86c:	0151      	lsls	r1, r2, #5
 800d86e:	68fa      	ldr	r2, [r7, #12]
 800d870:	440a      	add	r2, r1
 800d872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d876:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d87a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	015a      	lsls	r2, r3, #5
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	4413      	add	r3, r2
 800d884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d888:	691a      	ldr	r2, [r3, #16]
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	695b      	ldr	r3, [r3, #20]
 800d88e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d892:	68b9      	ldr	r1, [r7, #8]
 800d894:	0148      	lsls	r0, r1, #5
 800d896:	68f9      	ldr	r1, [r7, #12]
 800d898:	4401      	add	r1, r0
 800d89a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	015a      	lsls	r2, r3, #5
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	4413      	add	r3, r2
 800d8aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	0151      	lsls	r1, r2, #5
 800d8b4:	68fa      	ldr	r2, [r7, #12]
 800d8b6:	440a      	add	r2, r1
 800d8b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d8c0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	695b      	ldr	r3, [r3, #20]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d06d      	beq.n	800d9a6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	f003 030f 	and.w	r3, r3, #15
 800d8da:	2101      	movs	r1, #1
 800d8dc:	fa01 f303 	lsl.w	r3, r1, r3
 800d8e0:	68f9      	ldr	r1, [r7, #12]
 800d8e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	634b      	str	r3, [r1, #52]	; 0x34
 800d8ea:	e05c      	b.n	800d9a6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	015a      	lsls	r2, r3, #5
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8f8:	691b      	ldr	r3, [r3, #16]
 800d8fa:	68ba      	ldr	r2, [r7, #8]
 800d8fc:	0151      	lsls	r1, r2, #5
 800d8fe:	68fa      	ldr	r2, [r7, #12]
 800d900:	440a      	add	r2, r1
 800d902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d906:	0cdb      	lsrs	r3, r3, #19
 800d908:	04db      	lsls	r3, r3, #19
 800d90a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	015a      	lsls	r2, r3, #5
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	4413      	add	r3, r2
 800d914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d918:	691b      	ldr	r3, [r3, #16]
 800d91a:	68ba      	ldr	r2, [r7, #8]
 800d91c:	0151      	lsls	r1, r2, #5
 800d91e:	68fa      	ldr	r2, [r7, #12]
 800d920:	440a      	add	r2, r1
 800d922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d926:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d92a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d92e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	695b      	ldr	r3, [r3, #20]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d003      	beq.n	800d940 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	689a      	ldr	r2, [r3, #8]
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	015a      	lsls	r2, r3, #5
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	4413      	add	r3, r2
 800d948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d94c:	691b      	ldr	r3, [r3, #16]
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	0151      	lsls	r1, r2, #5
 800d952:	68fa      	ldr	r2, [r7, #12]
 800d954:	440a      	add	r2, r1
 800d956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d95a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d95e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	015a      	lsls	r2, r3, #5
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	4413      	add	r3, r2
 800d968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d96c:	691a      	ldr	r2, [r3, #16]
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d976:	68b9      	ldr	r1, [r7, #8]
 800d978:	0148      	lsls	r0, r1, #5
 800d97a:	68f9      	ldr	r1, [r7, #12]
 800d97c:	4401      	add	r1, r0
 800d97e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d982:	4313      	orrs	r3, r2
 800d984:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	015a      	lsls	r2, r3, #5
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	4413      	add	r3, r2
 800d98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	0151      	lsls	r1, r2, #5
 800d998:	68fa      	ldr	r2, [r7, #12]
 800d99a:	440a      	add	r2, r1
 800d99c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d9a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3714      	adds	r7, #20
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b089      	sub	sp, #36	; 0x24
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	4611      	mov	r1, r2
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	71fb      	strb	r3, [r7, #7]
 800d9c6:	4613      	mov	r3, r2
 800d9c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800d9d2:	88bb      	ldrh	r3, [r7, #4]
 800d9d4:	3303      	adds	r3, #3
 800d9d6:	089b      	lsrs	r3, r3, #2
 800d9d8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800d9da:	2300      	movs	r3, #0
 800d9dc:	61bb      	str	r3, [r7, #24]
 800d9de:	e00f      	b.n	800da00 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d9e0:	79fb      	ldrb	r3, [r7, #7]
 800d9e2:	031a      	lsls	r2, r3, #12
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	4413      	add	r3, r2
 800d9e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	6013      	str	r3, [r2, #0]
    pSrc++;
 800d9f4:	69fb      	ldr	r3, [r7, #28]
 800d9f6:	3304      	adds	r3, #4
 800d9f8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	61bb      	str	r3, [r7, #24]
 800da00:	69ba      	ldr	r2, [r7, #24]
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	429a      	cmp	r2, r3
 800da06:	d3eb      	bcc.n	800d9e0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800da08:	2300      	movs	r3, #0
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3724      	adds	r7, #36	; 0x24
 800da0e:	46bd      	mov	sp, r7
 800da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da14:	4770      	bx	lr

0800da16 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800da16:	b480      	push	{r7}
 800da18:	b089      	sub	sp, #36	; 0x24
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	60f8      	str	r0, [r7, #12]
 800da1e:	60b9      	str	r1, [r7, #8]
 800da20:	4613      	mov	r3, r2
 800da22:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800da2c:	88fb      	ldrh	r3, [r7, #6]
 800da2e:	3303      	adds	r3, #3
 800da30:	089b      	lsrs	r3, r3, #2
 800da32:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800da34:	2300      	movs	r3, #0
 800da36:	61bb      	str	r3, [r7, #24]
 800da38:	e00b      	b.n	800da52 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	601a      	str	r2, [r3, #0]
    pDest++;
 800da46:	69fb      	ldr	r3, [r7, #28]
 800da48:	3304      	adds	r3, #4
 800da4a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	3301      	adds	r3, #1
 800da50:	61bb      	str	r3, [r7, #24]
 800da52:	69ba      	ldr	r2, [r7, #24]
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	429a      	cmp	r2, r3
 800da58:	d3ef      	bcc.n	800da3a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800da5a:	69fb      	ldr	r3, [r7, #28]
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3724      	adds	r7, #36	; 0x24
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr

0800da68 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800da68:	b480      	push	{r7}
 800da6a:	b085      	sub	sp, #20
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	785b      	ldrb	r3, [r3, #1]
 800da80:	2b01      	cmp	r3, #1
 800da82:	d12c      	bne.n	800dade <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	015a      	lsls	r2, r3, #5
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	4413      	add	r3, r2
 800da8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	db12      	blt.n	800dabc <USB_EPSetStall+0x54>
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d00f      	beq.n	800dabc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	015a      	lsls	r2, r3, #5
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	4413      	add	r3, r2
 800daa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	68ba      	ldr	r2, [r7, #8]
 800daac:	0151      	lsls	r1, r2, #5
 800daae:	68fa      	ldr	r2, [r7, #12]
 800dab0:	440a      	add	r2, r1
 800dab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dab6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800daba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	015a      	lsls	r2, r3, #5
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	4413      	add	r3, r2
 800dac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	68ba      	ldr	r2, [r7, #8]
 800dacc:	0151      	lsls	r1, r2, #5
 800dace:	68fa      	ldr	r2, [r7, #12]
 800dad0:	440a      	add	r2, r1
 800dad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dad6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dada:	6013      	str	r3, [r2, #0]
 800dadc:	e02b      	b.n	800db36 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	015a      	lsls	r2, r3, #5
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	4413      	add	r3, r2
 800dae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	db12      	blt.n	800db16 <USB_EPSetStall+0xae>
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00f      	beq.n	800db16 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	015a      	lsls	r2, r3, #5
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	4413      	add	r3, r2
 800dafe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	68ba      	ldr	r2, [r7, #8]
 800db06:	0151      	lsls	r1, r2, #5
 800db08:	68fa      	ldr	r2, [r7, #12]
 800db0a:	440a      	add	r2, r1
 800db0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800db14:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	015a      	lsls	r2, r3, #5
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	4413      	add	r3, r2
 800db1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	68ba      	ldr	r2, [r7, #8]
 800db26:	0151      	lsls	r1, r2, #5
 800db28:	68fa      	ldr	r2, [r7, #12]
 800db2a:	440a      	add	r2, r1
 800db2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800db34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db36:	2300      	movs	r3, #0
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3714      	adds	r7, #20
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr

0800db44 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800db44:	b480      	push	{r7}
 800db46:	b085      	sub	sp, #20
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	785b      	ldrb	r3, [r3, #1]
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d128      	bne.n	800dbb2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	015a      	lsls	r2, r3, #5
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	4413      	add	r3, r2
 800db68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	0151      	lsls	r1, r2, #5
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	440a      	add	r2, r1
 800db76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800db7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	78db      	ldrb	r3, [r3, #3]
 800db84:	2b03      	cmp	r3, #3
 800db86:	d003      	beq.n	800db90 <USB_EPClearStall+0x4c>
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	78db      	ldrb	r3, [r3, #3]
 800db8c:	2b02      	cmp	r3, #2
 800db8e:	d138      	bne.n	800dc02 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	015a      	lsls	r2, r3, #5
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	4413      	add	r3, r2
 800db98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	68ba      	ldr	r2, [r7, #8]
 800dba0:	0151      	lsls	r1, r2, #5
 800dba2:	68fa      	ldr	r2, [r7, #12]
 800dba4:	440a      	add	r2, r1
 800dba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbae:	6013      	str	r3, [r2, #0]
 800dbb0:	e027      	b.n	800dc02 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	015a      	lsls	r2, r3, #5
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	4413      	add	r3, r2
 800dbba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	68ba      	ldr	r2, [r7, #8]
 800dbc2:	0151      	lsls	r1, r2, #5
 800dbc4:	68fa      	ldr	r2, [r7, #12]
 800dbc6:	440a      	add	r2, r1
 800dbc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dbd0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	78db      	ldrb	r3, [r3, #3]
 800dbd6:	2b03      	cmp	r3, #3
 800dbd8:	d003      	beq.n	800dbe2 <USB_EPClearStall+0x9e>
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	78db      	ldrb	r3, [r3, #3]
 800dbde:	2b02      	cmp	r3, #2
 800dbe0:	d10f      	bne.n	800dc02 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	015a      	lsls	r2, r3, #5
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	4413      	add	r3, r2
 800dbea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	68ba      	ldr	r2, [r7, #8]
 800dbf2:	0151      	lsls	r1, r2, #5
 800dbf4:	68fa      	ldr	r2, [r7, #12]
 800dbf6:	440a      	add	r2, r1
 800dbf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc00:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dc02:	2300      	movs	r3, #0
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3714      	adds	r7, #20
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr

0800dc10 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b085      	sub	sp, #20
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	460b      	mov	r3, r1
 800dc1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	68fa      	ldr	r2, [r7, #12]
 800dc2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800dc32:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	78fb      	ldrb	r3, [r7, #3]
 800dc3e:	011b      	lsls	r3, r3, #4
 800dc40:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800dc44:	68f9      	ldr	r1, [r7, #12]
 800dc46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3714      	adds	r7, #20
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr

0800dc5c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b085      	sub	sp, #20
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	68fa      	ldr	r2, [r7, #12]
 800dc72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dc76:	f023 0303 	bic.w	r3, r3, #3
 800dc7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	68fa      	ldr	r2, [r7, #12]
 800dc86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc8a:	f023 0302 	bic.w	r3, r3, #2
 800dc8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dc90:	2300      	movs	r3, #0
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3714      	adds	r7, #20
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr

0800dc9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dc9e:	b480      	push	{r7}
 800dca0:	b085      	sub	sp, #20
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	68fa      	ldr	r2, [r7, #12]
 800dcb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dcb8:	f023 0303 	bic.w	r3, r3, #3
 800dcbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	68fa      	ldr	r2, [r7, #12]
 800dcc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dccc:	f043 0302 	orr.w	r3, r3, #2
 800dcd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3714      	adds	r7, #20
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr

0800dce0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	695b      	ldr	r3, [r3, #20]
 800dcec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	699b      	ldr	r3, [r3, #24]
 800dcf2:	68fa      	ldr	r2, [r7, #12]
 800dcf4:	4013      	ands	r3, r2
 800dcf6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3714      	adds	r7, #20
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr

0800dd06 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd06:	b480      	push	{r7}
 800dd08:	b085      	sub	sp, #20
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd18:	699b      	ldr	r3, [r3, #24]
 800dd1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd22:	69db      	ldr	r3, [r3, #28]
 800dd24:	68ba      	ldr	r2, [r7, #8]
 800dd26:	4013      	ands	r3, r2
 800dd28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	0c1b      	lsrs	r3, r3, #16
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3714      	adds	r7, #20
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr

0800dd3a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	b085      	sub	sp, #20
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd4c:	699b      	ldr	r3, [r3, #24]
 800dd4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd56:	69db      	ldr	r3, [r3, #28]
 800dd58:	68ba      	ldr	r2, [r7, #8]
 800dd5a:	4013      	ands	r3, r2
 800dd5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	b29b      	uxth	r3, r3
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3714      	adds	r7, #20
 800dd66:	46bd      	mov	sp, r7
 800dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6c:	4770      	bx	lr

0800dd6e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dd6e:	b480      	push	{r7}
 800dd70:	b085      	sub	sp, #20
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
 800dd76:	460b      	mov	r3, r1
 800dd78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dd7e:	78fb      	ldrb	r3, [r7, #3]
 800dd80:	015a      	lsls	r2, r3, #5
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	4413      	add	r3, r2
 800dd86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd8a:	689b      	ldr	r3, [r3, #8]
 800dd8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd94:	695b      	ldr	r3, [r3, #20]
 800dd96:	68ba      	ldr	r2, [r7, #8]
 800dd98:	4013      	ands	r3, r2
 800dd9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dd9c:	68bb      	ldr	r3, [r7, #8]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3714      	adds	r7, #20
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr

0800ddaa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ddaa:	b480      	push	{r7}
 800ddac:	b087      	sub	sp, #28
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddc0:	691b      	ldr	r3, [r3, #16]
 800ddc2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddcc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ddce:	78fb      	ldrb	r3, [r7, #3]
 800ddd0:	f003 030f 	and.w	r3, r3, #15
 800ddd4:	68fa      	ldr	r2, [r7, #12]
 800ddd6:	fa22 f303 	lsr.w	r3, r2, r3
 800ddda:	01db      	lsls	r3, r3, #7
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	693a      	ldr	r2, [r7, #16]
 800dde0:	4313      	orrs	r3, r2
 800dde2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dde4:	78fb      	ldrb	r3, [r7, #3]
 800dde6:	015a      	lsls	r2, r3, #5
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	4413      	add	r3, r2
 800ddec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	693a      	ldr	r2, [r7, #16]
 800ddf4:	4013      	ands	r3, r2
 800ddf6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ddf8:	68bb      	ldr	r3, [r7, #8]
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	371c      	adds	r7, #28
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr

0800de06 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800de06:	b480      	push	{r7}
 800de08:	b083      	sub	sp, #12
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	695b      	ldr	r3, [r3, #20]
 800de12:	f003 0301 	and.w	r3, r3, #1
}
 800de16:	4618      	mov	r0, r3
 800de18:	370c      	adds	r7, #12
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr

0800de22 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800de22:	b480      	push	{r7}
 800de24:	b085      	sub	sp, #20
 800de26:	af00      	add	r7, sp, #0
 800de28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de3c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800de40:	f023 0307 	bic.w	r3, r3, #7
 800de44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	68fa      	ldr	r2, [r7, #12]
 800de50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800de5a:	2300      	movs	r3, #0
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3714      	adds	r7, #20
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr

0800de68 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800de68:	b480      	push	{r7}
 800de6a:	b085      	sub	sp, #20
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	333c      	adds	r3, #60	; 0x3c
 800de7a:	3304      	adds	r3, #4
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	4a1c      	ldr	r2, [pc, #112]	; (800def4 <USB_EP0_OutStart+0x8c>)
 800de84:	4293      	cmp	r3, r2
 800de86:	d90a      	bls.n	800de9e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de98:	d101      	bne.n	800de9e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800de9a:	2300      	movs	r3, #0
 800de9c:	e024      	b.n	800dee8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dea4:	461a      	mov	r2, r3
 800dea6:	2300      	movs	r3, #0
 800dea8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deb0:	691b      	ldr	r3, [r3, #16]
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800deb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800debc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dec4:	691b      	ldr	r3, [r3, #16]
 800dec6:	68fa      	ldr	r2, [r7, #12]
 800dec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800decc:	f043 0318 	orr.w	r3, r3, #24
 800ded0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ded8:	691b      	ldr	r3, [r3, #16]
 800deda:	68fa      	ldr	r2, [r7, #12]
 800dedc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dee0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800dee4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800dee6:	2300      	movs	r3, #0
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3714      	adds	r7, #20
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr
 800def4:	4f54300a 	.word	0x4f54300a

0800def8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800def8:	b480      	push	{r7}
 800defa:	b085      	sub	sp, #20
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800df00:	2300      	movs	r3, #0
 800df02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	3301      	adds	r3, #1
 800df08:	60fb      	str	r3, [r7, #12]
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	4a13      	ldr	r2, [pc, #76]	; (800df5c <USB_CoreReset+0x64>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d901      	bls.n	800df16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800df12:	2303      	movs	r3, #3
 800df14:	e01b      	b.n	800df4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	691b      	ldr	r3, [r3, #16]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	daf2      	bge.n	800df04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800df1e:	2300      	movs	r3, #0
 800df20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	691b      	ldr	r3, [r3, #16]
 800df26:	f043 0201 	orr.w	r2, r3, #1
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	3301      	adds	r3, #1
 800df32:	60fb      	str	r3, [r7, #12]
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	4a09      	ldr	r2, [pc, #36]	; (800df5c <USB_CoreReset+0x64>)
 800df38:	4293      	cmp	r3, r2
 800df3a:	d901      	bls.n	800df40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800df3c:	2303      	movs	r3, #3
 800df3e:	e006      	b.n	800df4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	691b      	ldr	r3, [r3, #16]
 800df44:	f003 0301 	and.w	r3, r3, #1
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d0f0      	beq.n	800df2e <USB_CoreReset+0x36>

  return HAL_OK;
 800df4c:	2300      	movs	r3, #0
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3714      	adds	r7, #20
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop
 800df5c:	00030d40 	.word	0x00030d40

0800df60 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	460b      	mov	r3, r1
 800df6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800df6c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800df70:	f004 f842 	bl	8011ff8 <malloc>
 800df74:	4603      	mov	r3, r0
 800df76:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d105      	bne.n	800df8a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2200      	movs	r2, #0
 800df82:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800df86:	2302      	movs	r3, #2
 800df88:	e066      	b.n	800e058 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	7c1b      	ldrb	r3, [r3, #16]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d119      	bne.n	800dfce <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800df9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df9e:	2202      	movs	r2, #2
 800dfa0:	2181      	movs	r1, #129	; 0x81
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f002 f812 	bl	800ffcc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2201      	movs	r2, #1
 800dfac:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dfae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfb2:	2202      	movs	r2, #2
 800dfb4:	2101      	movs	r1, #1
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f002 f808 	bl	800ffcc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2210      	movs	r2, #16
 800dfc8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800dfcc:	e016      	b.n	800dffc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dfce:	2340      	movs	r3, #64	; 0x40
 800dfd0:	2202      	movs	r2, #2
 800dfd2:	2181      	movs	r1, #129	; 0x81
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f001 fff9 	bl	800ffcc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2201      	movs	r2, #1
 800dfde:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dfe0:	2340      	movs	r3, #64	; 0x40
 800dfe2:	2202      	movs	r2, #2
 800dfe4:	2101      	movs	r1, #1
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f001 fff0 	bl	800ffcc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2201      	movs	r2, #1
 800dff0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2210      	movs	r2, #16
 800dff8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dffc:	2308      	movs	r3, #8
 800dffe:	2203      	movs	r2, #3
 800e000:	2182      	movs	r1, #130	; 0x82
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f001 ffe2 	bl	800ffcc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2201      	movs	r2, #1
 800e00c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2200      	movs	r2, #0
 800e01e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2200      	movs	r2, #0
 800e026:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	7c1b      	ldrb	r3, [r3, #16]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d109      	bne.n	800e046 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e03c:	2101      	movs	r1, #1
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f002 f93e 	bl	80102c0 <USBD_LL_PrepareReceive>
 800e044:	e007      	b.n	800e056 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e04c:	2340      	movs	r3, #64	; 0x40
 800e04e:	2101      	movs	r1, #1
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f002 f935 	bl	80102c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e056:	2300      	movs	r3, #0
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3710      	adds	r7, #16
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	460b      	mov	r3, r1
 800e06a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e06c:	2181      	movs	r1, #129	; 0x81
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f001 ffea 	bl	8010048 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2200      	movs	r2, #0
 800e078:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e07a:	2101      	movs	r1, #1
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f001 ffe3 	bl	8010048 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e08a:	2182      	movs	r1, #130	; 0x82
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f001 ffdb 	bl	8010048 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2200      	movs	r2, #0
 800e096:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2200      	movs	r2, #0
 800e09e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00e      	beq.n	800e0ca <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f003 ffa3 	bl	8012008 <free>
    pdev->pClassData = NULL;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e0ca:	2300      	movs	r3, #0
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3708      	adds	r7, #8
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b086      	sub	sp, #24
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0e4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d03a      	beq.n	800e174 <USBD_CDC_Setup+0xa0>
 800e0fe:	2b20      	cmp	r3, #32
 800e100:	f040 8097 	bne.w	800e232 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	88db      	ldrh	r3, [r3, #6]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d029      	beq.n	800e160 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	b25b      	sxtb	r3, r3
 800e112:	2b00      	cmp	r3, #0
 800e114:	da11      	bge.n	800e13a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e11c:	689b      	ldr	r3, [r3, #8]
 800e11e:	683a      	ldr	r2, [r7, #0]
 800e120:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e122:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e124:	683a      	ldr	r2, [r7, #0]
 800e126:	88d2      	ldrh	r2, [r2, #6]
 800e128:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e12a:	6939      	ldr	r1, [r7, #16]
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	88db      	ldrh	r3, [r3, #6]
 800e130:	461a      	mov	r2, r3
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f001 facf 	bl	800f6d6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e138:	e082      	b.n	800e240 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	785a      	ldrb	r2, [r3, #1]
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	88db      	ldrh	r3, [r3, #6]
 800e148:	b2da      	uxtb	r2, r3
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e150:	6939      	ldr	r1, [r7, #16]
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	88db      	ldrh	r3, [r3, #6]
 800e156:	461a      	mov	r2, r3
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f001 fae8 	bl	800f72e <USBD_CtlPrepareRx>
      break;
 800e15e:	e06f      	b.n	800e240 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	683a      	ldr	r2, [r7, #0]
 800e16a:	7850      	ldrb	r0, [r2, #1]
 800e16c:	2200      	movs	r2, #0
 800e16e:	6839      	ldr	r1, [r7, #0]
 800e170:	4798      	blx	r3
      break;
 800e172:	e065      	b.n	800e240 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	785b      	ldrb	r3, [r3, #1]
 800e178:	2b0b      	cmp	r3, #11
 800e17a:	d84f      	bhi.n	800e21c <USBD_CDC_Setup+0x148>
 800e17c:	a201      	add	r2, pc, #4	; (adr r2, 800e184 <USBD_CDC_Setup+0xb0>)
 800e17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e182:	bf00      	nop
 800e184:	0800e1b5 	.word	0x0800e1b5
 800e188:	0800e22b 	.word	0x0800e22b
 800e18c:	0800e21d 	.word	0x0800e21d
 800e190:	0800e21d 	.word	0x0800e21d
 800e194:	0800e21d 	.word	0x0800e21d
 800e198:	0800e21d 	.word	0x0800e21d
 800e19c:	0800e21d 	.word	0x0800e21d
 800e1a0:	0800e21d 	.word	0x0800e21d
 800e1a4:	0800e21d 	.word	0x0800e21d
 800e1a8:	0800e21d 	.word	0x0800e21d
 800e1ac:	0800e1dd 	.word	0x0800e1dd
 800e1b0:	0800e205 	.word	0x0800e205
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1ba:	2b03      	cmp	r3, #3
 800e1bc:	d107      	bne.n	800e1ce <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e1be:	f107 030c 	add.w	r3, r7, #12
 800e1c2:	2202      	movs	r2, #2
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f001 fa85 	bl	800f6d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e1cc:	e030      	b.n	800e230 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800e1ce:	6839      	ldr	r1, [r7, #0]
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f001 fa0f 	bl	800f5f4 <USBD_CtlError>
            ret = USBD_FAIL;
 800e1d6:	2303      	movs	r3, #3
 800e1d8:	75fb      	strb	r3, [r7, #23]
          break;
 800e1da:	e029      	b.n	800e230 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1e2:	2b03      	cmp	r3, #3
 800e1e4:	d107      	bne.n	800e1f6 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e1e6:	f107 030f 	add.w	r3, r7, #15
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f001 fa71 	bl	800f6d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e1f4:	e01c      	b.n	800e230 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800e1f6:	6839      	ldr	r1, [r7, #0]
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f001 f9fb 	bl	800f5f4 <USBD_CtlError>
            ret = USBD_FAIL;
 800e1fe:	2303      	movs	r3, #3
 800e200:	75fb      	strb	r3, [r7, #23]
          break;
 800e202:	e015      	b.n	800e230 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e20a:	2b03      	cmp	r3, #3
 800e20c:	d00f      	beq.n	800e22e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800e20e:	6839      	ldr	r1, [r7, #0]
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f001 f9ef 	bl	800f5f4 <USBD_CtlError>
            ret = USBD_FAIL;
 800e216:	2303      	movs	r3, #3
 800e218:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e21a:	e008      	b.n	800e22e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e21c:	6839      	ldr	r1, [r7, #0]
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f001 f9e8 	bl	800f5f4 <USBD_CtlError>
          ret = USBD_FAIL;
 800e224:	2303      	movs	r3, #3
 800e226:	75fb      	strb	r3, [r7, #23]
          break;
 800e228:	e002      	b.n	800e230 <USBD_CDC_Setup+0x15c>
          break;
 800e22a:	bf00      	nop
 800e22c:	e008      	b.n	800e240 <USBD_CDC_Setup+0x16c>
          break;
 800e22e:	bf00      	nop
      }
      break;
 800e230:	e006      	b.n	800e240 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800e232:	6839      	ldr	r1, [r7, #0]
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f001 f9dd 	bl	800f5f4 <USBD_CtlError>
      ret = USBD_FAIL;
 800e23a:	2303      	movs	r3, #3
 800e23c:	75fb      	strb	r3, [r7, #23]
      break;
 800e23e:	bf00      	nop
  }

  return (uint8_t)ret;
 800e240:	7dfb      	ldrb	r3, [r7, #23]
}
 800e242:	4618      	mov	r0, r3
 800e244:	3718      	adds	r7, #24
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop

0800e24c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	460b      	mov	r3, r1
 800e256:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e25e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e266:	2b00      	cmp	r3, #0
 800e268:	d101      	bne.n	800e26e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e26a:	2303      	movs	r3, #3
 800e26c:	e04f      	b.n	800e30e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e274:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e276:	78fa      	ldrb	r2, [r7, #3]
 800e278:	6879      	ldr	r1, [r7, #4]
 800e27a:	4613      	mov	r3, r2
 800e27c:	009b      	lsls	r3, r3, #2
 800e27e:	4413      	add	r3, r2
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	440b      	add	r3, r1
 800e284:	3318      	adds	r3, #24
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d029      	beq.n	800e2e0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e28c:	78fa      	ldrb	r2, [r7, #3]
 800e28e:	6879      	ldr	r1, [r7, #4]
 800e290:	4613      	mov	r3, r2
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	4413      	add	r3, r2
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	440b      	add	r3, r1
 800e29a:	3318      	adds	r3, #24
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	78f9      	ldrb	r1, [r7, #3]
 800e2a0:	68f8      	ldr	r0, [r7, #12]
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	00db      	lsls	r3, r3, #3
 800e2a6:	1a5b      	subs	r3, r3, r1
 800e2a8:	009b      	lsls	r3, r3, #2
 800e2aa:	4403      	add	r3, r0
 800e2ac:	3344      	adds	r3, #68	; 0x44
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	fbb2 f1f3 	udiv	r1, r2, r3
 800e2b4:	fb03 f301 	mul.w	r3, r3, r1
 800e2b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d110      	bne.n	800e2e0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e2be:	78fa      	ldrb	r2, [r7, #3]
 800e2c0:	6879      	ldr	r1, [r7, #4]
 800e2c2:	4613      	mov	r3, r2
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	4413      	add	r3, r2
 800e2c8:	009b      	lsls	r3, r3, #2
 800e2ca:	440b      	add	r3, r1
 800e2cc:	3318      	adds	r3, #24
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e2d2:	78f9      	ldrb	r1, [r7, #3]
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f001 ffb9 	bl	8010250 <USBD_LL_Transmit>
 800e2de:	e015      	b.n	800e30c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2ee:	691b      	ldr	r3, [r3, #16]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d00b      	beq.n	800e30c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2fa:	691b      	ldr	r3, [r3, #16]
 800e2fc:	68ba      	ldr	r2, [r7, #8]
 800e2fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e302:	68ba      	ldr	r2, [r7, #8]
 800e304:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e308:	78fa      	ldrb	r2, [r7, #3]
 800e30a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e30c:	2300      	movs	r3, #0
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}

0800e316 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e316:	b580      	push	{r7, lr}
 800e318:	b084      	sub	sp, #16
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	6078      	str	r0, [r7, #4]
 800e31e:	460b      	mov	r3, r1
 800e320:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e328:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e330:	2b00      	cmp	r3, #0
 800e332:	d101      	bne.n	800e338 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e334:	2303      	movs	r3, #3
 800e336:	e015      	b.n	800e364 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e338:	78fb      	ldrb	r3, [r7, #3]
 800e33a:	4619      	mov	r1, r3
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f001 fff7 	bl	8010330 <USBD_LL_GetRxDataSize>
 800e342:	4602      	mov	r2, r0
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e358:	68fa      	ldr	r2, [r7, #12]
 800e35a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e35e:	4611      	mov	r1, r2
 800e360:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e362:	2300      	movs	r3, #0
}
 800e364:	4618      	mov	r0, r3
 800e366:	3710      	adds	r7, #16
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e37a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e382:	2b00      	cmp	r3, #0
 800e384:	d015      	beq.n	800e3b2 <USBD_CDC_EP0_RxReady+0x46>
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e38c:	2bff      	cmp	r3, #255	; 0xff
 800e38e:	d010      	beq.n	800e3b2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e396:	689b      	ldr	r3, [r3, #8]
 800e398:	68fa      	ldr	r2, [r7, #12]
 800e39a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e39e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e3a6:	b292      	uxth	r2, r2
 800e3a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	22ff      	movs	r2, #255	; 0xff
 800e3ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e3b2:	2300      	movs	r3, #0
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3710      	adds	r7, #16
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2243      	movs	r2, #67	; 0x43
 800e3c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e3ca:	4b03      	ldr	r3, [pc, #12]	; (800e3d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	370c      	adds	r7, #12
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr
 800e3d8:	20000094 	.word	0x20000094

0800e3dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2243      	movs	r2, #67	; 0x43
 800e3e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e3ea:	4b03      	ldr	r3, [pc, #12]	; (800e3f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	370c      	adds	r7, #12
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr
 800e3f8:	20000050 	.word	0x20000050

0800e3fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b083      	sub	sp, #12
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2243      	movs	r2, #67	; 0x43
 800e408:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e40a:	4b03      	ldr	r3, [pc, #12]	; (800e418 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	370c      	adds	r7, #12
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr
 800e418:	200000d8 	.word	0x200000d8

0800e41c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	220a      	movs	r2, #10
 800e428:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e42a:	4b03      	ldr	r3, [pc, #12]	; (800e438 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	370c      	adds	r7, #12
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr
 800e438:	2000000c 	.word	0x2000000c

0800e43c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b083      	sub	sp, #12
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d101      	bne.n	800e450 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e44c:	2303      	movs	r3, #3
 800e44e:	e004      	b.n	800e45a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	683a      	ldr	r2, [r7, #0]
 800e454:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e458:	2300      	movs	r3, #0
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	370c      	adds	r7, #12
 800e45e:	46bd      	mov	sp, r7
 800e460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e464:	4770      	bx	lr

0800e466 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e466:	b480      	push	{r7}
 800e468:	b087      	sub	sp, #28
 800e46a:	af00      	add	r7, sp, #0
 800e46c:	60f8      	str	r0, [r7, #12]
 800e46e:	60b9      	str	r1, [r7, #8]
 800e470:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e478:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	68ba      	ldr	r2, [r7, #8]
 800e47e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e48a:	2300      	movs	r3, #0
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	371c      	adds	r7, #28
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr

0800e498 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e498:	b480      	push	{r7}
 800e49a:	b085      	sub	sp, #20
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4a8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	683a      	ldr	r2, [r7, #0]
 800e4ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e4b2:	2300      	movs	r3, #0
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3714      	adds	r7, #20
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr

0800e4c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d101      	bne.n	800e4e2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e4de:	2303      	movs	r3, #3
 800e4e0:	e01a      	b.n	800e518 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d114      	bne.n	800e516 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e50a:	2181      	movs	r1, #129	; 0x81
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f001 fe9f 	bl	8010250 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e512:	2300      	movs	r3, #0
 800e514:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e516:	7bfb      	ldrb	r3, [r7, #15]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3710      	adds	r7, #16
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e52e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e536:	2b00      	cmp	r3, #0
 800e538:	d101      	bne.n	800e53e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e53a:	2303      	movs	r3, #3
 800e53c:	e016      	b.n	800e56c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	7c1b      	ldrb	r3, [r3, #16]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d109      	bne.n	800e55a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e54c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e550:	2101      	movs	r1, #1
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f001 feb4 	bl	80102c0 <USBD_LL_PrepareReceive>
 800e558:	e007      	b.n	800e56a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e560:	2340      	movs	r3, #64	; 0x40
 800e562:	2101      	movs	r1, #1
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f001 feab 	bl	80102c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e56a:	2300      	movs	r3, #0
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3710      	adds	r7, #16
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af00      	add	r7, sp, #0
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	60b9      	str	r1, [r7, #8]
 800e57e:	4613      	mov	r3, r2
 800e580:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d101      	bne.n	800e58c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e588:	2303      	movs	r3, #3
 800e58a:	e01f      	b.n	800e5cc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	2200      	movs	r2, #0
 800e590:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	2200      	movs	r2, #0
 800e598:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d003      	beq.n	800e5b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	68ba      	ldr	r2, [r7, #8]
 800e5ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	2201      	movs	r2, #1
 800e5b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	79fa      	ldrb	r2, [r7, #7]
 800e5be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	f001 fc87 	bl	800fed4 <USBD_LL_Init>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e5ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3718      	adds	r7, #24
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}

0800e5d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b084      	sub	sp, #16
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d101      	bne.n	800e5ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e5e8:	2303      	movs	r3, #3
 800e5ea:	e016      	b.n	800e61a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	683a      	ldr	r2, [r7, #0]
 800e5f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d00b      	beq.n	800e618 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e608:	f107 020e 	add.w	r2, r7, #14
 800e60c:	4610      	mov	r0, r2
 800e60e:	4798      	blx	r3
 800e610:	4602      	mov	r2, r0
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e618:	2300      	movs	r3, #0
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3710      	adds	r7, #16
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}

0800e622 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e622:	b580      	push	{r7, lr}
 800e624:	b082      	sub	sp, #8
 800e626:	af00      	add	r7, sp, #0
 800e628:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f001 fc9c 	bl	800ff68 <USBD_LL_Start>
 800e630:	4603      	mov	r3, r0
}
 800e632:	4618      	mov	r0, r3
 800e634:	3708      	adds	r7, #8
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e63a:	b480      	push	{r7}
 800e63c:	b083      	sub	sp, #12
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e642:	2300      	movs	r3, #0
}
 800e644:	4618      	mov	r0, r3
 800e646:	370c      	adds	r7, #12
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr

0800e650 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	460b      	mov	r3, r1
 800e65a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e65c:	2303      	movs	r3, #3
 800e65e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e666:	2b00      	cmp	r3, #0
 800e668:	d009      	beq.n	800e67e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	78fa      	ldrb	r2, [r7, #3]
 800e674:	4611      	mov	r1, r2
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	4798      	blx	r3
 800e67a:	4603      	mov	r3, r0
 800e67c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e680:	4618      	mov	r0, r3
 800e682:	3710      	adds	r7, #16
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	460b      	mov	r3, r1
 800e692:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d007      	beq.n	800e6ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	78fa      	ldrb	r2, [r7, #3]
 800e6a8:	4611      	mov	r1, r2
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	4798      	blx	r3
  }

  return USBD_OK;
 800e6ae:	2300      	movs	r3, #0
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3708      	adds	r7, #8
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e6c8:	6839      	ldr	r1, [r7, #0]
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f000 ff58 	bl	800f580 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e6de:	461a      	mov	r2, r3
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e6ec:	f003 031f 	and.w	r3, r3, #31
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d00e      	beq.n	800e712 <USBD_LL_SetupStage+0x5a>
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d302      	bcc.n	800e6fe <USBD_LL_SetupStage+0x46>
 800e6f8:	2b02      	cmp	r3, #2
 800e6fa:	d014      	beq.n	800e726 <USBD_LL_SetupStage+0x6e>
 800e6fc:	e01d      	b.n	800e73a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e704:	4619      	mov	r1, r3
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 fa18 	bl	800eb3c <USBD_StdDevReq>
 800e70c:	4603      	mov	r3, r0
 800e70e:	73fb      	strb	r3, [r7, #15]
      break;
 800e710:	e020      	b.n	800e754 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e718:	4619      	mov	r1, r3
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f000 fa7c 	bl	800ec18 <USBD_StdItfReq>
 800e720:	4603      	mov	r3, r0
 800e722:	73fb      	strb	r3, [r7, #15]
      break;
 800e724:	e016      	b.n	800e754 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e72c:	4619      	mov	r1, r3
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f000 fab8 	bl	800eca4 <USBD_StdEPReq>
 800e734:	4603      	mov	r3, r0
 800e736:	73fb      	strb	r3, [r7, #15]
      break;
 800e738:	e00c      	b.n	800e754 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e740:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e744:	b2db      	uxtb	r3, r3
 800e746:	4619      	mov	r1, r3
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f001 fcb3 	bl	80100b4 <USBD_LL_StallEP>
 800e74e:	4603      	mov	r3, r0
 800e750:	73fb      	strb	r3, [r7, #15]
      break;
 800e752:	bf00      	nop
  }

  return ret;
 800e754:	7bfb      	ldrb	r3, [r7, #15]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3710      	adds	r7, #16
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e75e:	b580      	push	{r7, lr}
 800e760:	b086      	sub	sp, #24
 800e762:	af00      	add	r7, sp, #0
 800e764:	60f8      	str	r0, [r7, #12]
 800e766:	460b      	mov	r3, r1
 800e768:	607a      	str	r2, [r7, #4]
 800e76a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e76c:	7afb      	ldrb	r3, [r7, #11]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d137      	bne.n	800e7e2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e778:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e780:	2b03      	cmp	r3, #3
 800e782:	d14a      	bne.n	800e81a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	689a      	ldr	r2, [r3, #8]
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	68db      	ldr	r3, [r3, #12]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d913      	bls.n	800e7b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	689a      	ldr	r2, [r3, #8]
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	68db      	ldr	r3, [r3, #12]
 800e798:	1ad2      	subs	r2, r2, r3
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	68da      	ldr	r2, [r3, #12]
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	689b      	ldr	r3, [r3, #8]
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	bf28      	it	cs
 800e7aa:	4613      	movcs	r3, r2
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	6879      	ldr	r1, [r7, #4]
 800e7b0:	68f8      	ldr	r0, [r7, #12]
 800e7b2:	f000 ffd9 	bl	800f768 <USBD_CtlContinueRx>
 800e7b6:	e030      	b.n	800e81a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7be:	691b      	ldr	r3, [r3, #16]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d00a      	beq.n	800e7da <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e7ca:	2b03      	cmp	r3, #3
 800e7cc:	d105      	bne.n	800e7da <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7d4:	691b      	ldr	r3, [r3, #16]
 800e7d6:	68f8      	ldr	r0, [r7, #12]
 800e7d8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e7da:	68f8      	ldr	r0, [r7, #12]
 800e7dc:	f000 ffd5 	bl	800f78a <USBD_CtlSendStatus>
 800e7e0:	e01b      	b.n	800e81a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7e8:	699b      	ldr	r3, [r3, #24]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d013      	beq.n	800e816 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e7f4:	2b03      	cmp	r3, #3
 800e7f6:	d10e      	bne.n	800e816 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7fe:	699b      	ldr	r3, [r3, #24]
 800e800:	7afa      	ldrb	r2, [r7, #11]
 800e802:	4611      	mov	r1, r2
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	4798      	blx	r3
 800e808:	4603      	mov	r3, r0
 800e80a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e80c:	7dfb      	ldrb	r3, [r7, #23]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d003      	beq.n	800e81a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e812:	7dfb      	ldrb	r3, [r7, #23]
 800e814:	e002      	b.n	800e81c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e816:	2303      	movs	r3, #3
 800e818:	e000      	b.n	800e81c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e81a:	2300      	movs	r3, #0
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	3718      	adds	r7, #24
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b086      	sub	sp, #24
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	460b      	mov	r3, r1
 800e82e:	607a      	str	r2, [r7, #4]
 800e830:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e832:	7afb      	ldrb	r3, [r7, #11]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d16a      	bne.n	800e90e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	3314      	adds	r3, #20
 800e83c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e844:	2b02      	cmp	r3, #2
 800e846:	d155      	bne.n	800e8f4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	689a      	ldr	r2, [r3, #8]
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	68db      	ldr	r3, [r3, #12]
 800e850:	429a      	cmp	r2, r3
 800e852:	d914      	bls.n	800e87e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	689a      	ldr	r2, [r3, #8]
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	68db      	ldr	r3, [r3, #12]
 800e85c:	1ad2      	subs	r2, r2, r3
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	689b      	ldr	r3, [r3, #8]
 800e866:	461a      	mov	r2, r3
 800e868:	6879      	ldr	r1, [r7, #4]
 800e86a:	68f8      	ldr	r0, [r7, #12]
 800e86c:	f000 ff4e 	bl	800f70c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e870:	2300      	movs	r3, #0
 800e872:	2200      	movs	r2, #0
 800e874:	2100      	movs	r1, #0
 800e876:	68f8      	ldr	r0, [r7, #12]
 800e878:	f001 fd22 	bl	80102c0 <USBD_LL_PrepareReceive>
 800e87c:	e03a      	b.n	800e8f4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	68da      	ldr	r2, [r3, #12]
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	689b      	ldr	r3, [r3, #8]
 800e886:	429a      	cmp	r2, r3
 800e888:	d11c      	bne.n	800e8c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	685a      	ldr	r2, [r3, #4]
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e892:	429a      	cmp	r2, r3
 800e894:	d316      	bcc.n	800e8c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	685a      	ldr	r2, [r3, #4]
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d20f      	bcs.n	800e8c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	2100      	movs	r1, #0
 800e8a8:	68f8      	ldr	r0, [r7, #12]
 800e8aa:	f000 ff2f 	bl	800f70c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	2100      	movs	r1, #0
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	f001 fcff 	bl	80102c0 <USBD_LL_PrepareReceive>
 800e8c2:	e017      	b.n	800e8f4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00a      	beq.n	800e8e6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e8d6:	2b03      	cmp	r3, #3
 800e8d8:	d105      	bne.n	800e8e6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	68f8      	ldr	r0, [r7, #12]
 800e8e4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e8e6:	2180      	movs	r1, #128	; 0x80
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	f001 fbe3 	bl	80100b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e8ee:	68f8      	ldr	r0, [r7, #12]
 800e8f0:	f000 ff5e 	bl	800f7b0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	d123      	bne.n	800e946 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	f7ff fe9b 	bl	800e63a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2200      	movs	r2, #0
 800e908:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e90c:	e01b      	b.n	800e946 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e914:	695b      	ldr	r3, [r3, #20]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d013      	beq.n	800e942 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e920:	2b03      	cmp	r3, #3
 800e922:	d10e      	bne.n	800e942 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e92a:	695b      	ldr	r3, [r3, #20]
 800e92c:	7afa      	ldrb	r2, [r7, #11]
 800e92e:	4611      	mov	r1, r2
 800e930:	68f8      	ldr	r0, [r7, #12]
 800e932:	4798      	blx	r3
 800e934:	4603      	mov	r3, r0
 800e936:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e938:	7dfb      	ldrb	r3, [r7, #23]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d003      	beq.n	800e946 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800e93e:	7dfb      	ldrb	r3, [r7, #23]
 800e940:	e002      	b.n	800e948 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e942:	2303      	movs	r3, #3
 800e944:	e000      	b.n	800e948 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800e946:	2300      	movs	r3, #0
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3718      	adds	r7, #24
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b082      	sub	sp, #8
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2201      	movs	r2, #1
 800e95c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2200      	movs	r2, #0
 800e964:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2200      	movs	r2, #0
 800e972:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d009      	beq.n	800e994 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	6852      	ldr	r2, [r2, #4]
 800e98c:	b2d2      	uxtb	r2, r2
 800e98e:	4611      	mov	r1, r2
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e994:	2340      	movs	r3, #64	; 0x40
 800e996:	2200      	movs	r2, #0
 800e998:	2100      	movs	r1, #0
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f001 fb16 	bl	800ffcc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2240      	movs	r2, #64	; 0x40
 800e9ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e9b0:	2340      	movs	r3, #64	; 0x40
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	2180      	movs	r1, #128	; 0x80
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f001 fb08 	bl	800ffcc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2201      	movs	r2, #1
 800e9c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2240      	movs	r2, #64	; 0x40
 800e9c6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e9c8:	2300      	movs	r3, #0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3708      	adds	r7, #8
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}

0800e9d2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e9d2:	b480      	push	{r7}
 800e9d4:	b083      	sub	sp, #12
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	6078      	str	r0, [r7, #4]
 800e9da:	460b      	mov	r3, r1
 800e9dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	78fa      	ldrb	r2, [r7, #3]
 800e9e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e9e4:	2300      	movs	r3, #0
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	370c      	adds	r7, #12
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr

0800e9f2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e9f2:	b480      	push	{r7}
 800e9f4:	b083      	sub	sp, #12
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2204      	movs	r2, #4
 800ea0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ea0e:	2300      	movs	r3, #0
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	370c      	adds	r7, #12
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b083      	sub	sp, #12
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea2a:	2b04      	cmp	r3, #4
 800ea2c:	d105      	bne.n	800ea3a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ea3a:	2300      	movs	r3, #0
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	370c      	adds	r7, #12
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr

0800ea48 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea56:	2b03      	cmp	r3, #3
 800ea58:	d10b      	bne.n	800ea72 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea60:	69db      	ldr	r3, [r3, #28]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d005      	beq.n	800ea72 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea6c:	69db      	ldr	r3, [r3, #28]
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3708      	adds	r7, #8
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b083      	sub	sp, #12
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	460b      	mov	r3, r1
 800ea86:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ea88:	2300      	movs	r3, #0
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	370c      	adds	r7, #12
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr

0800ea96 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ea96:	b480      	push	{r7}
 800ea98:	b083      	sub	sp, #12
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800eaa2:	2300      	movs	r3, #0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b083      	sub	sp, #12
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eab8:	2300      	movs	r3, #0
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	370c      	adds	r7, #12
 800eabe:	46bd      	mov	sp, r7
 800eac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac4:	4770      	bx	lr

0800eac6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b082      	sub	sp, #8
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2201      	movs	r2, #1
 800ead2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d009      	beq.n	800eaf4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	687a      	ldr	r2, [r7, #4]
 800eaea:	6852      	ldr	r2, [r2, #4]
 800eaec:	b2d2      	uxtb	r2, r2
 800eaee:	4611      	mov	r1, r2
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	4798      	blx	r3
  }

  return USBD_OK;
 800eaf4:	2300      	movs	r3, #0
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3708      	adds	r7, #8
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}

0800eafe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800eafe:	b480      	push	{r7}
 800eb00:	b087      	sub	sp, #28
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	3301      	adds	r3, #1
 800eb14:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800eb1c:	8a3b      	ldrh	r3, [r7, #16]
 800eb1e:	021b      	lsls	r3, r3, #8
 800eb20:	b21a      	sxth	r2, r3
 800eb22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb26:	4313      	orrs	r3, r2
 800eb28:	b21b      	sxth	r3, r3
 800eb2a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800eb2c:	89fb      	ldrh	r3, [r7, #14]
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	371c      	adds	r7, #28
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr
	...

0800eb3c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb46:	2300      	movs	r3, #0
 800eb48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb52:	2b20      	cmp	r3, #32
 800eb54:	d004      	beq.n	800eb60 <USBD_StdDevReq+0x24>
 800eb56:	2b40      	cmp	r3, #64	; 0x40
 800eb58:	d002      	beq.n	800eb60 <USBD_StdDevReq+0x24>
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d00a      	beq.n	800eb74 <USBD_StdDevReq+0x38>
 800eb5e:	e050      	b.n	800ec02 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	6839      	ldr	r1, [r7, #0]
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	4798      	blx	r3
 800eb6e:	4603      	mov	r3, r0
 800eb70:	73fb      	strb	r3, [r7, #15]
    break;
 800eb72:	e04b      	b.n	800ec0c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	785b      	ldrb	r3, [r3, #1]
 800eb78:	2b09      	cmp	r3, #9
 800eb7a:	d83c      	bhi.n	800ebf6 <USBD_StdDevReq+0xba>
 800eb7c:	a201      	add	r2, pc, #4	; (adr r2, 800eb84 <USBD_StdDevReq+0x48>)
 800eb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb82:	bf00      	nop
 800eb84:	0800ebd9 	.word	0x0800ebd9
 800eb88:	0800ebed 	.word	0x0800ebed
 800eb8c:	0800ebf7 	.word	0x0800ebf7
 800eb90:	0800ebe3 	.word	0x0800ebe3
 800eb94:	0800ebf7 	.word	0x0800ebf7
 800eb98:	0800ebb7 	.word	0x0800ebb7
 800eb9c:	0800ebad 	.word	0x0800ebad
 800eba0:	0800ebf7 	.word	0x0800ebf7
 800eba4:	0800ebcf 	.word	0x0800ebcf
 800eba8:	0800ebc1 	.word	0x0800ebc1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ebac:	6839      	ldr	r1, [r7, #0]
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f000 f9d0 	bl	800ef54 <USBD_GetDescriptor>
      break;
 800ebb4:	e024      	b.n	800ec00 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ebb6:	6839      	ldr	r1, [r7, #0]
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f000 fb5f 	bl	800f27c <USBD_SetAddress>
      break;
 800ebbe:	e01f      	b.n	800ec00 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ebc0:	6839      	ldr	r1, [r7, #0]
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f000 fb9c 	bl	800f300 <USBD_SetConfig>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	73fb      	strb	r3, [r7, #15]
      break;
 800ebcc:	e018      	b.n	800ec00 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ebce:	6839      	ldr	r1, [r7, #0]
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f000 fc39 	bl	800f448 <USBD_GetConfig>
      break;
 800ebd6:	e013      	b.n	800ec00 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ebd8:	6839      	ldr	r1, [r7, #0]
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f000 fc68 	bl	800f4b0 <USBD_GetStatus>
      break;
 800ebe0:	e00e      	b.n	800ec00 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ebe2:	6839      	ldr	r1, [r7, #0]
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f000 fc96 	bl	800f516 <USBD_SetFeature>
      break;
 800ebea:	e009      	b.n	800ec00 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ebec:	6839      	ldr	r1, [r7, #0]
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 fca5 	bl	800f53e <USBD_ClrFeature>
      break;
 800ebf4:	e004      	b.n	800ec00 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ebf6:	6839      	ldr	r1, [r7, #0]
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 fcfb 	bl	800f5f4 <USBD_CtlError>
      break;
 800ebfe:	bf00      	nop
    }
    break;
 800ec00:	e004      	b.n	800ec0c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ec02:	6839      	ldr	r1, [r7, #0]
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f000 fcf5 	bl	800f5f4 <USBD_CtlError>
    break;
 800ec0a:	bf00      	nop
  }

  return ret;
 800ec0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3710      	adds	r7, #16
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop

0800ec18 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec22:	2300      	movs	r3, #0
 800ec24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec2e:	2b20      	cmp	r3, #32
 800ec30:	d003      	beq.n	800ec3a <USBD_StdItfReq+0x22>
 800ec32:	2b40      	cmp	r3, #64	; 0x40
 800ec34:	d001      	beq.n	800ec3a <USBD_StdItfReq+0x22>
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d12a      	bne.n	800ec90 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec40:	3b01      	subs	r3, #1
 800ec42:	2b02      	cmp	r3, #2
 800ec44:	d81d      	bhi.n	800ec82 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	889b      	ldrh	r3, [r3, #4]
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d813      	bhi.n	800ec78 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec56:	689b      	ldr	r3, [r3, #8]
 800ec58:	6839      	ldr	r1, [r7, #0]
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	4798      	blx	r3
 800ec5e:	4603      	mov	r3, r0
 800ec60:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	88db      	ldrh	r3, [r3, #6]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d110      	bne.n	800ec8c <USBD_StdItfReq+0x74>
 800ec6a:	7bfb      	ldrb	r3, [r7, #15]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d10d      	bne.n	800ec8c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f000 fd8a 	bl	800f78a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ec76:	e009      	b.n	800ec8c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ec78:	6839      	ldr	r1, [r7, #0]
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f000 fcba 	bl	800f5f4 <USBD_CtlError>
      break;
 800ec80:	e004      	b.n	800ec8c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ec82:	6839      	ldr	r1, [r7, #0]
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f000 fcb5 	bl	800f5f4 <USBD_CtlError>
      break;
 800ec8a:	e000      	b.n	800ec8e <USBD_StdItfReq+0x76>
      break;
 800ec8c:	bf00      	nop
    }
    break;
 800ec8e:	e004      	b.n	800ec9a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ec90:	6839      	ldr	r1, [r7, #0]
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f000 fcae 	bl	800f5f4 <USBD_CtlError>
    break;
 800ec98:	bf00      	nop
  }

  return ret;
 800ec9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3710      	adds	r7, #16
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	889b      	ldrh	r3, [r3, #4]
 800ecb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ecc0:	2b20      	cmp	r3, #32
 800ecc2:	d004      	beq.n	800ecce <USBD_StdEPReq+0x2a>
 800ecc4:	2b40      	cmp	r3, #64	; 0x40
 800ecc6:	d002      	beq.n	800ecce <USBD_StdEPReq+0x2a>
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d00a      	beq.n	800ece2 <USBD_StdEPReq+0x3e>
 800eccc:	e137      	b.n	800ef3e <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecd4:	689b      	ldr	r3, [r3, #8]
 800ecd6:	6839      	ldr	r1, [r7, #0]
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	4798      	blx	r3
 800ecdc:	4603      	mov	r3, r0
 800ecde:	73fb      	strb	r3, [r7, #15]
    break;
 800ece0:	e132      	b.n	800ef48 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	785b      	ldrb	r3, [r3, #1]
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d03e      	beq.n	800ed68 <USBD_StdEPReq+0xc4>
 800ecea:	2b03      	cmp	r3, #3
 800ecec:	d002      	beq.n	800ecf4 <USBD_StdEPReq+0x50>
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d079      	beq.n	800ede6 <USBD_StdEPReq+0x142>
 800ecf2:	e11e      	b.n	800ef32 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecfa:	2b02      	cmp	r3, #2
 800ecfc:	d002      	beq.n	800ed04 <USBD_StdEPReq+0x60>
 800ecfe:	2b03      	cmp	r3, #3
 800ed00:	d015      	beq.n	800ed2e <USBD_StdEPReq+0x8a>
 800ed02:	e02b      	b.n	800ed5c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed04:	7bbb      	ldrb	r3, [r7, #14]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00c      	beq.n	800ed24 <USBD_StdEPReq+0x80>
 800ed0a:	7bbb      	ldrb	r3, [r7, #14]
 800ed0c:	2b80      	cmp	r3, #128	; 0x80
 800ed0e:	d009      	beq.n	800ed24 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed10:	7bbb      	ldrb	r3, [r7, #14]
 800ed12:	4619      	mov	r1, r3
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f001 f9cd 	bl	80100b4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed1a:	2180      	movs	r1, #128	; 0x80
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f001 f9c9 	bl	80100b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ed22:	e020      	b.n	800ed66 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ed24:	6839      	ldr	r1, [r7, #0]
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f000 fc64 	bl	800f5f4 <USBD_CtlError>
        break;
 800ed2c:	e01b      	b.n	800ed66 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	885b      	ldrh	r3, [r3, #2]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d10e      	bne.n	800ed54 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ed36:	7bbb      	ldrb	r3, [r7, #14]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00b      	beq.n	800ed54 <USBD_StdEPReq+0xb0>
 800ed3c:	7bbb      	ldrb	r3, [r7, #14]
 800ed3e:	2b80      	cmp	r3, #128	; 0x80
 800ed40:	d008      	beq.n	800ed54 <USBD_StdEPReq+0xb0>
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	88db      	ldrh	r3, [r3, #6]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d104      	bne.n	800ed54 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed4a:	7bbb      	ldrb	r3, [r7, #14]
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f001 f9b0 	bl	80100b4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f000 fd18 	bl	800f78a <USBD_CtlSendStatus>

        break;
 800ed5a:	e004      	b.n	800ed66 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ed5c:	6839      	ldr	r1, [r7, #0]
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f000 fc48 	bl	800f5f4 <USBD_CtlError>
        break;
 800ed64:	bf00      	nop
      }
      break;
 800ed66:	e0e9      	b.n	800ef3c <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed6e:	2b02      	cmp	r3, #2
 800ed70:	d002      	beq.n	800ed78 <USBD_StdEPReq+0xd4>
 800ed72:	2b03      	cmp	r3, #3
 800ed74:	d015      	beq.n	800eda2 <USBD_StdEPReq+0xfe>
 800ed76:	e02f      	b.n	800edd8 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed78:	7bbb      	ldrb	r3, [r7, #14]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d00c      	beq.n	800ed98 <USBD_StdEPReq+0xf4>
 800ed7e:	7bbb      	ldrb	r3, [r7, #14]
 800ed80:	2b80      	cmp	r3, #128	; 0x80
 800ed82:	d009      	beq.n	800ed98 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed84:	7bbb      	ldrb	r3, [r7, #14]
 800ed86:	4619      	mov	r1, r3
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f001 f993 	bl	80100b4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed8e:	2180      	movs	r1, #128	; 0x80
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f001 f98f 	bl	80100b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ed96:	e025      	b.n	800ede4 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800ed98:	6839      	ldr	r1, [r7, #0]
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f000 fc2a 	bl	800f5f4 <USBD_CtlError>
        break;
 800eda0:	e020      	b.n	800ede4 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	885b      	ldrh	r3, [r3, #2]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d11b      	bne.n	800ede2 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800edaa:	7bbb      	ldrb	r3, [r7, #14]
 800edac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d004      	beq.n	800edbe <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800edb4:	7bbb      	ldrb	r3, [r7, #14]
 800edb6:	4619      	mov	r1, r3
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f001 f9b1 	bl	8010120 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 fce3 	bl	800f78a <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edca:	689b      	ldr	r3, [r3, #8]
 800edcc:	6839      	ldr	r1, [r7, #0]
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	4798      	blx	r3
 800edd2:	4603      	mov	r3, r0
 800edd4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800edd6:	e004      	b.n	800ede2 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 800edd8:	6839      	ldr	r1, [r7, #0]
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f000 fc0a 	bl	800f5f4 <USBD_CtlError>
        break;
 800ede0:	e000      	b.n	800ede4 <USBD_StdEPReq+0x140>
        break;
 800ede2:	bf00      	nop
      }
      break;
 800ede4:	e0aa      	b.n	800ef3c <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edec:	2b02      	cmp	r3, #2
 800edee:	d002      	beq.n	800edf6 <USBD_StdEPReq+0x152>
 800edf0:	2b03      	cmp	r3, #3
 800edf2:	d032      	beq.n	800ee5a <USBD_StdEPReq+0x1b6>
 800edf4:	e097      	b.n	800ef26 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800edf6:	7bbb      	ldrb	r3, [r7, #14]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d007      	beq.n	800ee0c <USBD_StdEPReq+0x168>
 800edfc:	7bbb      	ldrb	r3, [r7, #14]
 800edfe:	2b80      	cmp	r3, #128	; 0x80
 800ee00:	d004      	beq.n	800ee0c <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800ee02:	6839      	ldr	r1, [r7, #0]
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f000 fbf5 	bl	800f5f4 <USBD_CtlError>
          break;
 800ee0a:	e091      	b.n	800ef30 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	da0b      	bge.n	800ee2c <USBD_StdEPReq+0x188>
 800ee14:	7bbb      	ldrb	r3, [r7, #14]
 800ee16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ee1a:	4613      	mov	r3, r2
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	4413      	add	r3, r2
 800ee20:	009b      	lsls	r3, r3, #2
 800ee22:	3310      	adds	r3, #16
 800ee24:	687a      	ldr	r2, [r7, #4]
 800ee26:	4413      	add	r3, r2
 800ee28:	3304      	adds	r3, #4
 800ee2a:	e00b      	b.n	800ee44 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ee2c:	7bbb      	ldrb	r3, [r7, #14]
 800ee2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee32:	4613      	mov	r3, r2
 800ee34:	009b      	lsls	r3, r3, #2
 800ee36:	4413      	add	r3, r2
 800ee38:	009b      	lsls	r3, r3, #2
 800ee3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	4413      	add	r3, r2
 800ee42:	3304      	adds	r3, #4
 800ee44:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	2202      	movs	r2, #2
 800ee50:	4619      	mov	r1, r3
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 fc3f 	bl	800f6d6 <USBD_CtlSendData>
        break;
 800ee58:	e06a      	b.n	800ef30 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ee5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	da11      	bge.n	800ee86 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ee62:	7bbb      	ldrb	r3, [r7, #14]
 800ee64:	f003 020f 	and.w	r2, r3, #15
 800ee68:	6879      	ldr	r1, [r7, #4]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	4413      	add	r3, r2
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	440b      	add	r3, r1
 800ee74:	3324      	adds	r3, #36	; 0x24
 800ee76:	881b      	ldrh	r3, [r3, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d117      	bne.n	800eeac <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800ee7c:	6839      	ldr	r1, [r7, #0]
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f000 fbb8 	bl	800f5f4 <USBD_CtlError>
            break;
 800ee84:	e054      	b.n	800ef30 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ee86:	7bbb      	ldrb	r3, [r7, #14]
 800ee88:	f003 020f 	and.w	r2, r3, #15
 800ee8c:	6879      	ldr	r1, [r7, #4]
 800ee8e:	4613      	mov	r3, r2
 800ee90:	009b      	lsls	r3, r3, #2
 800ee92:	4413      	add	r3, r2
 800ee94:	009b      	lsls	r3, r3, #2
 800ee96:	440b      	add	r3, r1
 800ee98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ee9c:	881b      	ldrh	r3, [r3, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d104      	bne.n	800eeac <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800eea2:	6839      	ldr	r1, [r7, #0]
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f000 fba5 	bl	800f5f4 <USBD_CtlError>
            break;
 800eeaa:	e041      	b.n	800ef30 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eeac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	da0b      	bge.n	800eecc <USBD_StdEPReq+0x228>
 800eeb4:	7bbb      	ldrb	r3, [r7, #14]
 800eeb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eeba:	4613      	mov	r3, r2
 800eebc:	009b      	lsls	r3, r3, #2
 800eebe:	4413      	add	r3, r2
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	3310      	adds	r3, #16
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	4413      	add	r3, r2
 800eec8:	3304      	adds	r3, #4
 800eeca:	e00b      	b.n	800eee4 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800eecc:	7bbb      	ldrb	r3, [r7, #14]
 800eece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eed2:	4613      	mov	r3, r2
 800eed4:	009b      	lsls	r3, r3, #2
 800eed6:	4413      	add	r3, r2
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	4413      	add	r3, r2
 800eee2:	3304      	adds	r3, #4
 800eee4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800eee6:	7bbb      	ldrb	r3, [r7, #14]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d002      	beq.n	800eef2 <USBD_StdEPReq+0x24e>
 800eeec:	7bbb      	ldrb	r3, [r7, #14]
 800eeee:	2b80      	cmp	r3, #128	; 0x80
 800eef0:	d103      	bne.n	800eefa <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	2200      	movs	r2, #0
 800eef6:	601a      	str	r2, [r3, #0]
 800eef8:	e00e      	b.n	800ef18 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800eefa:	7bbb      	ldrb	r3, [r7, #14]
 800eefc:	4619      	mov	r1, r3
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f001 f944 	bl	801018c <USBD_LL_IsStallEP>
 800ef04:	4603      	mov	r3, r0
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d003      	beq.n	800ef12 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	601a      	str	r2, [r3, #0]
 800ef10:	e002      	b.n	800ef18 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	2200      	movs	r2, #0
 800ef16:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	2202      	movs	r2, #2
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f000 fbd9 	bl	800f6d6 <USBD_CtlSendData>
          break;
 800ef24:	e004      	b.n	800ef30 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800ef26:	6839      	ldr	r1, [r7, #0]
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f000 fb63 	bl	800f5f4 <USBD_CtlError>
        break;
 800ef2e:	bf00      	nop
      }
      break;
 800ef30:	e004      	b.n	800ef3c <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800ef32:	6839      	ldr	r1, [r7, #0]
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f000 fb5d 	bl	800f5f4 <USBD_CtlError>
      break;
 800ef3a:	bf00      	nop
    }
    break;
 800ef3c:	e004      	b.n	800ef48 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800ef3e:	6839      	ldr	r1, [r7, #0]
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 fb57 	bl	800f5f4 <USBD_CtlError>
    break;
 800ef46:	bf00      	nop
  }

  return ret;
 800ef48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
	...

0800ef54 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ef62:	2300      	movs	r3, #0
 800ef64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ef66:	2300      	movs	r3, #0
 800ef68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	885b      	ldrh	r3, [r3, #2]
 800ef6e:	0a1b      	lsrs	r3, r3, #8
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	3b01      	subs	r3, #1
 800ef74:	2b0e      	cmp	r3, #14
 800ef76:	f200 8152 	bhi.w	800f21e <USBD_GetDescriptor+0x2ca>
 800ef7a:	a201      	add	r2, pc, #4	; (adr r2, 800ef80 <USBD_GetDescriptor+0x2c>)
 800ef7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef80:	0800eff1 	.word	0x0800eff1
 800ef84:	0800f009 	.word	0x0800f009
 800ef88:	0800f049 	.word	0x0800f049
 800ef8c:	0800f21f 	.word	0x0800f21f
 800ef90:	0800f21f 	.word	0x0800f21f
 800ef94:	0800f1bf 	.word	0x0800f1bf
 800ef98:	0800f1eb 	.word	0x0800f1eb
 800ef9c:	0800f21f 	.word	0x0800f21f
 800efa0:	0800f21f 	.word	0x0800f21f
 800efa4:	0800f21f 	.word	0x0800f21f
 800efa8:	0800f21f 	.word	0x0800f21f
 800efac:	0800f21f 	.word	0x0800f21f
 800efb0:	0800f21f 	.word	0x0800f21f
 800efb4:	0800f21f 	.word	0x0800f21f
 800efb8:	0800efbd 	.word	0x0800efbd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efc2:	69db      	ldr	r3, [r3, #28]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d00b      	beq.n	800efe0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efce:	69db      	ldr	r3, [r3, #28]
 800efd0:	687a      	ldr	r2, [r7, #4]
 800efd2:	7c12      	ldrb	r2, [r2, #16]
 800efd4:	f107 0108 	add.w	r1, r7, #8
 800efd8:	4610      	mov	r0, r2
 800efda:	4798      	blx	r3
 800efdc:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800efde:	e126      	b.n	800f22e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800efe0:	6839      	ldr	r1, [r7, #0]
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f000 fb06 	bl	800f5f4 <USBD_CtlError>
      err++;
 800efe8:	7afb      	ldrb	r3, [r7, #11]
 800efea:	3301      	adds	r3, #1
 800efec:	72fb      	strb	r3, [r7, #11]
    break;
 800efee:	e11e      	b.n	800f22e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	7c12      	ldrb	r2, [r2, #16]
 800effc:	f107 0108 	add.w	r1, r7, #8
 800f000:	4610      	mov	r0, r2
 800f002:	4798      	blx	r3
 800f004:	60f8      	str	r0, [r7, #12]
    break;
 800f006:	e112      	b.n	800f22e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	7c1b      	ldrb	r3, [r3, #16]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d10d      	bne.n	800f02c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f018:	f107 0208 	add.w	r2, r7, #8
 800f01c:	4610      	mov	r0, r2
 800f01e:	4798      	blx	r3
 800f020:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	3301      	adds	r3, #1
 800f026:	2202      	movs	r2, #2
 800f028:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f02a:	e100      	b.n	800f22e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f034:	f107 0208 	add.w	r2, r7, #8
 800f038:	4610      	mov	r0, r2
 800f03a:	4798      	blx	r3
 800f03c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	3301      	adds	r3, #1
 800f042:	2202      	movs	r2, #2
 800f044:	701a      	strb	r2, [r3, #0]
    break;
 800f046:	e0f2      	b.n	800f22e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	885b      	ldrh	r3, [r3, #2]
 800f04c:	b2db      	uxtb	r3, r3
 800f04e:	2b05      	cmp	r3, #5
 800f050:	f200 80ac 	bhi.w	800f1ac <USBD_GetDescriptor+0x258>
 800f054:	a201      	add	r2, pc, #4	; (adr r2, 800f05c <USBD_GetDescriptor+0x108>)
 800f056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f05a:	bf00      	nop
 800f05c:	0800f075 	.word	0x0800f075
 800f060:	0800f0a9 	.word	0x0800f0a9
 800f064:	0800f0dd 	.word	0x0800f0dd
 800f068:	0800f111 	.word	0x0800f111
 800f06c:	0800f145 	.word	0x0800f145
 800f070:	0800f179 	.word	0x0800f179
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d00b      	beq.n	800f098 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	687a      	ldr	r2, [r7, #4]
 800f08a:	7c12      	ldrb	r2, [r2, #16]
 800f08c:	f107 0108 	add.w	r1, r7, #8
 800f090:	4610      	mov	r0, r2
 800f092:	4798      	blx	r3
 800f094:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f096:	e091      	b.n	800f1bc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f098:	6839      	ldr	r1, [r7, #0]
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f000 faaa 	bl	800f5f4 <USBD_CtlError>
        err++;
 800f0a0:	7afb      	ldrb	r3, [r7, #11]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	72fb      	strb	r3, [r7, #11]
      break;
 800f0a6:	e089      	b.n	800f1bc <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0ae:	689b      	ldr	r3, [r3, #8]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d00b      	beq.n	800f0cc <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0ba:	689b      	ldr	r3, [r3, #8]
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	7c12      	ldrb	r2, [r2, #16]
 800f0c0:	f107 0108 	add.w	r1, r7, #8
 800f0c4:	4610      	mov	r0, r2
 800f0c6:	4798      	blx	r3
 800f0c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f0ca:	e077      	b.n	800f1bc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f0cc:	6839      	ldr	r1, [r7, #0]
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f000 fa90 	bl	800f5f4 <USBD_CtlError>
        err++;
 800f0d4:	7afb      	ldrb	r3, [r7, #11]
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	72fb      	strb	r3, [r7, #11]
      break;
 800f0da:	e06f      	b.n	800f1bc <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0e2:	68db      	ldr	r3, [r3, #12]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d00b      	beq.n	800f100 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0ee:	68db      	ldr	r3, [r3, #12]
 800f0f0:	687a      	ldr	r2, [r7, #4]
 800f0f2:	7c12      	ldrb	r2, [r2, #16]
 800f0f4:	f107 0108 	add.w	r1, r7, #8
 800f0f8:	4610      	mov	r0, r2
 800f0fa:	4798      	blx	r3
 800f0fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f0fe:	e05d      	b.n	800f1bc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f100:	6839      	ldr	r1, [r7, #0]
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f000 fa76 	bl	800f5f4 <USBD_CtlError>
        err++;
 800f108:	7afb      	ldrb	r3, [r7, #11]
 800f10a:	3301      	adds	r3, #1
 800f10c:	72fb      	strb	r3, [r7, #11]
      break;
 800f10e:	e055      	b.n	800f1bc <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f116:	691b      	ldr	r3, [r3, #16]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d00b      	beq.n	800f134 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f122:	691b      	ldr	r3, [r3, #16]
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	7c12      	ldrb	r2, [r2, #16]
 800f128:	f107 0108 	add.w	r1, r7, #8
 800f12c:	4610      	mov	r0, r2
 800f12e:	4798      	blx	r3
 800f130:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f132:	e043      	b.n	800f1bc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f134:	6839      	ldr	r1, [r7, #0]
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 fa5c 	bl	800f5f4 <USBD_CtlError>
        err++;
 800f13c:	7afb      	ldrb	r3, [r7, #11]
 800f13e:	3301      	adds	r3, #1
 800f140:	72fb      	strb	r3, [r7, #11]
      break;
 800f142:	e03b      	b.n	800f1bc <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f14a:	695b      	ldr	r3, [r3, #20]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d00b      	beq.n	800f168 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f156:	695b      	ldr	r3, [r3, #20]
 800f158:	687a      	ldr	r2, [r7, #4]
 800f15a:	7c12      	ldrb	r2, [r2, #16]
 800f15c:	f107 0108 	add.w	r1, r7, #8
 800f160:	4610      	mov	r0, r2
 800f162:	4798      	blx	r3
 800f164:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f166:	e029      	b.n	800f1bc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f168:	6839      	ldr	r1, [r7, #0]
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f000 fa42 	bl	800f5f4 <USBD_CtlError>
        err++;
 800f170:	7afb      	ldrb	r3, [r7, #11]
 800f172:	3301      	adds	r3, #1
 800f174:	72fb      	strb	r3, [r7, #11]
      break;
 800f176:	e021      	b.n	800f1bc <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f17e:	699b      	ldr	r3, [r3, #24]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00b      	beq.n	800f19c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f18a:	699b      	ldr	r3, [r3, #24]
 800f18c:	687a      	ldr	r2, [r7, #4]
 800f18e:	7c12      	ldrb	r2, [r2, #16]
 800f190:	f107 0108 	add.w	r1, r7, #8
 800f194:	4610      	mov	r0, r2
 800f196:	4798      	blx	r3
 800f198:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f19a:	e00f      	b.n	800f1bc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800f19c:	6839      	ldr	r1, [r7, #0]
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 fa28 	bl	800f5f4 <USBD_CtlError>
        err++;
 800f1a4:	7afb      	ldrb	r3, [r7, #11]
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	72fb      	strb	r3, [r7, #11]
      break;
 800f1aa:	e007      	b.n	800f1bc <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f1ac:	6839      	ldr	r1, [r7, #0]
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 fa20 	bl	800f5f4 <USBD_CtlError>
      err++;
 800f1b4:	7afb      	ldrb	r3, [r7, #11]
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f1ba:	bf00      	nop
    }
    break;
 800f1bc:	e037      	b.n	800f22e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	7c1b      	ldrb	r3, [r3, #16]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d109      	bne.n	800f1da <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1ce:	f107 0208 	add.w	r2, r7, #8
 800f1d2:	4610      	mov	r0, r2
 800f1d4:	4798      	blx	r3
 800f1d6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f1d8:	e029      	b.n	800f22e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f1da:	6839      	ldr	r1, [r7, #0]
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f000 fa09 	bl	800f5f4 <USBD_CtlError>
      err++;
 800f1e2:	7afb      	ldrb	r3, [r7, #11]
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	72fb      	strb	r3, [r7, #11]
    break;
 800f1e8:	e021      	b.n	800f22e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	7c1b      	ldrb	r3, [r3, #16]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d10d      	bne.n	800f20e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1fa:	f107 0208 	add.w	r2, r7, #8
 800f1fe:	4610      	mov	r0, r2
 800f200:	4798      	blx	r3
 800f202:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	3301      	adds	r3, #1
 800f208:	2207      	movs	r2, #7
 800f20a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f20c:	e00f      	b.n	800f22e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800f20e:	6839      	ldr	r1, [r7, #0]
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f000 f9ef 	bl	800f5f4 <USBD_CtlError>
      err++;
 800f216:	7afb      	ldrb	r3, [r7, #11]
 800f218:	3301      	adds	r3, #1
 800f21a:	72fb      	strb	r3, [r7, #11]
    break;
 800f21c:	e007      	b.n	800f22e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800f21e:	6839      	ldr	r1, [r7, #0]
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 f9e7 	bl	800f5f4 <USBD_CtlError>
    err++;
 800f226:	7afb      	ldrb	r3, [r7, #11]
 800f228:	3301      	adds	r3, #1
 800f22a:	72fb      	strb	r3, [r7, #11]
    break;
 800f22c:	bf00      	nop
  }

  if (err != 0U)
 800f22e:	7afb      	ldrb	r3, [r7, #11]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d11e      	bne.n	800f272 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	88db      	ldrh	r3, [r3, #6]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d016      	beq.n	800f26a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800f23c:	893b      	ldrh	r3, [r7, #8]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d00e      	beq.n	800f260 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	88da      	ldrh	r2, [r3, #6]
 800f246:	893b      	ldrh	r3, [r7, #8]
 800f248:	4293      	cmp	r3, r2
 800f24a:	bf28      	it	cs
 800f24c:	4613      	movcs	r3, r2
 800f24e:	b29b      	uxth	r3, r3
 800f250:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f252:	893b      	ldrh	r3, [r7, #8]
 800f254:	461a      	mov	r2, r3
 800f256:	68f9      	ldr	r1, [r7, #12]
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f000 fa3c 	bl	800f6d6 <USBD_CtlSendData>
 800f25e:	e009      	b.n	800f274 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f260:	6839      	ldr	r1, [r7, #0]
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 f9c6 	bl	800f5f4 <USBD_CtlError>
 800f268:	e004      	b.n	800f274 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f000 fa8d 	bl	800f78a <USBD_CtlSendStatus>
 800f270:	e000      	b.n	800f274 <USBD_GetDescriptor+0x320>
    return;
 800f272:	bf00      	nop
    }
  }
}
 800f274:	3710      	adds	r7, #16
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop

0800f27c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b084      	sub	sp, #16
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	889b      	ldrh	r3, [r3, #4]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d130      	bne.n	800f2f0 <USBD_SetAddress+0x74>
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	88db      	ldrh	r3, [r3, #6]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d12c      	bne.n	800f2f0 <USBD_SetAddress+0x74>
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	885b      	ldrh	r3, [r3, #2]
 800f29a:	2b7f      	cmp	r3, #127	; 0x7f
 800f29c:	d828      	bhi.n	800f2f0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	885b      	ldrh	r3, [r3, #2]
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2b0:	2b03      	cmp	r3, #3
 800f2b2:	d104      	bne.n	800f2be <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f2b4:	6839      	ldr	r1, [r7, #0]
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f000 f99c 	bl	800f5f4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2bc:	e01c      	b.n	800f2f8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	7bfa      	ldrb	r2, [r7, #15]
 800f2c2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f2c6:	7bfb      	ldrb	r3, [r7, #15]
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f000 ff8a 	bl	80101e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f000 fa5a 	bl	800f78a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f2d6:	7bfb      	ldrb	r3, [r7, #15]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d004      	beq.n	800f2e6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2202      	movs	r2, #2
 800f2e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2e4:	e008      	b.n	800f2f8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2ee:	e003      	b.n	800f2f8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f2f0:	6839      	ldr	r1, [r7, #0]
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f000 f97e 	bl	800f5f4 <USBD_CtlError>
  }
}
 800f2f8:	bf00      	nop
 800f2fa:	3710      	adds	r7, #16
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f30a:	2300      	movs	r3, #0
 800f30c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	885b      	ldrh	r3, [r3, #2]
 800f312:	b2da      	uxtb	r2, r3
 800f314:	4b4b      	ldr	r3, [pc, #300]	; (800f444 <USBD_SetConfig+0x144>)
 800f316:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f318:	4b4a      	ldr	r3, [pc, #296]	; (800f444 <USBD_SetConfig+0x144>)
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d905      	bls.n	800f32c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f320:	6839      	ldr	r1, [r7, #0]
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 f966 	bl	800f5f4 <USBD_CtlError>
    return USBD_FAIL;
 800f328:	2303      	movs	r3, #3
 800f32a:	e087      	b.n	800f43c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f332:	2b02      	cmp	r3, #2
 800f334:	d002      	beq.n	800f33c <USBD_SetConfig+0x3c>
 800f336:	2b03      	cmp	r3, #3
 800f338:	d025      	beq.n	800f386 <USBD_SetConfig+0x86>
 800f33a:	e071      	b.n	800f420 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f33c:	4b41      	ldr	r3, [pc, #260]	; (800f444 <USBD_SetConfig+0x144>)
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d01c      	beq.n	800f37e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f344:	4b3f      	ldr	r3, [pc, #252]	; (800f444 <USBD_SetConfig+0x144>)
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	461a      	mov	r2, r3
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f34e:	4b3d      	ldr	r3, [pc, #244]	; (800f444 <USBD_SetConfig+0x144>)
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	4619      	mov	r1, r3
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f7ff f97b 	bl	800e650 <USBD_SetClassConfig>
 800f35a:	4603      	mov	r3, r0
 800f35c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f35e:	7bfb      	ldrb	r3, [r7, #15]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d004      	beq.n	800f36e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f364:	6839      	ldr	r1, [r7, #0]
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f000 f944 	bl	800f5f4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f36c:	e065      	b.n	800f43a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f000 fa0b 	bl	800f78a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2203      	movs	r2, #3
 800f378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f37c:	e05d      	b.n	800f43a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f000 fa03 	bl	800f78a <USBD_CtlSendStatus>
    break;
 800f384:	e059      	b.n	800f43a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f386:	4b2f      	ldr	r3, [pc, #188]	; (800f444 <USBD_SetConfig+0x144>)
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d112      	bne.n	800f3b4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2202      	movs	r2, #2
 800f392:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f396:	4b2b      	ldr	r3, [pc, #172]	; (800f444 <USBD_SetConfig+0x144>)
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	461a      	mov	r2, r3
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f3a0:	4b28      	ldr	r3, [pc, #160]	; (800f444 <USBD_SetConfig+0x144>)
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f7ff f96e 	bl	800e688 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 f9ec 	bl	800f78a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f3b2:	e042      	b.n	800f43a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f3b4:	4b23      	ldr	r3, [pc, #140]	; (800f444 <USBD_SetConfig+0x144>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	461a      	mov	r2, r3
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	685b      	ldr	r3, [r3, #4]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d02a      	beq.n	800f418 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f7ff f95c 	bl	800e688 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f3d0:	4b1c      	ldr	r3, [pc, #112]	; (800f444 <USBD_SetConfig+0x144>)
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f3da:	4b1a      	ldr	r3, [pc, #104]	; (800f444 <USBD_SetConfig+0x144>)
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	4619      	mov	r1, r3
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f7ff f935 	bl	800e650 <USBD_SetClassConfig>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f3ea:	7bfb      	ldrb	r3, [r7, #15]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d00f      	beq.n	800f410 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f3f0:	6839      	ldr	r1, [r7, #0]
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 f8fe 	bl	800f5f4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	b2db      	uxtb	r3, r3
 800f3fe:	4619      	mov	r1, r3
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f7ff f941 	bl	800e688 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2202      	movs	r2, #2
 800f40a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f40e:	e014      	b.n	800f43a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f000 f9ba 	bl	800f78a <USBD_CtlSendStatus>
    break;
 800f416:	e010      	b.n	800f43a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f000 f9b6 	bl	800f78a <USBD_CtlSendStatus>
    break;
 800f41e:	e00c      	b.n	800f43a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f420:	6839      	ldr	r1, [r7, #0]
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f000 f8e6 	bl	800f5f4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f428:	4b06      	ldr	r3, [pc, #24]	; (800f444 <USBD_SetConfig+0x144>)
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	4619      	mov	r1, r3
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f7ff f92a 	bl	800e688 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f434:	2303      	movs	r3, #3
 800f436:	73fb      	strb	r3, [r7, #15]
    break;
 800f438:	bf00      	nop
  }

  return ret;
 800f43a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3710      	adds	r7, #16
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	200009c4 	.word	0x200009c4

0800f448 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	88db      	ldrh	r3, [r3, #6]
 800f456:	2b01      	cmp	r3, #1
 800f458:	d004      	beq.n	800f464 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f45a:	6839      	ldr	r1, [r7, #0]
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f000 f8c9 	bl	800f5f4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f462:	e021      	b.n	800f4a8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	db17      	blt.n	800f49e <USBD_GetConfig+0x56>
 800f46e:	2b02      	cmp	r3, #2
 800f470:	dd02      	ble.n	800f478 <USBD_GetConfig+0x30>
 800f472:	2b03      	cmp	r3, #3
 800f474:	d00b      	beq.n	800f48e <USBD_GetConfig+0x46>
 800f476:	e012      	b.n	800f49e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2200      	movs	r2, #0
 800f47c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	3308      	adds	r3, #8
 800f482:	2201      	movs	r2, #1
 800f484:	4619      	mov	r1, r3
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f000 f925 	bl	800f6d6 <USBD_CtlSendData>
      break;
 800f48c:	e00c      	b.n	800f4a8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	3304      	adds	r3, #4
 800f492:	2201      	movs	r2, #1
 800f494:	4619      	mov	r1, r3
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 f91d 	bl	800f6d6 <USBD_CtlSendData>
      break;
 800f49c:	e004      	b.n	800f4a8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f49e:	6839      	ldr	r1, [r7, #0]
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f000 f8a7 	bl	800f5f4 <USBD_CtlError>
      break;
 800f4a6:	bf00      	nop
}
 800f4a8:	bf00      	nop
 800f4aa:	3708      	adds	r7, #8
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}

0800f4b0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4c0:	3b01      	subs	r3, #1
 800f4c2:	2b02      	cmp	r3, #2
 800f4c4:	d81e      	bhi.n	800f504 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	88db      	ldrh	r3, [r3, #6]
 800f4ca:	2b02      	cmp	r3, #2
 800f4cc:	d004      	beq.n	800f4d8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f4ce:	6839      	ldr	r1, [r7, #0]
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f000 f88f 	bl	800f5f4 <USBD_CtlError>
      break;
 800f4d6:	e01a      	b.n	800f50e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2201      	movs	r2, #1
 800f4dc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d005      	beq.n	800f4f4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	68db      	ldr	r3, [r3, #12]
 800f4ec:	f043 0202 	orr.w	r2, r3, #2
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	330c      	adds	r3, #12
 800f4f8:	2202      	movs	r2, #2
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f000 f8ea 	bl	800f6d6 <USBD_CtlSendData>
    break;
 800f502:	e004      	b.n	800f50e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f504:	6839      	ldr	r1, [r7, #0]
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 f874 	bl	800f5f4 <USBD_CtlError>
    break;
 800f50c:	bf00      	nop
  }
}
 800f50e:	bf00      	nop
 800f510:	3708      	adds	r7, #8
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f516:	b580      	push	{r7, lr}
 800f518:	b082      	sub	sp, #8
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
 800f51e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	885b      	ldrh	r3, [r3, #2]
 800f524:	2b01      	cmp	r3, #1
 800f526:	d106      	bne.n	800f536 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2201      	movs	r2, #1
 800f52c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f000 f92a 	bl	800f78a <USBD_CtlSendStatus>
  }
}
 800f536:	bf00      	nop
 800f538:	3708      	adds	r7, #8
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}

0800f53e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f53e:	b580      	push	{r7, lr}
 800f540:	b082      	sub	sp, #8
 800f542:	af00      	add	r7, sp, #0
 800f544:	6078      	str	r0, [r7, #4]
 800f546:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f54e:	3b01      	subs	r3, #1
 800f550:	2b02      	cmp	r3, #2
 800f552:	d80b      	bhi.n	800f56c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	885b      	ldrh	r3, [r3, #2]
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d10c      	bne.n	800f576 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2200      	movs	r2, #0
 800f560:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f000 f910 	bl	800f78a <USBD_CtlSendStatus>
      }
      break;
 800f56a:	e004      	b.n	800f576 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f56c:	6839      	ldr	r1, [r7, #0]
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f000 f840 	bl	800f5f4 <USBD_CtlError>
      break;
 800f574:	e000      	b.n	800f578 <USBD_ClrFeature+0x3a>
      break;
 800f576:	bf00      	nop
  }
}
 800f578:	bf00      	nop
 800f57a:	3708      	adds	r7, #8
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}

0800f580 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	781a      	ldrb	r2, [r3, #0]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	3301      	adds	r3, #1
 800f59a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	781a      	ldrb	r2, [r3, #0]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f5aa:	68f8      	ldr	r0, [r7, #12]
 800f5ac:	f7ff faa7 	bl	800eafe <SWAPBYTE>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f5c4:	68f8      	ldr	r0, [r7, #12]
 800f5c6:	f7ff fa9a 	bl	800eafe <SWAPBYTE>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	461a      	mov	r2, r3
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	3301      	adds	r3, #1
 800f5d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	3301      	adds	r3, #1
 800f5dc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f5de:	68f8      	ldr	r0, [r7, #12]
 800f5e0:	f7ff fa8d 	bl	800eafe <SWAPBYTE>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	80da      	strh	r2, [r3, #6]
}
 800f5ec:	bf00      	nop
 800f5ee:	3710      	adds	r7, #16
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f5fe:	2180      	movs	r1, #128	; 0x80
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f000 fd57 	bl	80100b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f606:	2100      	movs	r1, #0
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f000 fd53 	bl	80100b4 <USBD_LL_StallEP>
}
 800f60e:	bf00      	nop
 800f610:	3708      	adds	r7, #8
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}

0800f616 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f616:	b580      	push	{r7, lr}
 800f618:	b086      	sub	sp, #24
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	60f8      	str	r0, [r7, #12]
 800f61e:	60b9      	str	r1, [r7, #8]
 800f620:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f622:	2300      	movs	r3, #0
 800f624:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d036      	beq.n	800f69a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f630:	6938      	ldr	r0, [r7, #16]
 800f632:	f000 f836 	bl	800f6a2 <USBD_GetLen>
 800f636:	4603      	mov	r3, r0
 800f638:	3301      	adds	r3, #1
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	005b      	lsls	r3, r3, #1
 800f63e:	b29a      	uxth	r2, r3
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f644:	7dfb      	ldrb	r3, [r7, #23]
 800f646:	68ba      	ldr	r2, [r7, #8]
 800f648:	4413      	add	r3, r2
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	7812      	ldrb	r2, [r2, #0]
 800f64e:	701a      	strb	r2, [r3, #0]
  idx++;
 800f650:	7dfb      	ldrb	r3, [r7, #23]
 800f652:	3301      	adds	r3, #1
 800f654:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f656:	7dfb      	ldrb	r3, [r7, #23]
 800f658:	68ba      	ldr	r2, [r7, #8]
 800f65a:	4413      	add	r3, r2
 800f65c:	2203      	movs	r2, #3
 800f65e:	701a      	strb	r2, [r3, #0]
  idx++;
 800f660:	7dfb      	ldrb	r3, [r7, #23]
 800f662:	3301      	adds	r3, #1
 800f664:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f666:	e013      	b.n	800f690 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f668:	7dfb      	ldrb	r3, [r7, #23]
 800f66a:	68ba      	ldr	r2, [r7, #8]
 800f66c:	4413      	add	r3, r2
 800f66e:	693a      	ldr	r2, [r7, #16]
 800f670:	7812      	ldrb	r2, [r2, #0]
 800f672:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	3301      	adds	r3, #1
 800f678:	613b      	str	r3, [r7, #16]
    idx++;
 800f67a:	7dfb      	ldrb	r3, [r7, #23]
 800f67c:	3301      	adds	r3, #1
 800f67e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f680:	7dfb      	ldrb	r3, [r7, #23]
 800f682:	68ba      	ldr	r2, [r7, #8]
 800f684:	4413      	add	r3, r2
 800f686:	2200      	movs	r2, #0
 800f688:	701a      	strb	r2, [r3, #0]
    idx++;
 800f68a:	7dfb      	ldrb	r3, [r7, #23]
 800f68c:	3301      	adds	r3, #1
 800f68e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d1e7      	bne.n	800f668 <USBD_GetString+0x52>
 800f698:	e000      	b.n	800f69c <USBD_GetString+0x86>
    return;
 800f69a:	bf00      	nop
  }
}
 800f69c:	3718      	adds	r7, #24
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}

0800f6a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f6a2:	b480      	push	{r7}
 800f6a4:	b085      	sub	sp, #20
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f6b2:	e005      	b.n	800f6c0 <USBD_GetLen+0x1e>
  {
    len++;
 800f6b4:	7bfb      	ldrb	r3, [r7, #15]
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	3301      	adds	r3, #1
 800f6be:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d1f5      	bne.n	800f6b4 <USBD_GetLen+0x12>
  }

  return len;
 800f6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3714      	adds	r7, #20
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr

0800f6d6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b084      	sub	sp, #16
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	60f8      	str	r0, [r7, #12]
 800f6de:	60b9      	str	r1, [r7, #8]
 800f6e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2202      	movs	r2, #2
 800f6e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	687a      	ldr	r2, [r7, #4]
 800f6ee:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	687a      	ldr	r2, [r7, #4]
 800f6f4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	68ba      	ldr	r2, [r7, #8]
 800f6fa:	2100      	movs	r1, #0
 800f6fc:	68f8      	ldr	r0, [r7, #12]
 800f6fe:	f000 fda7 	bl	8010250 <USBD_LL_Transmit>

  return USBD_OK;
 800f702:	2300      	movs	r3, #0
}
 800f704:	4618      	mov	r0, r3
 800f706:	3710      	adds	r7, #16
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b084      	sub	sp, #16
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	60b9      	str	r1, [r7, #8]
 800f716:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	68ba      	ldr	r2, [r7, #8]
 800f71c:	2100      	movs	r1, #0
 800f71e:	68f8      	ldr	r0, [r7, #12]
 800f720:	f000 fd96 	bl	8010250 <USBD_LL_Transmit>

  return USBD_OK;
 800f724:	2300      	movs	r3, #0
}
 800f726:	4618      	mov	r0, r3
 800f728:	3710      	adds	r7, #16
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}

0800f72e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f72e:	b580      	push	{r7, lr}
 800f730:	b084      	sub	sp, #16
 800f732:	af00      	add	r7, sp, #0
 800f734:	60f8      	str	r0, [r7, #12]
 800f736:	60b9      	str	r1, [r7, #8]
 800f738:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2203      	movs	r2, #3
 800f73e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	687a      	ldr	r2, [r7, #4]
 800f74e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	68ba      	ldr	r2, [r7, #8]
 800f756:	2100      	movs	r1, #0
 800f758:	68f8      	ldr	r0, [r7, #12]
 800f75a:	f000 fdb1 	bl	80102c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f75e:	2300      	movs	r3, #0
}
 800f760:	4618      	mov	r0, r3
 800f762:	3710      	adds	r7, #16
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	60b9      	str	r1, [r7, #8]
 800f772:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	68ba      	ldr	r2, [r7, #8]
 800f778:	2100      	movs	r1, #0
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	f000 fda0 	bl	80102c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f780:	2300      	movs	r3, #0
}
 800f782:	4618      	mov	r0, r3
 800f784:	3710      	adds	r7, #16
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}

0800f78a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f78a:	b580      	push	{r7, lr}
 800f78c:	b082      	sub	sp, #8
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2204      	movs	r2, #4
 800f796:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f79a:	2300      	movs	r3, #0
 800f79c:	2200      	movs	r2, #0
 800f79e:	2100      	movs	r1, #0
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f000 fd55 	bl	8010250 <USBD_LL_Transmit>

  return USBD_OK;
 800f7a6:	2300      	movs	r3, #0
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3708      	adds	r7, #8
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b082      	sub	sp, #8
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2205      	movs	r2, #5
 800f7bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	2100      	movs	r1, #0
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 fd7a 	bl	80102c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f7cc:	2300      	movs	r3, #0
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3708      	adds	r7, #8
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
	...

0800f7d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f7dc:	2200      	movs	r2, #0
 800f7de:	4912      	ldr	r1, [pc, #72]	; (800f828 <MX_USB_DEVICE_Init+0x50>)
 800f7e0:	4812      	ldr	r0, [pc, #72]	; (800f82c <MX_USB_DEVICE_Init+0x54>)
 800f7e2:	f7fe fec7 	bl	800e574 <USBD_Init>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d001      	beq.n	800f7f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f7ec:	f7f2 feb0 	bl	8002550 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f7f0:	490f      	ldr	r1, [pc, #60]	; (800f830 <MX_USB_DEVICE_Init+0x58>)
 800f7f2:	480e      	ldr	r0, [pc, #56]	; (800f82c <MX_USB_DEVICE_Init+0x54>)
 800f7f4:	f7fe feee 	bl	800e5d4 <USBD_RegisterClass>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d001      	beq.n	800f802 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f7fe:	f7f2 fea7 	bl	8002550 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f802:	490c      	ldr	r1, [pc, #48]	; (800f834 <MX_USB_DEVICE_Init+0x5c>)
 800f804:	4809      	ldr	r0, [pc, #36]	; (800f82c <MX_USB_DEVICE_Init+0x54>)
 800f806:	f7fe fe19 	bl	800e43c <USBD_CDC_RegisterInterface>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d001      	beq.n	800f814 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f810:	f7f2 fe9e 	bl	8002550 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f814:	4805      	ldr	r0, [pc, #20]	; (800f82c <MX_USB_DEVICE_Init+0x54>)
 800f816:	f7fe ff04 	bl	800e622 <USBD_Start>
 800f81a:	4603      	mov	r3, r0
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d001      	beq.n	800f824 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f820:	f7f2 fe96 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f824:	bf00      	nop
 800f826:	bd80      	pop	{r7, pc}
 800f828:	20000130 	.word	0x20000130
 800f82c:	20001390 	.word	0x20001390
 800f830:	20000018 	.word	0x20000018
 800f834:	2000011c 	.word	0x2000011c

0800f838 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f83c:	2200      	movs	r2, #0
 800f83e:	4905      	ldr	r1, [pc, #20]	; (800f854 <CDC_Init_FS+0x1c>)
 800f840:	4805      	ldr	r0, [pc, #20]	; (800f858 <CDC_Init_FS+0x20>)
 800f842:	f7fe fe10 	bl	800e466 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f846:	4905      	ldr	r1, [pc, #20]	; (800f85c <CDC_Init_FS+0x24>)
 800f848:	4803      	ldr	r0, [pc, #12]	; (800f858 <CDC_Init_FS+0x20>)
 800f84a:	f7fe fe25 	bl	800e498 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f84e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f850:	4618      	mov	r0, r3
 800f852:	bd80      	pop	{r7, pc}
 800f854:	20001e60 	.word	0x20001e60
 800f858:	20001390 	.word	0x20001390
 800f85c:	20001660 	.word	0x20001660

0800f860 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f860:	b480      	push	{r7}
 800f862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f864:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f866:	4618      	mov	r0, r3
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f870:	b480      	push	{r7}
 800f872:	b083      	sub	sp, #12
 800f874:	af00      	add	r7, sp, #0
 800f876:	4603      	mov	r3, r0
 800f878:	6039      	str	r1, [r7, #0]
 800f87a:	71fb      	strb	r3, [r7, #7]
 800f87c:	4613      	mov	r3, r2
 800f87e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f880:	79fb      	ldrb	r3, [r7, #7]
 800f882:	2b23      	cmp	r3, #35	; 0x23
 800f884:	d84a      	bhi.n	800f91c <CDC_Control_FS+0xac>
 800f886:	a201      	add	r2, pc, #4	; (adr r2, 800f88c <CDC_Control_FS+0x1c>)
 800f888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f88c:	0800f91d 	.word	0x0800f91d
 800f890:	0800f91d 	.word	0x0800f91d
 800f894:	0800f91d 	.word	0x0800f91d
 800f898:	0800f91d 	.word	0x0800f91d
 800f89c:	0800f91d 	.word	0x0800f91d
 800f8a0:	0800f91d 	.word	0x0800f91d
 800f8a4:	0800f91d 	.word	0x0800f91d
 800f8a8:	0800f91d 	.word	0x0800f91d
 800f8ac:	0800f91d 	.word	0x0800f91d
 800f8b0:	0800f91d 	.word	0x0800f91d
 800f8b4:	0800f91d 	.word	0x0800f91d
 800f8b8:	0800f91d 	.word	0x0800f91d
 800f8bc:	0800f91d 	.word	0x0800f91d
 800f8c0:	0800f91d 	.word	0x0800f91d
 800f8c4:	0800f91d 	.word	0x0800f91d
 800f8c8:	0800f91d 	.word	0x0800f91d
 800f8cc:	0800f91d 	.word	0x0800f91d
 800f8d0:	0800f91d 	.word	0x0800f91d
 800f8d4:	0800f91d 	.word	0x0800f91d
 800f8d8:	0800f91d 	.word	0x0800f91d
 800f8dc:	0800f91d 	.word	0x0800f91d
 800f8e0:	0800f91d 	.word	0x0800f91d
 800f8e4:	0800f91d 	.word	0x0800f91d
 800f8e8:	0800f91d 	.word	0x0800f91d
 800f8ec:	0800f91d 	.word	0x0800f91d
 800f8f0:	0800f91d 	.word	0x0800f91d
 800f8f4:	0800f91d 	.word	0x0800f91d
 800f8f8:	0800f91d 	.word	0x0800f91d
 800f8fc:	0800f91d 	.word	0x0800f91d
 800f900:	0800f91d 	.word	0x0800f91d
 800f904:	0800f91d 	.word	0x0800f91d
 800f908:	0800f91d 	.word	0x0800f91d
 800f90c:	0800f91d 	.word	0x0800f91d
 800f910:	0800f91d 	.word	0x0800f91d
 800f914:	0800f91d 	.word	0x0800f91d
 800f918:	0800f91d 	.word	0x0800f91d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f91c:	bf00      	nop
  }

  return (USBD_OK);
 800f91e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f920:	4618      	mov	r0, r3
 800f922:	370c      	adds	r7, #12
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr

0800f92c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f936:	6879      	ldr	r1, [r7, #4]
 800f938:	4805      	ldr	r0, [pc, #20]	; (800f950 <CDC_Receive_FS+0x24>)
 800f93a:	f7fe fdad 	bl	800e498 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f93e:	4804      	ldr	r0, [pc, #16]	; (800f950 <CDC_Receive_FS+0x24>)
 800f940:	f7fe fdee 	bl	800e520 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f944:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f946:	4618      	mov	r0, r3
 800f948:	3708      	adds	r7, #8
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}
 800f94e:	bf00      	nop
 800f950:	20001390 	.word	0x20001390

0800f954 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
 800f95c:	460b      	mov	r3, r1
 800f95e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f960:	2300      	movs	r3, #0
 800f962:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f964:	4b0d      	ldr	r3, [pc, #52]	; (800f99c <CDC_Transmit_FS+0x48>)
 800f966:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f96a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f972:	2b00      	cmp	r3, #0
 800f974:	d001      	beq.n	800f97a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f976:	2301      	movs	r3, #1
 800f978:	e00b      	b.n	800f992 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f97a:	887b      	ldrh	r3, [r7, #2]
 800f97c:	461a      	mov	r2, r3
 800f97e:	6879      	ldr	r1, [r7, #4]
 800f980:	4806      	ldr	r0, [pc, #24]	; (800f99c <CDC_Transmit_FS+0x48>)
 800f982:	f7fe fd70 	bl	800e466 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f986:	4805      	ldr	r0, [pc, #20]	; (800f99c <CDC_Transmit_FS+0x48>)
 800f988:	f7fe fd9a 	bl	800e4c0 <USBD_CDC_TransmitPacket>
 800f98c:	4603      	mov	r3, r0
 800f98e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f990:	7bfb      	ldrb	r3, [r7, #15]
}
 800f992:	4618      	mov	r0, r3
 800f994:	3710      	adds	r7, #16
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	20001390 	.word	0x20001390

0800f9a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b087      	sub	sp, #28
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	60b9      	str	r1, [r7, #8]
 800f9aa:	4613      	mov	r3, r2
 800f9ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f9b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	371c      	adds	r7, #28
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr
	...

0800f9c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b083      	sub	sp, #12
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	6039      	str	r1, [r7, #0]
 800f9ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	2212      	movs	r2, #18
 800f9d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f9d6:	4b03      	ldr	r3, [pc, #12]	; (800f9e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr
 800f9e4:	20000150 	.word	0x20000150

0800f9e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b083      	sub	sp, #12
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	6039      	str	r1, [r7, #0]
 800f9f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	2204      	movs	r2, #4
 800f9f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f9fa:	4b03      	ldr	r3, [pc, #12]	; (800fa08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	370c      	adds	r7, #12
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr
 800fa08:	20000170 	.word	0x20000170

0800fa0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	4603      	mov	r3, r0
 800fa14:	6039      	str	r1, [r7, #0]
 800fa16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fa18:	79fb      	ldrb	r3, [r7, #7]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d105      	bne.n	800fa2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fa1e:	683a      	ldr	r2, [r7, #0]
 800fa20:	4907      	ldr	r1, [pc, #28]	; (800fa40 <USBD_FS_ProductStrDescriptor+0x34>)
 800fa22:	4808      	ldr	r0, [pc, #32]	; (800fa44 <USBD_FS_ProductStrDescriptor+0x38>)
 800fa24:	f7ff fdf7 	bl	800f616 <USBD_GetString>
 800fa28:	e004      	b.n	800fa34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fa2a:	683a      	ldr	r2, [r7, #0]
 800fa2c:	4904      	ldr	r1, [pc, #16]	; (800fa40 <USBD_FS_ProductStrDescriptor+0x34>)
 800fa2e:	4805      	ldr	r0, [pc, #20]	; (800fa44 <USBD_FS_ProductStrDescriptor+0x38>)
 800fa30:	f7ff fdf1 	bl	800f616 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa34:	4b02      	ldr	r3, [pc, #8]	; (800fa40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3708      	adds	r7, #8
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	20002660 	.word	0x20002660
 800fa44:	080166b4 	.word	0x080166b4

0800fa48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	4603      	mov	r3, r0
 800fa50:	6039      	str	r1, [r7, #0]
 800fa52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fa54:	683a      	ldr	r2, [r7, #0]
 800fa56:	4904      	ldr	r1, [pc, #16]	; (800fa68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fa58:	4804      	ldr	r0, [pc, #16]	; (800fa6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fa5a:	f7ff fddc 	bl	800f616 <USBD_GetString>
  return USBD_StrDesc;
 800fa5e:	4b02      	ldr	r3, [pc, #8]	; (800fa68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3708      	adds	r7, #8
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	20002660 	.word	0x20002660
 800fa6c:	080166cc 	.word	0x080166cc

0800fa70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	4603      	mov	r3, r0
 800fa78:	6039      	str	r1, [r7, #0]
 800fa7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	221a      	movs	r2, #26
 800fa80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fa82:	f000 f855 	bl	800fb30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fa86:	4b02      	ldr	r3, [pc, #8]	; (800fa90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3708      	adds	r7, #8
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}
 800fa90:	20000174 	.word	0x20000174

0800fa94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	6039      	str	r1, [r7, #0]
 800fa9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800faa0:	79fb      	ldrb	r3, [r7, #7]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d105      	bne.n	800fab2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800faa6:	683a      	ldr	r2, [r7, #0]
 800faa8:	4907      	ldr	r1, [pc, #28]	; (800fac8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800faaa:	4808      	ldr	r0, [pc, #32]	; (800facc <USBD_FS_ConfigStrDescriptor+0x38>)
 800faac:	f7ff fdb3 	bl	800f616 <USBD_GetString>
 800fab0:	e004      	b.n	800fabc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fab2:	683a      	ldr	r2, [r7, #0]
 800fab4:	4904      	ldr	r1, [pc, #16]	; (800fac8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fab6:	4805      	ldr	r0, [pc, #20]	; (800facc <USBD_FS_ConfigStrDescriptor+0x38>)
 800fab8:	f7ff fdad 	bl	800f616 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fabc:	4b02      	ldr	r3, [pc, #8]	; (800fac8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3708      	adds	r7, #8
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
 800fac6:	bf00      	nop
 800fac8:	20002660 	.word	0x20002660
 800facc:	080166e0 	.word	0x080166e0

0800fad0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	4603      	mov	r3, r0
 800fad8:	6039      	str	r1, [r7, #0]
 800fada:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fadc:	79fb      	ldrb	r3, [r7, #7]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d105      	bne.n	800faee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fae2:	683a      	ldr	r2, [r7, #0]
 800fae4:	4907      	ldr	r1, [pc, #28]	; (800fb04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fae6:	4808      	ldr	r0, [pc, #32]	; (800fb08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fae8:	f7ff fd95 	bl	800f616 <USBD_GetString>
 800faec:	e004      	b.n	800faf8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800faee:	683a      	ldr	r2, [r7, #0]
 800faf0:	4904      	ldr	r1, [pc, #16]	; (800fb04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800faf2:	4805      	ldr	r0, [pc, #20]	; (800fb08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800faf4:	f7ff fd8f 	bl	800f616 <USBD_GetString>
  }
  return USBD_StrDesc;
 800faf8:	4b02      	ldr	r3, [pc, #8]	; (800fb04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3708      	adds	r7, #8
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop
 800fb04:	20002660 	.word	0x20002660
 800fb08:	080166ec 	.word	0x080166ec

0800fb0c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	4603      	mov	r3, r0
 800fb14:	6039      	str	r1, [r7, #0]
 800fb16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	220c      	movs	r2, #12
 800fb1c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800fb1e:	4b03      	ldr	r3, [pc, #12]	; (800fb2c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	370c      	adds	r7, #12
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr
 800fb2c:	20000164 	.word	0x20000164

0800fb30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fb36:	4b0f      	ldr	r3, [pc, #60]	; (800fb74 <Get_SerialNum+0x44>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fb3c:	4b0e      	ldr	r3, [pc, #56]	; (800fb78 <Get_SerialNum+0x48>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fb42:	4b0e      	ldr	r3, [pc, #56]	; (800fb7c <Get_SerialNum+0x4c>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fb48:	68fa      	ldr	r2, [r7, #12]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d009      	beq.n	800fb6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fb56:	2208      	movs	r2, #8
 800fb58:	4909      	ldr	r1, [pc, #36]	; (800fb80 <Get_SerialNum+0x50>)
 800fb5a:	68f8      	ldr	r0, [r7, #12]
 800fb5c:	f000 f814 	bl	800fb88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fb60:	2204      	movs	r2, #4
 800fb62:	4908      	ldr	r1, [pc, #32]	; (800fb84 <Get_SerialNum+0x54>)
 800fb64:	68b8      	ldr	r0, [r7, #8]
 800fb66:	f000 f80f 	bl	800fb88 <IntToUnicode>
  }
}
 800fb6a:	bf00      	nop
 800fb6c:	3710      	adds	r7, #16
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}
 800fb72:	bf00      	nop
 800fb74:	1fff7590 	.word	0x1fff7590
 800fb78:	1fff7594 	.word	0x1fff7594
 800fb7c:	1fff7598 	.word	0x1fff7598
 800fb80:	20000176 	.word	0x20000176
 800fb84:	20000186 	.word	0x20000186

0800fb88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b087      	sub	sp, #28
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	4613      	mov	r3, r2
 800fb94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fb96:	2300      	movs	r3, #0
 800fb98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	75fb      	strb	r3, [r7, #23]
 800fb9e:	e027      	b.n	800fbf0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	0f1b      	lsrs	r3, r3, #28
 800fba4:	2b09      	cmp	r3, #9
 800fba6:	d80b      	bhi.n	800fbc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	0f1b      	lsrs	r3, r3, #28
 800fbac:	b2da      	uxtb	r2, r3
 800fbae:	7dfb      	ldrb	r3, [r7, #23]
 800fbb0:	005b      	lsls	r3, r3, #1
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	440b      	add	r3, r1
 800fbb8:	3230      	adds	r2, #48	; 0x30
 800fbba:	b2d2      	uxtb	r2, r2
 800fbbc:	701a      	strb	r2, [r3, #0]
 800fbbe:	e00a      	b.n	800fbd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	0f1b      	lsrs	r3, r3, #28
 800fbc4:	b2da      	uxtb	r2, r3
 800fbc6:	7dfb      	ldrb	r3, [r7, #23]
 800fbc8:	005b      	lsls	r3, r3, #1
 800fbca:	4619      	mov	r1, r3
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	440b      	add	r3, r1
 800fbd0:	3237      	adds	r2, #55	; 0x37
 800fbd2:	b2d2      	uxtb	r2, r2
 800fbd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	011b      	lsls	r3, r3, #4
 800fbda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fbdc:	7dfb      	ldrb	r3, [r7, #23]
 800fbde:	005b      	lsls	r3, r3, #1
 800fbe0:	3301      	adds	r3, #1
 800fbe2:	68ba      	ldr	r2, [r7, #8]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fbea:	7dfb      	ldrb	r3, [r7, #23]
 800fbec:	3301      	adds	r3, #1
 800fbee:	75fb      	strb	r3, [r7, #23]
 800fbf0:	7dfa      	ldrb	r2, [r7, #23]
 800fbf2:	79fb      	ldrb	r3, [r7, #7]
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d3d3      	bcc.n	800fba0 <IntToUnicode+0x18>
  }
}
 800fbf8:	bf00      	nop
 800fbfa:	371c      	adds	r7, #28
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc02:	4770      	bx	lr

0800fc04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b08a      	sub	sp, #40	; 0x28
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc0c:	f107 0314 	add.w	r3, r7, #20
 800fc10:	2200      	movs	r2, #0
 800fc12:	601a      	str	r2, [r3, #0]
 800fc14:	605a      	str	r2, [r3, #4]
 800fc16:	609a      	str	r2, [r3, #8]
 800fc18:	60da      	str	r2, [r3, #12]
 800fc1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fc24:	d14e      	bne.n	800fcc4 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fc26:	4b29      	ldr	r3, [pc, #164]	; (800fccc <HAL_PCD_MspInit+0xc8>)
 800fc28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc2a:	4a28      	ldr	r2, [pc, #160]	; (800fccc <HAL_PCD_MspInit+0xc8>)
 800fc2c:	f043 0301 	orr.w	r3, r3, #1
 800fc30:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fc32:	4b26      	ldr	r3, [pc, #152]	; (800fccc <HAL_PCD_MspInit+0xc8>)
 800fc34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc36:	f003 0301 	and.w	r3, r3, #1
 800fc3a:	613b      	str	r3, [r7, #16]
 800fc3c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 800fc3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fc42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc44:	2302      	movs	r3, #2
 800fc46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fc4c:	2303      	movs	r3, #3
 800fc4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fc50:	230a      	movs	r3, #10
 800fc52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fc54:	f107 0314 	add.w	r3, r7, #20
 800fc58:	4619      	mov	r1, r3
 800fc5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fc5e:	f7f5 fbb9 	bl	80053d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fc62:	4b1a      	ldr	r3, [pc, #104]	; (800fccc <HAL_PCD_MspInit+0xc8>)
 800fc64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc66:	4a19      	ldr	r2, [pc, #100]	; (800fccc <HAL_PCD_MspInit+0xc8>)
 800fc68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fc6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fc6e:	4b17      	ldr	r3, [pc, #92]	; (800fccc <HAL_PCD_MspInit+0xc8>)
 800fc70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fc76:	60fb      	str	r3, [r7, #12]
 800fc78:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fc7a:	4b14      	ldr	r3, [pc, #80]	; (800fccc <HAL_PCD_MspInit+0xc8>)
 800fc7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d114      	bne.n	800fcb0 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fc86:	4b11      	ldr	r3, [pc, #68]	; (800fccc <HAL_PCD_MspInit+0xc8>)
 800fc88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc8a:	4a10      	ldr	r2, [pc, #64]	; (800fccc <HAL_PCD_MspInit+0xc8>)
 800fc8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc90:	6593      	str	r3, [r2, #88]	; 0x58
 800fc92:	4b0e      	ldr	r3, [pc, #56]	; (800fccc <HAL_PCD_MspInit+0xc8>)
 800fc94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc9a:	60bb      	str	r3, [r7, #8]
 800fc9c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800fc9e:	f7f7 fb07 	bl	80072b0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800fca2:	4b0a      	ldr	r3, [pc, #40]	; (800fccc <HAL_PCD_MspInit+0xc8>)
 800fca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fca6:	4a09      	ldr	r2, [pc, #36]	; (800fccc <HAL_PCD_MspInit+0xc8>)
 800fca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fcac:	6593      	str	r3, [r2, #88]	; 0x58
 800fcae:	e001      	b.n	800fcb4 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800fcb0:	f7f7 fafe 	bl	80072b0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	2100      	movs	r1, #0
 800fcb8:	2043      	movs	r0, #67	; 0x43
 800fcba:	f7f4 fb7e 	bl	80043ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fcbe:	2043      	movs	r0, #67	; 0x43
 800fcc0:	f7f4 fb97 	bl	80043f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fcc4:	bf00      	nop
 800fcc6:	3728      	adds	r7, #40	; 0x28
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}
 800fccc:	40021000 	.word	0x40021000

0800fcd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fce4:	4619      	mov	r1, r3
 800fce6:	4610      	mov	r0, r2
 800fce8:	f7fe fce6 	bl	800e6b8 <USBD_LL_SetupStage>
}
 800fcec:	bf00      	nop
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b082      	sub	sp, #8
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fd06:	78fa      	ldrb	r2, [r7, #3]
 800fd08:	6879      	ldr	r1, [r7, #4]
 800fd0a:	4613      	mov	r3, r2
 800fd0c:	00db      	lsls	r3, r3, #3
 800fd0e:	1a9b      	subs	r3, r3, r2
 800fd10:	009b      	lsls	r3, r3, #2
 800fd12:	440b      	add	r3, r1
 800fd14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fd18:	681a      	ldr	r2, [r3, #0]
 800fd1a:	78fb      	ldrb	r3, [r7, #3]
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	f7fe fd1e 	bl	800e75e <USBD_LL_DataOutStage>
}
 800fd22:	bf00      	nop
 800fd24:	3708      	adds	r7, #8
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}

0800fd2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd2a:	b580      	push	{r7, lr}
 800fd2c:	b082      	sub	sp, #8
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	6078      	str	r0, [r7, #4]
 800fd32:	460b      	mov	r3, r1
 800fd34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fd3c:	78fa      	ldrb	r2, [r7, #3]
 800fd3e:	6879      	ldr	r1, [r7, #4]
 800fd40:	4613      	mov	r3, r2
 800fd42:	00db      	lsls	r3, r3, #3
 800fd44:	1a9b      	subs	r3, r3, r2
 800fd46:	009b      	lsls	r3, r3, #2
 800fd48:	440b      	add	r3, r1
 800fd4a:	3348      	adds	r3, #72	; 0x48
 800fd4c:	681a      	ldr	r2, [r3, #0]
 800fd4e:	78fb      	ldrb	r3, [r7, #3]
 800fd50:	4619      	mov	r1, r3
 800fd52:	f7fe fd67 	bl	800e824 <USBD_LL_DataInStage>
}
 800fd56:	bf00      	nop
 800fd58:	3708      	adds	r7, #8
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}

0800fd5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd5e:	b580      	push	{r7, lr}
 800fd60:	b082      	sub	sp, #8
 800fd62:	af00      	add	r7, sp, #0
 800fd64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f7fe fe6b 	bl	800ea48 <USBD_LL_SOF>
}
 800fd72:	bf00      	nop
 800fd74:	3708      	adds	r7, #8
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}

0800fd7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b084      	sub	sp, #16
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fd82:	2301      	movs	r3, #1
 800fd84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	2b02      	cmp	r3, #2
 800fd8c:	d001      	beq.n	800fd92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800fd8e:	f7f2 fbdf 	bl	8002550 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fd98:	7bfa      	ldrb	r2, [r7, #15]
 800fd9a:	4611      	mov	r1, r2
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7fe fe18 	bl	800e9d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7fe fdd1 	bl	800e950 <USBD_LL_Reset>
}
 800fdae:	bf00      	nop
 800fdb0:	3710      	adds	r7, #16
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
	...

0800fdb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	687a      	ldr	r2, [r7, #4]
 800fdcc:	6812      	ldr	r2, [r2, #0]
 800fdce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fdd2:	f043 0301 	orr.w	r3, r3, #1
 800fdd6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7fe fe07 	bl	800e9f2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6a1b      	ldr	r3, [r3, #32]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d005      	beq.n	800fdf8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fdec:	4b04      	ldr	r3, [pc, #16]	; (800fe00 <HAL_PCD_SuspendCallback+0x48>)
 800fdee:	691b      	ldr	r3, [r3, #16]
 800fdf0:	4a03      	ldr	r2, [pc, #12]	; (800fe00 <HAL_PCD_SuspendCallback+0x48>)
 800fdf2:	f043 0306 	orr.w	r3, r3, #6
 800fdf6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fdf8:	bf00      	nop
 800fdfa:	3708      	adds	r7, #8
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	e000ed00 	.word	0xe000ed00

0800fe04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b082      	sub	sp, #8
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	687a      	ldr	r2, [r7, #4]
 800fe18:	6812      	ldr	r2, [r2, #0]
 800fe1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fe1e:	f023 0301 	bic.w	r3, r3, #1
 800fe22:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6a1b      	ldr	r3, [r3, #32]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d007      	beq.n	800fe3c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fe2c:	4b08      	ldr	r3, [pc, #32]	; (800fe50 <HAL_PCD_ResumeCallback+0x4c>)
 800fe2e:	691b      	ldr	r3, [r3, #16]
 800fe30:	4a07      	ldr	r2, [pc, #28]	; (800fe50 <HAL_PCD_ResumeCallback+0x4c>)
 800fe32:	f023 0306 	bic.w	r3, r3, #6
 800fe36:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800fe38:	f000 fadc 	bl	80103f4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7fe fdea 	bl	800ea1c <USBD_LL_Resume>
}
 800fe48:	bf00      	nop
 800fe4a:	3708      	adds	r7, #8
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}
 800fe50:	e000ed00 	.word	0xe000ed00

0800fe54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b082      	sub	sp, #8
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe66:	78fa      	ldrb	r2, [r7, #3]
 800fe68:	4611      	mov	r1, r2
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fe fe13 	bl	800ea96 <USBD_LL_IsoOUTIncomplete>
}
 800fe70:	bf00      	nop
 800fe72:	3708      	adds	r7, #8
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	460b      	mov	r3, r1
 800fe82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe8a:	78fa      	ldrb	r2, [r7, #3]
 800fe8c:	4611      	mov	r1, r2
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7fe fdf4 	bl	800ea7c <USBD_LL_IsoINIncomplete>
}
 800fe94:	bf00      	nop
 800fe96:	3708      	adds	r7, #8
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}

0800fe9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800feaa:	4618      	mov	r0, r3
 800feac:	f7fe fe00 	bl	800eab0 <USBD_LL_DevConnected>
}
 800feb0:	bf00      	nop
 800feb2:	3708      	adds	r7, #8
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}

0800feb8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fe fdfd 	bl	800eac6 <USBD_LL_DevDisconnected>
}
 800fecc:	bf00      	nop
 800fece:	3708      	adds	r7, #8
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b082      	sub	sp, #8
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d139      	bne.n	800ff58 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fee4:	4a1f      	ldr	r2, [pc, #124]	; (800ff64 <USBD_LL_Init+0x90>)
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	4a1d      	ldr	r2, [pc, #116]	; (800ff64 <USBD_LL_Init+0x90>)
 800fef0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fef4:	4b1b      	ldr	r3, [pc, #108]	; (800ff64 <USBD_LL_Init+0x90>)
 800fef6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fefa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800fefc:	4b19      	ldr	r3, [pc, #100]	; (800ff64 <USBD_LL_Init+0x90>)
 800fefe:	2206      	movs	r2, #6
 800ff00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ff02:	4b18      	ldr	r3, [pc, #96]	; (800ff64 <USBD_LL_Init+0x90>)
 800ff04:	2202      	movs	r2, #2
 800ff06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ff08:	4b16      	ldr	r3, [pc, #88]	; (800ff64 <USBD_LL_Init+0x90>)
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ff0e:	4b15      	ldr	r3, [pc, #84]	; (800ff64 <USBD_LL_Init+0x90>)
 800ff10:	2200      	movs	r2, #0
 800ff12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ff14:	4b13      	ldr	r3, [pc, #76]	; (800ff64 <USBD_LL_Init+0x90>)
 800ff16:	2200      	movs	r2, #0
 800ff18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ff1a:	4b12      	ldr	r3, [pc, #72]	; (800ff64 <USBD_LL_Init+0x90>)
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ff20:	4b10      	ldr	r3, [pc, #64]	; (800ff64 <USBD_LL_Init+0x90>)
 800ff22:	2200      	movs	r2, #0
 800ff24:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ff26:	4b0f      	ldr	r3, [pc, #60]	; (800ff64 <USBD_LL_Init+0x90>)
 800ff28:	2200      	movs	r2, #0
 800ff2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ff2c:	480d      	ldr	r0, [pc, #52]	; (800ff64 <USBD_LL_Init+0x90>)
 800ff2e:	f7f6 f84c 	bl	8005fca <HAL_PCD_Init>
 800ff32:	4603      	mov	r3, r0
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d001      	beq.n	800ff3c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800ff38:	f7f2 fb0a 	bl	8002550 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ff3c:	2180      	movs	r1, #128	; 0x80
 800ff3e:	4809      	ldr	r0, [pc, #36]	; (800ff64 <USBD_LL_Init+0x90>)
 800ff40:	f7f7 f8ad 	bl	800709e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ff44:	2240      	movs	r2, #64	; 0x40
 800ff46:	2100      	movs	r1, #0
 800ff48:	4806      	ldr	r0, [pc, #24]	; (800ff64 <USBD_LL_Init+0x90>)
 800ff4a:	f7f7 f861 	bl	8007010 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ff4e:	2280      	movs	r2, #128	; 0x80
 800ff50:	2101      	movs	r1, #1
 800ff52:	4804      	ldr	r0, [pc, #16]	; (800ff64 <USBD_LL_Init+0x90>)
 800ff54:	f7f7 f85c 	bl	8007010 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ff58:	2300      	movs	r3, #0
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3708      	adds	r7, #8
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
 800ff62:	bf00      	nop
 800ff64:	20002860 	.word	0x20002860

0800ff68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff70:	2300      	movs	r3, #0
 800ff72:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff74:	2300      	movs	r3, #0
 800ff76:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7f6 f947 	bl	8006212 <HAL_PCD_Start>
 800ff84:	4603      	mov	r3, r0
 800ff86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ff88:	7bbb      	ldrb	r3, [r7, #14]
 800ff8a:	2b03      	cmp	r3, #3
 800ff8c:	d816      	bhi.n	800ffbc <USBD_LL_Start+0x54>
 800ff8e:	a201      	add	r2, pc, #4	; (adr r2, 800ff94 <USBD_LL_Start+0x2c>)
 800ff90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff94:	0800ffa5 	.word	0x0800ffa5
 800ff98:	0800ffab 	.word	0x0800ffab
 800ff9c:	0800ffb1 	.word	0x0800ffb1
 800ffa0:	0800ffb7 	.word	0x0800ffb7
    case HAL_OK :
      usb_status = USBD_OK;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	73fb      	strb	r3, [r7, #15]
    break;
 800ffa8:	e00b      	b.n	800ffc2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ffaa:	2303      	movs	r3, #3
 800ffac:	73fb      	strb	r3, [r7, #15]
    break;
 800ffae:	e008      	b.n	800ffc2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	73fb      	strb	r3, [r7, #15]
    break;
 800ffb4:	e005      	b.n	800ffc2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ffb6:	2303      	movs	r3, #3
 800ffb8:	73fb      	strb	r3, [r7, #15]
    break;
 800ffba:	e002      	b.n	800ffc2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ffbc:	2303      	movs	r3, #3
 800ffbe:	73fb      	strb	r3, [r7, #15]
    break;
 800ffc0:	bf00      	nop
  }
  return usb_status;
 800ffc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3710      	adds	r7, #16
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}

0800ffcc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	4608      	mov	r0, r1
 800ffd6:	4611      	mov	r1, r2
 800ffd8:	461a      	mov	r2, r3
 800ffda:	4603      	mov	r3, r0
 800ffdc:	70fb      	strb	r3, [r7, #3]
 800ffde:	460b      	mov	r3, r1
 800ffe0:	70bb      	strb	r3, [r7, #2]
 800ffe2:	4613      	mov	r3, r2
 800ffe4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffea:	2300      	movs	r3, #0
 800ffec:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fff4:	78bb      	ldrb	r3, [r7, #2]
 800fff6:	883a      	ldrh	r2, [r7, #0]
 800fff8:	78f9      	ldrb	r1, [r7, #3]
 800fffa:	f7f6 fd02 	bl	8006a02 <HAL_PCD_EP_Open>
 800fffe:	4603      	mov	r3, r0
 8010000:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010002:	7bbb      	ldrb	r3, [r7, #14]
 8010004:	2b03      	cmp	r3, #3
 8010006:	d817      	bhi.n	8010038 <USBD_LL_OpenEP+0x6c>
 8010008:	a201      	add	r2, pc, #4	; (adr r2, 8010010 <USBD_LL_OpenEP+0x44>)
 801000a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801000e:	bf00      	nop
 8010010:	08010021 	.word	0x08010021
 8010014:	08010027 	.word	0x08010027
 8010018:	0801002d 	.word	0x0801002d
 801001c:	08010033 	.word	0x08010033
    case HAL_OK :
      usb_status = USBD_OK;
 8010020:	2300      	movs	r3, #0
 8010022:	73fb      	strb	r3, [r7, #15]
    break;
 8010024:	e00b      	b.n	801003e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010026:	2303      	movs	r3, #3
 8010028:	73fb      	strb	r3, [r7, #15]
    break;
 801002a:	e008      	b.n	801003e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801002c:	2301      	movs	r3, #1
 801002e:	73fb      	strb	r3, [r7, #15]
    break;
 8010030:	e005      	b.n	801003e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010032:	2303      	movs	r3, #3
 8010034:	73fb      	strb	r3, [r7, #15]
    break;
 8010036:	e002      	b.n	801003e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8010038:	2303      	movs	r3, #3
 801003a:	73fb      	strb	r3, [r7, #15]
    break;
 801003c:	bf00      	nop
  }
  return usb_status;
 801003e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010040:	4618      	mov	r0, r3
 8010042:	3710      	adds	r7, #16
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b084      	sub	sp, #16
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	460b      	mov	r3, r1
 8010052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010054:	2300      	movs	r3, #0
 8010056:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010058:	2300      	movs	r3, #0
 801005a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010062:	78fa      	ldrb	r2, [r7, #3]
 8010064:	4611      	mov	r1, r2
 8010066:	4618      	mov	r0, r3
 8010068:	f7f6 fd33 	bl	8006ad2 <HAL_PCD_EP_Close>
 801006c:	4603      	mov	r3, r0
 801006e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010070:	7bbb      	ldrb	r3, [r7, #14]
 8010072:	2b03      	cmp	r3, #3
 8010074:	d816      	bhi.n	80100a4 <USBD_LL_CloseEP+0x5c>
 8010076:	a201      	add	r2, pc, #4	; (adr r2, 801007c <USBD_LL_CloseEP+0x34>)
 8010078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801007c:	0801008d 	.word	0x0801008d
 8010080:	08010093 	.word	0x08010093
 8010084:	08010099 	.word	0x08010099
 8010088:	0801009f 	.word	0x0801009f
    case HAL_OK :
      usb_status = USBD_OK;
 801008c:	2300      	movs	r3, #0
 801008e:	73fb      	strb	r3, [r7, #15]
    break;
 8010090:	e00b      	b.n	80100aa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010092:	2303      	movs	r3, #3
 8010094:	73fb      	strb	r3, [r7, #15]
    break;
 8010096:	e008      	b.n	80100aa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010098:	2301      	movs	r3, #1
 801009a:	73fb      	strb	r3, [r7, #15]
    break;
 801009c:	e005      	b.n	80100aa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801009e:	2303      	movs	r3, #3
 80100a0:	73fb      	strb	r3, [r7, #15]
    break;
 80100a2:	e002      	b.n	80100aa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80100a4:	2303      	movs	r3, #3
 80100a6:	73fb      	strb	r3, [r7, #15]
    break;
 80100a8:	bf00      	nop
  }
  return usb_status;
 80100aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	3710      	adds	r7, #16
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}

080100b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b084      	sub	sp, #16
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
 80100bc:	460b      	mov	r3, r1
 80100be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100c0:	2300      	movs	r3, #0
 80100c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100c4:	2300      	movs	r3, #0
 80100c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80100ce:	78fa      	ldrb	r2, [r7, #3]
 80100d0:	4611      	mov	r1, r2
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7f6 fdda 	bl	8006c8c <HAL_PCD_EP_SetStall>
 80100d8:	4603      	mov	r3, r0
 80100da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80100dc:	7bbb      	ldrb	r3, [r7, #14]
 80100de:	2b03      	cmp	r3, #3
 80100e0:	d816      	bhi.n	8010110 <USBD_LL_StallEP+0x5c>
 80100e2:	a201      	add	r2, pc, #4	; (adr r2, 80100e8 <USBD_LL_StallEP+0x34>)
 80100e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100e8:	080100f9 	.word	0x080100f9
 80100ec:	080100ff 	.word	0x080100ff
 80100f0:	08010105 	.word	0x08010105
 80100f4:	0801010b 	.word	0x0801010b
    case HAL_OK :
      usb_status = USBD_OK;
 80100f8:	2300      	movs	r3, #0
 80100fa:	73fb      	strb	r3, [r7, #15]
    break;
 80100fc:	e00b      	b.n	8010116 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80100fe:	2303      	movs	r3, #3
 8010100:	73fb      	strb	r3, [r7, #15]
    break;
 8010102:	e008      	b.n	8010116 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010104:	2301      	movs	r3, #1
 8010106:	73fb      	strb	r3, [r7, #15]
    break;
 8010108:	e005      	b.n	8010116 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801010a:	2303      	movs	r3, #3
 801010c:	73fb      	strb	r3, [r7, #15]
    break;
 801010e:	e002      	b.n	8010116 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010110:	2303      	movs	r3, #3
 8010112:	73fb      	strb	r3, [r7, #15]
    break;
 8010114:	bf00      	nop
  }
  return usb_status;
 8010116:	7bfb      	ldrb	r3, [r7, #15]
}
 8010118:	4618      	mov	r0, r3
 801011a:	3710      	adds	r7, #16
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b084      	sub	sp, #16
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	460b      	mov	r3, r1
 801012a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801012c:	2300      	movs	r3, #0
 801012e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010130:	2300      	movs	r3, #0
 8010132:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801013a:	78fa      	ldrb	r2, [r7, #3]
 801013c:	4611      	mov	r1, r2
 801013e:	4618      	mov	r0, r3
 8010140:	f7f6 fe06 	bl	8006d50 <HAL_PCD_EP_ClrStall>
 8010144:	4603      	mov	r3, r0
 8010146:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010148:	7bbb      	ldrb	r3, [r7, #14]
 801014a:	2b03      	cmp	r3, #3
 801014c:	d816      	bhi.n	801017c <USBD_LL_ClearStallEP+0x5c>
 801014e:	a201      	add	r2, pc, #4	; (adr r2, 8010154 <USBD_LL_ClearStallEP+0x34>)
 8010150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010154:	08010165 	.word	0x08010165
 8010158:	0801016b 	.word	0x0801016b
 801015c:	08010171 	.word	0x08010171
 8010160:	08010177 	.word	0x08010177
    case HAL_OK :
      usb_status = USBD_OK;
 8010164:	2300      	movs	r3, #0
 8010166:	73fb      	strb	r3, [r7, #15]
    break;
 8010168:	e00b      	b.n	8010182 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801016a:	2303      	movs	r3, #3
 801016c:	73fb      	strb	r3, [r7, #15]
    break;
 801016e:	e008      	b.n	8010182 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010170:	2301      	movs	r3, #1
 8010172:	73fb      	strb	r3, [r7, #15]
    break;
 8010174:	e005      	b.n	8010182 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010176:	2303      	movs	r3, #3
 8010178:	73fb      	strb	r3, [r7, #15]
    break;
 801017a:	e002      	b.n	8010182 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801017c:	2303      	movs	r3, #3
 801017e:	73fb      	strb	r3, [r7, #15]
    break;
 8010180:	bf00      	nop
  }
  return usb_status;
 8010182:	7bfb      	ldrb	r3, [r7, #15]
}
 8010184:	4618      	mov	r0, r3
 8010186:	3710      	adds	r7, #16
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}

0801018c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801018c:	b480      	push	{r7}
 801018e:	b085      	sub	sp, #20
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	460b      	mov	r3, r1
 8010196:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801019e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80101a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	da0b      	bge.n	80101c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80101a8:	78fb      	ldrb	r3, [r7, #3]
 80101aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80101ae:	68f9      	ldr	r1, [r7, #12]
 80101b0:	4613      	mov	r3, r2
 80101b2:	00db      	lsls	r3, r3, #3
 80101b4:	1a9b      	subs	r3, r3, r2
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	440b      	add	r3, r1
 80101ba:	333e      	adds	r3, #62	; 0x3e
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	e00b      	b.n	80101d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80101c0:	78fb      	ldrb	r3, [r7, #3]
 80101c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80101c6:	68f9      	ldr	r1, [r7, #12]
 80101c8:	4613      	mov	r3, r2
 80101ca:	00db      	lsls	r3, r3, #3
 80101cc:	1a9b      	subs	r3, r3, r2
 80101ce:	009b      	lsls	r3, r3, #2
 80101d0:	440b      	add	r3, r1
 80101d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80101d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80101d8:	4618      	mov	r0, r3
 80101da:	3714      	adds	r7, #20
 80101dc:	46bd      	mov	sp, r7
 80101de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e2:	4770      	bx	lr

080101e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b084      	sub	sp, #16
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	460b      	mov	r3, r1
 80101ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101f0:	2300      	movs	r3, #0
 80101f2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101f4:	2300      	movs	r3, #0
 80101f6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80101fe:	78fa      	ldrb	r2, [r7, #3]
 8010200:	4611      	mov	r1, r2
 8010202:	4618      	mov	r0, r3
 8010204:	f7f6 fbd8 	bl	80069b8 <HAL_PCD_SetAddress>
 8010208:	4603      	mov	r3, r0
 801020a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801020c:	7bbb      	ldrb	r3, [r7, #14]
 801020e:	2b03      	cmp	r3, #3
 8010210:	d816      	bhi.n	8010240 <USBD_LL_SetUSBAddress+0x5c>
 8010212:	a201      	add	r2, pc, #4	; (adr r2, 8010218 <USBD_LL_SetUSBAddress+0x34>)
 8010214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010218:	08010229 	.word	0x08010229
 801021c:	0801022f 	.word	0x0801022f
 8010220:	08010235 	.word	0x08010235
 8010224:	0801023b 	.word	0x0801023b
    case HAL_OK :
      usb_status = USBD_OK;
 8010228:	2300      	movs	r3, #0
 801022a:	73fb      	strb	r3, [r7, #15]
    break;
 801022c:	e00b      	b.n	8010246 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801022e:	2303      	movs	r3, #3
 8010230:	73fb      	strb	r3, [r7, #15]
    break;
 8010232:	e008      	b.n	8010246 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010234:	2301      	movs	r3, #1
 8010236:	73fb      	strb	r3, [r7, #15]
    break;
 8010238:	e005      	b.n	8010246 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801023a:	2303      	movs	r3, #3
 801023c:	73fb      	strb	r3, [r7, #15]
    break;
 801023e:	e002      	b.n	8010246 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8010240:	2303      	movs	r3, #3
 8010242:	73fb      	strb	r3, [r7, #15]
    break;
 8010244:	bf00      	nop
  }
  return usb_status;
 8010246:	7bfb      	ldrb	r3, [r7, #15]
}
 8010248:	4618      	mov	r0, r3
 801024a:	3710      	adds	r7, #16
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}

08010250 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b086      	sub	sp, #24
 8010254:	af00      	add	r7, sp, #0
 8010256:	60f8      	str	r0, [r7, #12]
 8010258:	607a      	str	r2, [r7, #4]
 801025a:	603b      	str	r3, [r7, #0]
 801025c:	460b      	mov	r3, r1
 801025e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010260:	2300      	movs	r3, #0
 8010262:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010264:	2300      	movs	r3, #0
 8010266:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801026e:	7af9      	ldrb	r1, [r7, #11]
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	f7f6 fccd 	bl	8006c12 <HAL_PCD_EP_Transmit>
 8010278:	4603      	mov	r3, r0
 801027a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801027c:	7dbb      	ldrb	r3, [r7, #22]
 801027e:	2b03      	cmp	r3, #3
 8010280:	d816      	bhi.n	80102b0 <USBD_LL_Transmit+0x60>
 8010282:	a201      	add	r2, pc, #4	; (adr r2, 8010288 <USBD_LL_Transmit+0x38>)
 8010284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010288:	08010299 	.word	0x08010299
 801028c:	0801029f 	.word	0x0801029f
 8010290:	080102a5 	.word	0x080102a5
 8010294:	080102ab 	.word	0x080102ab
    case HAL_OK :
      usb_status = USBD_OK;
 8010298:	2300      	movs	r3, #0
 801029a:	75fb      	strb	r3, [r7, #23]
    break;
 801029c:	e00b      	b.n	80102b6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801029e:	2303      	movs	r3, #3
 80102a0:	75fb      	strb	r3, [r7, #23]
    break;
 80102a2:	e008      	b.n	80102b6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80102a4:	2301      	movs	r3, #1
 80102a6:	75fb      	strb	r3, [r7, #23]
    break;
 80102a8:	e005      	b.n	80102b6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80102aa:	2303      	movs	r3, #3
 80102ac:	75fb      	strb	r3, [r7, #23]
    break;
 80102ae:	e002      	b.n	80102b6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80102b0:	2303      	movs	r3, #3
 80102b2:	75fb      	strb	r3, [r7, #23]
    break;
 80102b4:	bf00      	nop
  }
  return usb_status;
 80102b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3718      	adds	r7, #24
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b086      	sub	sp, #24
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	60f8      	str	r0, [r7, #12]
 80102c8:	607a      	str	r2, [r7, #4]
 80102ca:	603b      	str	r3, [r7, #0]
 80102cc:	460b      	mov	r3, r1
 80102ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102d0:	2300      	movs	r3, #0
 80102d2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102d4:	2300      	movs	r3, #0
 80102d6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80102de:	7af9      	ldrb	r1, [r7, #11]
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	687a      	ldr	r2, [r7, #4]
 80102e4:	f7f6 fc3f 	bl	8006b66 <HAL_PCD_EP_Receive>
 80102e8:	4603      	mov	r3, r0
 80102ea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80102ec:	7dbb      	ldrb	r3, [r7, #22]
 80102ee:	2b03      	cmp	r3, #3
 80102f0:	d816      	bhi.n	8010320 <USBD_LL_PrepareReceive+0x60>
 80102f2:	a201      	add	r2, pc, #4	; (adr r2, 80102f8 <USBD_LL_PrepareReceive+0x38>)
 80102f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102f8:	08010309 	.word	0x08010309
 80102fc:	0801030f 	.word	0x0801030f
 8010300:	08010315 	.word	0x08010315
 8010304:	0801031b 	.word	0x0801031b
    case HAL_OK :
      usb_status = USBD_OK;
 8010308:	2300      	movs	r3, #0
 801030a:	75fb      	strb	r3, [r7, #23]
    break;
 801030c:	e00b      	b.n	8010326 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801030e:	2303      	movs	r3, #3
 8010310:	75fb      	strb	r3, [r7, #23]
    break;
 8010312:	e008      	b.n	8010326 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010314:	2301      	movs	r3, #1
 8010316:	75fb      	strb	r3, [r7, #23]
    break;
 8010318:	e005      	b.n	8010326 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801031a:	2303      	movs	r3, #3
 801031c:	75fb      	strb	r3, [r7, #23]
    break;
 801031e:	e002      	b.n	8010326 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8010320:	2303      	movs	r3, #3
 8010322:	75fb      	strb	r3, [r7, #23]
    break;
 8010324:	bf00      	nop
  }
  return usb_status;
 8010326:	7dfb      	ldrb	r3, [r7, #23]
}
 8010328:	4618      	mov	r0, r3
 801032a:	3718      	adds	r7, #24
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}

08010330 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
 8010338:	460b      	mov	r3, r1
 801033a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010342:	78fa      	ldrb	r2, [r7, #3]
 8010344:	4611      	mov	r1, r2
 8010346:	4618      	mov	r0, r3
 8010348:	f7f6 fc4b 	bl	8006be2 <HAL_PCD_EP_GetRxCount>
 801034c:	4603      	mov	r3, r0
}
 801034e:	4618      	mov	r0, r3
 8010350:	3708      	adds	r7, #8
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
	...

08010358 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	460b      	mov	r3, r1
 8010362:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010364:	78fb      	ldrb	r3, [r7, #3]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d002      	beq.n	8010370 <HAL_PCDEx_LPM_Callback+0x18>
 801036a:	2b01      	cmp	r3, #1
 801036c:	d01f      	beq.n	80103ae <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801036e:	e03b      	b.n	80103e8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6a1b      	ldr	r3, [r3, #32]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d007      	beq.n	8010388 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010378:	f000 f83c 	bl	80103f4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801037c:	4b1c      	ldr	r3, [pc, #112]	; (80103f0 <HAL_PCDEx_LPM_Callback+0x98>)
 801037e:	691b      	ldr	r3, [r3, #16]
 8010380:	4a1b      	ldr	r2, [pc, #108]	; (80103f0 <HAL_PCDEx_LPM_Callback+0x98>)
 8010382:	f023 0306 	bic.w	r3, r3, #6
 8010386:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	687a      	ldr	r2, [r7, #4]
 8010394:	6812      	ldr	r2, [r2, #0]
 8010396:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801039a:	f023 0301 	bic.w	r3, r3, #1
 801039e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7fe fb38 	bl	800ea1c <USBD_LL_Resume>
    break;
 80103ac:	e01c      	b.n	80103e8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	687a      	ldr	r2, [r7, #4]
 80103ba:	6812      	ldr	r2, [r2, #0]
 80103bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80103c0:	f043 0301 	orr.w	r3, r3, #1
 80103c4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7fe fb10 	bl	800e9f2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6a1b      	ldr	r3, [r3, #32]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d005      	beq.n	80103e6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80103da:	4b05      	ldr	r3, [pc, #20]	; (80103f0 <HAL_PCDEx_LPM_Callback+0x98>)
 80103dc:	691b      	ldr	r3, [r3, #16]
 80103de:	4a04      	ldr	r2, [pc, #16]	; (80103f0 <HAL_PCDEx_LPM_Callback+0x98>)
 80103e0:	f043 0306 	orr.w	r3, r3, #6
 80103e4:	6113      	str	r3, [r2, #16]
    break;
 80103e6:	bf00      	nop
}
 80103e8:	bf00      	nop
 80103ea:	3708      	adds	r7, #8
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	e000ed00 	.word	0xe000ed00

080103f4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80103f8:	f7f0 ffb2 	bl	8001360 <SystemClock_Config>
}
 80103fc:	bf00      	nop
 80103fe:	bd80      	pop	{r7, pc}

08010400 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_DNN_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b082      	sub	sp, #8
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 0 */
  if (fct)
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d009      	beq.n	8010424 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8010410:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8010412:	461a      	mov	r2, r3
        err.type, err.code);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801041a:	6839      	ldr	r1, [r7, #0]
 801041c:	4806      	ldr	r0, [pc, #24]	; (8010438 <ai_log_err+0x38>)
 801041e:	f002 fb13 	bl	8012a48 <iprintf>
 8010422:	e008      	b.n	8010436 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8010424:	793b      	ldrb	r3, [r7, #4]
 8010426:	4619      	mov	r1, r3
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801042e:	461a      	mov	r2, r3
 8010430:	4802      	ldr	r0, [pc, #8]	; (801043c <ai_log_err+0x3c>)
 8010432:	f002 fb09 	bl	8012a48 <iprintf>

  do {} while (1);
 8010436:	e7fe      	b.n	8010436 <ai_log_err+0x36>
 8010438:	080166fc 	.word	0x080166fc
 801043c:	08016730 	.word	0x08016730

08010440 <ai_boostrap>:
  /* USER CODE END 0 */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b090      	sub	sp, #64	; 0x40
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_dnn_create(&dnn, AI_DNN_DATA_CONFIG);
 801044a:	2100      	movs	r1, #0
 801044c:	4838      	ldr	r0, [pc, #224]	; (8010530 <ai_boostrap+0xf0>)
 801044e:	f000 f9bd 	bl	80107cc <ai_dnn_create>
 8010452:	4603      	mov	r3, r0
 8010454:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (err.type != AI_ERROR_NONE) {
 8010456:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801045a:	2b00      	cmp	r3, #0
 801045c:	d006      	beq.n	801046c <ai_boostrap+0x2c>
    ai_log_err(err, "ai_dnn_create");
 801045e:	4935      	ldr	r1, [pc, #212]	; (8010534 <ai_boostrap+0xf4>)
 8010460:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010462:	f7ff ffcd 	bl	8010400 <ai_log_err>
    return -1;
 8010466:	f04f 33ff 	mov.w	r3, #4294967295
 801046a:	e05c      	b.n	8010526 <ai_boostrap+0xe6>
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = {
 801046c:	4b32      	ldr	r3, [pc, #200]	; (8010538 <ai_boostrap+0xf8>)
 801046e:	60fb      	str	r3, [r7, #12]
 8010470:	2301      	movs	r3, #1
 8010472:	823b      	strh	r3, [r7, #16]
 8010474:	2301      	movs	r3, #1
 8010476:	827b      	strh	r3, [r7, #18]
 8010478:	2301      	movs	r3, #1
 801047a:	82bb      	strh	r3, [r7, #20]
 801047c:	f243 5384 	movw	r3, #13700	; 0x3584
 8010480:	61bb      	str	r3, [r7, #24]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	61fb      	str	r3, [r7, #28]
 8010486:	2300      	movs	r3, #0
 8010488:	623b      	str	r3, [r7, #32]
 801048a:	4b2c      	ldr	r3, [pc, #176]	; (801053c <ai_boostrap+0xfc>)
 801048c:	627b      	str	r3, [r7, #36]	; 0x24
 801048e:	2301      	movs	r3, #1
 8010490:	853b      	strh	r3, [r7, #40]	; 0x28
 8010492:	2301      	movs	r3, #1
 8010494:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010496:	2301      	movs	r3, #1
 8010498:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801049a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801049e:	633b      	str	r3, [r7, #48]	; 0x30
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	637b      	str	r3, [r7, #52]	; 0x34
 80104a4:	2300      	movs	r3, #0
 80104a6:	63bb      	str	r3, [r7, #56]	; 0x38
      AI_DNN_DATA_WEIGHTS(w_addr),
      AI_DNN_DATA_ACTIVATIONS(act_addr) };

  if (!ai_dnn_init(dnn, &params)) {
 80104a8:	4b21      	ldr	r3, [pc, #132]	; (8010530 <ai_boostrap+0xf0>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	f107 020c 	add.w	r2, r7, #12
 80104b0:	4611      	mov	r1, r2
 80104b2:	4618      	mov	r0, r3
 80104b4:	f000 f9ac 	bl	8010810 <ai_dnn_init>
 80104b8:	4603      	mov	r3, r0
 80104ba:	f083 0301 	eor.w	r3, r3, #1
 80104be:	b2db      	uxtb	r3, r3
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d00d      	beq.n	80104e0 <ai_boostrap+0xa0>
      err = ai_dnn_get_error(dnn);
 80104c4:	4b1a      	ldr	r3, [pc, #104]	; (8010530 <ai_boostrap+0xf0>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	4618      	mov	r0, r3
 80104ca:	f000 f973 	bl	80107b4 <ai_dnn_get_error>
 80104ce:	4603      	mov	r3, r0
 80104d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      ai_log_err(err, "ai_dnn_init");
 80104d2:	491b      	ldr	r1, [pc, #108]	; (8010540 <ai_boostrap+0x100>)
 80104d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80104d6:	f7ff ff93 	bl	8010400 <ai_log_err>
      return -1;
 80104da:	f04f 33ff 	mov.w	r3, #4294967295
 80104de:	e022      	b.n	8010526 <ai_boostrap+0xe6>
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_dnn_get_info(dnn, &dnn_info)) {
 80104e0:	4b13      	ldr	r3, [pc, #76]	; (8010530 <ai_boostrap+0xf0>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	4917      	ldr	r1, [pc, #92]	; (8010544 <ai_boostrap+0x104>)
 80104e6:	4618      	mov	r0, r3
 80104e8:	f000 f8fe 	bl	80106e8 <ai_dnn_get_info>
 80104ec:	4603      	mov	r3, r0
 80104ee:	f083 0301 	eor.w	r3, r3, #1
 80104f2:	b2db      	uxtb	r3, r3
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d015      	beq.n	8010524 <ai_boostrap+0xe4>
    err = ai_dnn_get_error(dnn);
 80104f8:	4b0d      	ldr	r3, [pc, #52]	; (8010530 <ai_boostrap+0xf0>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	4618      	mov	r0, r3
 80104fe:	f000 f959 	bl	80107b4 <ai_dnn_get_error>
 8010502:	4603      	mov	r3, r0
 8010504:	63fb      	str	r3, [r7, #60]	; 0x3c
    ai_log_err(err, "ai_dnn_get_error");
 8010506:	4910      	ldr	r1, [pc, #64]	; (8010548 <ai_boostrap+0x108>)
 8010508:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801050a:	f7ff ff79 	bl	8010400 <ai_log_err>
    ai_dnn_destroy(dnn);
 801050e:	4b08      	ldr	r3, [pc, #32]	; (8010530 <ai_boostrap+0xf0>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	4618      	mov	r0, r3
 8010514:	f000 f970 	bl	80107f8 <ai_dnn_destroy>
    dnn = AI_HANDLE_NULL;
 8010518:	4b05      	ldr	r3, [pc, #20]	; (8010530 <ai_boostrap+0xf0>)
 801051a:	2200      	movs	r2, #0
 801051c:	601a      	str	r2, [r3, #0]
    return -3;
 801051e:	f06f 0302 	mvn.w	r3, #2
 8010522:	e000      	b.n	8010526 <ai_boostrap+0xe6>
  }

  return 0;
 8010524:	2300      	movs	r3, #0
}
 8010526:	4618      	mov	r0, r3
 8010528:	3740      	adds	r7, #64	; 0x40
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	200009c8 	.word	0x200009c8
 8010534:	08016760 	.word	0x08016760
 8010538:	40040440 	.word	0x40040440
 801053c:	00040440 	.word	0x00040440
 8010540:	08016770 	.word	0x08016770
 8010544:	200009cc 	.word	0x200009cc
 8010548:	0801677c 	.word	0x0801677c

0801054c <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8010550:	4805      	ldr	r0, [pc, #20]	; (8010568 <MX_X_CUBE_AI_Init+0x1c>)
 8010552:	f002 faed 	bl	8012b30 <puts>

  ai_boostrap(ai_dnn_data_weights_get(), activations);
 8010556:	f000 f9ab 	bl	80108b0 <ai_dnn_data_weights_get>
 801055a:	4603      	mov	r3, r0
 801055c:	4903      	ldr	r1, [pc, #12]	; (801056c <MX_X_CUBE_AI_Init+0x20>)
 801055e:	4618      	mov	r0, r3
 8010560:	f7ff ff6e 	bl	8010440 <ai_boostrap>
    /* USER CODE END 3 */
}
 8010564:	bf00      	nop
 8010566:	bd80      	pop	{r7, pc}
 8010568:	0801679c 	.word	0x0801679c
 801056c:	20000a40 	.word	0x20000a40

08010570 <dnn_configure_activations>:


AI_DECLARE_STATIC
ai_bool dnn_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8010570:	b480      	push	{r7}
 8010572:	b085      	sub	sp, #20
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_DNN_ACTIVATIONS_ALIGNMENT));
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	691b      	ldr	r3, [r3, #16]
 801057e:	3303      	adds	r3, #3
 8010580:	f023 0303 	bic.w	r3, r3, #3
 8010584:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    flatten_input_output_array.data = AI_PTR(NULL);
 8010586:	4b16      	ldr	r3, [pc, #88]	; (80105e0 <dnn_configure_activations+0x70>)
 8010588:	2200      	movs	r2, #0
 801058a:	609a      	str	r2, [r3, #8]
    flatten_input_output_array.data_start = AI_PTR(NULL);
 801058c:	4b14      	ldr	r3, [pc, #80]	; (80105e0 <dnn_configure_activations+0x70>)
 801058e:	2200      	movs	r2, #0
 8010590:	60da      	str	r2, [r3, #12]
    dense_1_output_array.data = AI_PTR(activations + 0);
 8010592:	4a14      	ldr	r2, [pc, #80]	; (80105e4 <dnn_configure_activations+0x74>)
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 0);
 8010598:	4a12      	ldr	r2, [pc, #72]	; (80105e4 <dnn_configure_activations+0x74>)
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 0);
 801059e:	4a12      	ldr	r2, [pc, #72]	; (80105e8 <dnn_configure_activations+0x78>)
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 80105a4:	4a10      	ldr	r2, [pc, #64]	; (80105e8 <dnn_configure_activations+0x78>)
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 128);
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	3380      	adds	r3, #128	; 0x80
 80105ae:	4a0f      	ldr	r2, [pc, #60]	; (80105ec <dnn_configure_activations+0x7c>)
 80105b0:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 128);
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	3380      	adds	r3, #128	; 0x80
 80105b6:	4a0d      	ldr	r2, [pc, #52]	; (80105ec <dnn_configure_activations+0x7c>)
 80105b8:	60d3      	str	r3, [r2, #12]
    nl_2_output_array.data = AI_PTR(activations + 0);
 80105ba:	4a0d      	ldr	r2, [pc, #52]	; (80105f0 <dnn_configure_activations+0x80>)
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6093      	str	r3, [r2, #8]
    nl_2_output_array.data_start = AI_PTR(activations + 0);
 80105c0:	4a0b      	ldr	r2, [pc, #44]	; (80105f0 <dnn_configure_activations+0x80>)
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(NULL);
 80105c6:	4b0b      	ldr	r3, [pc, #44]	; (80105f4 <dnn_configure_activations+0x84>)
 80105c8:	2200      	movs	r2, #0
 80105ca:	609a      	str	r2, [r3, #8]
    dense_3_output_array.data_start = AI_PTR(NULL);
 80105cc:	4b09      	ldr	r3, [pc, #36]	; (80105f4 <dnn_configure_activations+0x84>)
 80105ce:	2200      	movs	r2, #0
 80105d0:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80105d2:	2301      	movs	r3, #1
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3714      	adds	r7, #20
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr
 80105e0:	20000250 	.word	0x20000250
 80105e4:	20000260 	.word	0x20000260
 80105e8:	20000270 	.word	0x20000270
 80105ec:	20000280 	.word	0x20000280
 80105f0:	20000290 	.word	0x20000290
 80105f4:	200002a0 	.word	0x200002a0

080105f8 <dnn_configure_weights>:


AI_DECLARE_STATIC
ai_bool dnn_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 80105f8:	b480      	push	{r7}
 80105fa:	b085      	sub	sp, #20
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
 8010600:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	691b      	ldr	r3, [r3, #16]
 8010606:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8010608:	4b31      	ldr	r3, [pc, #196]	; (80106d0 <dnn_configure_weights+0xd8>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010610:	4a2f      	ldr	r2, [pc, #188]	; (80106d0 <dnn_configure_weights+0xd8>)
 8010612:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights + 13696);
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	f503 5356 	add.w	r3, r3, #13696	; 0x3580
 801061a:	4a2d      	ldr	r2, [pc, #180]	; (80106d0 <dnn_configure_weights+0xd8>)
 801061c:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights + 13696);
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	f503 5356 	add.w	r3, r3, #13696	; 0x3580
 8010624:	4a2a      	ldr	r2, [pc, #168]	; (80106d0 <dnn_configure_weights+0xd8>)
 8010626:	60d3      	str	r3, [r2, #12]
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8010628:	4b2a      	ldr	r3, [pc, #168]	; (80106d4 <dnn_configure_weights+0xdc>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010630:	4a28      	ldr	r2, [pc, #160]	; (80106d4 <dnn_configure_weights+0xdc>)
 8010632:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights + 13568);
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
 801063a:	4a26      	ldr	r2, [pc, #152]	; (80106d4 <dnn_configure_weights+0xdc>)
 801063c:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights + 13568);
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
 8010644:	4a23      	ldr	r2, [pc, #140]	; (80106d4 <dnn_configure_weights+0xdc>)
 8010646:	60d3      	str	r3, [r2, #12]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8010648:	4b23      	ldr	r3, [pc, #140]	; (80106d8 <dnn_configure_weights+0xe0>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010650:	4a21      	ldr	r2, [pc, #132]	; (80106d8 <dnn_configure_weights+0xe0>)
 8010652:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 13440);
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f503 5352 	add.w	r3, r3, #13440	; 0x3480
 801065a:	4a1f      	ldr	r2, [pc, #124]	; (80106d8 <dnn_configure_weights+0xe0>)
 801065c:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 13440);
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f503 5352 	add.w	r3, r3, #13440	; 0x3480
 8010664:	4a1c      	ldr	r2, [pc, #112]	; (80106d8 <dnn_configure_weights+0xe0>)
 8010666:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8010668:	4b1c      	ldr	r3, [pc, #112]	; (80106dc <dnn_configure_weights+0xe4>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010670:	4a1a      	ldr	r2, [pc, #104]	; (80106dc <dnn_configure_weights+0xe4>)
 8010672:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 9344);
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
 801067a:	4a18      	ldr	r2, [pc, #96]	; (80106dc <dnn_configure_weights+0xe4>)
 801067c:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 9344);
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
 8010684:	4a15      	ldr	r2, [pc, #84]	; (80106dc <dnn_configure_weights+0xe4>)
 8010686:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8010688:	4b15      	ldr	r3, [pc, #84]	; (80106e0 <dnn_configure_weights+0xe8>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010690:	4a13      	ldr	r2, [pc, #76]	; (80106e0 <dnn_configure_weights+0xe8>)
 8010692:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 9216);
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 801069a:	4a11      	ldr	r2, [pc, #68]	; (80106e0 <dnn_configure_weights+0xe8>)
 801069c:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 9216);
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80106a4:	4a0e      	ldr	r2, [pc, #56]	; (80106e0 <dnn_configure_weights+0xe8>)
 80106a6:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80106a8:	4b0e      	ldr	r3, [pc, #56]	; (80106e4 <dnn_configure_weights+0xec>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80106b0:	4a0c      	ldr	r2, [pc, #48]	; (80106e4 <dnn_configure_weights+0xec>)
 80106b2:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 0);
 80106b4:	4a0b      	ldr	r2, [pc, #44]	; (80106e4 <dnn_configure_weights+0xec>)
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 0);
 80106ba:	4a0a      	ldr	r2, [pc, #40]	; (80106e4 <dnn_configure_weights+0xec>)
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	60d3      	str	r3, [r2, #12]
  }

  return true;
 80106c0:	2301      	movs	r3, #1
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3714      	adds	r7, #20
 80106c6:	46bd      	mov	sp, r7
 80106c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106cc:	4770      	bx	lr
 80106ce:	bf00      	nop
 80106d0:	200001f0 	.word	0x200001f0
 80106d4:	20000200 	.word	0x20000200
 80106d8:	20000210 	.word	0x20000210
 80106dc:	20000220 	.word	0x20000220
 80106e0:	20000230 	.word	0x20000230
 80106e4:	20000240 	.word	0x20000240

080106e8 <ai_dnn_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_dnn_get_info(
  ai_handle network, ai_network_report* report)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b0a0      	sub	sp, #128	; 0x80
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f000 fa12 	bl	8010b1c <ai_platform_context_acquire>
 80106f8:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d04a      	beq.n	8010796 <ai_dnn_get_info+0xae>
 8010700:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010702:	2b00      	cmp	r3, #0
 8010704:	d047      	beq.n	8010796 <ai_dnn_get_info+0xae>
  {
    ai_network_report r = {
 8010706:	f107 0308 	add.w	r3, r7, #8
 801070a:	2274      	movs	r2, #116	; 0x74
 801070c:	2100      	movs	r1, #0
 801070e:	4618      	mov	r0, r3
 8010710:	f001 fc8d 	bl	801202e <memset>
 8010714:	4b22      	ldr	r3, [pc, #136]	; (80107a0 <ai_dnn_get_info+0xb8>)
 8010716:	60bb      	str	r3, [r7, #8]
 8010718:	4b22      	ldr	r3, [pc, #136]	; (80107a4 <ai_dnn_get_info+0xbc>)
 801071a:	60fb      	str	r3, [r7, #12]
 801071c:	4b22      	ldr	r3, [pc, #136]	; (80107a8 <ai_dnn_get_info+0xc0>)
 801071e:	613b      	str	r3, [r7, #16]
 8010720:	4b22      	ldr	r3, [pc, #136]	; (80107ac <ai_dnn_get_info+0xc4>)
 8010722:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_DNN_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8010724:	f000 f93c 	bl	80109a0 <ai_platform_runtime_get_revision>
 8010728:	4603      	mov	r3, r0
    ai_network_report r = {
 801072a:	61bb      	str	r3, [r7, #24]
 801072c:	f000 f95a 	bl	80109e4 <ai_platform_runtime_get_version>
 8010730:	4603      	mov	r3, r0
 8010732:	61fb      	str	r3, [r7, #28]
 8010734:	4b1e      	ldr	r3, [pc, #120]	; (80107b0 <ai_dnn_get_info+0xc8>)
 8010736:	623b      	str	r3, [r7, #32]
 8010738:	2305      	movs	r3, #5
 801073a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801073e:	2302      	movs	r3, #2
 8010740:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010744:	2301      	movs	r3, #1
 8010746:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 801074a:	2303      	movs	r3, #3
 801074c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8010750:	f000 f97c 	bl	8010a4c <ai_platform_api_get_version>
 8010754:	4603      	mov	r3, r0
 8010756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010758:	f000 f9ac 	bl	8010ab4 <ai_platform_interface_api_get_version>
 801075c:	4603      	mov	r3, r0
 801075e:	633b      	str	r3, [r7, #48]	; 0x30
 8010760:	f44f 6356 	mov.w	r3, #3424	; 0xd60
 8010764:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 8010766:	f107 0308 	add.w	r3, r7, #8
 801076a:	4619      	mov	r1, r3
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f000 fa31 	bl	8010bd4 <ai_platform_api_get_network_report>
 8010772:	4603      	mov	r3, r0
 8010774:	f083 0301 	eor.w	r3, r3, #1
 8010778:	b2db      	uxtb	r3, r3
 801077a:	2b00      	cmp	r3, #0
 801077c:	d001      	beq.n	8010782 <ai_dnn_get_info+0x9a>
 801077e:	2300      	movs	r3, #0
 8010780:	e00a      	b.n	8010798 <ai_dnn_get_info+0xb0>

    *report = r;
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	4618      	mov	r0, r3
 8010786:	f107 0308 	add.w	r3, r7, #8
 801078a:	2274      	movs	r2, #116	; 0x74
 801078c:	4619      	mov	r1, r3
 801078e:	f001 fc43 	bl	8012018 <memcpy>
    return true;
 8010792:	2301      	movs	r3, #1
 8010794:	e000      	b.n	8010798 <ai_dnn_get_info+0xb0>
  }

  return false;
 8010796:	2300      	movs	r3, #0
}
 8010798:	4618      	mov	r0, r3
 801079a:	3780      	adds	r7, #128	; 0x80
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}
 80107a0:	08016858 	.word	0x08016858
 80107a4:	0801685c 	.word	0x0801685c
 80107a8:	08016880 	.word	0x08016880
 80107ac:	0801689c 	.word	0x0801689c
 80107b0:	080168b4 	.word	0x080168b4

080107b4 <ai_dnn_get_error>:

AI_API_ENTRY
ai_error ai_dnn_get_error(ai_handle network)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f000 f9d7 	bl	8010b70 <ai_platform_network_get_error>
 80107c2:	4603      	mov	r3, r0
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <ai_dnn_create>:

AI_API_ENTRY
ai_error ai_dnn_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b084      	sub	sp, #16
 80107d0:	af02      	add	r7, sp, #8
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80107d6:	2300      	movs	r3, #0
 80107d8:	9301      	str	r3, [sp, #4]
 80107da:	2303      	movs	r3, #3
 80107dc:	9300      	str	r3, [sp, #0]
 80107de:	2301      	movs	r3, #1
 80107e0:	4a04      	ldr	r2, [pc, #16]	; (80107f4 <ai_dnn_create+0x28>)
 80107e2:	6839      	ldr	r1, [r7, #0]
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f000 fadf 	bl	8010da8 <ai_platform_network_create>
 80107ea:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	20000190 	.word	0x20000190

080107f8 <ai_dnn_destroy>:

AI_API_ENTRY
ai_handle ai_dnn_destroy(ai_handle network)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f000 fb29 	bl	8010e58 <ai_platform_network_destroy>
 8010806:	4603      	mov	r3, r0
}
 8010808:	4618      	mov	r0, r3
 801080a:	3708      	adds	r7, #8
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <ai_dnn_init>:

AI_API_ENTRY
ai_bool ai_dnn_init(
  ai_handle network, const ai_network_params* params)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b084      	sub	sp, #16
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 801081a:	6839      	ldr	r1, [r7, #0]
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f000 fb4b 	bl	8010eb8 <ai_platform_network_init>
 8010822:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d101      	bne.n	801082e <ai_dnn_init+0x1e>
 801082a:	2300      	movs	r3, #0
 801082c:	e02b      	b.n	8010886 <ai_dnn_init+0x76>

  ai_bool ok = true;
 801082e:	2301      	movs	r3, #1
 8010830:	72fb      	strb	r3, [r7, #11]
  ok &= dnn_configure_weights(net_ctx, &params->params);
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	4619      	mov	r1, r3
 8010836:	68f8      	ldr	r0, [r7, #12]
 8010838:	f7ff fede 	bl	80105f8 <dnn_configure_weights>
 801083c:	4603      	mov	r3, r0
 801083e:	461a      	mov	r2, r3
 8010840:	7afb      	ldrb	r3, [r7, #11]
 8010842:	4013      	ands	r3, r2
 8010844:	2b00      	cmp	r3, #0
 8010846:	bf14      	ite	ne
 8010848:	2301      	movne	r3, #1
 801084a:	2300      	moveq	r3, #0
 801084c:	72fb      	strb	r3, [r7, #11]
  ok &= dnn_configure_activations(net_ctx, &params->activations);
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	3318      	adds	r3, #24
 8010852:	4619      	mov	r1, r3
 8010854:	68f8      	ldr	r0, [r7, #12]
 8010856:	f7ff fe8b 	bl	8010570 <dnn_configure_activations>
 801085a:	4603      	mov	r3, r0
 801085c:	461a      	mov	r2, r3
 801085e:	7afb      	ldrb	r3, [r7, #11]
 8010860:	4013      	ands	r3, r2
 8010862:	2b00      	cmp	r3, #0
 8010864:	bf14      	ite	ne
 8010866:	2301      	movne	r3, #1
 8010868:	2300      	moveq	r3, #0
 801086a:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f000 fba1 	bl	8010fb4 <ai_platform_network_post_init>
 8010872:	4603      	mov	r3, r0
 8010874:	461a      	mov	r2, r3
 8010876:	7afb      	ldrb	r3, [r7, #11]
 8010878:	4013      	ands	r3, r2
 801087a:	2b00      	cmp	r3, #0
 801087c:	bf14      	ite	ne
 801087e:	2301      	movne	r3, #1
 8010880:	2300      	moveq	r3, #0
 8010882:	72fb      	strb	r3, [r7, #11]

  return ok;
 8010884:	7afb      	ldrb	r3, [r7, #11]
}
 8010886:	4618      	mov	r0, r3
 8010888:	3710      	adds	r7, #16
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}

0801088e <ai_dnn_run>:


AI_API_ENTRY
ai_i32 ai_dnn_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 801088e:	b580      	push	{r7, lr}
 8010890:	b084      	sub	sp, #16
 8010892:	af00      	add	r7, sp, #0
 8010894:	60f8      	str	r0, [r7, #12]
 8010896:	60b9      	str	r1, [r7, #8]
 8010898:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	68b9      	ldr	r1, [r7, #8]
 801089e:	68f8      	ldr	r0, [r7, #12]
 80108a0:	f000 fbd0 	bl	8011044 <ai_platform_network_process>
 80108a4:	4603      	mov	r3, r0
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3710      	adds	r7, #16
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
	...

080108b0 <ai_dnn_data_weights_get>:
#include "dnn_data.h"

ai_handle ai_dnn_data_weights_get(void)
{
 80108b0:	b480      	push	{r7}
 80108b2:	af00      	add	r7, sp, #0
    0x8c, 0xbd, 0xbf, 0x3d, 0xa4, 0xbe, 0xc1, 0xf3, 0xa4, 0xbc,
    0x30, 0x68, 0x96, 0x3e, 0x9d, 0x3e, 0xff, 0x3c, 0x75, 0xd1,
    0x2d, 0x3e, 0x64, 0x72, 0x7c, 0xbe, 0x17, 0x0c, 0x36, 0x3d
  };

  return AI_HANDLE_PTR(s_dnn_weights);
 80108b4:	4b02      	ldr	r3, [pc, #8]	; (80108c0 <ai_dnn_data_weights_get+0x10>)

}
 80108b6:	4618      	mov	r0, r3
 80108b8:	46bd      	mov	sp, r7
 80108ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108be:	4770      	bx	lr
 80108c0:	0801694c 	.word	0x0801694c

080108c4 <_ai_platform_get_io_buffers_info>:
 80108c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c8:	2400      	movs	r4, #0
 80108ca:	b083      	sub	sp, #12
 80108cc:	4606      	mov	r6, r0
 80108ce:	4688      	mov	r8, r1
 80108d0:	46a3      	mov	fp, r4
 80108d2:	f04f 0a18 	mov.w	sl, #24
 80108d6:	f04f 0901 	mov.w	r9, #1
 80108da:	b2a0      	uxth	r0, r4
 80108dc:	b936      	cbnz	r6, 80108ec <_ai_platform_get_io_buffers_info+0x28>
 80108de:	2800      	cmp	r0, #0
 80108e0:	d03b      	beq.n	801095a <_ai_platform_get_io_buffers_info+0x96>
 80108e2:	68b3      	ldr	r3, [r6, #8]
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	f8c8 3000 	str.w	r3, [r8]
 80108ea:	e036      	b.n	801095a <_ai_platform_get_io_buffers_info+0x96>
 80108ec:	8833      	ldrh	r3, [r6, #0]
 80108ee:	429c      	cmp	r4, r3
 80108f0:	d2f5      	bcs.n	80108de <_ai_platform_get_io_buffers_info+0x1a>
 80108f2:	6873      	ldr	r3, [r6, #4]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d0f2      	beq.n	80108de <_ai_platform_get_io_buffers_info+0x1a>
 80108f8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80108fc:	2d00      	cmp	r5, #0
 80108fe:	d0ee      	beq.n	80108de <_ai_platform_get_io_buffers_info+0x1a>
 8010900:	68b3      	ldr	r3, [r6, #8]
 8010902:	69aa      	ldr	r2, [r5, #24]
 8010904:	6859      	ldr	r1, [r3, #4]
 8010906:	6810      	ldr	r0, [r2, #0]
 8010908:	689f      	ldr	r7, [r3, #8]
 801090a:	9101      	str	r1, [sp, #4]
 801090c:	f001 fadc 	bl	8011ec8 <ai_array_to_buffer_fmt>
 8010910:	9901      	ldr	r1, [sp, #4]
 8010912:	fb0a f304 	mul.w	r3, sl, r4
 8010916:	18ca      	adds	r2, r1, r3
 8010918:	50c8      	str	r0, [r1, r3]
 801091a:	f8a2 9004 	strh.w	r9, [r2, #4]
 801091e:	68eb      	ldr	r3, [r5, #12]
 8010920:	68db      	ldr	r3, [r3, #12]
 8010922:	80d3      	strh	r3, [r2, #6]
 8010924:	68eb      	ldr	r3, [r5, #12]
 8010926:	689b      	ldr	r3, [r3, #8]
 8010928:	8113      	strh	r3, [r2, #8]
 801092a:	68eb      	ldr	r3, [r5, #12]
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	60d3      	str	r3, [r2, #12]
 8010930:	69ab      	ldr	r3, [r5, #24]
 8010932:	00e1      	lsls	r1, r4, #3
 8010934:	689b      	ldr	r3, [r3, #8]
 8010936:	6113      	str	r3, [r2, #16]
 8010938:	1878      	adds	r0, r7, r1
 801093a:	b150      	cbz	r0, 8010952 <_ai_platform_get_io_buffers_info+0x8e>
 801093c:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 8010940:	682b      	ldr	r3, [r5, #0]
 8010942:	6043      	str	r3, [r0, #4]
 8010944:	b11b      	cbz	r3, 801094e <_ai_platform_get_io_buffers_info+0x8a>
 8010946:	885b      	ldrh	r3, [r3, #2]
 8010948:	3300      	adds	r3, #0
 801094a:	bf18      	it	ne
 801094c:	2301      	movne	r3, #1
 801094e:	507b      	str	r3, [r7, r1]
 8010950:	b903      	cbnz	r3, 8010954 <_ai_platform_get_io_buffers_info+0x90>
 8010952:	2000      	movs	r0, #0
 8010954:	6150      	str	r0, [r2, #20]
 8010956:	3401      	adds	r4, #1
 8010958:	e7bf      	b.n	80108da <_ai_platform_get_io_buffers_info+0x16>
 801095a:	b003      	add	sp, #12
 801095c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010960 <_platform_network_state_setup.isra.1>:
 8010960:	b430      	push	{r4, r5}
 8010962:	68dd      	ldr	r5, [r3, #12]
 8010964:	695c      	ldr	r4, [r3, #20]
 8010966:	68ed      	ldr	r5, [r5, #12]
 8010968:	68e4      	ldr	r4, [r4, #12]
 801096a:	fb04 f405 	mul.w	r4, r4, r5
 801096e:	6084      	str	r4, [r0, #8]
 8010970:	8809      	ldrh	r1, [r1, #0]
 8010972:	fb04 f401 	mul.w	r4, r4, r1
 8010976:	60c4      	str	r4, [r0, #12]
 8010978:	6811      	ldr	r1, [r2, #0]
 801097a:	6041      	str	r1, [r0, #4]
 801097c:	6812      	ldr	r2, [r2, #0]
 801097e:	4414      	add	r4, r2
 8010980:	6004      	str	r4, [r0, #0]
 8010982:	699a      	ldr	r2, [r3, #24]
 8010984:	6814      	ldr	r4, [r2, #0]
 8010986:	00a4      	lsls	r4, r4, #2
 8010988:	d407      	bmi.n	801099a <_platform_network_state_setup.isra.1+0x3a>
 801098a:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 801098e:	1b64      	subs	r4, r4, r5
 8010990:	4421      	add	r1, r4
 8010992:	6091      	str	r1, [r2, #8]
 8010994:	699b      	ldr	r3, [r3, #24]
 8010996:	6842      	ldr	r2, [r0, #4]
 8010998:	60da      	str	r2, [r3, #12]
 801099a:	bc30      	pop	{r4, r5}
 801099c:	4770      	bx	lr
	...

080109a0 <ai_platform_runtime_get_revision>:
 80109a0:	490a      	ldr	r1, [pc, #40]	; (80109cc <ai_platform_runtime_get_revision+0x2c>)
 80109a2:	4a0b      	ldr	r2, [pc, #44]	; (80109d0 <ai_platform_runtime_get_revision+0x30>)
 80109a4:	680b      	ldr	r3, [r1, #0]
 80109a6:	2001      	movs	r0, #1
 80109a8:	f023 0301 	bic.w	r3, r3, #1
 80109ac:	600b      	str	r3, [r1, #0]
 80109ae:	4613      	mov	r3, r2
 80109b0:	6010      	str	r0, [r2, #0]
 80109b2:	681a      	ldr	r2, [r3, #0]
 80109b4:	2a00      	cmp	r2, #0
 80109b6:	d1fc      	bne.n	80109b2 <ai_platform_runtime_get_revision+0x12>
 80109b8:	4b06      	ldr	r3, [pc, #24]	; (80109d4 <ai_platform_runtime_get_revision+0x34>)
 80109ba:	4a07      	ldr	r2, [pc, #28]	; (80109d8 <ai_platform_runtime_get_revision+0x38>)
 80109bc:	601a      	str	r2, [r3, #0]
 80109be:	681a      	ldr	r2, [r3, #0]
 80109c0:	4b06      	ldr	r3, [pc, #24]	; (80109dc <ai_platform_runtime_get_revision+0x3c>)
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d000      	beq.n	80109c8 <ai_platform_runtime_get_revision+0x28>
 80109c6:	e7fe      	b.n	80109c6 <ai_platform_runtime_get_revision+0x26>
 80109c8:	4805      	ldr	r0, [pc, #20]	; (80109e0 <ai_platform_runtime_get_revision+0x40>)
 80109ca:	4770      	bx	lr
 80109cc:	e0002000 	.word	0xe0002000
 80109d0:	40023008 	.word	0x40023008
 80109d4:	40023000 	.word	0x40023000
 80109d8:	f407a5c2 	.word	0xf407a5c2
 80109dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80109e0:	08019ed0 	.word	0x08019ed0

080109e4 <ai_platform_runtime_get_version>:
 80109e4:	4913      	ldr	r1, [pc, #76]	; (8010a34 <ai_platform_runtime_get_version+0x50>)
 80109e6:	4a14      	ldr	r2, [pc, #80]	; (8010a38 <ai_platform_runtime_get_version+0x54>)
 80109e8:	680b      	ldr	r3, [r1, #0]
 80109ea:	2001      	movs	r0, #1
 80109ec:	f023 0301 	bic.w	r3, r3, #1
 80109f0:	600b      	str	r3, [r1, #0]
 80109f2:	b082      	sub	sp, #8
 80109f4:	4613      	mov	r3, r2
 80109f6:	6010      	str	r0, [r2, #0]
 80109f8:	6818      	ldr	r0, [r3, #0]
 80109fa:	2800      	cmp	r0, #0
 80109fc:	d1fc      	bne.n	80109f8 <ai_platform_runtime_get_version+0x14>
 80109fe:	4b0f      	ldr	r3, [pc, #60]	; (8010a3c <ai_platform_runtime_get_version+0x58>)
 8010a00:	4a0f      	ldr	r2, [pc, #60]	; (8010a40 <ai_platform_runtime_get_version+0x5c>)
 8010a02:	601a      	str	r2, [r3, #0]
 8010a04:	681a      	ldr	r2, [r3, #0]
 8010a06:	4b0f      	ldr	r3, [pc, #60]	; (8010a44 <ai_platform_runtime_get_version+0x60>)
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d000      	beq.n	8010a0e <ai_platform_runtime_get_version+0x2a>
 8010a0c:	e7fe      	b.n	8010a0c <ai_platform_runtime_get_version+0x28>
 8010a0e:	4b0e      	ldr	r3, [pc, #56]	; (8010a48 <ai_platform_runtime_get_version+0x64>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	b2da      	uxtb	r2, r3
 8010a14:	f362 0007 	bfi	r0, r2, #0, #8
 8010a18:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010a1c:	f362 200f 	bfi	r0, r2, #8, #8
 8010a20:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010a24:	f362 4017 	bfi	r0, r2, #16, #8
 8010a28:	0e1b      	lsrs	r3, r3, #24
 8010a2a:	f363 601f 	bfi	r0, r3, #24, #8
 8010a2e:	b002      	add	sp, #8
 8010a30:	4770      	bx	lr
 8010a32:	bf00      	nop
 8010a34:	e0002000 	.word	0xe0002000
 8010a38:	40023008 	.word	0x40023008
 8010a3c:	40023000 	.word	0x40023000
 8010a40:	f407a5c2 	.word	0xf407a5c2
 8010a44:	b5e8b5cd 	.word	0xb5e8b5cd
 8010a48:	08019ed4 	.word	0x08019ed4

08010a4c <ai_platform_api_get_version>:
 8010a4c:	4913      	ldr	r1, [pc, #76]	; (8010a9c <ai_platform_api_get_version+0x50>)
 8010a4e:	4a14      	ldr	r2, [pc, #80]	; (8010aa0 <ai_platform_api_get_version+0x54>)
 8010a50:	680b      	ldr	r3, [r1, #0]
 8010a52:	2001      	movs	r0, #1
 8010a54:	f023 0301 	bic.w	r3, r3, #1
 8010a58:	600b      	str	r3, [r1, #0]
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	4613      	mov	r3, r2
 8010a5e:	6010      	str	r0, [r2, #0]
 8010a60:	6818      	ldr	r0, [r3, #0]
 8010a62:	2800      	cmp	r0, #0
 8010a64:	d1fc      	bne.n	8010a60 <ai_platform_api_get_version+0x14>
 8010a66:	4b0f      	ldr	r3, [pc, #60]	; (8010aa4 <ai_platform_api_get_version+0x58>)
 8010a68:	4a0f      	ldr	r2, [pc, #60]	; (8010aa8 <ai_platform_api_get_version+0x5c>)
 8010a6a:	601a      	str	r2, [r3, #0]
 8010a6c:	681a      	ldr	r2, [r3, #0]
 8010a6e:	4b0f      	ldr	r3, [pc, #60]	; (8010aac <ai_platform_api_get_version+0x60>)
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d000      	beq.n	8010a76 <ai_platform_api_get_version+0x2a>
 8010a74:	e7fe      	b.n	8010a74 <ai_platform_api_get_version+0x28>
 8010a76:	4b0e      	ldr	r3, [pc, #56]	; (8010ab0 <ai_platform_api_get_version+0x64>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	b2da      	uxtb	r2, r3
 8010a7c:	f362 0007 	bfi	r0, r2, #0, #8
 8010a80:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010a84:	f362 200f 	bfi	r0, r2, #8, #8
 8010a88:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010a8c:	f362 4017 	bfi	r0, r2, #16, #8
 8010a90:	0e1b      	lsrs	r3, r3, #24
 8010a92:	f363 601f 	bfi	r0, r3, #24, #8
 8010a96:	b002      	add	sp, #8
 8010a98:	4770      	bx	lr
 8010a9a:	bf00      	nop
 8010a9c:	e0002000 	.word	0xe0002000
 8010aa0:	40023008 	.word	0x40023008
 8010aa4:	40023000 	.word	0x40023000
 8010aa8:	f407a5c2 	.word	0xf407a5c2
 8010aac:	b5e8b5cd 	.word	0xb5e8b5cd
 8010ab0:	08019ed8 	.word	0x08019ed8

08010ab4 <ai_platform_interface_api_get_version>:
 8010ab4:	4913      	ldr	r1, [pc, #76]	; (8010b04 <ai_platform_interface_api_get_version+0x50>)
 8010ab6:	4a14      	ldr	r2, [pc, #80]	; (8010b08 <ai_platform_interface_api_get_version+0x54>)
 8010ab8:	680b      	ldr	r3, [r1, #0]
 8010aba:	2001      	movs	r0, #1
 8010abc:	f023 0301 	bic.w	r3, r3, #1
 8010ac0:	600b      	str	r3, [r1, #0]
 8010ac2:	b082      	sub	sp, #8
 8010ac4:	4613      	mov	r3, r2
 8010ac6:	6010      	str	r0, [r2, #0]
 8010ac8:	6818      	ldr	r0, [r3, #0]
 8010aca:	2800      	cmp	r0, #0
 8010acc:	d1fc      	bne.n	8010ac8 <ai_platform_interface_api_get_version+0x14>
 8010ace:	4b0f      	ldr	r3, [pc, #60]	; (8010b0c <ai_platform_interface_api_get_version+0x58>)
 8010ad0:	4a0f      	ldr	r2, [pc, #60]	; (8010b10 <ai_platform_interface_api_get_version+0x5c>)
 8010ad2:	601a      	str	r2, [r3, #0]
 8010ad4:	681a      	ldr	r2, [r3, #0]
 8010ad6:	4b0f      	ldr	r3, [pc, #60]	; (8010b14 <ai_platform_interface_api_get_version+0x60>)
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d000      	beq.n	8010ade <ai_platform_interface_api_get_version+0x2a>
 8010adc:	e7fe      	b.n	8010adc <ai_platform_interface_api_get_version+0x28>
 8010ade:	4b0e      	ldr	r3, [pc, #56]	; (8010b18 <ai_platform_interface_api_get_version+0x64>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	b2da      	uxtb	r2, r3
 8010ae4:	f362 0007 	bfi	r0, r2, #0, #8
 8010ae8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010aec:	f362 200f 	bfi	r0, r2, #8, #8
 8010af0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010af4:	f362 4017 	bfi	r0, r2, #16, #8
 8010af8:	0e1b      	lsrs	r3, r3, #24
 8010afa:	f363 601f 	bfi	r0, r3, #24, #8
 8010afe:	b002      	add	sp, #8
 8010b00:	4770      	bx	lr
 8010b02:	bf00      	nop
 8010b04:	e0002000 	.word	0xe0002000
 8010b08:	40023008 	.word	0x40023008
 8010b0c:	40023000 	.word	0x40023000
 8010b10:	f407a5c2 	.word	0xf407a5c2
 8010b14:	b5e8b5cd 	.word	0xb5e8b5cd
 8010b18:	08019edc 	.word	0x08019edc

08010b1c <ai_platform_context_acquire>:
 8010b1c:	b410      	push	{r4}
 8010b1e:	b120      	cbz	r0, 8010b2a <ai_platform_context_acquire+0xe>
 8010b20:	4b0d      	ldr	r3, [pc, #52]	; (8010b58 <ai_platform_context_acquire+0x3c>)
 8010b22:	6802      	ldr	r2, [r0, #0]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	bf18      	it	ne
 8010b28:	2000      	movne	r0, #0
 8010b2a:	490c      	ldr	r1, [pc, #48]	; (8010b5c <ai_platform_context_acquire+0x40>)
 8010b2c:	4a0c      	ldr	r2, [pc, #48]	; (8010b60 <ai_platform_context_acquire+0x44>)
 8010b2e:	680b      	ldr	r3, [r1, #0]
 8010b30:	2401      	movs	r4, #1
 8010b32:	f023 0301 	bic.w	r3, r3, #1
 8010b36:	600b      	str	r3, [r1, #0]
 8010b38:	4613      	mov	r3, r2
 8010b3a:	6014      	str	r4, [r2, #0]
 8010b3c:	681a      	ldr	r2, [r3, #0]
 8010b3e:	2a00      	cmp	r2, #0
 8010b40:	d1fc      	bne.n	8010b3c <ai_platform_context_acquire+0x20>
 8010b42:	4b08      	ldr	r3, [pc, #32]	; (8010b64 <ai_platform_context_acquire+0x48>)
 8010b44:	4a08      	ldr	r2, [pc, #32]	; (8010b68 <ai_platform_context_acquire+0x4c>)
 8010b46:	601a      	str	r2, [r3, #0]
 8010b48:	681a      	ldr	r2, [r3, #0]
 8010b4a:	4b08      	ldr	r3, [pc, #32]	; (8010b6c <ai_platform_context_acquire+0x50>)
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d000      	beq.n	8010b52 <ai_platform_context_acquire+0x36>
 8010b50:	e7fe      	b.n	8010b50 <ai_platform_context_acquire+0x34>
 8010b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b56:	4770      	bx	lr
 8010b58:	a1c00100 	.word	0xa1c00100
 8010b5c:	e0002000 	.word	0xe0002000
 8010b60:	40023008 	.word	0x40023008
 8010b64:	40023000 	.word	0x40023000
 8010b68:	f407a5c2 	.word	0xf407a5c2
 8010b6c:	b5e8b5cd 	.word	0xb5e8b5cd

08010b70 <ai_platform_network_get_error>:
 8010b70:	b410      	push	{r4}
 8010b72:	b120      	cbz	r0, 8010b7e <ai_platform_network_get_error+0xe>
 8010b74:	4b11      	ldr	r3, [pc, #68]	; (8010bbc <ai_platform_network_get_error+0x4c>)
 8010b76:	6802      	ldr	r2, [r0, #0]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	bf18      	it	ne
 8010b7c:	2000      	movne	r0, #0
 8010b7e:	4910      	ldr	r1, [pc, #64]	; (8010bc0 <ai_platform_network_get_error+0x50>)
 8010b80:	4a10      	ldr	r2, [pc, #64]	; (8010bc4 <ai_platform_network_get_error+0x54>)
 8010b82:	680b      	ldr	r3, [r1, #0]
 8010b84:	2401      	movs	r4, #1
 8010b86:	f023 0301 	bic.w	r3, r3, #1
 8010b8a:	600b      	str	r3, [r1, #0]
 8010b8c:	4613      	mov	r3, r2
 8010b8e:	6014      	str	r4, [r2, #0]
 8010b90:	681a      	ldr	r2, [r3, #0]
 8010b92:	2a00      	cmp	r2, #0
 8010b94:	d1fc      	bne.n	8010b90 <ai_platform_network_get_error+0x20>
 8010b96:	4b0c      	ldr	r3, [pc, #48]	; (8010bc8 <ai_platform_network_get_error+0x58>)
 8010b98:	4a0c      	ldr	r2, [pc, #48]	; (8010bcc <ai_platform_network_get_error+0x5c>)
 8010b9a:	601a      	str	r2, [r3, #0]
 8010b9c:	681a      	ldr	r2, [r3, #0]
 8010b9e:	4b0c      	ldr	r3, [pc, #48]	; (8010bd0 <ai_platform_network_get_error+0x60>)
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d000      	beq.n	8010ba6 <ai_platform_network_get_error+0x36>
 8010ba4:	e7fe      	b.n	8010ba4 <ai_platform_network_get_error+0x34>
 8010ba6:	b120      	cbz	r0, 8010bb2 <ai_platform_network_get_error+0x42>
 8010ba8:	3010      	adds	r0, #16
 8010baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bae:	f000 bc55 	b.w	801145c <core_get_error>
 8010bb2:	f241 0010 	movw	r0, #4112	; 0x1010
 8010bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bba:	4770      	bx	lr
 8010bbc:	a1c00100 	.word	0xa1c00100
 8010bc0:	e0002000 	.word	0xe0002000
 8010bc4:	40023008 	.word	0x40023008
 8010bc8:	40023000 	.word	0x40023000
 8010bcc:	f407a5c2 	.word	0xf407a5c2
 8010bd0:	b5e8b5cd 	.word	0xb5e8b5cd

08010bd4 <ai_platform_api_get_network_report>:
 8010bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bd6:	460e      	mov	r6, r1
 8010bd8:	4604      	mov	r4, r0
 8010bda:	b120      	cbz	r0, 8010be6 <ai_platform_api_get_network_report+0x12>
 8010bdc:	4b6b      	ldr	r3, [pc, #428]	; (8010d8c <ai_platform_api_get_network_report+0x1b8>)
 8010bde:	6802      	ldr	r2, [r0, #0]
 8010be0:	429a      	cmp	r2, r3
 8010be2:	bf18      	it	ne
 8010be4:	2400      	movne	r4, #0
 8010be6:	496a      	ldr	r1, [pc, #424]	; (8010d90 <ai_platform_api_get_network_report+0x1bc>)
 8010be8:	4a6a      	ldr	r2, [pc, #424]	; (8010d94 <ai_platform_api_get_network_report+0x1c0>)
 8010bea:	680b      	ldr	r3, [r1, #0]
 8010bec:	2001      	movs	r0, #1
 8010bee:	f023 0301 	bic.w	r3, r3, #1
 8010bf2:	600b      	str	r3, [r1, #0]
 8010bf4:	4611      	mov	r1, r2
 8010bf6:	6010      	str	r0, [r2, #0]
 8010bf8:	680b      	ldr	r3, [r1, #0]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d1fc      	bne.n	8010bf8 <ai_platform_api_get_network_report+0x24>
 8010bfe:	4a66      	ldr	r2, [pc, #408]	; (8010d98 <ai_platform_api_get_network_report+0x1c4>)
 8010c00:	4966      	ldr	r1, [pc, #408]	; (8010d9c <ai_platform_api_get_network_report+0x1c8>)
 8010c02:	6011      	str	r1, [r2, #0]
 8010c04:	6811      	ldr	r1, [r2, #0]
 8010c06:	4a66      	ldr	r2, [pc, #408]	; (8010da0 <ai_platform_api_get_network_report+0x1cc>)
 8010c08:	4291      	cmp	r1, r2
 8010c0a:	d000      	beq.n	8010c0e <ai_platform_api_get_network_report+0x3a>
 8010c0c:	e7fe      	b.n	8010c0c <ai_platform_api_get_network_report+0x38>
 8010c0e:	2c00      	cmp	r4, #0
 8010c10:	d061      	beq.n	8010cd6 <ai_platform_api_get_network_report+0x102>
 8010c12:	2e00      	cmp	r6, #0
 8010c14:	d061      	beq.n	8010cda <ai_platform_api_get_network_report+0x106>
 8010c16:	66f3      	str	r3, [r6, #108]	; 0x6c
 8010c18:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010c1a:	2a00      	cmp	r2, #0
 8010c1c:	d055      	beq.n	8010cca <ai_platform_api_get_network_report+0xf6>
 8010c1e:	2301      	movs	r3, #1
 8010c20:	66f3      	str	r3, [r6, #108]	; 0x6c
 8010c22:	68d3      	ldr	r3, [r2, #12]
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d00c      	beq.n	8010c42 <ai_platform_api_get_network_report+0x6e>
 8010c28:	b15b      	cbz	r3, 8010c42 <ai_platform_api_get_network_report+0x6e>
 8010c2a:	2202      	movs	r2, #2
 8010c2c:	e003      	b.n	8010c36 <ai_platform_api_get_network_report+0x62>
 8010c2e:	1c50      	adds	r0, r2, #1
 8010c30:	460b      	mov	r3, r1
 8010c32:	b121      	cbz	r1, 8010c3e <ai_platform_api_get_network_report+0x6a>
 8010c34:	4602      	mov	r2, r0
 8010c36:	66f2      	str	r2, [r6, #108]	; 0x6c
 8010c38:	68d9      	ldr	r1, [r3, #12]
 8010c3a:	4299      	cmp	r1, r3
 8010c3c:	d1f7      	bne.n	8010c2e <ai_platform_api_get_network_report+0x5a>
 8010c3e:	2a00      	cmp	r2, #0
 8010c40:	d043      	beq.n	8010cca <ai_platform_api_get_network_report+0xf6>
 8010c42:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8010c46:	b100      	cbz	r0, 8010c4a <ai_platform_api_get_network_report+0x76>
 8010c48:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8010c4a:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8010c4e:	f7ff fe39 	bl	80108c4 <_ai_platform_get_io_buffers_info>
 8010c52:	4605      	mov	r5, r0
 8010c54:	8630      	strh	r0, [r6, #48]	; 0x30
 8010c56:	2800      	cmp	r0, #0
 8010c58:	d05e      	beq.n	8010d18 <ai_platform_api_get_network_report+0x144>
 8010c5a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8010c5e:	2b01      	cmp	r3, #1
 8010c60:	bf8a      	itet	hi
 8010c62:	6ce0      	ldrhi	r0, [r4, #76]	; 0x4c
 8010c64:	2000      	movls	r0, #0
 8010c66:	300c      	addhi	r0, #12
 8010c68:	f106 0138 	add.w	r1, r6, #56	; 0x38
 8010c6c:	f7ff fe2a 	bl	80108c4 <_ai_platform_get_io_buffers_info>
 8010c70:	4605      	mov	r5, r0
 8010c72:	8670      	strh	r0, [r6, #50]	; 0x32
 8010c74:	2800      	cmp	r0, #0
 8010c76:	d047      	beq.n	8010d08 <ai_platform_api_get_network_report+0x134>
 8010c78:	6863      	ldr	r3, [r4, #4]
 8010c7a:	6733      	str	r3, [r6, #112]	; 0x70
 8010c7c:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8010c80:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010c82:	f106 053c 	add.w	r5, r6, #60	; 0x3c
 8010c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010c88:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010c8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010c90:	3418      	adds	r4, #24
 8010c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c94:	f106 0554 	add.w	r5, r6, #84	; 0x54
 8010c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010c9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010c9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8010ca2:	4a3b      	ldr	r2, [pc, #236]	; (8010d90 <ai_platform_api_get_network_report+0x1bc>)
 8010ca4:	493b      	ldr	r1, [pc, #236]	; (8010d94 <ai_platform_api_get_network_report+0x1c0>)
 8010ca6:	6813      	ldr	r3, [r2, #0]
 8010ca8:	2001      	movs	r0, #1
 8010caa:	f023 0301 	bic.w	r3, r3, #1
 8010cae:	6013      	str	r3, [r2, #0]
 8010cb0:	460a      	mov	r2, r1
 8010cb2:	6008      	str	r0, [r1, #0]
 8010cb4:	6813      	ldr	r3, [r2, #0]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d1fc      	bne.n	8010cb4 <ai_platform_api_get_network_report+0xe0>
 8010cba:	4b37      	ldr	r3, [pc, #220]	; (8010d98 <ai_platform_api_get_network_report+0x1c4>)
 8010cbc:	4937      	ldr	r1, [pc, #220]	; (8010d9c <ai_platform_api_get_network_report+0x1c8>)
 8010cbe:	6019      	str	r1, [r3, #0]
 8010cc0:	6819      	ldr	r1, [r3, #0]
 8010cc2:	4b37      	ldr	r3, [pc, #220]	; (8010da0 <ai_platform_api_get_network_report+0x1cc>)
 8010cc4:	4299      	cmp	r1, r3
 8010cc6:	d00a      	beq.n	8010cde <ai_platform_api_get_network_report+0x10a>
 8010cc8:	e7fe      	b.n	8010cc8 <ai_platform_api_get_network_report+0xf4>
 8010cca:	f104 0010 	add.w	r0, r4, #16
 8010cce:	2218      	movs	r2, #24
 8010cd0:	2111      	movs	r1, #17
 8010cd2:	f000 fbc9 	bl	8011468 <core_set_error>
 8010cd6:	2000      	movs	r0, #0
 8010cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cda:	4630      	mov	r0, r6
 8010cdc:	e7fc      	b.n	8010cd8 <ai_platform_api_get_network_report+0x104>
 8010cde:	4b31      	ldr	r3, [pc, #196]	; (8010da4 <ai_platform_api_get_network_report+0x1d0>)
 8010ce0:	482b      	ldr	r0, [pc, #172]	; (8010d90 <ai_platform_api_get_network_report+0x1bc>)
 8010ce2:	6133      	str	r3, [r6, #16]
 8010ce4:	6803      	ldr	r3, [r0, #0]
 8010ce6:	492b      	ldr	r1, [pc, #172]	; (8010d94 <ai_platform_api_get_network_report+0x1c0>)
 8010ce8:	f023 0301 	bic.w	r3, r3, #1
 8010cec:	2401      	movs	r4, #1
 8010cee:	6003      	str	r3, [r0, #0]
 8010cf0:	6014      	str	r4, [r2, #0]
 8010cf2:	680b      	ldr	r3, [r1, #0]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d1fc      	bne.n	8010cf2 <ai_platform_api_get_network_report+0x11e>
 8010cf8:	4b27      	ldr	r3, [pc, #156]	; (8010d98 <ai_platform_api_get_network_report+0x1c4>)
 8010cfa:	4a28      	ldr	r2, [pc, #160]	; (8010d9c <ai_platform_api_get_network_report+0x1c8>)
 8010cfc:	601a      	str	r2, [r3, #0]
 8010cfe:	681a      	ldr	r2, [r3, #0]
 8010d00:	4b27      	ldr	r3, [pc, #156]	; (8010da0 <ai_platform_api_get_network_report+0x1cc>)
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d010      	beq.n	8010d28 <ai_platform_api_get_network_report+0x154>
 8010d06:	e7fe      	b.n	8010d06 <ai_platform_api_get_network_report+0x132>
 8010d08:	f104 0010 	add.w	r0, r4, #16
 8010d0c:	2218      	movs	r2, #24
 8010d0e:	2113      	movs	r1, #19
 8010d10:	f000 fbaa 	bl	8011468 <core_set_error>
 8010d14:	4628      	mov	r0, r5
 8010d16:	e7df      	b.n	8010cd8 <ai_platform_api_get_network_report+0x104>
 8010d18:	f104 0010 	add.w	r0, r4, #16
 8010d1c:	2218      	movs	r2, #24
 8010d1e:	2112      	movs	r1, #18
 8010d20:	f000 fba2 	bl	8011468 <core_set_error>
 8010d24:	4628      	mov	r0, r5
 8010d26:	e7d7      	b.n	8010cd8 <ai_platform_api_get_network_report+0x104>
 8010d28:	f240 2305 	movw	r3, #517	; 0x205
 8010d2c:	4818      	ldr	r0, [pc, #96]	; (8010d90 <ai_platform_api_get_network_report+0x1bc>)
 8010d2e:	6173      	str	r3, [r6, #20]
 8010d30:	6803      	ldr	r3, [r0, #0]
 8010d32:	4a18      	ldr	r2, [pc, #96]	; (8010d94 <ai_platform_api_get_network_report+0x1c0>)
 8010d34:	f023 0301 	bic.w	r3, r3, #1
 8010d38:	2401      	movs	r4, #1
 8010d3a:	6003      	str	r3, [r0, #0]
 8010d3c:	600c      	str	r4, [r1, #0]
 8010d3e:	6813      	ldr	r3, [r2, #0]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d1fc      	bne.n	8010d3e <ai_platform_api_get_network_report+0x16a>
 8010d44:	4b14      	ldr	r3, [pc, #80]	; (8010d98 <ai_platform_api_get_network_report+0x1c4>)
 8010d46:	4915      	ldr	r1, [pc, #84]	; (8010d9c <ai_platform_api_get_network_report+0x1c8>)
 8010d48:	6019      	str	r1, [r3, #0]
 8010d4a:	6819      	ldr	r1, [r3, #0]
 8010d4c:	4b14      	ldr	r3, [pc, #80]	; (8010da0 <ai_platform_api_get_network_report+0x1cc>)
 8010d4e:	4299      	cmp	r1, r3
 8010d50:	d000      	beq.n	8010d54 <ai_platform_api_get_network_report+0x180>
 8010d52:	e7fe      	b.n	8010d52 <ai_platform_api_get_network_report+0x17e>
 8010d54:	f240 1301 	movw	r3, #257	; 0x101
 8010d58:	490d      	ldr	r1, [pc, #52]	; (8010d90 <ai_platform_api_get_network_report+0x1bc>)
 8010d5a:	6273      	str	r3, [r6, #36]	; 0x24
 8010d5c:	680b      	ldr	r3, [r1, #0]
 8010d5e:	4c0d      	ldr	r4, [pc, #52]	; (8010d94 <ai_platform_api_get_network_report+0x1c0>)
 8010d60:	f023 0301 	bic.w	r3, r3, #1
 8010d64:	2001      	movs	r0, #1
 8010d66:	600b      	str	r3, [r1, #0]
 8010d68:	6010      	str	r0, [r2, #0]
 8010d6a:	6823      	ldr	r3, [r4, #0]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d1fc      	bne.n	8010d6a <ai_platform_api_get_network_report+0x196>
 8010d70:	4b09      	ldr	r3, [pc, #36]	; (8010d98 <ai_platform_api_get_network_report+0x1c4>)
 8010d72:	4a0a      	ldr	r2, [pc, #40]	; (8010d9c <ai_platform_api_get_network_report+0x1c8>)
 8010d74:	601a      	str	r2, [r3, #0]
 8010d76:	681a      	ldr	r2, [r3, #0]
 8010d78:	4b09      	ldr	r3, [pc, #36]	; (8010da0 <ai_platform_api_get_network_report+0x1cc>)
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d000      	beq.n	8010d80 <ai_platform_api_get_network_report+0x1ac>
 8010d7e:	e7fe      	b.n	8010d7e <ai_platform_api_get_network_report+0x1aa>
 8010d80:	f240 4301 	movw	r3, #1025	; 0x401
 8010d84:	62b3      	str	r3, [r6, #40]	; 0x28
 8010d86:	2001      	movs	r0, #1
 8010d88:	e7a6      	b.n	8010cd8 <ai_platform_api_get_network_report+0x104>
 8010d8a:	bf00      	nop
 8010d8c:	a1c00100 	.word	0xa1c00100
 8010d90:	e0002000 	.word	0xe0002000
 8010d94:	40023008 	.word	0x40023008
 8010d98:	40023000 	.word	0x40023000
 8010d9c:	f407a5c2 	.word	0xf407a5c2
 8010da0:	b5e8b5cd 	.word	0xb5e8b5cd
 8010da4:	08019ed0 	.word	0x08019ed0

08010da8 <ai_platform_network_create>:
 8010da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dac:	4e23      	ldr	r6, [pc, #140]	; (8010e3c <ai_platform_network_create+0x94>)
 8010dae:	4924      	ldr	r1, [pc, #144]	; (8010e40 <ai_platform_network_create+0x98>)
 8010db0:	6835      	ldr	r5, [r6, #0]
 8010db2:	b082      	sub	sp, #8
 8010db4:	f025 0501 	bic.w	r5, r5, #1
 8010db8:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8010dbc:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8010dc0:	6035      	str	r5, [r6, #0]
 8010dc2:	2501      	movs	r5, #1
 8010dc4:	600d      	str	r5, [r1, #0]
 8010dc6:	680d      	ldr	r5, [r1, #0]
 8010dc8:	2d00      	cmp	r5, #0
 8010dca:	d1fc      	bne.n	8010dc6 <ai_platform_network_create+0x1e>
 8010dcc:	491d      	ldr	r1, [pc, #116]	; (8010e44 <ai_platform_network_create+0x9c>)
 8010dce:	4e1e      	ldr	r6, [pc, #120]	; (8010e48 <ai_platform_network_create+0xa0>)
 8010dd0:	600e      	str	r6, [r1, #0]
 8010dd2:	680e      	ldr	r6, [r1, #0]
 8010dd4:	491d      	ldr	r1, [pc, #116]	; (8010e4c <ai_platform_network_create+0xa4>)
 8010dd6:	428e      	cmp	r6, r1
 8010dd8:	d000      	beq.n	8010ddc <ai_platform_network_create+0x34>
 8010dda:	e7fe      	b.n	8010dda <ai_platform_network_create+0x32>
 8010ddc:	b1d0      	cbz	r0, 8010e14 <ai_platform_network_create+0x6c>
 8010dde:	4698      	mov	r8, r3
 8010de0:	4613      	mov	r3, r2
 8010de2:	4a1b      	ldr	r2, [pc, #108]	; (8010e50 <ai_platform_network_create+0xa8>)
 8010de4:	601a      	str	r2, [r3, #0]
 8010de6:	6003      	str	r3, [r0, #0]
 8010de8:	4606      	mov	r6, r0
 8010dea:	f000 fb35 	bl	8011458 <core_init>
 8010dee:	b1b0      	cbz	r0, 8010e1e <ai_platform_network_create+0x76>
 8010df0:	0223      	lsls	r3, r4, #8
 8010df2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010df6:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8010dfa:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8010dfe:	d910      	bls.n	8010e22 <ai_platform_network_create+0x7a>
 8010e00:	2201      	movs	r2, #1
 8010e02:	2300      	movs	r3, #0
 8010e04:	6033      	str	r3, [r6, #0]
 8010e06:	2310      	movs	r3, #16
 8010e08:	2000      	movs	r0, #0
 8010e0a:	f362 0007 	bfi	r0, r2, #0, #8
 8010e0e:	f363 201f 	bfi	r0, r3, #8, #24
 8010e12:	e001      	b.n	8010e18 <ai_platform_network_create+0x70>
 8010e14:	f241 0010 	movw	r0, #4112	; 0x1010
 8010e18:	b002      	add	sp, #8
 8010e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e1e:	2230      	movs	r2, #48	; 0x30
 8010e20:	e7ef      	b.n	8010e02 <ai_platform_network_create+0x5a>
 8010e22:	a802      	add	r0, sp, #8
 8010e24:	4b0b      	ldr	r3, [pc, #44]	; (8010e54 <ai_platform_network_create+0xac>)
 8010e26:	f840 3d04 	str.w	r3, [r0, #-4]!
 8010e2a:	f000 ffe9 	bl	8011e00 <ai_check_custom_types>
 8010e2e:	b110      	cbz	r0, 8010e36 <ai_platform_network_create+0x8e>
 8010e30:	462b      	mov	r3, r5
 8010e32:	462a      	mov	r2, r5
 8010e34:	e7e8      	b.n	8010e08 <ai_platform_network_create+0x60>
 8010e36:	2202      	movs	r2, #2
 8010e38:	e7e3      	b.n	8010e02 <ai_platform_network_create+0x5a>
 8010e3a:	bf00      	nop
 8010e3c:	e0002000 	.word	0xe0002000
 8010e40:	40023008 	.word	0x40023008
 8010e44:	40023000 	.word	0x40023000
 8010e48:	f407a5c2 	.word	0xf407a5c2
 8010e4c:	b5e8b5cd 	.word	0xb5e8b5cd
 8010e50:	a1c00100 	.word	0xa1c00100
 8010e54:	84048403 	.word	0x84048403

08010e58 <ai_platform_network_destroy>:
 8010e58:	b430      	push	{r4, r5}
 8010e5a:	b1f0      	cbz	r0, 8010e9a <ai_platform_network_destroy+0x42>
 8010e5c:	4a10      	ldr	r2, [pc, #64]	; (8010ea0 <ai_platform_network_destroy+0x48>)
 8010e5e:	6803      	ldr	r3, [r0, #0]
 8010e60:	4293      	cmp	r3, r2
 8010e62:	bf0c      	ite	eq
 8010e64:	4603      	moveq	r3, r0
 8010e66:	2300      	movne	r3, #0
 8010e68:	4c0e      	ldr	r4, [pc, #56]	; (8010ea4 <ai_platform_network_destroy+0x4c>)
 8010e6a:	490f      	ldr	r1, [pc, #60]	; (8010ea8 <ai_platform_network_destroy+0x50>)
 8010e6c:	6822      	ldr	r2, [r4, #0]
 8010e6e:	2501      	movs	r5, #1
 8010e70:	f022 0201 	bic.w	r2, r2, #1
 8010e74:	6022      	str	r2, [r4, #0]
 8010e76:	460a      	mov	r2, r1
 8010e78:	600d      	str	r5, [r1, #0]
 8010e7a:	6811      	ldr	r1, [r2, #0]
 8010e7c:	2900      	cmp	r1, #0
 8010e7e:	d1fc      	bne.n	8010e7a <ai_platform_network_destroy+0x22>
 8010e80:	4a0a      	ldr	r2, [pc, #40]	; (8010eac <ai_platform_network_destroy+0x54>)
 8010e82:	490b      	ldr	r1, [pc, #44]	; (8010eb0 <ai_platform_network_destroy+0x58>)
 8010e84:	6011      	str	r1, [r2, #0]
 8010e86:	6811      	ldr	r1, [r2, #0]
 8010e88:	4a0a      	ldr	r2, [pc, #40]	; (8010eb4 <ai_platform_network_destroy+0x5c>)
 8010e8a:	4291      	cmp	r1, r2
 8010e8c:	d000      	beq.n	8010e90 <ai_platform_network_destroy+0x38>
 8010e8e:	e7fe      	b.n	8010e8e <ai_platform_network_destroy+0x36>
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	bf18      	it	ne
 8010e94:	2000      	movne	r0, #0
 8010e96:	bc30      	pop	{r4, r5}
 8010e98:	4770      	bx	lr
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	e7e4      	b.n	8010e68 <ai_platform_network_destroy+0x10>
 8010e9e:	bf00      	nop
 8010ea0:	a1c00100 	.word	0xa1c00100
 8010ea4:	e0002000 	.word	0xe0002000
 8010ea8:	40023008 	.word	0x40023008
 8010eac:	40023000 	.word	0x40023000
 8010eb0:	f407a5c2 	.word	0xf407a5c2
 8010eb4:	b5e8b5cd 	.word	0xb5e8b5cd

08010eb8 <ai_platform_network_init>:
 8010eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eba:	460c      	mov	r4, r1
 8010ebc:	4605      	mov	r5, r0
 8010ebe:	b120      	cbz	r0, 8010eca <ai_platform_network_init+0x12>
 8010ec0:	4b36      	ldr	r3, [pc, #216]	; (8010f9c <ai_platform_network_init+0xe4>)
 8010ec2:	6802      	ldr	r2, [r0, #0]
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	bf18      	it	ne
 8010ec8:	2500      	movne	r5, #0
 8010eca:	4935      	ldr	r1, [pc, #212]	; (8010fa0 <ai_platform_network_init+0xe8>)
 8010ecc:	4a35      	ldr	r2, [pc, #212]	; (8010fa4 <ai_platform_network_init+0xec>)
 8010ece:	680b      	ldr	r3, [r1, #0]
 8010ed0:	2001      	movs	r0, #1
 8010ed2:	f023 0301 	bic.w	r3, r3, #1
 8010ed6:	600b      	str	r3, [r1, #0]
 8010ed8:	4613      	mov	r3, r2
 8010eda:	6010      	str	r0, [r2, #0]
 8010edc:	681a      	ldr	r2, [r3, #0]
 8010ede:	2a00      	cmp	r2, #0
 8010ee0:	d1fc      	bne.n	8010edc <ai_platform_network_init+0x24>
 8010ee2:	4b31      	ldr	r3, [pc, #196]	; (8010fa8 <ai_platform_network_init+0xf0>)
 8010ee4:	4a31      	ldr	r2, [pc, #196]	; (8010fac <ai_platform_network_init+0xf4>)
 8010ee6:	601a      	str	r2, [r3, #0]
 8010ee8:	681a      	ldr	r2, [r3, #0]
 8010eea:	4b31      	ldr	r3, [pc, #196]	; (8010fb0 <ai_platform_network_init+0xf8>)
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d000      	beq.n	8010ef2 <ai_platform_network_init+0x3a>
 8010ef0:	e7fe      	b.n	8010ef0 <ai_platform_network_init+0x38>
 8010ef2:	b33d      	cbz	r5, 8010f44 <ai_platform_network_init+0x8c>
 8010ef4:	b344      	cbz	r4, 8010f48 <ai_platform_network_init+0x90>
 8010ef6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8010ef8:	6926      	ldr	r6, [r4, #16]
 8010efa:	2f00      	cmp	r7, #0
 8010efc:	d03d      	beq.n	8010f7a <ai_platform_network_init+0xc2>
 8010efe:	b35e      	cbz	r6, 8010f58 <ai_platform_network_init+0xa0>
 8010f00:	4627      	mov	r7, r4
 8010f02:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010f04:	f105 0618 	add.w	r6, r5, #24
 8010f08:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010f0a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010f0e:	e886 0003 	stmia.w	r6, {r0, r1}
 8010f12:	3418      	adds	r4, #24
 8010f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f16:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8010f1a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010f1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010f20:	e886 0003 	stmia.w	r6, {r0, r1}
 8010f24:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8010f26:	2303      	movs	r3, #3
 8010f28:	60eb      	str	r3, [r5, #12]
 8010f2a:	b15a      	cbz	r2, 8010f44 <ai_platform_network_init+0x8c>
 8010f2c:	68d3      	ldr	r3, [r2, #12]
 8010f2e:	6095      	str	r5, [r2, #8]
 8010f30:	429a      	cmp	r2, r3
 8010f32:	d007      	beq.n	8010f44 <ai_platform_network_init+0x8c>
 8010f34:	b133      	cbz	r3, 8010f44 <ai_platform_network_init+0x8c>
 8010f36:	68da      	ldr	r2, [r3, #12]
 8010f38:	609d      	str	r5, [r3, #8]
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d002      	beq.n	8010f44 <ai_platform_network_init+0x8c>
 8010f3e:	4613      	mov	r3, r2
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d1f8      	bne.n	8010f36 <ai_platform_network_init+0x7e>
 8010f44:	4628      	mov	r0, r5
 8010f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f48:	f105 0010 	add.w	r0, r5, #16
 8010f4c:	2211      	movs	r2, #17
 8010f4e:	2110      	movs	r1, #16
 8010f50:	f000 fa8a 	bl	8011468 <core_set_error>
 8010f54:	4625      	mov	r5, r4
 8010f56:	e7f5      	b.n	8010f44 <ai_platform_network_init+0x8c>
 8010f58:	8921      	ldrh	r1, [r4, #8]
 8010f5a:	88e2      	ldrh	r2, [r4, #6]
 8010f5c:	68e3      	ldr	r3, [r4, #12]
 8010f5e:	fb02 f201 	mul.w	r2, r2, r1
 8010f62:	fb03 f302 	mul.w	r3, r3, r2
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d0ca      	beq.n	8010f00 <ai_platform_network_init+0x48>
 8010f6a:	f105 0010 	add.w	r0, r5, #16
 8010f6e:	2212      	movs	r2, #18
 8010f70:	2110      	movs	r1, #16
 8010f72:	f000 fa79 	bl	8011468 <core_set_error>
 8010f76:	4635      	mov	r5, r6
 8010f78:	e7e4      	b.n	8010f44 <ai_platform_network_init+0x8c>
 8010f7a:	8c21      	ldrh	r1, [r4, #32]
 8010f7c:	8be2      	ldrh	r2, [r4, #30]
 8010f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f80:	fb02 f201 	mul.w	r2, r2, r1
 8010f84:	fb03 f302 	mul.w	r3, r3, r2
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d0b8      	beq.n	8010efe <ai_platform_network_init+0x46>
 8010f8c:	f105 0010 	add.w	r0, r5, #16
 8010f90:	2213      	movs	r2, #19
 8010f92:	2110      	movs	r1, #16
 8010f94:	f000 fa68 	bl	8011468 <core_set_error>
 8010f98:	463d      	mov	r5, r7
 8010f9a:	e7d3      	b.n	8010f44 <ai_platform_network_init+0x8c>
 8010f9c:	a1c00100 	.word	0xa1c00100
 8010fa0:	e0002000 	.word	0xe0002000
 8010fa4:	40023008 	.word	0x40023008
 8010fa8:	40023000 	.word	0x40023000
 8010fac:	f407a5c2 	.word	0xf407a5c2
 8010fb0:	b5e8b5cd 	.word	0xb5e8b5cd

08010fb4 <ai_platform_network_post_init>:
 8010fb4:	b538      	push	{r3, r4, r5, lr}
 8010fb6:	4604      	mov	r4, r0
 8010fb8:	b120      	cbz	r0, 8010fc4 <ai_platform_network_post_init+0x10>
 8010fba:	4b1c      	ldr	r3, [pc, #112]	; (801102c <ai_platform_network_post_init+0x78>)
 8010fbc:	6802      	ldr	r2, [r0, #0]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	bf18      	it	ne
 8010fc2:	2400      	movne	r4, #0
 8010fc4:	491a      	ldr	r1, [pc, #104]	; (8011030 <ai_platform_network_post_init+0x7c>)
 8010fc6:	4a1b      	ldr	r2, [pc, #108]	; (8011034 <ai_platform_network_post_init+0x80>)
 8010fc8:	680b      	ldr	r3, [r1, #0]
 8010fca:	2001      	movs	r0, #1
 8010fcc:	f023 0301 	bic.w	r3, r3, #1
 8010fd0:	600b      	str	r3, [r1, #0]
 8010fd2:	4613      	mov	r3, r2
 8010fd4:	6010      	str	r0, [r2, #0]
 8010fd6:	681a      	ldr	r2, [r3, #0]
 8010fd8:	2a00      	cmp	r2, #0
 8010fda:	d1fc      	bne.n	8010fd6 <ai_platform_network_post_init+0x22>
 8010fdc:	4b16      	ldr	r3, [pc, #88]	; (8011038 <ai_platform_network_post_init+0x84>)
 8010fde:	4a17      	ldr	r2, [pc, #92]	; (801103c <ai_platform_network_post_init+0x88>)
 8010fe0:	601a      	str	r2, [r3, #0]
 8010fe2:	681a      	ldr	r2, [r3, #0]
 8010fe4:	4b16      	ldr	r3, [pc, #88]	; (8011040 <ai_platform_network_post_init+0x8c>)
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	d000      	beq.n	8010fec <ai_platform_network_post_init+0x38>
 8010fea:	e7fe      	b.n	8010fea <ai_platform_network_post_init+0x36>
 8010fec:	b1a4      	cbz	r4, 8011018 <ai_platform_network_post_init+0x64>
 8010fee:	68e3      	ldr	r3, [r4, #12]
 8010ff0:	f013 0502 	ands.w	r5, r3, #2
 8010ff4:	d012      	beq.n	801101c <ai_platform_network_post_init+0x68>
 8010ff6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ff8:	b163      	cbz	r3, 8011014 <ai_platform_network_post_init+0x60>
 8010ffa:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8010ffc:	b91d      	cbnz	r5, 8011006 <ai_platform_network_post_init+0x52>
 8010ffe:	e009      	b.n	8011014 <ai_platform_network_post_init+0x60>
 8011000:	461d      	mov	r5, r3
 8011002:	b13b      	cbz	r3, 8011014 <ai_platform_network_post_init+0x60>
 8011004:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011006:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011008:	4629      	mov	r1, r5
 801100a:	2000      	movs	r0, #0
 801100c:	4798      	blx	r3
 801100e:	68eb      	ldr	r3, [r5, #12]
 8011010:	42ab      	cmp	r3, r5
 8011012:	d1f5      	bne.n	8011000 <ai_platform_network_post_init+0x4c>
 8011014:	2001      	movs	r0, #1
 8011016:	bd38      	pop	{r3, r4, r5, pc}
 8011018:	4620      	mov	r0, r4
 801101a:	bd38      	pop	{r3, r4, r5, pc}
 801101c:	f104 0010 	add.w	r0, r4, #16
 8011020:	2210      	movs	r2, #16
 8011022:	2111      	movs	r1, #17
 8011024:	f000 fa20 	bl	8011468 <core_set_error>
 8011028:	4628      	mov	r0, r5
 801102a:	bd38      	pop	{r3, r4, r5, pc}
 801102c:	a1c00100 	.word	0xa1c00100
 8011030:	e0002000 	.word	0xe0002000
 8011034:	40023008 	.word	0x40023008
 8011038:	40023000 	.word	0x40023000
 801103c:	f407a5c2 	.word	0xf407a5c2
 8011040:	b5e8b5cd 	.word	0xb5e8b5cd

08011044 <ai_platform_network_process>:
 8011044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011048:	b083      	sub	sp, #12
 801104a:	4604      	mov	r4, r0
 801104c:	9201      	str	r2, [sp, #4]
 801104e:	b120      	cbz	r0, 801105a <ai_platform_network_process+0x16>
 8011050:	4ba5      	ldr	r3, [pc, #660]	; (80112e8 <ai_platform_network_process+0x2a4>)
 8011052:	6802      	ldr	r2, [r0, #0]
 8011054:	429a      	cmp	r2, r3
 8011056:	bf18      	it	ne
 8011058:	2400      	movne	r4, #0
 801105a:	48a4      	ldr	r0, [pc, #656]	; (80112ec <ai_platform_network_process+0x2a8>)
 801105c:	4ba4      	ldr	r3, [pc, #656]	; (80112f0 <ai_platform_network_process+0x2ac>)
 801105e:	6802      	ldr	r2, [r0, #0]
 8011060:	f022 0201 	bic.w	r2, r2, #1
 8011064:	6002      	str	r2, [r0, #0]
 8011066:	2201      	movs	r2, #1
 8011068:	601a      	str	r2, [r3, #0]
 801106a:	681a      	ldr	r2, [r3, #0]
 801106c:	2a00      	cmp	r2, #0
 801106e:	d1fc      	bne.n	801106a <ai_platform_network_process+0x26>
 8011070:	4ba0      	ldr	r3, [pc, #640]	; (80112f4 <ai_platform_network_process+0x2b0>)
 8011072:	4aa1      	ldr	r2, [pc, #644]	; (80112f8 <ai_platform_network_process+0x2b4>)
 8011074:	601a      	str	r2, [r3, #0]
 8011076:	681a      	ldr	r2, [r3, #0]
 8011078:	4ba0      	ldr	r3, [pc, #640]	; (80112fc <ai_platform_network_process+0x2b8>)
 801107a:	429a      	cmp	r2, r3
 801107c:	d000      	beq.n	8011080 <ai_platform_network_process+0x3c>
 801107e:	e7fe      	b.n	801107e <ai_platform_network_process+0x3a>
 8011080:	2c00      	cmp	r4, #0
 8011082:	d066      	beq.n	8011152 <ai_platform_network_process+0x10e>
 8011084:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8011088:	b107      	cbz	r7, 801108c <ai_platform_network_process+0x48>
 801108a:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801108c:	68e3      	ldr	r3, [r4, #12]
 801108e:	f003 0303 	and.w	r3, r3, #3
 8011092:	2600      	movs	r6, #0
 8011094:	2b03      	cmp	r3, #3
 8011096:	6166      	str	r6, [r4, #20]
 8011098:	f040 80fe 	bne.w	8011298 <ai_platform_network_process+0x254>
 801109c:	2900      	cmp	r1, #0
 801109e:	d07f      	beq.n	80111a0 <ai_platform_network_process+0x15c>
 80110a0:	2f00      	cmp	r7, #0
 80110a2:	d07d      	beq.n	80111a0 <ai_platform_network_process+0x15c>
 80110a4:	883b      	ldrh	r3, [r7, #0]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d07a      	beq.n	80111a0 <ai_platform_network_process+0x15c>
 80110aa:	460d      	mov	r5, r1
 80110ac:	46a0      	mov	r8, r4
 80110ae:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 80110b2:	429e      	cmp	r6, r3
 80110b4:	d27d      	bcs.n	80111b2 <ai_platform_network_process+0x16e>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d07a      	beq.n	80111b2 <ai_platform_network_process+0x16e>
 80110bc:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 80110c0:	2c00      	cmp	r4, #0
 80110c2:	d076      	beq.n	80111b2 <ai_platform_network_process+0x16e>
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 80110cc:	d067      	beq.n	801119e <ai_platform_network_process+0x15a>
 80110ce:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80110d2:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80110d6:	69a0      	ldr	r0, [r4, #24]
 80110d8:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80110dc:	6841      	ldr	r1, [r0, #4]
 80110de:	fb0b f30e 	mul.w	r3, fp, lr
 80110e2:	fb0c f303 	mul.w	r3, ip, r3
 80110e6:	4299      	cmp	r1, r3
 80110e8:	d350      	bcc.n	801118c <ai_platform_network_process+0x148>
 80110ea:	68e3      	ldr	r3, [r4, #12]
 80110ec:	68da      	ldr	r2, [r3, #12]
 80110ee:	455a      	cmp	r2, fp
 80110f0:	d14c      	bne.n	801118c <ai_platform_network_process+0x148>
 80110f2:	689a      	ldr	r2, [r3, #8]
 80110f4:	4572      	cmp	r2, lr
 80110f6:	d149      	bne.n	801118c <ai_platform_network_process+0x148>
 80110f8:	685b      	ldr	r3, [r3, #4]
 80110fa:	459c      	cmp	ip, r3
 80110fc:	d146      	bne.n	801118c <ai_platform_network_process+0x148>
 80110fe:	6800      	ldr	r0, [r0, #0]
 8011100:	f000 ff2e 	bl	8011f60 <ai_array_get_byte_size>
 8011104:	68e2      	ldr	r2, [r4, #12]
 8011106:	6963      	ldr	r3, [r4, #20]
 8011108:	68d2      	ldr	r2, [r2, #12]
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	fb03 f302 	mul.w	r3, r3, r2
 8011110:	4298      	cmp	r0, r3
 8011112:	d33b      	bcc.n	801118c <ai_platform_network_process+0x148>
 8011114:	69a3      	ldr	r3, [r4, #24]
 8011116:	6818      	ldr	r0, [r3, #0]
 8011118:	f000 fed6 	bl	8011ec8 <ai_array_to_buffer_fmt>
 801111c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8011120:	4043      	eors	r3, r0
 8011122:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8011126:	d128      	bne.n	801117a <ai_platform_network_process+0x136>
 8011128:	68eb      	ldr	r3, [r5, #12]
 801112a:	b1f3      	cbz	r3, 801116a <ai_platform_network_process+0x126>
 801112c:	f8b5 b000 	ldrh.w	fp, [r5]
 8011130:	f1bb 0f00 	cmp.w	fp, #0
 8011134:	d012      	beq.n	801115c <ai_platform_network_process+0x118>
 8011136:	4623      	mov	r3, r4
 8011138:	f105 020c 	add.w	r2, r5, #12
 801113c:	4629      	mov	r1, r5
 801113e:	4650      	mov	r0, sl
 8011140:	f7ff fc0e 	bl	8010960 <_platform_network_state_setup.isra.1>
 8011144:	45d9      	cmp	r9, fp
 8011146:	883b      	ldrh	r3, [r7, #0]
 8011148:	bf38      	it	cc
 801114a:	46d9      	movcc	r9, fp
 801114c:	3601      	adds	r6, #1
 801114e:	3518      	adds	r5, #24
 8011150:	e7af      	b.n	80110b2 <ai_platform_network_process+0x6e>
 8011152:	46a3      	mov	fp, r4
 8011154:	4658      	mov	r0, fp
 8011156:	b003      	add	sp, #12
 8011158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801115c:	f108 0010 	add.w	r0, r8, #16
 8011160:	2221      	movs	r2, #33	; 0x21
 8011162:	2112      	movs	r1, #18
 8011164:	f000 f980 	bl	8011468 <core_set_error>
 8011168:	e7f4      	b.n	8011154 <ai_platform_network_process+0x110>
 801116a:	f108 0010 	add.w	r0, r8, #16
 801116e:	2217      	movs	r2, #23
 8011170:	2112      	movs	r1, #18
 8011172:	469b      	mov	fp, r3
 8011174:	f000 f978 	bl	8011468 <core_set_error>
 8011178:	e7ec      	b.n	8011154 <ai_platform_network_process+0x110>
 801117a:	f108 0010 	add.w	r0, r8, #16
 801117e:	2219      	movs	r2, #25
 8011180:	2112      	movs	r1, #18
 8011182:	f000 f971 	bl	8011468 <core_set_error>
 8011186:	f04f 0b00 	mov.w	fp, #0
 801118a:	e7e3      	b.n	8011154 <ai_platform_network_process+0x110>
 801118c:	f108 0010 	add.w	r0, r8, #16
 8011190:	2218      	movs	r2, #24
 8011192:	2112      	movs	r1, #18
 8011194:	f000 f968 	bl	8011468 <core_set_error>
 8011198:	f04f 0b00 	mov.w	fp, #0
 801119c:	e7da      	b.n	8011154 <ai_platform_network_process+0x110>
 801119e:	4644      	mov	r4, r8
 80111a0:	f104 0010 	add.w	r0, r4, #16
 80111a4:	2217      	movs	r2, #23
 80111a6:	2112      	movs	r1, #18
 80111a8:	f000 f95e 	bl	8011468 <core_set_error>
 80111ac:	f04f 0b00 	mov.w	fp, #0
 80111b0:	e7d0      	b.n	8011154 <ai_platform_network_process+0x110>
 80111b2:	9a01      	ldr	r2, [sp, #4]
 80111b4:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 80111b8:	4644      	mov	r4, r8
 80111ba:	2a00      	cmp	r2, #0
 80111bc:	f000 80a4 	beq.w	8011308 <ai_platform_network_process+0x2c4>
 80111c0:	2b01      	cmp	r3, #1
 80111c2:	f240 8140 	bls.w	8011446 <ai_platform_network_process+0x402>
 80111c6:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 80111ca:	f118 0f0c 	cmn.w	r8, #12
 80111ce:	f000 813a 	beq.w	8011446 <ai_platform_network_process+0x402>
 80111d2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	f000 8135 	beq.w	8011446 <ai_platform_network_process+0x402>
 80111dc:	3204      	adds	r2, #4
 80111de:	4615      	mov	r5, r2
 80111e0:	2700      	movs	r7, #0
 80111e2:	429f      	cmp	r7, r3
 80111e4:	f080 808c 	bcs.w	8011300 <ai_platform_network_process+0x2bc>
 80111e8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	f000 8087 	beq.w	8011300 <ai_platform_network_process+0x2bc>
 80111f2:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80111f6:	2e00      	cmp	r6, #0
 80111f8:	f000 8082 	beq.w	8011300 <ai_platform_network_process+0x2bc>
 80111fc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 8011206:	d067      	beq.n	80112d8 <ai_platform_network_process+0x294>
 8011208:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801120c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8011210:	69b0      	ldr	r0, [r6, #24]
 8011212:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8011216:	6841      	ldr	r1, [r0, #4]
 8011218:	fb0b f30e 	mul.w	r3, fp, lr
 801121c:	fb0c f303 	mul.w	r3, ip, r3
 8011220:	4299      	cmp	r1, r3
 8011222:	f0c0 8110 	bcc.w	8011446 <ai_platform_network_process+0x402>
 8011226:	68f3      	ldr	r3, [r6, #12]
 8011228:	68da      	ldr	r2, [r3, #12]
 801122a:	455a      	cmp	r2, fp
 801122c:	f040 810b 	bne.w	8011446 <ai_platform_network_process+0x402>
 8011230:	689a      	ldr	r2, [r3, #8]
 8011232:	4572      	cmp	r2, lr
 8011234:	f040 8107 	bne.w	8011446 <ai_platform_network_process+0x402>
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	459c      	cmp	ip, r3
 801123c:	f040 8103 	bne.w	8011446 <ai_platform_network_process+0x402>
 8011240:	6800      	ldr	r0, [r0, #0]
 8011242:	f000 fe8d 	bl	8011f60 <ai_array_get_byte_size>
 8011246:	68f2      	ldr	r2, [r6, #12]
 8011248:	6973      	ldr	r3, [r6, #20]
 801124a:	68d2      	ldr	r2, [r2, #12]
 801124c:	68db      	ldr	r3, [r3, #12]
 801124e:	fb03 f302 	mul.w	r3, r3, r2
 8011252:	4298      	cmp	r0, r3
 8011254:	f0c0 80f7 	bcc.w	8011446 <ai_platform_network_process+0x402>
 8011258:	69b3      	ldr	r3, [r6, #24]
 801125a:	6818      	ldr	r0, [r3, #0]
 801125c:	f000 fe34 	bl	8011ec8 <ai_array_to_buffer_fmt>
 8011260:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8011264:	4043      	eors	r3, r0
 8011266:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 801126a:	d12c      	bne.n	80112c6 <ai_platform_network_process+0x282>
 801126c:	68eb      	ldr	r3, [r5, #12]
 801126e:	b313      	cbz	r3, 80112b6 <ai_platform_network_process+0x272>
 8011270:	f8b5 b000 	ldrh.w	fp, [r5]
 8011274:	f1bb 0f00 	cmp.w	fp, #0
 8011278:	d016      	beq.n	80112a8 <ai_platform_network_process+0x264>
 801127a:	4633      	mov	r3, r6
 801127c:	f105 020c 	add.w	r2, r5, #12
 8011280:	4629      	mov	r1, r5
 8011282:	4650      	mov	r0, sl
 8011284:	f7ff fb6c 	bl	8010960 <_platform_network_state_setup.isra.1>
 8011288:	45d9      	cmp	r9, fp
 801128a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801128e:	bf38      	it	cc
 8011290:	46d9      	movcc	r9, fp
 8011292:	3701      	adds	r7, #1
 8011294:	3518      	adds	r5, #24
 8011296:	e7a4      	b.n	80111e2 <ai_platform_network_process+0x19e>
 8011298:	f104 0010 	add.w	r0, r4, #16
 801129c:	2230      	movs	r2, #48	; 0x30
 801129e:	2111      	movs	r1, #17
 80112a0:	f000 f8e2 	bl	8011468 <core_set_error>
 80112a4:	46b3      	mov	fp, r6
 80112a6:	e755      	b.n	8011154 <ai_platform_network_process+0x110>
 80112a8:	f104 0010 	add.w	r0, r4, #16
 80112ac:	2221      	movs	r2, #33	; 0x21
 80112ae:	2113      	movs	r1, #19
 80112b0:	f000 f8da 	bl	8011468 <core_set_error>
 80112b4:	e74e      	b.n	8011154 <ai_platform_network_process+0x110>
 80112b6:	f104 0010 	add.w	r0, r4, #16
 80112ba:	2217      	movs	r2, #23
 80112bc:	2113      	movs	r1, #19
 80112be:	469b      	mov	fp, r3
 80112c0:	f000 f8d2 	bl	8011468 <core_set_error>
 80112c4:	e746      	b.n	8011154 <ai_platform_network_process+0x110>
 80112c6:	f104 0010 	add.w	r0, r4, #16
 80112ca:	2219      	movs	r2, #25
 80112cc:	2113      	movs	r1, #19
 80112ce:	f000 f8cb 	bl	8011468 <core_set_error>
 80112d2:	f04f 0b00 	mov.w	fp, #0
 80112d6:	e73d      	b.n	8011154 <ai_platform_network_process+0x110>
 80112d8:	f104 0010 	add.w	r0, r4, #16
 80112dc:	2217      	movs	r2, #23
 80112de:	2113      	movs	r1, #19
 80112e0:	f000 f8c2 	bl	8011468 <core_set_error>
 80112e4:	46d3      	mov	fp, sl
 80112e6:	e735      	b.n	8011154 <ai_platform_network_process+0x110>
 80112e8:	a1c00100 	.word	0xa1c00100
 80112ec:	e0002000 	.word	0xe0002000
 80112f0:	40023008 	.word	0x40023008
 80112f4:	40023000 	.word	0x40023000
 80112f8:	f407a5c2 	.word	0xf407a5c2
 80112fc:	b5e8b5cd 	.word	0xb5e8b5cd
 8011300:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8011304:	f8a4 9014 	strh.w	r9, [r4, #20]
 8011308:	2b00      	cmp	r3, #0
 801130a:	f000 8099 	beq.w	8011440 <ai_platform_network_process+0x3fc>
 801130e:	2b01      	cmp	r3, #1
 8011310:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8011312:	f240 8093 	bls.w	801143c <ai_platform_network_process+0x3f8>
 8011316:	f105 070c 	add.w	r7, r5, #12
 801131a:	8ae0      	ldrh	r0, [r4, #22]
 801131c:	8aa3      	ldrh	r3, [r4, #20]
 801131e:	4283      	cmp	r3, r0
 8011320:	d977      	bls.n	8011412 <ai_platform_network_process+0x3ce>
 8011322:	46a3      	mov	fp, r4
 8011324:	2d00      	cmp	r5, #0
 8011326:	d032      	beq.n	801138e <ai_platform_network_process+0x34a>
 8011328:	882b      	ldrh	r3, [r5, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d02f      	beq.n	801138e <ai_platform_network_process+0x34a>
 801132e:	686b      	ldr	r3, [r5, #4]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d02c      	beq.n	801138e <ai_platform_network_process+0x34a>
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	f04f 0800 	mov.w	r8, #0
 801133a:	b343      	cbz	r3, 801138e <ai_platform_network_process+0x34a>
 801133c:	68a9      	ldr	r1, [r5, #8]
 801133e:	699a      	ldr	r2, [r3, #24]
 8011340:	f8d1 a000 	ldr.w	sl, [r1]
 8011344:	6814      	ldr	r4, [r2, #0]
 8011346:	6890      	ldr	r0, [r2, #8]
 8011348:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801134c:	eb0a 0609 	add.w	r6, sl, r9
 8011350:	00a4      	lsls	r4, r4, #2
 8011352:	6871      	ldr	r1, [r6, #4]
 8011354:	d45f      	bmi.n	8011416 <ai_platform_network_process+0x3d2>
 8011356:	68d4      	ldr	r4, [r2, #12]
 8011358:	1b00      	subs	r0, r0, r4
 801135a:	4401      	add	r1, r0
 801135c:	6091      	str	r1, [r2, #8]
 801135e:	699b      	ldr	r3, [r3, #24]
 8011360:	6872      	ldr	r2, [r6, #4]
 8011362:	60da      	str	r2, [r3, #12]
 8011364:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8011368:	f85a 2009 	ldr.w	r2, [sl, r9]
 801136c:	440b      	add	r3, r1
 801136e:	4293      	cmp	r3, r2
 8011370:	bf24      	itt	cs
 8011372:	68f3      	ldrcs	r3, [r6, #12]
 8011374:	1ad3      	subcs	r3, r2, r3
 8011376:	6073      	str	r3, [r6, #4]
 8011378:	882b      	ldrh	r3, [r5, #0]
 801137a:	f108 0801 	add.w	r8, r8, #1
 801137e:	4598      	cmp	r8, r3
 8011380:	d205      	bcs.n	801138e <ai_platform_network_process+0x34a>
 8011382:	686b      	ldr	r3, [r5, #4]
 8011384:	b11b      	cbz	r3, 801138e <ai_platform_network_process+0x34a>
 8011386:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d1d6      	bne.n	801133c <ai_platform_network_process+0x2f8>
 801138e:	4658      	mov	r0, fp
 8011390:	f000 fd60 	bl	8011e54 <ai_layers_forward_all>
 8011394:	2f00      	cmp	r7, #0
 8011396:	d032      	beq.n	80113fe <ai_platform_network_process+0x3ba>
 8011398:	883b      	ldrh	r3, [r7, #0]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d02f      	beq.n	80113fe <ai_platform_network_process+0x3ba>
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	b36b      	cbz	r3, 80113fe <ai_platform_network_process+0x3ba>
 80113a2:	6818      	ldr	r0, [r3, #0]
 80113a4:	b358      	cbz	r0, 80113fe <ai_platform_network_process+0x3ba>
 80113a6:	f04f 0800 	mov.w	r8, #0
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	6981      	ldr	r1, [r0, #24]
 80113ae:	f8d3 a000 	ldr.w	sl, [r3]
 80113b2:	680c      	ldr	r4, [r1, #0]
 80113b4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80113b8:	eb0a 0609 	add.w	r6, sl, r9
 80113bc:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 80113c0:	00a4      	lsls	r4, r4, #2
 80113c2:	eb0c 0302 	add.w	r3, ip, r2
 80113c6:	d42a      	bmi.n	801141e <ai_platform_network_process+0x3da>
 80113c8:	f85a 2009 	ldr.w	r2, [sl, r9]
 80113cc:	4293      	cmp	r3, r2
 80113ce:	bf24      	itt	cs
 80113d0:	68f3      	ldrcs	r3, [r6, #12]
 80113d2:	1ad3      	subcs	r3, r2, r3
 80113d4:	6073      	str	r3, [r6, #4]
 80113d6:	6981      	ldr	r1, [r0, #24]
 80113d8:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 80113dc:	1b12      	subs	r2, r2, r4
 80113de:	4413      	add	r3, r2
 80113e0:	608b      	str	r3, [r1, #8]
 80113e2:	6983      	ldr	r3, [r0, #24]
 80113e4:	6872      	ldr	r2, [r6, #4]
 80113e6:	60da      	str	r2, [r3, #12]
 80113e8:	883b      	ldrh	r3, [r7, #0]
 80113ea:	f108 0801 	add.w	r8, r8, #1
 80113ee:	4598      	cmp	r8, r3
 80113f0:	d205      	bcs.n	80113fe <ai_platform_network_process+0x3ba>
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	b11b      	cbz	r3, 80113fe <ai_platform_network_process+0x3ba>
 80113f6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80113fa:	2800      	cmp	r0, #0
 80113fc:	d1d5      	bne.n	80113aa <ai_platform_network_process+0x366>
 80113fe:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8011402:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8011406:	3001      	adds	r0, #1
 8011408:	b280      	uxth	r0, r0
 801140a:	4283      	cmp	r3, r0
 801140c:	f8ab 0016 	strh.w	r0, [fp, #22]
 8011410:	d888      	bhi.n	8011324 <ai_platform_network_process+0x2e0>
 8011412:	4683      	mov	fp, r0
 8011414:	e69e      	b.n	8011154 <ai_platform_network_process+0x110>
 8011416:	68b2      	ldr	r2, [r6, #8]
 8011418:	f000 fdfe 	bl	8012018 <memcpy>
 801141c:	e7a2      	b.n	8011364 <ai_platform_network_process+0x320>
 801141e:	6889      	ldr	r1, [r1, #8]
 8011420:	4660      	mov	r0, ip
 8011422:	f000 fdf9 	bl	8012018 <memcpy>
 8011426:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 801142a:	f85a 2009 	ldr.w	r2, [sl, r9]
 801142e:	440b      	add	r3, r1
 8011430:	4293      	cmp	r3, r2
 8011432:	bf24      	itt	cs
 8011434:	68f3      	ldrcs	r3, [r6, #12]
 8011436:	1ad3      	subcs	r3, r2, r3
 8011438:	6073      	str	r3, [r6, #4]
 801143a:	e7d5      	b.n	80113e8 <ai_platform_network_process+0x3a4>
 801143c:	2700      	movs	r7, #0
 801143e:	e76c      	b.n	801131a <ai_platform_network_process+0x2d6>
 8011440:	461d      	mov	r5, r3
 8011442:	461f      	mov	r7, r3
 8011444:	e769      	b.n	801131a <ai_platform_network_process+0x2d6>
 8011446:	f104 0010 	add.w	r0, r4, #16
 801144a:	2218      	movs	r2, #24
 801144c:	2113      	movs	r1, #19
 801144e:	f000 f80b 	bl	8011468 <core_set_error>
 8011452:	f04f 0b00 	mov.w	fp, #0
 8011456:	e67d      	b.n	8011154 <ai_platform_network_process+0x110>

08011458 <core_init>:
 8011458:	2001      	movs	r0, #1
 801145a:	4770      	bx	lr

0801145c <core_get_error>:
 801145c:	4603      	mov	r3, r0
 801145e:	2200      	movs	r2, #0
 8011460:	6800      	ldr	r0, [r0, #0]
 8011462:	601a      	str	r2, [r3, #0]
 8011464:	4770      	bx	lr
 8011466:	bf00      	nop

08011468 <core_set_error>:
 8011468:	7803      	ldrb	r3, [r0, #0]
 801146a:	b933      	cbnz	r3, 801147a <core_set_error+0x12>
 801146c:	7001      	strb	r1, [r0, #0]
 801146e:	6803      	ldr	r3, [r0, #0]
 8011470:	f362 231f 	bfi	r3, r2, #8, #24
 8011474:	6003      	str	r3, [r0, #0]
 8011476:	2001      	movs	r0, #1
 8011478:	4770      	bx	lr
 801147a:	2000      	movs	r0, #0
 801147c:	4770      	bx	lr
 801147e:	bf00      	nop

08011480 <ai_dict8_dot_array_f32>:
 8011480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011484:	f8dd c020 	ldr.w	ip, [sp, #32]
 8011488:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 801148c:	f000 80c0 	beq.w	8011610 <ai_dict8_dot_array_f32+0x190>
 8011490:	f101 0408 	add.w	r4, r1, #8
 8011494:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8011498:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8011618 <ai_dict8_dot_array_f32+0x198>
 801149c:	eb04 0e09 	add.w	lr, r4, r9
 80114a0:	f103 0520 	add.w	r5, r3, #32
 80114a4:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 80114a8:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 80114ac:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 80114b0:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 80114b4:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 80114b8:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 80114bc:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 80114c0:	ed55 3a04 	vldr	s7, [r5, #-16]
 80114c4:	ed55 4a03 	vldr	s9, [r5, #-12]
 80114c8:	ed55 5a02 	vldr	s11, [r5, #-8]
 80114cc:	ed55 6a01 	vldr	s13, [r5, #-4]
 80114d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80114d4:	edd6 7a00 	vldr	s15, [r6]
 80114d8:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 80114dc:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80114e0:	ee67 7a83 	vmul.f32	s15, s15, s6
 80114e4:	ed9a 3a00 	vldr	s6, [sl]
 80114e8:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 80114ec:	eee3 7a05 	vfma.f32	s15, s6, s10
 80114f0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80114f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80114f8:	ed97 3a00 	vldr	s6, [r7]
 80114fc:	ed96 5a00 	vldr	s10, [r6]
 8011500:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8011504:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8011508:	eee3 7a04 	vfma.f32	s15, s6, s8
 801150c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8011510:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011514:	ed9a 3a00 	vldr	s6, [sl]
 8011518:	ed96 4a00 	vldr	s8, [r6]
 801151c:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8011520:	eee5 7a06 	vfma.f32	s15, s10, s12
 8011524:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8011528:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801152c:	ed97 5a00 	vldr	s10, [r7]
 8011530:	ed96 6a00 	vldr	s12, [r6]
 8011534:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011538:	3408      	adds	r4, #8
 801153a:	45a6      	cmp	lr, r4
 801153c:	f105 0520 	add.w	r5, r5, #32
 8011540:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011544:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011548:	eee6 7a26 	vfma.f32	s15, s12, s13
 801154c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011550:	d1a8      	bne.n	80114a4 <ai_dict8_dot_array_f32+0x24>
 8011552:	4449      	add	r1, r9
 8011554:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8011558:	f01c 0c07 	ands.w	ip, ip, #7
 801155c:	d050      	beq.n	8011600 <ai_dict8_dot_array_f32+0x180>
 801155e:	780c      	ldrb	r4, [r1, #0]
 8011560:	edd3 6a00 	vldr	s13, [r3]
 8011564:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8011568:	edd4 7a00 	vldr	s15, [r4]
 801156c:	f1bc 0f01 	cmp.w	ip, #1
 8011570:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011574:	d044      	beq.n	8011600 <ai_dict8_dot_array_f32+0x180>
 8011576:	784c      	ldrb	r4, [r1, #1]
 8011578:	edd3 6a01 	vldr	s13, [r3, #4]
 801157c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8011580:	edd4 7a00 	vldr	s15, [r4]
 8011584:	f1bc 0f02 	cmp.w	ip, #2
 8011588:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801158c:	d038      	beq.n	8011600 <ai_dict8_dot_array_f32+0x180>
 801158e:	788c      	ldrb	r4, [r1, #2]
 8011590:	edd3 6a02 	vldr	s13, [r3, #8]
 8011594:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8011598:	edd4 7a00 	vldr	s15, [r4]
 801159c:	f1bc 0f03 	cmp.w	ip, #3
 80115a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115a4:	d02c      	beq.n	8011600 <ai_dict8_dot_array_f32+0x180>
 80115a6:	78cc      	ldrb	r4, [r1, #3]
 80115a8:	edd3 6a03 	vldr	s13, [r3, #12]
 80115ac:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80115b0:	edd4 7a00 	vldr	s15, [r4]
 80115b4:	f1bc 0f04 	cmp.w	ip, #4
 80115b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115bc:	d020      	beq.n	8011600 <ai_dict8_dot_array_f32+0x180>
 80115be:	790c      	ldrb	r4, [r1, #4]
 80115c0:	edd3 6a04 	vldr	s13, [r3, #16]
 80115c4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80115c8:	edd4 7a00 	vldr	s15, [r4]
 80115cc:	f1bc 0f05 	cmp.w	ip, #5
 80115d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115d4:	d014      	beq.n	8011600 <ai_dict8_dot_array_f32+0x180>
 80115d6:	794c      	ldrb	r4, [r1, #5]
 80115d8:	edd3 6a05 	vldr	s13, [r3, #20]
 80115dc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80115e0:	edd4 7a00 	vldr	s15, [r4]
 80115e4:	f1bc 0f06 	cmp.w	ip, #6
 80115e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115ec:	d008      	beq.n	8011600 <ai_dict8_dot_array_f32+0x180>
 80115ee:	7989      	ldrb	r1, [r1, #6]
 80115f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80115f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80115f8:	edd2 6a00 	vldr	s13, [r2]
 80115fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011600:	edd0 7a00 	vldr	s15, [r0]
 8011604:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011608:	ed80 7a00 	vstr	s14, [r0]
 801160c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011610:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8011618 <ai_dict8_dot_array_f32+0x198>
 8011614:	e7a0      	b.n	8011558 <ai_dict8_dot_array_f32+0xd8>
 8011616:	bf00      	nop
 8011618:	00000000 	.word	0x00000000

0801161c <ai_dict4_dot_array_f32>:
 801161c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011620:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011622:	f027 0c01 	bic.w	ip, r7, #1
 8011626:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 801162a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801162e:	f000 80ae 	beq.w	801178e <ai_dict4_dot_array_f32+0x172>
 8011632:	1d0d      	adds	r5, r1, #4
 8011634:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8011638:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8011794 <ai_dict4_dot_array_f32+0x178>
 801163c:	eb05 0e09 	add.w	lr, r5, r9
 8011640:	f103 0420 	add.w	r4, r3, #32
 8011644:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8011648:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 801164c:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8011650:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8011654:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8011658:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 801165c:	ed14 5a04 	vldr	s10, [r4, #-16]
 8011660:	ed54 5a03 	vldr	s11, [r4, #-12]
 8011664:	ed14 6a02 	vldr	s12, [r4, #-8]
 8011668:	ed54 6a01 	vldr	s13, [r4, #-4]
 801166c:	f006 0a0f 	and.w	sl, r6, #15
 8011670:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8011674:	edda 7a00 	vldr	s15, [sl]
 8011678:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 801167c:	0936      	lsrs	r6, r6, #4
 801167e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011682:	ee67 7a83 	vmul.f32	s15, s15, s6
 8011686:	ed96 3a00 	vldr	s6, [r6]
 801168a:	ea4f 161b 	mov.w	r6, fp, lsr #4
 801168e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011692:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011696:	f00b 0b0f 	and.w	fp, fp, #15
 801169a:	edd6 3a00 	vldr	s7, [r6]
 801169e:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 80116a2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80116a6:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80116aa:	3504      	adds	r5, #4
 80116ac:	ed9b 4a00 	vldr	s8, [fp]
 80116b0:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 80116b4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80116b8:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80116bc:	f00a 0a0f 	and.w	sl, sl, #15
 80116c0:	eddb 4a00 	vldr	s9, [fp]
 80116c4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80116c8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80116cc:	45ae      	cmp	lr, r5
 80116ce:	ed9a 5a00 	vldr	s10, [sl]
 80116d2:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80116d6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80116da:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80116de:	f006 060f 	and.w	r6, r6, #15
 80116e2:	edda 5a00 	vldr	s11, [sl]
 80116e6:	eee5 7a86 	vfma.f32	s15, s11, s12
 80116ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80116ee:	f104 0420 	add.w	r4, r4, #32
 80116f2:	ed96 6a00 	vldr	s12, [r6]
 80116f6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80116fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80116fe:	d1a1      	bne.n	8011644 <ai_dict4_dot_array_f32+0x28>
 8011700:	4449      	add	r1, r9
 8011702:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8011706:	459c      	cmp	ip, r3
 8011708:	d92d      	bls.n	8011766 <ai_dict4_dot_array_f32+0x14a>
 801170a:	f10c 0c07 	add.w	ip, ip, #7
 801170e:	f103 0508 	add.w	r5, r3, #8
 8011712:	ebac 0c05 	sub.w	ip, ip, r5
 8011716:	f02c 0407 	bic.w	r4, ip, #7
 801171a:	f103 0810 	add.w	r8, r3, #16
 801171e:	44a0      	add	r8, r4
 8011720:	f101 3eff 	add.w	lr, r1, #4294967295
 8011724:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8011728:	ed15 6a01 	vldr	s12, [r5, #-4]
 801172c:	ed55 6a02 	vldr	s13, [r5, #-8]
 8011730:	f004 060f 	and.w	r6, r4, #15
 8011734:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011738:	0924      	lsrs	r4, r4, #4
 801173a:	edd6 7a00 	vldr	s15, [r6]
 801173e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8011742:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011746:	ed94 6a00 	vldr	s12, [r4]
 801174a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801174e:	3508      	adds	r5, #8
 8011750:	45a8      	cmp	r8, r5
 8011752:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011756:	d1e5      	bne.n	8011724 <ai_dict4_dot_array_f32+0x108>
 8011758:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 801175c:	f10c 0c01 	add.w	ip, ip, #1
 8011760:	4461      	add	r1, ip
 8011762:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8011766:	07fc      	lsls	r4, r7, #31
 8011768:	d509      	bpl.n	801177e <ai_dict4_dot_array_f32+0x162>
 801176a:	7809      	ldrb	r1, [r1, #0]
 801176c:	edd3 7a00 	vldr	s15, [r3]
 8011770:	090b      	lsrs	r3, r1, #4
 8011772:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011776:	edd2 6a00 	vldr	s13, [r2]
 801177a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801177e:	edd0 7a00 	vldr	s15, [r0]
 8011782:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011786:	ed80 7a00 	vstr	s14, [r0]
 801178a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801178e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8011794 <ai_dict4_dot_array_f32+0x178>
 8011792:	e7b8      	b.n	8011706 <ai_dict4_dot_array_f32+0xea>
 8011794:	00000000 	.word	0x00000000

08011798 <forward_dense>:
 8011798:	6942      	ldr	r2, [r0, #20]
 801179a:	8813      	ldrh	r3, [r2, #0]
 801179c:	2b00      	cmp	r3, #0
 801179e:	f000 81ca 	beq.w	8011b36 <forward_dense+0x39e>
 80117a2:	6852      	ldr	r2, [r2, #4]
 80117a4:	6850      	ldr	r0, [r2, #4]
 80117a6:	b100      	cbz	r0, 80117aa <forward_dense+0x12>
 80117a8:	6800      	ldr	r0, [r0, #0]
 80117aa:	2b01      	cmp	r3, #1
 80117ac:	f240 81c0 	bls.w	8011b30 <forward_dense+0x398>
 80117b0:	6911      	ldr	r1, [r2, #16]
 80117b2:	b101      	cbz	r1, 80117b6 <forward_dense+0x1e>
 80117b4:	6809      	ldr	r1, [r1, #0]
 80117b6:	2b02      	cmp	r3, #2
 80117b8:	f000 81bf 	beq.w	8011b3a <forward_dense+0x3a2>
 80117bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c0:	ed2d 8b10 	vpush	{d8-d15}
 80117c4:	69d3      	ldr	r3, [r2, #28]
 80117c6:	b091      	sub	sp, #68	; 0x44
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	f000 820b 	beq.w	8011be4 <forward_dense+0x44c>
 80117ce:	681c      	ldr	r4, [r3, #0]
 80117d0:	9408      	str	r4, [sp, #32]
 80117d2:	f112 0418 	adds.w	r4, r2, #24
 80117d6:	f000 81df 	beq.w	8011b98 <forward_dense+0x400>
 80117da:	8b12      	ldrh	r2, [r2, #24]
 80117dc:	2a01      	cmp	r2, #1
 80117de:	f240 81fe 	bls.w	8011bde <forward_dense+0x446>
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	f000 81da 	beq.w	8011b9c <forward_dense+0x404>
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	9306      	str	r3, [sp, #24]
 80117ec:	9b08      	ldr	r3, [sp, #32]
 80117ee:	68cc      	ldr	r4, [r1, #12]
 80117f0:	699b      	ldr	r3, [r3, #24]
 80117f2:	68c5      	ldr	r5, [r0, #12]
 80117f4:	681a      	ldr	r2, [r3, #0]
 80117f6:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80117fa:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80117fe:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8011802:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8011806:	fa4c f505 	asr.w	r5, ip, r5
 801180a:	f3c2 4243 	ubfx	r2, r2, #17, #4
 801180e:	950b      	str	r5, [sp, #44]	; 0x2c
 8011810:	2a04      	cmp	r2, #4
 8011812:	fb07 f506 	mul.w	r5, r7, r6
 8011816:	6864      	ldr	r4, [r4, #4]
 8011818:	9507      	str	r5, [sp, #28]
 801181a:	f000 81dd 	beq.w	8011bd8 <forward_dense+0x440>
 801181e:	2a08      	cmp	r2, #8
 8011820:	f000 81da 	beq.w	8011bd8 <forward_dense+0x440>
 8011824:	f04f 0a00 	mov.w	sl, #0
 8011828:	698a      	ldr	r2, [r1, #24]
 801182a:	6981      	ldr	r1, [r0, #24]
 801182c:	6890      	ldr	r0, [r2, #8]
 801182e:	9a08      	ldr	r2, [sp, #32]
 8011830:	9004      	str	r0, [sp, #16]
 8011832:	6952      	ldr	r2, [r2, #20]
 8011834:	688f      	ldr	r7, [r1, #8]
 8011836:	f8d2 9004 	ldr.w	r9, [r2, #4]
 801183a:	00a2      	lsls	r2, r4, #2
 801183c:	9209      	str	r2, [sp, #36]	; 0x24
 801183e:	1886      	adds	r6, r0, r2
 8011840:	9a07      	ldr	r2, [sp, #28]
 8011842:	2a00      	cmp	r2, #0
 8011844:	f000 81c3 	beq.w	8011bce <forward_dense+0x436>
 8011848:	f1a8 0210 	sub.w	r2, r8, #16
 801184c:	0912      	lsrs	r2, r2, #4
 801184e:	3201      	adds	r2, #1
 8011850:	0192      	lsls	r2, r2, #6
 8011852:	920c      	str	r2, [sp, #48]	; 0x30
 8011854:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8011858:	920a      	str	r2, [sp, #40]	; 0x28
 801185a:	689d      	ldr	r5, [r3, #8]
 801185c:	9b06      	ldr	r3, [sp, #24]
 801185e:	eddf aad0 	vldr	s21, [pc, #832]	; 8011ba0 <forward_dense+0x408>
 8011862:	2200      	movs	r2, #0
 8011864:	9205      	str	r2, [sp, #20]
 8011866:	f008 020f 	and.w	r2, r8, #15
 801186a:	920d      	str	r2, [sp, #52]	; 0x34
 801186c:	2b00      	cmp	r3, #0
 801186e:	d043      	beq.n	80118f8 <forward_dense+0x160>
 8011870:	699b      	ldr	r3, [r3, #24]
 8011872:	689c      	ldr	r4, [r3, #8]
 8011874:	9b04      	ldr	r3, [sp, #16]
 8011876:	f1ba 0f00 	cmp.w	sl, #0
 801187a:	d042      	beq.n	8011902 <forward_dense+0x16a>
 801187c:	42b3      	cmp	r3, r6
 801187e:	d22a      	bcs.n	80118d6 <forward_dense+0x13e>
 8011880:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011882:	469b      	mov	fp, r3
 8011884:	ab0f      	add	r3, sp, #60	; 0x3c
 8011886:	9303      	str	r3, [sp, #12]
 8011888:	2a04      	cmp	r2, #4
 801188a:	4633      	mov	r3, r6
 801188c:	4646      	mov	r6, r8
 801188e:	4698      	mov	r8, r3
 8011890:	f000 8156 	beq.w	8011b40 <forward_dense+0x3a8>
 8011894:	2c00      	cmp	r4, #0
 8011896:	f000 8185 	beq.w	8011ba4 <forward_dense+0x40c>
 801189a:	f8d4 c000 	ldr.w	ip, [r4]
 801189e:	9803      	ldr	r0, [sp, #12]
 80118a0:	9600      	str	r6, [sp, #0]
 80118a2:	463b      	mov	r3, r7
 80118a4:	4629      	mov	r1, r5
 80118a6:	4652      	mov	r2, sl
 80118a8:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80118ac:	f7ff fde8 	bl	8011480 <ai_dict8_dot_array_f32>
 80118b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80118b2:	f84b 3b04 	str.w	r3, [fp], #4
 80118b6:	45c3      	cmp	fp, r8
 80118b8:	f104 0404 	add.w	r4, r4, #4
 80118bc:	444d      	add	r5, r9
 80118be:	d3e9      	bcc.n	8011894 <forward_dense+0xfc>
 80118c0:	4643      	mov	r3, r8
 80118c2:	46b0      	mov	r8, r6
 80118c4:	461e      	mov	r6, r3
 80118c6:	9a04      	ldr	r2, [sp, #16]
 80118c8:	43d3      	mvns	r3, r2
 80118ca:	4433      	add	r3, r6
 80118cc:	f023 0303 	bic.w	r3, r3, #3
 80118d0:	3304      	adds	r3, #4
 80118d2:	18d3      	adds	r3, r2, r3
 80118d4:	9304      	str	r3, [sp, #16]
 80118d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118d8:	9b05      	ldr	r3, [sp, #20]
 80118da:	4417      	add	r7, r2
 80118dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80118de:	4416      	add	r6, r2
 80118e0:	9a07      	ldr	r2, [sp, #28]
 80118e2:	3301      	adds	r3, #1
 80118e4:	4293      	cmp	r3, r2
 80118e6:	9305      	str	r3, [sp, #20]
 80118e8:	f000 8171 	beq.w	8011bce <forward_dense+0x436>
 80118ec:	9b08      	ldr	r3, [sp, #32]
 80118ee:	699b      	ldr	r3, [r3, #24]
 80118f0:	689d      	ldr	r5, [r3, #8]
 80118f2:	9b06      	ldr	r3, [sp, #24]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d1bb      	bne.n	8011870 <forward_dense+0xd8>
 80118f8:	461c      	mov	r4, r3
 80118fa:	9b04      	ldr	r3, [sp, #16]
 80118fc:	f1ba 0f00 	cmp.w	sl, #0
 8011900:	d1bc      	bne.n	801187c <forward_dense+0xe4>
 8011902:	42b3      	cmp	r3, r6
 8011904:	d2e7      	bcs.n	80118d6 <forward_dense+0x13e>
 8011906:	4618      	mov	r0, r3
 8011908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801190a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801190e:	eb07 0c03 	add.w	ip, r7, r3
 8011912:	469e      	mov	lr, r3
 8011914:	2c00      	cmp	r4, #0
 8011916:	f000 80ff 	beq.w	8011b18 <forward_dense+0x380>
 801191a:	f1b8 0f0f 	cmp.w	r8, #15
 801191e:	edd4 fa00 	vldr	s31, [r4]
 8011922:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8011ba0 <forward_dense+0x408>
 8011926:	f104 0404 	add.w	r4, r4, #4
 801192a:	f240 80fd 	bls.w	8011b28 <forward_dense+0x390>
 801192e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011932:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8011936:	4641      	mov	r1, r8
 8011938:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 801193c:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8011940:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8011944:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8011948:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 801194c:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8011950:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8011954:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8011958:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 801195c:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8011960:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8011964:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8011968:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 801196c:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8011970:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8011974:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8011978:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 801197c:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8011980:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8011984:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8011988:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 801198c:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8011990:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8011994:	ed13 4a04 	vldr	s8, [r3, #-16]
 8011998:	ed52 4a04 	vldr	s9, [r2, #-16]
 801199c:	ed12 5a03 	vldr	s10, [r2, #-12]
 80119a0:	ed53 5a03 	vldr	s11, [r3, #-12]
 80119a4:	ed12 6a02 	vldr	s12, [r2, #-8]
 80119a8:	ed13 7a02 	vldr	s14, [r3, #-8]
 80119ac:	ee67 7a8f 	vmul.f32	s15, s15, s30
 80119b0:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 80119b4:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80119b8:	3910      	subs	r1, #16
 80119ba:	290f      	cmp	r1, #15
 80119bc:	ed53 ea01 	vldr	s29, [r3, #-4]
 80119c0:	ed12 ea01 	vldr	s28, [r2, #-4]
 80119c4:	eeed 7a8f 	vfma.f32	s15, s27, s30
 80119c8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80119cc:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80119d0:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80119d4:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80119d8:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 80119dc:	eee9 7a89 	vfma.f32	s15, s19, s18
 80119e0:	eee8 7a88 	vfma.f32	s15, s17, s16
 80119e4:	eee0 7a20 	vfma.f32	s15, s0, s1
 80119e8:	eee1 7a21 	vfma.f32	s15, s2, s3
 80119ec:	eee2 7a22 	vfma.f32	s15, s4, s5
 80119f0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80119f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80119f8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80119fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011a00:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8011a04:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011a08:	d896      	bhi.n	8011938 <forward_dense+0x1a0>
 8011a0a:	eb05 010e 	add.w	r1, r5, lr
 8011a0e:	465b      	mov	r3, fp
 8011a10:	4662      	mov	r2, ip
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d075      	beq.n	8011b02 <forward_dense+0x36a>
 8011a16:	ed91 7a00 	vldr	s14, [r1]
 8011a1a:	edd2 7a00 	vldr	s15, [r2]
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a24:	d06d      	beq.n	8011b02 <forward_dense+0x36a>
 8011a26:	ed91 7a01 	vldr	s14, [r1, #4]
 8011a2a:	edd2 7a01 	vldr	s15, [r2, #4]
 8011a2e:	2b02      	cmp	r3, #2
 8011a30:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a34:	d065      	beq.n	8011b02 <forward_dense+0x36a>
 8011a36:	ed91 7a02 	vldr	s14, [r1, #8]
 8011a3a:	edd2 7a02 	vldr	s15, [r2, #8]
 8011a3e:	2b03      	cmp	r3, #3
 8011a40:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a44:	d05d      	beq.n	8011b02 <forward_dense+0x36a>
 8011a46:	ed91 7a03 	vldr	s14, [r1, #12]
 8011a4a:	edd2 7a03 	vldr	s15, [r2, #12]
 8011a4e:	2b04      	cmp	r3, #4
 8011a50:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a54:	d055      	beq.n	8011b02 <forward_dense+0x36a>
 8011a56:	ed91 7a04 	vldr	s14, [r1, #16]
 8011a5a:	edd2 7a04 	vldr	s15, [r2, #16]
 8011a5e:	2b05      	cmp	r3, #5
 8011a60:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a64:	d04d      	beq.n	8011b02 <forward_dense+0x36a>
 8011a66:	ed91 7a05 	vldr	s14, [r1, #20]
 8011a6a:	edd2 7a05 	vldr	s15, [r2, #20]
 8011a6e:	2b06      	cmp	r3, #6
 8011a70:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a74:	d045      	beq.n	8011b02 <forward_dense+0x36a>
 8011a76:	ed91 7a06 	vldr	s14, [r1, #24]
 8011a7a:	edd2 7a06 	vldr	s15, [r2, #24]
 8011a7e:	2b07      	cmp	r3, #7
 8011a80:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a84:	d03d      	beq.n	8011b02 <forward_dense+0x36a>
 8011a86:	ed91 7a07 	vldr	s14, [r1, #28]
 8011a8a:	edd2 7a07 	vldr	s15, [r2, #28]
 8011a8e:	2b08      	cmp	r3, #8
 8011a90:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a94:	d035      	beq.n	8011b02 <forward_dense+0x36a>
 8011a96:	ed91 7a08 	vldr	s14, [r1, #32]
 8011a9a:	edd2 7a08 	vldr	s15, [r2, #32]
 8011a9e:	2b09      	cmp	r3, #9
 8011aa0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011aa4:	d02d      	beq.n	8011b02 <forward_dense+0x36a>
 8011aa6:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8011aaa:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8011aae:	2b0a      	cmp	r3, #10
 8011ab0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011ab4:	d025      	beq.n	8011b02 <forward_dense+0x36a>
 8011ab6:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8011aba:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8011abe:	2b0b      	cmp	r3, #11
 8011ac0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011ac4:	d01d      	beq.n	8011b02 <forward_dense+0x36a>
 8011ac6:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8011aca:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8011ace:	2b0c      	cmp	r3, #12
 8011ad0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011ad4:	d015      	beq.n	8011b02 <forward_dense+0x36a>
 8011ad6:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8011ada:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8011ade:	2b0d      	cmp	r3, #13
 8011ae0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011ae4:	d00d      	beq.n	8011b02 <forward_dense+0x36a>
 8011ae6:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8011aea:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8011aee:	2b0e      	cmp	r3, #14
 8011af0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011af4:	d005      	beq.n	8011b02 <forward_dense+0x36a>
 8011af6:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8011afa:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8011afe:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011b02:	444d      	add	r5, r9
 8011b04:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8011b08:	ece0 6a01 	vstmia	r0!, {s13}
 8011b0c:	42b0      	cmp	r0, r6
 8011b0e:	f4bf aeda 	bcs.w	80118c6 <forward_dense+0x12e>
 8011b12:	2c00      	cmp	r4, #0
 8011b14:	f47f af01 	bne.w	801191a <forward_dense+0x182>
 8011b18:	f1b8 0f0f 	cmp.w	r8, #15
 8011b1c:	eef0 fa6a 	vmov.f32	s31, s21
 8011b20:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8011ba0 <forward_dense+0x408>
 8011b24:	f63f af03 	bhi.w	801192e <forward_dense+0x196>
 8011b28:	4643      	mov	r3, r8
 8011b2a:	4629      	mov	r1, r5
 8011b2c:	463a      	mov	r2, r7
 8011b2e:	e770      	b.n	8011a12 <forward_dense+0x27a>
 8011b30:	2300      	movs	r3, #0
 8011b32:	685b      	ldr	r3, [r3, #4]
 8011b34:	deff      	udf	#255	; 0xff
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	deff      	udf	#255	; 0xff
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	685b      	ldr	r3, [r3, #4]
 8011b3e:	deff      	udf	#255	; 0xff
 8011b40:	b1ac      	cbz	r4, 8011b6e <forward_dense+0x3d6>
 8011b42:	f8d4 c000 	ldr.w	ip, [r4]
 8011b46:	9803      	ldr	r0, [sp, #12]
 8011b48:	9600      	str	r6, [sp, #0]
 8011b4a:	463b      	mov	r3, r7
 8011b4c:	4629      	mov	r1, r5
 8011b4e:	4652      	mov	r2, sl
 8011b50:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8011b54:	f7ff fd62 	bl	801161c <ai_dict4_dot_array_f32>
 8011b58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b5a:	f84b 3b04 	str.w	r3, [fp], #4
 8011b5e:	45c3      	cmp	fp, r8
 8011b60:	f104 0404 	add.w	r4, r4, #4
 8011b64:	444d      	add	r5, r9
 8011b66:	f4bf aeab 	bcs.w	80118c0 <forward_dense+0x128>
 8011b6a:	2c00      	cmp	r4, #0
 8011b6c:	d1e9      	bne.n	8011b42 <forward_dense+0x3aa>
 8011b6e:	4634      	mov	r4, r6
 8011b70:	4646      	mov	r6, r8
 8011b72:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011b76:	9400      	str	r4, [sp, #0]
 8011b78:	463b      	mov	r3, r7
 8011b7a:	4629      	mov	r1, r5
 8011b7c:	4652      	mov	r2, sl
 8011b7e:	4640      	mov	r0, r8
 8011b80:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8011b84:	f7ff fd4a 	bl	801161c <ai_dict4_dot_array_f32>
 8011b88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b8a:	f84b 3b04 	str.w	r3, [fp], #4
 8011b8e:	45b3      	cmp	fp, r6
 8011b90:	444d      	add	r5, r9
 8011b92:	d3f0      	bcc.n	8011b76 <forward_dense+0x3de>
 8011b94:	46a0      	mov	r8, r4
 8011b96:	e696      	b.n	80118c6 <forward_dense+0x12e>
 8011b98:	9406      	str	r4, [sp, #24]
 8011b9a:	e627      	b.n	80117ec <forward_dense+0x54>
 8011b9c:	9306      	str	r3, [sp, #24]
 8011b9e:	e625      	b.n	80117ec <forward_dense+0x54>
 8011ba0:	00000000 	.word	0x00000000
 8011ba4:	4634      	mov	r4, r6
 8011ba6:	4646      	mov	r6, r8
 8011ba8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011bac:	9400      	str	r4, [sp, #0]
 8011bae:	463b      	mov	r3, r7
 8011bb0:	4629      	mov	r1, r5
 8011bb2:	4652      	mov	r2, sl
 8011bb4:	4640      	mov	r0, r8
 8011bb6:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8011bba:	f7ff fc61 	bl	8011480 <ai_dict8_dot_array_f32>
 8011bbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011bc0:	f84b 3b04 	str.w	r3, [fp], #4
 8011bc4:	45b3      	cmp	fp, r6
 8011bc6:	444d      	add	r5, r9
 8011bc8:	d3f0      	bcc.n	8011bac <forward_dense+0x414>
 8011bca:	46a0      	mov	r8, r4
 8011bcc:	e67b      	b.n	80118c6 <forward_dense+0x12e>
 8011bce:	b011      	add	sp, #68	; 0x44
 8011bd0:	ecbd 8b10 	vpop	{d8-d15}
 8011bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bd8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8011bdc:	e624      	b.n	8011828 <forward_dense+0x90>
 8011bde:	2300      	movs	r3, #0
 8011be0:	9306      	str	r3, [sp, #24]
 8011be2:	e603      	b.n	80117ec <forward_dense+0x54>
 8011be4:	9308      	str	r3, [sp, #32]
 8011be6:	e5f4      	b.n	80117d2 <forward_dense+0x3a>

08011be8 <nl_func_relu_generic_array_f32>:
 8011be8:	b430      	push	{r4, r5}
 8011bea:	edd3 6a02 	vldr	s13, [r3, #8]
 8011bee:	6880      	ldr	r0, [r0, #8]
 8011bf0:	688c      	ldr	r4, [r1, #8]
 8011bf2:	ed93 7a00 	vldr	s14, [r3]
 8011bf6:	ed93 6a01 	vldr	s12, [r3, #4]
 8011bfa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8011bfe:	3a01      	subs	r2, #1
 8011c00:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8011c04:	0092      	lsls	r2, r2, #2
 8011c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c0a:	4410      	add	r0, r2
 8011c0c:	4422      	add	r2, r4
 8011c0e:	d421      	bmi.n	8011c54 <nl_func_relu_generic_array_f32+0x6c>
 8011c10:	42a2      	cmp	r2, r4
 8011c12:	d33d      	bcc.n	8011c90 <nl_func_relu_generic_array_f32+0xa8>
 8011c14:	1d13      	adds	r3, r2, #4
 8011c16:	1d02      	adds	r2, r0, #4
 8011c18:	e010      	b.n	8011c3c <nl_func_relu_generic_array_f32+0x54>
 8011c1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c22:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8011c26:	dd01      	ble.n	8011c2c <nl_func_relu_generic_array_f32+0x44>
 8011c28:	ee65 7a86 	vmul.f32	s15, s11, s12
 8011c2c:	ed62 7a01 	vstmdb	r2!, {s15}
 8011c30:	6888      	ldr	r0, [r1, #8]
 8011c32:	f1a3 0408 	sub.w	r4, r3, #8
 8011c36:	4284      	cmp	r4, r0
 8011c38:	462b      	mov	r3, r5
 8011c3a:	d329      	bcc.n	8011c90 <nl_func_relu_generic_array_f32+0xa8>
 8011c3c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011c40:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c48:	f1a3 0504 	sub.w	r5, r3, #4
 8011c4c:	dce5      	bgt.n	8011c1a <nl_func_relu_generic_array_f32+0x32>
 8011c4e:	eef0 7a66 	vmov.f32	s15, s13
 8011c52:	e7eb      	b.n	8011c2c <nl_func_relu_generic_array_f32+0x44>
 8011c54:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c5c:	d01a      	beq.n	8011c94 <nl_func_relu_generic_array_f32+0xac>
 8011c5e:	42a2      	cmp	r2, r4
 8011c60:	d316      	bcc.n	8011c90 <nl_func_relu_generic_array_f32+0xa8>
 8011c62:	1d13      	adds	r3, r2, #4
 8011c64:	1d02      	adds	r2, r0, #4
 8011c66:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011c6a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011c6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c72:	f1a3 0408 	sub.w	r4, r3, #8
 8011c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c7a:	f1a3 0004 	sub.w	r0, r3, #4
 8011c7e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011c82:	4623      	mov	r3, r4
 8011c84:	d51e      	bpl.n	8011cc4 <nl_func_relu_generic_array_f32+0xdc>
 8011c86:	ed62 6a01 	vstmdb	r2!, {s13}
 8011c8a:	688b      	ldr	r3, [r1, #8]
 8011c8c:	42a3      	cmp	r3, r4
 8011c8e:	d91e      	bls.n	8011cce <nl_func_relu_generic_array_f32+0xe6>
 8011c90:	bc30      	pop	{r4, r5}
 8011c92:	4770      	bx	lr
 8011c94:	42a2      	cmp	r2, r4
 8011c96:	d3fb      	bcc.n	8011c90 <nl_func_relu_generic_array_f32+0xa8>
 8011c98:	1d13      	adds	r3, r2, #4
 8011c9a:	2500      	movs	r5, #0
 8011c9c:	1d02      	adds	r2, r0, #4
 8011c9e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011ca2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ca6:	f1a3 0408 	sub.w	r4, r3, #8
 8011caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cae:	f1a3 0004 	sub.w	r0, r3, #4
 8011cb2:	4623      	mov	r3, r4
 8011cb4:	d80d      	bhi.n	8011cd2 <nl_func_relu_generic_array_f32+0xea>
 8011cb6:	ed62 7a01 	vstmdb	r2!, {s15}
 8011cba:	688b      	ldr	r3, [r1, #8]
 8011cbc:	42a3      	cmp	r3, r4
 8011cbe:	d8e7      	bhi.n	8011c90 <nl_func_relu_generic_array_f32+0xa8>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	e7ec      	b.n	8011c9e <nl_func_relu_generic_array_f32+0xb6>
 8011cc4:	ed62 7a01 	vstmdb	r2!, {s15}
 8011cc8:	688c      	ldr	r4, [r1, #8]
 8011cca:	429c      	cmp	r4, r3
 8011ccc:	d8e0      	bhi.n	8011c90 <nl_func_relu_generic_array_f32+0xa8>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	e7c9      	b.n	8011c66 <nl_func_relu_generic_array_f32+0x7e>
 8011cd2:	f842 5d04 	str.w	r5, [r2, #-4]!
 8011cd6:	688c      	ldr	r4, [r1, #8]
 8011cd8:	429c      	cmp	r4, r3
 8011cda:	d8d9      	bhi.n	8011c90 <nl_func_relu_generic_array_f32+0xa8>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	e7de      	b.n	8011c9e <nl_func_relu_generic_array_f32+0xb6>

08011ce0 <forward_relu>:
 8011ce0:	6942      	ldr	r2, [r0, #20]
 8011ce2:	8813      	ldrh	r3, [r2, #0]
 8011ce4:	b33b      	cbz	r3, 8011d36 <forward_relu+0x56>
 8011ce6:	b470      	push	{r4, r5, r6}
 8011ce8:	6852      	ldr	r2, [r2, #4]
 8011cea:	6856      	ldr	r6, [r2, #4]
 8011cec:	b106      	cbz	r6, 8011cf0 <forward_relu+0x10>
 8011cee:	6836      	ldr	r6, [r6, #0]
 8011cf0:	2b01      	cmp	r3, #1
 8011cf2:	d91d      	bls.n	8011d30 <forward_relu+0x50>
 8011cf4:	6913      	ldr	r3, [r2, #16]
 8011cf6:	b103      	cbz	r3, 8011cfa <forward_relu+0x1a>
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	6982      	ldr	r2, [r0, #24]
 8011cfc:	68b4      	ldr	r4, [r6, #8]
 8011cfe:	6998      	ldr	r0, [r3, #24]
 8011d00:	69b1      	ldr	r1, [r6, #24]
 8011d02:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8011d06:	2a00      	cmp	r2, #0
 8011d08:	d041      	beq.n	8011d8e <forward_relu+0xae>
 8011d0a:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 8011d0e:	2d01      	cmp	r5, #1
 8011d10:	d013      	beq.n	8011d3a <forward_relu+0x5a>
 8011d12:	2c00      	cmp	r4, #0
 8011d14:	d06f      	beq.n	8011df6 <forward_relu+0x116>
 8011d16:	68f6      	ldr	r6, [r6, #12]
 8011d18:	2201      	movs	r2, #1
 8011d1a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8011d1e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011d22:	42a6      	cmp	r6, r4
 8011d24:	fb05 f202 	mul.w	r2, r5, r2
 8011d28:	d1f9      	bne.n	8011d1e <forward_relu+0x3e>
 8011d2a:	bc70      	pop	{r4, r5, r6}
 8011d2c:	f7ff bf5c 	b.w	8011be8 <nl_func_relu_generic_array_f32>
 8011d30:	2300      	movs	r3, #0
 8011d32:	685b      	ldr	r3, [r3, #4]
 8011d34:	deff      	udf	#255	; 0xff
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	deff      	udf	#255	; 0xff
 8011d3a:	6880      	ldr	r0, [r0, #8]
 8011d3c:	688a      	ldr	r2, [r1, #8]
 8011d3e:	ed93 7a00 	vldr	s14, [r3]
 8011d42:	b184      	cbz	r4, 8011d66 <forward_relu+0x86>
 8011d44:	68f6      	ldr	r6, [r6, #12]
 8011d46:	462b      	mov	r3, r5
 8011d48:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8011d4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011d50:	42a6      	cmp	r6, r4
 8011d52:	fb05 f303 	mul.w	r3, r5, r3
 8011d56:	d1f9      	bne.n	8011d4c <forward_relu+0x6c>
 8011d58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011d5c:	3b01      	subs	r3, #1
 8011d5e:	009b      	lsls	r3, r3, #2
 8011d60:	18d2      	adds	r2, r2, r3
 8011d62:	4418      	add	r0, r3
 8011d64:	d23d      	bcs.n	8011de2 <forward_relu+0x102>
 8011d66:	1d13      	adds	r3, r2, #4
 8011d68:	2500      	movs	r5, #0
 8011d6a:	1d02      	adds	r2, r0, #4
 8011d6c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011d70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d78:	f1a3 0004 	sub.w	r0, r3, #4
 8011d7c:	d833      	bhi.n	8011de6 <forward_relu+0x106>
 8011d7e:	ed62 7a01 	vstmdb	r2!, {s15}
 8011d82:	688c      	ldr	r4, [r1, #8]
 8011d84:	3b08      	subs	r3, #8
 8011d86:	429c      	cmp	r4, r3
 8011d88:	d82b      	bhi.n	8011de2 <forward_relu+0x102>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	e7ee      	b.n	8011d6c <forward_relu+0x8c>
 8011d8e:	6880      	ldr	r0, [r0, #8]
 8011d90:	688b      	ldr	r3, [r1, #8]
 8011d92:	b184      	cbz	r4, 8011db6 <forward_relu+0xd6>
 8011d94:	68f6      	ldr	r6, [r6, #12]
 8011d96:	2201      	movs	r2, #1
 8011d98:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8011d9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011da0:	42a6      	cmp	r6, r4
 8011da2:	fb05 f202 	mul.w	r2, r5, r2
 8011da6:	d1f9      	bne.n	8011d9c <forward_relu+0xbc>
 8011da8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8011dac:	3a01      	subs	r2, #1
 8011dae:	0092      	lsls	r2, r2, #2
 8011db0:	189b      	adds	r3, r3, r2
 8011db2:	4410      	add	r0, r2
 8011db4:	d215      	bcs.n	8011de2 <forward_relu+0x102>
 8011db6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8011dfc <forward_relu+0x11c>
 8011dba:	3304      	adds	r3, #4
 8011dbc:	3004      	adds	r0, #4
 8011dbe:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011dc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dca:	bfb8      	it	lt
 8011dcc:	eef0 7a47 	vmovlt.f32	s15, s14
 8011dd0:	ed60 7a01 	vstmdb	r0!, {s15}
 8011dd4:	688c      	ldr	r4, [r1, #8]
 8011dd6:	f1a3 0208 	sub.w	r2, r3, #8
 8011dda:	4294      	cmp	r4, r2
 8011ddc:	f1a3 0304 	sub.w	r3, r3, #4
 8011de0:	d9ed      	bls.n	8011dbe <forward_relu+0xde>
 8011de2:	bc70      	pop	{r4, r5, r6}
 8011de4:	4770      	bx	lr
 8011de6:	f842 5d04 	str.w	r5, [r2, #-4]!
 8011dea:	688c      	ldr	r4, [r1, #8]
 8011dec:	3b08      	subs	r3, #8
 8011dee:	429c      	cmp	r4, r3
 8011df0:	d8f7      	bhi.n	8011de2 <forward_relu+0x102>
 8011df2:	4603      	mov	r3, r0
 8011df4:	e7ba      	b.n	8011d6c <forward_relu+0x8c>
 8011df6:	2201      	movs	r2, #1
 8011df8:	e797      	b.n	8011d2a <forward_relu+0x4a>
 8011dfa:	bf00      	nop
 8011dfc:	00000000 	.word	0x00000000

08011e00 <ai_check_custom_types>:
 8011e00:	4b13      	ldr	r3, [pc, #76]	; (8011e50 <ai_check_custom_types+0x50>)
 8011e02:	b082      	sub	sp, #8
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	9301      	str	r3, [sp, #4]
 8011e08:	b118      	cbz	r0, 8011e12 <ai_check_custom_types+0x12>
 8011e0a:	7803      	ldrb	r3, [r0, #0]
 8011e0c:	2b03      	cmp	r3, #3
 8011e0e:	d002      	beq.n	8011e16 <ai_check_custom_types+0x16>
 8011e10:	2000      	movs	r0, #0
 8011e12:	b002      	add	sp, #8
 8011e14:	4770      	bx	lr
 8011e16:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011e1a:	4293      	cmp	r3, r2
 8011e1c:	d004      	beq.n	8011e28 <ai_check_custom_types+0x28>
 8011e1e:	2001      	movs	r0, #1
 8011e20:	f080 0001 	eor.w	r0, r0, #1
 8011e24:	b002      	add	sp, #8
 8011e26:	4770      	bx	lr
 8011e28:	7842      	ldrb	r2, [r0, #1]
 8011e2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	f100 0001 	add.w	r0, r0, #1
 8011e34:	d1f3      	bne.n	8011e1e <ai_check_custom_types+0x1e>
 8011e36:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8011e3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d1ed      	bne.n	8011e1e <ai_check_custom_types+0x1e>
 8011e42:	7842      	ldrb	r2, [r0, #1]
 8011e44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	d1e8      	bne.n	8011e1e <ai_check_custom_types+0x1e>
 8011e4c:	2000      	movs	r0, #0
 8011e4e:	e7e7      	b.n	8011e20 <ai_check_custom_types+0x20>
 8011e50:	080168c0 	.word	0x080168c0

08011e54 <ai_layers_forward_all>:
 8011e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e56:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8011e58:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8011e5a:	4604      	mov	r4, r0
 8011e5c:	b31e      	cbz	r6, 8011ea6 <ai_layers_forward_all+0x52>
 8011e5e:	b1cd      	cbz	r5, 8011e94 <ai_layers_forward_all+0x40>
 8011e60:	6545      	str	r5, [r0, #84]	; 0x54
 8011e62:	4629      	mov	r1, r5
 8011e64:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8011e66:	2001      	movs	r0, #1
 8011e68:	47b0      	blx	r6
 8011e6a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8011e6c:	2700      	movs	r7, #0
 8011e6e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011e70:	2002      	movs	r0, #2
 8011e72:	47b0      	blx	r6
 8011e74:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8011e76:	692b      	ldr	r3, [r5, #16]
 8011e78:	4628      	mov	r0, r5
 8011e7a:	4798      	blx	r3
 8011e7c:	68eb      	ldr	r3, [r5, #12]
 8011e7e:	429d      	cmp	r5, r3
 8011e80:	f04f 0003 	mov.w	r0, #3
 8011e84:	4619      	mov	r1, r3
 8011e86:	d006      	beq.n	8011e96 <ai_layers_forward_all+0x42>
 8011e88:	6563      	str	r3, [r4, #84]	; 0x54
 8011e8a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011e8c:	47b0      	blx	r6
 8011e8e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8011e90:	2900      	cmp	r1, #0
 8011e92:	d1ec      	bne.n	8011e6e <ai_layers_forward_all+0x1a>
 8011e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e96:	2100      	movs	r1, #0
 8011e98:	6567      	str	r7, [r4, #84]	; 0x54
 8011e9a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8011e9c:	47b0      	blx	r6
 8011e9e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8011ea0:	2900      	cmp	r1, #0
 8011ea2:	d1e4      	bne.n	8011e6e <ai_layers_forward_all+0x1a>
 8011ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ea6:	2d00      	cmp	r5, #0
 8011ea8:	d0f4      	beq.n	8011e94 <ai_layers_forward_all+0x40>
 8011eaa:	6545      	str	r5, [r0, #84]	; 0x54
 8011eac:	692b      	ldr	r3, [r5, #16]
 8011eae:	4628      	mov	r0, r5
 8011eb0:	4798      	blx	r3
 8011eb2:	68eb      	ldr	r3, [r5, #12]
 8011eb4:	42ab      	cmp	r3, r5
 8011eb6:	d004      	beq.n	8011ec2 <ai_layers_forward_all+0x6e>
 8011eb8:	6563      	str	r3, [r4, #84]	; 0x54
 8011eba:	461d      	mov	r5, r3
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d1f5      	bne.n	8011eac <ai_layers_forward_all+0x58>
 8011ec0:	e7e8      	b.n	8011e94 <ai_layers_forward_all+0x40>
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	6563      	str	r3, [r4, #84]	; 0x54
 8011ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011ec8 <ai_array_to_buffer_fmt>:
 8011ec8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8011ecc:	2b02      	cmp	r3, #2
 8011ece:	d01f      	beq.n	8011f10 <ai_array_to_buffer_fmt+0x48>
 8011ed0:	4a1c      	ldr	r2, [pc, #112]	; (8011f44 <ai_array_to_buffer_fmt+0x7c>)
 8011ed2:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8011ed6:	4293      	cmp	r3, r2
 8011ed8:	d00a      	beq.n	8011ef0 <ai_array_to_buffer_fmt+0x28>
 8011eda:	dc0d      	bgt.n	8011ef8 <ai_array_to_buffer_fmt+0x30>
 8011edc:	4a1a      	ldr	r2, [pc, #104]	; (8011f48 <ai_array_to_buffer_fmt+0x80>)
 8011ede:	4293      	cmp	r3, r2
 8011ee0:	d006      	beq.n	8011ef0 <ai_array_to_buffer_fmt+0x28>
 8011ee2:	dd1d      	ble.n	8011f20 <ai_array_to_buffer_fmt+0x58>
 8011ee4:	4a19      	ldr	r2, [pc, #100]	; (8011f4c <ai_array_to_buffer_fmt+0x84>)
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	d002      	beq.n	8011ef0 <ai_array_to_buffer_fmt+0x28>
 8011eea:	320f      	adds	r2, #15
 8011eec:	4293      	cmp	r3, r2
 8011eee:	d10d      	bne.n	8011f0c <ai_array_to_buffer_fmt+0x44>
 8011ef0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8011ef4:	4318      	orrs	r0, r3
 8011ef6:	4770      	bx	lr
 8011ef8:	4a15      	ldr	r2, [pc, #84]	; (8011f50 <ai_array_to_buffer_fmt+0x88>)
 8011efa:	4293      	cmp	r3, r2
 8011efc:	d0f8      	beq.n	8011ef0 <ai_array_to_buffer_fmt+0x28>
 8011efe:	dd18      	ble.n	8011f32 <ai_array_to_buffer_fmt+0x6a>
 8011f00:	4a14      	ldr	r2, [pc, #80]	; (8011f54 <ai_array_to_buffer_fmt+0x8c>)
 8011f02:	4293      	cmp	r3, r2
 8011f04:	d0f4      	beq.n	8011ef0 <ai_array_to_buffer_fmt+0x28>
 8011f06:	4a14      	ldr	r2, [pc, #80]	; (8011f58 <ai_array_to_buffer_fmt+0x90>)
 8011f08:	4293      	cmp	r3, r2
 8011f0a:	d0f1      	beq.n	8011ef0 <ai_array_to_buffer_fmt+0x28>
 8011f0c:	2340      	movs	r3, #64	; 0x40
 8011f0e:	e7ef      	b.n	8011ef0 <ai_array_to_buffer_fmt+0x28>
 8011f10:	4b12      	ldr	r3, [pc, #72]	; (8011f5c <ai_array_to_buffer_fmt+0x94>)
 8011f12:	4003      	ands	r3, r0
 8011f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011f18:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8011f1c:	4318      	orrs	r0, r3
 8011f1e:	4770      	bx	lr
 8011f20:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8011f24:	4293      	cmp	r3, r2
 8011f26:	d0e3      	beq.n	8011ef0 <ai_array_to_buffer_fmt+0x28>
 8011f28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011f2c:	4293      	cmp	r3, r2
 8011f2e:	d0df      	beq.n	8011ef0 <ai_array_to_buffer_fmt+0x28>
 8011f30:	e7ec      	b.n	8011f0c <ai_array_to_buffer_fmt+0x44>
 8011f32:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8011f36:	4293      	cmp	r3, r2
 8011f38:	d0da      	beq.n	8011ef0 <ai_array_to_buffer_fmt+0x28>
 8011f3a:	3207      	adds	r2, #7
 8011f3c:	4293      	cmp	r3, r2
 8011f3e:	d0d7      	beq.n	8011ef0 <ai_array_to_buffer_fmt+0x28>
 8011f40:	e7e4      	b.n	8011f0c <ai_array_to_buffer_fmt+0x44>
 8011f42:	bf00      	nop
 8011f44:	00840040 	.word	0x00840040
 8011f48:	00040447 	.word	0x00040447
 8011f4c:	00040840 	.word	0x00040840
 8011f50:	00840840 	.word	0x00840840
 8011f54:	0084084f 	.word	0x0084084f
 8011f58:	01821040 	.word	0x01821040
 8011f5c:	00803fff 	.word	0x00803fff

08011f60 <ai_array_get_byte_size>:
 8011f60:	b1c1      	cbz	r1, 8011f94 <ai_array_get_byte_size+0x34>
 8011f62:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8011f66:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8011f6a:	4413      	add	r3, r2
 8011f6c:	fb01 f103 	mul.w	r1, r1, r3
 8011f70:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8011f74:	3107      	adds	r1, #7
 8011f76:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8011f7a:	f021 0107 	bic.w	r1, r1, #7
 8011f7e:	2804      	cmp	r0, #4
 8011f80:	fa21 f102 	lsr.w	r1, r1, r2
 8011f84:	d008      	beq.n	8011f98 <ai_array_get_byte_size+0x38>
 8011f86:	2808      	cmp	r0, #8
 8011f88:	d101      	bne.n	8011f8e <ai_array_get_byte_size+0x2e>
 8011f8a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8011f8e:	3107      	adds	r1, #7
 8011f90:	08c8      	lsrs	r0, r1, #3
 8011f92:	4770      	bx	lr
 8011f94:	4608      	mov	r0, r1
 8011f96:	4770      	bx	lr
 8011f98:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8011f9c:	3107      	adds	r1, #7
 8011f9e:	08c8      	lsrs	r0, r1, #3
 8011fa0:	4770      	bx	lr
 8011fa2:	bf00      	nop

08011fa4 <__errno>:
 8011fa4:	4b01      	ldr	r3, [pc, #4]	; (8011fac <__errno+0x8>)
 8011fa6:	6818      	ldr	r0, [r3, #0]
 8011fa8:	4770      	bx	lr
 8011faa:	bf00      	nop
 8011fac:	200007a4 	.word	0x200007a4

08011fb0 <__libc_init_array>:
 8011fb0:	b570      	push	{r4, r5, r6, lr}
 8011fb2:	4e0d      	ldr	r6, [pc, #52]	; (8011fe8 <__libc_init_array+0x38>)
 8011fb4:	4c0d      	ldr	r4, [pc, #52]	; (8011fec <__libc_init_array+0x3c>)
 8011fb6:	1ba4      	subs	r4, r4, r6
 8011fb8:	10a4      	asrs	r4, r4, #2
 8011fba:	2500      	movs	r5, #0
 8011fbc:	42a5      	cmp	r5, r4
 8011fbe:	d109      	bne.n	8011fd4 <__libc_init_array+0x24>
 8011fc0:	4e0b      	ldr	r6, [pc, #44]	; (8011ff0 <__libc_init_array+0x40>)
 8011fc2:	4c0c      	ldr	r4, [pc, #48]	; (8011ff4 <__libc_init_array+0x44>)
 8011fc4:	f002 fd6e 	bl	8014aa4 <_init>
 8011fc8:	1ba4      	subs	r4, r4, r6
 8011fca:	10a4      	asrs	r4, r4, #2
 8011fcc:	2500      	movs	r5, #0
 8011fce:	42a5      	cmp	r5, r4
 8011fd0:	d105      	bne.n	8011fde <__libc_init_array+0x2e>
 8011fd2:	bd70      	pop	{r4, r5, r6, pc}
 8011fd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011fd8:	4798      	blx	r3
 8011fda:	3501      	adds	r5, #1
 8011fdc:	e7ee      	b.n	8011fbc <__libc_init_array+0xc>
 8011fde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011fe2:	4798      	blx	r3
 8011fe4:	3501      	adds	r5, #1
 8011fe6:	e7f2      	b.n	8011fce <__libc_init_array+0x1e>
 8011fe8:	0801a1a8 	.word	0x0801a1a8
 8011fec:	0801a1a8 	.word	0x0801a1a8
 8011ff0:	0801a1a8 	.word	0x0801a1a8
 8011ff4:	0801a1ac 	.word	0x0801a1ac

08011ff8 <malloc>:
 8011ff8:	4b02      	ldr	r3, [pc, #8]	; (8012004 <malloc+0xc>)
 8011ffa:	4601      	mov	r1, r0
 8011ffc:	6818      	ldr	r0, [r3, #0]
 8011ffe:	f000 b86d 	b.w	80120dc <_malloc_r>
 8012002:	bf00      	nop
 8012004:	200007a4 	.word	0x200007a4

08012008 <free>:
 8012008:	4b02      	ldr	r3, [pc, #8]	; (8012014 <free+0xc>)
 801200a:	4601      	mov	r1, r0
 801200c:	6818      	ldr	r0, [r3, #0]
 801200e:	f000 b817 	b.w	8012040 <_free_r>
 8012012:	bf00      	nop
 8012014:	200007a4 	.word	0x200007a4

08012018 <memcpy>:
 8012018:	b510      	push	{r4, lr}
 801201a:	1e43      	subs	r3, r0, #1
 801201c:	440a      	add	r2, r1
 801201e:	4291      	cmp	r1, r2
 8012020:	d100      	bne.n	8012024 <memcpy+0xc>
 8012022:	bd10      	pop	{r4, pc}
 8012024:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012028:	f803 4f01 	strb.w	r4, [r3, #1]!
 801202c:	e7f7      	b.n	801201e <memcpy+0x6>

0801202e <memset>:
 801202e:	4402      	add	r2, r0
 8012030:	4603      	mov	r3, r0
 8012032:	4293      	cmp	r3, r2
 8012034:	d100      	bne.n	8012038 <memset+0xa>
 8012036:	4770      	bx	lr
 8012038:	f803 1b01 	strb.w	r1, [r3], #1
 801203c:	e7f9      	b.n	8012032 <memset+0x4>
	...

08012040 <_free_r>:
 8012040:	b538      	push	{r3, r4, r5, lr}
 8012042:	4605      	mov	r5, r0
 8012044:	2900      	cmp	r1, #0
 8012046:	d045      	beq.n	80120d4 <_free_r+0x94>
 8012048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801204c:	1f0c      	subs	r4, r1, #4
 801204e:	2b00      	cmp	r3, #0
 8012050:	bfb8      	it	lt
 8012052:	18e4      	addlt	r4, r4, r3
 8012054:	f001 fe94 	bl	8013d80 <__malloc_lock>
 8012058:	4a1f      	ldr	r2, [pc, #124]	; (80120d8 <_free_r+0x98>)
 801205a:	6813      	ldr	r3, [r2, #0]
 801205c:	4610      	mov	r0, r2
 801205e:	b933      	cbnz	r3, 801206e <_free_r+0x2e>
 8012060:	6063      	str	r3, [r4, #4]
 8012062:	6014      	str	r4, [r2, #0]
 8012064:	4628      	mov	r0, r5
 8012066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801206a:	f001 be8a 	b.w	8013d82 <__malloc_unlock>
 801206e:	42a3      	cmp	r3, r4
 8012070:	d90c      	bls.n	801208c <_free_r+0x4c>
 8012072:	6821      	ldr	r1, [r4, #0]
 8012074:	1862      	adds	r2, r4, r1
 8012076:	4293      	cmp	r3, r2
 8012078:	bf04      	itt	eq
 801207a:	681a      	ldreq	r2, [r3, #0]
 801207c:	685b      	ldreq	r3, [r3, #4]
 801207e:	6063      	str	r3, [r4, #4]
 8012080:	bf04      	itt	eq
 8012082:	1852      	addeq	r2, r2, r1
 8012084:	6022      	streq	r2, [r4, #0]
 8012086:	6004      	str	r4, [r0, #0]
 8012088:	e7ec      	b.n	8012064 <_free_r+0x24>
 801208a:	4613      	mov	r3, r2
 801208c:	685a      	ldr	r2, [r3, #4]
 801208e:	b10a      	cbz	r2, 8012094 <_free_r+0x54>
 8012090:	42a2      	cmp	r2, r4
 8012092:	d9fa      	bls.n	801208a <_free_r+0x4a>
 8012094:	6819      	ldr	r1, [r3, #0]
 8012096:	1858      	adds	r0, r3, r1
 8012098:	42a0      	cmp	r0, r4
 801209a:	d10b      	bne.n	80120b4 <_free_r+0x74>
 801209c:	6820      	ldr	r0, [r4, #0]
 801209e:	4401      	add	r1, r0
 80120a0:	1858      	adds	r0, r3, r1
 80120a2:	4282      	cmp	r2, r0
 80120a4:	6019      	str	r1, [r3, #0]
 80120a6:	d1dd      	bne.n	8012064 <_free_r+0x24>
 80120a8:	6810      	ldr	r0, [r2, #0]
 80120aa:	6852      	ldr	r2, [r2, #4]
 80120ac:	605a      	str	r2, [r3, #4]
 80120ae:	4401      	add	r1, r0
 80120b0:	6019      	str	r1, [r3, #0]
 80120b2:	e7d7      	b.n	8012064 <_free_r+0x24>
 80120b4:	d902      	bls.n	80120bc <_free_r+0x7c>
 80120b6:	230c      	movs	r3, #12
 80120b8:	602b      	str	r3, [r5, #0]
 80120ba:	e7d3      	b.n	8012064 <_free_r+0x24>
 80120bc:	6820      	ldr	r0, [r4, #0]
 80120be:	1821      	adds	r1, r4, r0
 80120c0:	428a      	cmp	r2, r1
 80120c2:	bf04      	itt	eq
 80120c4:	6811      	ldreq	r1, [r2, #0]
 80120c6:	6852      	ldreq	r2, [r2, #4]
 80120c8:	6062      	str	r2, [r4, #4]
 80120ca:	bf04      	itt	eq
 80120cc:	1809      	addeq	r1, r1, r0
 80120ce:	6021      	streq	r1, [r4, #0]
 80120d0:	605c      	str	r4, [r3, #4]
 80120d2:	e7c7      	b.n	8012064 <_free_r+0x24>
 80120d4:	bd38      	pop	{r3, r4, r5, pc}
 80120d6:	bf00      	nop
 80120d8:	20000bbc 	.word	0x20000bbc

080120dc <_malloc_r>:
 80120dc:	b570      	push	{r4, r5, r6, lr}
 80120de:	1ccd      	adds	r5, r1, #3
 80120e0:	f025 0503 	bic.w	r5, r5, #3
 80120e4:	3508      	adds	r5, #8
 80120e6:	2d0c      	cmp	r5, #12
 80120e8:	bf38      	it	cc
 80120ea:	250c      	movcc	r5, #12
 80120ec:	2d00      	cmp	r5, #0
 80120ee:	4606      	mov	r6, r0
 80120f0:	db01      	blt.n	80120f6 <_malloc_r+0x1a>
 80120f2:	42a9      	cmp	r1, r5
 80120f4:	d903      	bls.n	80120fe <_malloc_r+0x22>
 80120f6:	230c      	movs	r3, #12
 80120f8:	6033      	str	r3, [r6, #0]
 80120fa:	2000      	movs	r0, #0
 80120fc:	bd70      	pop	{r4, r5, r6, pc}
 80120fe:	f001 fe3f 	bl	8013d80 <__malloc_lock>
 8012102:	4a21      	ldr	r2, [pc, #132]	; (8012188 <_malloc_r+0xac>)
 8012104:	6814      	ldr	r4, [r2, #0]
 8012106:	4621      	mov	r1, r4
 8012108:	b991      	cbnz	r1, 8012130 <_malloc_r+0x54>
 801210a:	4c20      	ldr	r4, [pc, #128]	; (801218c <_malloc_r+0xb0>)
 801210c:	6823      	ldr	r3, [r4, #0]
 801210e:	b91b      	cbnz	r3, 8012118 <_malloc_r+0x3c>
 8012110:	4630      	mov	r0, r6
 8012112:	f000 fd15 	bl	8012b40 <_sbrk_r>
 8012116:	6020      	str	r0, [r4, #0]
 8012118:	4629      	mov	r1, r5
 801211a:	4630      	mov	r0, r6
 801211c:	f000 fd10 	bl	8012b40 <_sbrk_r>
 8012120:	1c43      	adds	r3, r0, #1
 8012122:	d124      	bne.n	801216e <_malloc_r+0x92>
 8012124:	230c      	movs	r3, #12
 8012126:	6033      	str	r3, [r6, #0]
 8012128:	4630      	mov	r0, r6
 801212a:	f001 fe2a 	bl	8013d82 <__malloc_unlock>
 801212e:	e7e4      	b.n	80120fa <_malloc_r+0x1e>
 8012130:	680b      	ldr	r3, [r1, #0]
 8012132:	1b5b      	subs	r3, r3, r5
 8012134:	d418      	bmi.n	8012168 <_malloc_r+0x8c>
 8012136:	2b0b      	cmp	r3, #11
 8012138:	d90f      	bls.n	801215a <_malloc_r+0x7e>
 801213a:	600b      	str	r3, [r1, #0]
 801213c:	50cd      	str	r5, [r1, r3]
 801213e:	18cc      	adds	r4, r1, r3
 8012140:	4630      	mov	r0, r6
 8012142:	f001 fe1e 	bl	8013d82 <__malloc_unlock>
 8012146:	f104 000b 	add.w	r0, r4, #11
 801214a:	1d23      	adds	r3, r4, #4
 801214c:	f020 0007 	bic.w	r0, r0, #7
 8012150:	1ac3      	subs	r3, r0, r3
 8012152:	d0d3      	beq.n	80120fc <_malloc_r+0x20>
 8012154:	425a      	negs	r2, r3
 8012156:	50e2      	str	r2, [r4, r3]
 8012158:	e7d0      	b.n	80120fc <_malloc_r+0x20>
 801215a:	428c      	cmp	r4, r1
 801215c:	684b      	ldr	r3, [r1, #4]
 801215e:	bf16      	itet	ne
 8012160:	6063      	strne	r3, [r4, #4]
 8012162:	6013      	streq	r3, [r2, #0]
 8012164:	460c      	movne	r4, r1
 8012166:	e7eb      	b.n	8012140 <_malloc_r+0x64>
 8012168:	460c      	mov	r4, r1
 801216a:	6849      	ldr	r1, [r1, #4]
 801216c:	e7cc      	b.n	8012108 <_malloc_r+0x2c>
 801216e:	1cc4      	adds	r4, r0, #3
 8012170:	f024 0403 	bic.w	r4, r4, #3
 8012174:	42a0      	cmp	r0, r4
 8012176:	d005      	beq.n	8012184 <_malloc_r+0xa8>
 8012178:	1a21      	subs	r1, r4, r0
 801217a:	4630      	mov	r0, r6
 801217c:	f000 fce0 	bl	8012b40 <_sbrk_r>
 8012180:	3001      	adds	r0, #1
 8012182:	d0cf      	beq.n	8012124 <_malloc_r+0x48>
 8012184:	6025      	str	r5, [r4, #0]
 8012186:	e7db      	b.n	8012140 <_malloc_r+0x64>
 8012188:	20000bbc 	.word	0x20000bbc
 801218c:	20000bc0 	.word	0x20000bc0

08012190 <__cvt>:
 8012190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012194:	ec55 4b10 	vmov	r4, r5, d0
 8012198:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801219a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801219e:	2d00      	cmp	r5, #0
 80121a0:	460e      	mov	r6, r1
 80121a2:	4691      	mov	r9, r2
 80121a4:	4619      	mov	r1, r3
 80121a6:	bfb8      	it	lt
 80121a8:	4622      	movlt	r2, r4
 80121aa:	462b      	mov	r3, r5
 80121ac:	f027 0720 	bic.w	r7, r7, #32
 80121b0:	bfbb      	ittet	lt
 80121b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80121b6:	461d      	movlt	r5, r3
 80121b8:	2300      	movge	r3, #0
 80121ba:	232d      	movlt	r3, #45	; 0x2d
 80121bc:	bfb8      	it	lt
 80121be:	4614      	movlt	r4, r2
 80121c0:	2f46      	cmp	r7, #70	; 0x46
 80121c2:	700b      	strb	r3, [r1, #0]
 80121c4:	d004      	beq.n	80121d0 <__cvt+0x40>
 80121c6:	2f45      	cmp	r7, #69	; 0x45
 80121c8:	d100      	bne.n	80121cc <__cvt+0x3c>
 80121ca:	3601      	adds	r6, #1
 80121cc:	2102      	movs	r1, #2
 80121ce:	e000      	b.n	80121d2 <__cvt+0x42>
 80121d0:	2103      	movs	r1, #3
 80121d2:	ab03      	add	r3, sp, #12
 80121d4:	9301      	str	r3, [sp, #4]
 80121d6:	ab02      	add	r3, sp, #8
 80121d8:	9300      	str	r3, [sp, #0]
 80121da:	4632      	mov	r2, r6
 80121dc:	4653      	mov	r3, sl
 80121de:	ec45 4b10 	vmov	d0, r4, r5
 80121e2:	f000 fe29 	bl	8012e38 <_dtoa_r>
 80121e6:	2f47      	cmp	r7, #71	; 0x47
 80121e8:	4680      	mov	r8, r0
 80121ea:	d102      	bne.n	80121f2 <__cvt+0x62>
 80121ec:	f019 0f01 	tst.w	r9, #1
 80121f0:	d026      	beq.n	8012240 <__cvt+0xb0>
 80121f2:	2f46      	cmp	r7, #70	; 0x46
 80121f4:	eb08 0906 	add.w	r9, r8, r6
 80121f8:	d111      	bne.n	801221e <__cvt+0x8e>
 80121fa:	f898 3000 	ldrb.w	r3, [r8]
 80121fe:	2b30      	cmp	r3, #48	; 0x30
 8012200:	d10a      	bne.n	8012218 <__cvt+0x88>
 8012202:	2200      	movs	r2, #0
 8012204:	2300      	movs	r3, #0
 8012206:	4620      	mov	r0, r4
 8012208:	4629      	mov	r1, r5
 801220a:	f7ee fc75 	bl	8000af8 <__aeabi_dcmpeq>
 801220e:	b918      	cbnz	r0, 8012218 <__cvt+0x88>
 8012210:	f1c6 0601 	rsb	r6, r6, #1
 8012214:	f8ca 6000 	str.w	r6, [sl]
 8012218:	f8da 3000 	ldr.w	r3, [sl]
 801221c:	4499      	add	r9, r3
 801221e:	2200      	movs	r2, #0
 8012220:	2300      	movs	r3, #0
 8012222:	4620      	mov	r0, r4
 8012224:	4629      	mov	r1, r5
 8012226:	f7ee fc67 	bl	8000af8 <__aeabi_dcmpeq>
 801222a:	b938      	cbnz	r0, 801223c <__cvt+0xac>
 801222c:	2230      	movs	r2, #48	; 0x30
 801222e:	9b03      	ldr	r3, [sp, #12]
 8012230:	454b      	cmp	r3, r9
 8012232:	d205      	bcs.n	8012240 <__cvt+0xb0>
 8012234:	1c59      	adds	r1, r3, #1
 8012236:	9103      	str	r1, [sp, #12]
 8012238:	701a      	strb	r2, [r3, #0]
 801223a:	e7f8      	b.n	801222e <__cvt+0x9e>
 801223c:	f8cd 900c 	str.w	r9, [sp, #12]
 8012240:	9b03      	ldr	r3, [sp, #12]
 8012242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012244:	eba3 0308 	sub.w	r3, r3, r8
 8012248:	4640      	mov	r0, r8
 801224a:	6013      	str	r3, [r2, #0]
 801224c:	b004      	add	sp, #16
 801224e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012252 <__exponent>:
 8012252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012254:	2900      	cmp	r1, #0
 8012256:	4604      	mov	r4, r0
 8012258:	bfba      	itte	lt
 801225a:	4249      	neglt	r1, r1
 801225c:	232d      	movlt	r3, #45	; 0x2d
 801225e:	232b      	movge	r3, #43	; 0x2b
 8012260:	2909      	cmp	r1, #9
 8012262:	f804 2b02 	strb.w	r2, [r4], #2
 8012266:	7043      	strb	r3, [r0, #1]
 8012268:	dd20      	ble.n	80122ac <__exponent+0x5a>
 801226a:	f10d 0307 	add.w	r3, sp, #7
 801226e:	461f      	mov	r7, r3
 8012270:	260a      	movs	r6, #10
 8012272:	fb91 f5f6 	sdiv	r5, r1, r6
 8012276:	fb06 1115 	mls	r1, r6, r5, r1
 801227a:	3130      	adds	r1, #48	; 0x30
 801227c:	2d09      	cmp	r5, #9
 801227e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012282:	f103 32ff 	add.w	r2, r3, #4294967295
 8012286:	4629      	mov	r1, r5
 8012288:	dc09      	bgt.n	801229e <__exponent+0x4c>
 801228a:	3130      	adds	r1, #48	; 0x30
 801228c:	3b02      	subs	r3, #2
 801228e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012292:	42bb      	cmp	r3, r7
 8012294:	4622      	mov	r2, r4
 8012296:	d304      	bcc.n	80122a2 <__exponent+0x50>
 8012298:	1a10      	subs	r0, r2, r0
 801229a:	b003      	add	sp, #12
 801229c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801229e:	4613      	mov	r3, r2
 80122a0:	e7e7      	b.n	8012272 <__exponent+0x20>
 80122a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122a6:	f804 2b01 	strb.w	r2, [r4], #1
 80122aa:	e7f2      	b.n	8012292 <__exponent+0x40>
 80122ac:	2330      	movs	r3, #48	; 0x30
 80122ae:	4419      	add	r1, r3
 80122b0:	7083      	strb	r3, [r0, #2]
 80122b2:	1d02      	adds	r2, r0, #4
 80122b4:	70c1      	strb	r1, [r0, #3]
 80122b6:	e7ef      	b.n	8012298 <__exponent+0x46>

080122b8 <_printf_float>:
 80122b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122bc:	b08d      	sub	sp, #52	; 0x34
 80122be:	460c      	mov	r4, r1
 80122c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80122c4:	4616      	mov	r6, r2
 80122c6:	461f      	mov	r7, r3
 80122c8:	4605      	mov	r5, r0
 80122ca:	f001 fce7 	bl	8013c9c <_localeconv_r>
 80122ce:	6803      	ldr	r3, [r0, #0]
 80122d0:	9304      	str	r3, [sp, #16]
 80122d2:	4618      	mov	r0, r3
 80122d4:	f7ed ff94 	bl	8000200 <strlen>
 80122d8:	2300      	movs	r3, #0
 80122da:	930a      	str	r3, [sp, #40]	; 0x28
 80122dc:	f8d8 3000 	ldr.w	r3, [r8]
 80122e0:	9005      	str	r0, [sp, #20]
 80122e2:	3307      	adds	r3, #7
 80122e4:	f023 0307 	bic.w	r3, r3, #7
 80122e8:	f103 0208 	add.w	r2, r3, #8
 80122ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80122f0:	f8d4 b000 	ldr.w	fp, [r4]
 80122f4:	f8c8 2000 	str.w	r2, [r8]
 80122f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012300:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012304:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012308:	9307      	str	r3, [sp, #28]
 801230a:	f8cd 8018 	str.w	r8, [sp, #24]
 801230e:	f04f 32ff 	mov.w	r2, #4294967295
 8012312:	4ba7      	ldr	r3, [pc, #668]	; (80125b0 <_printf_float+0x2f8>)
 8012314:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012318:	f7ee fc20 	bl	8000b5c <__aeabi_dcmpun>
 801231c:	bb70      	cbnz	r0, 801237c <_printf_float+0xc4>
 801231e:	f04f 32ff 	mov.w	r2, #4294967295
 8012322:	4ba3      	ldr	r3, [pc, #652]	; (80125b0 <_printf_float+0x2f8>)
 8012324:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012328:	f7ee fbfa 	bl	8000b20 <__aeabi_dcmple>
 801232c:	bb30      	cbnz	r0, 801237c <_printf_float+0xc4>
 801232e:	2200      	movs	r2, #0
 8012330:	2300      	movs	r3, #0
 8012332:	4640      	mov	r0, r8
 8012334:	4649      	mov	r1, r9
 8012336:	f7ee fbe9 	bl	8000b0c <__aeabi_dcmplt>
 801233a:	b110      	cbz	r0, 8012342 <_printf_float+0x8a>
 801233c:	232d      	movs	r3, #45	; 0x2d
 801233e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012342:	4a9c      	ldr	r2, [pc, #624]	; (80125b4 <_printf_float+0x2fc>)
 8012344:	4b9c      	ldr	r3, [pc, #624]	; (80125b8 <_printf_float+0x300>)
 8012346:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801234a:	bf8c      	ite	hi
 801234c:	4690      	movhi	r8, r2
 801234e:	4698      	movls	r8, r3
 8012350:	2303      	movs	r3, #3
 8012352:	f02b 0204 	bic.w	r2, fp, #4
 8012356:	6123      	str	r3, [r4, #16]
 8012358:	6022      	str	r2, [r4, #0]
 801235a:	f04f 0900 	mov.w	r9, #0
 801235e:	9700      	str	r7, [sp, #0]
 8012360:	4633      	mov	r3, r6
 8012362:	aa0b      	add	r2, sp, #44	; 0x2c
 8012364:	4621      	mov	r1, r4
 8012366:	4628      	mov	r0, r5
 8012368:	f000 f9e6 	bl	8012738 <_printf_common>
 801236c:	3001      	adds	r0, #1
 801236e:	f040 808d 	bne.w	801248c <_printf_float+0x1d4>
 8012372:	f04f 30ff 	mov.w	r0, #4294967295
 8012376:	b00d      	add	sp, #52	; 0x34
 8012378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801237c:	4642      	mov	r2, r8
 801237e:	464b      	mov	r3, r9
 8012380:	4640      	mov	r0, r8
 8012382:	4649      	mov	r1, r9
 8012384:	f7ee fbea 	bl	8000b5c <__aeabi_dcmpun>
 8012388:	b110      	cbz	r0, 8012390 <_printf_float+0xd8>
 801238a:	4a8c      	ldr	r2, [pc, #560]	; (80125bc <_printf_float+0x304>)
 801238c:	4b8c      	ldr	r3, [pc, #560]	; (80125c0 <_printf_float+0x308>)
 801238e:	e7da      	b.n	8012346 <_printf_float+0x8e>
 8012390:	6861      	ldr	r1, [r4, #4]
 8012392:	1c4b      	adds	r3, r1, #1
 8012394:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012398:	a80a      	add	r0, sp, #40	; 0x28
 801239a:	d13e      	bne.n	801241a <_printf_float+0x162>
 801239c:	2306      	movs	r3, #6
 801239e:	6063      	str	r3, [r4, #4]
 80123a0:	2300      	movs	r3, #0
 80123a2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80123a6:	ab09      	add	r3, sp, #36	; 0x24
 80123a8:	9300      	str	r3, [sp, #0]
 80123aa:	ec49 8b10 	vmov	d0, r8, r9
 80123ae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80123b2:	6022      	str	r2, [r4, #0]
 80123b4:	f8cd a004 	str.w	sl, [sp, #4]
 80123b8:	6861      	ldr	r1, [r4, #4]
 80123ba:	4628      	mov	r0, r5
 80123bc:	f7ff fee8 	bl	8012190 <__cvt>
 80123c0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80123c4:	2b47      	cmp	r3, #71	; 0x47
 80123c6:	4680      	mov	r8, r0
 80123c8:	d109      	bne.n	80123de <_printf_float+0x126>
 80123ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123cc:	1cd8      	adds	r0, r3, #3
 80123ce:	db02      	blt.n	80123d6 <_printf_float+0x11e>
 80123d0:	6862      	ldr	r2, [r4, #4]
 80123d2:	4293      	cmp	r3, r2
 80123d4:	dd47      	ble.n	8012466 <_printf_float+0x1ae>
 80123d6:	f1aa 0a02 	sub.w	sl, sl, #2
 80123da:	fa5f fa8a 	uxtb.w	sl, sl
 80123de:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80123e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123e4:	d824      	bhi.n	8012430 <_printf_float+0x178>
 80123e6:	3901      	subs	r1, #1
 80123e8:	4652      	mov	r2, sl
 80123ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80123ee:	9109      	str	r1, [sp, #36]	; 0x24
 80123f0:	f7ff ff2f 	bl	8012252 <__exponent>
 80123f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123f6:	1813      	adds	r3, r2, r0
 80123f8:	2a01      	cmp	r2, #1
 80123fa:	4681      	mov	r9, r0
 80123fc:	6123      	str	r3, [r4, #16]
 80123fe:	dc02      	bgt.n	8012406 <_printf_float+0x14e>
 8012400:	6822      	ldr	r2, [r4, #0]
 8012402:	07d1      	lsls	r1, r2, #31
 8012404:	d501      	bpl.n	801240a <_printf_float+0x152>
 8012406:	3301      	adds	r3, #1
 8012408:	6123      	str	r3, [r4, #16]
 801240a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801240e:	2b00      	cmp	r3, #0
 8012410:	d0a5      	beq.n	801235e <_printf_float+0xa6>
 8012412:	232d      	movs	r3, #45	; 0x2d
 8012414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012418:	e7a1      	b.n	801235e <_printf_float+0xa6>
 801241a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801241e:	f000 8177 	beq.w	8012710 <_printf_float+0x458>
 8012422:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012426:	d1bb      	bne.n	80123a0 <_printf_float+0xe8>
 8012428:	2900      	cmp	r1, #0
 801242a:	d1b9      	bne.n	80123a0 <_printf_float+0xe8>
 801242c:	2301      	movs	r3, #1
 801242e:	e7b6      	b.n	801239e <_printf_float+0xe6>
 8012430:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012434:	d119      	bne.n	801246a <_printf_float+0x1b2>
 8012436:	2900      	cmp	r1, #0
 8012438:	6863      	ldr	r3, [r4, #4]
 801243a:	dd0c      	ble.n	8012456 <_printf_float+0x19e>
 801243c:	6121      	str	r1, [r4, #16]
 801243e:	b913      	cbnz	r3, 8012446 <_printf_float+0x18e>
 8012440:	6822      	ldr	r2, [r4, #0]
 8012442:	07d2      	lsls	r2, r2, #31
 8012444:	d502      	bpl.n	801244c <_printf_float+0x194>
 8012446:	3301      	adds	r3, #1
 8012448:	440b      	add	r3, r1
 801244a:	6123      	str	r3, [r4, #16]
 801244c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801244e:	65a3      	str	r3, [r4, #88]	; 0x58
 8012450:	f04f 0900 	mov.w	r9, #0
 8012454:	e7d9      	b.n	801240a <_printf_float+0x152>
 8012456:	b913      	cbnz	r3, 801245e <_printf_float+0x1a6>
 8012458:	6822      	ldr	r2, [r4, #0]
 801245a:	07d0      	lsls	r0, r2, #31
 801245c:	d501      	bpl.n	8012462 <_printf_float+0x1aa>
 801245e:	3302      	adds	r3, #2
 8012460:	e7f3      	b.n	801244a <_printf_float+0x192>
 8012462:	2301      	movs	r3, #1
 8012464:	e7f1      	b.n	801244a <_printf_float+0x192>
 8012466:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801246a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801246e:	4293      	cmp	r3, r2
 8012470:	db05      	blt.n	801247e <_printf_float+0x1c6>
 8012472:	6822      	ldr	r2, [r4, #0]
 8012474:	6123      	str	r3, [r4, #16]
 8012476:	07d1      	lsls	r1, r2, #31
 8012478:	d5e8      	bpl.n	801244c <_printf_float+0x194>
 801247a:	3301      	adds	r3, #1
 801247c:	e7e5      	b.n	801244a <_printf_float+0x192>
 801247e:	2b00      	cmp	r3, #0
 8012480:	bfd4      	ite	le
 8012482:	f1c3 0302 	rsble	r3, r3, #2
 8012486:	2301      	movgt	r3, #1
 8012488:	4413      	add	r3, r2
 801248a:	e7de      	b.n	801244a <_printf_float+0x192>
 801248c:	6823      	ldr	r3, [r4, #0]
 801248e:	055a      	lsls	r2, r3, #21
 8012490:	d407      	bmi.n	80124a2 <_printf_float+0x1ea>
 8012492:	6923      	ldr	r3, [r4, #16]
 8012494:	4642      	mov	r2, r8
 8012496:	4631      	mov	r1, r6
 8012498:	4628      	mov	r0, r5
 801249a:	47b8      	blx	r7
 801249c:	3001      	adds	r0, #1
 801249e:	d12b      	bne.n	80124f8 <_printf_float+0x240>
 80124a0:	e767      	b.n	8012372 <_printf_float+0xba>
 80124a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80124a6:	f240 80dc 	bls.w	8012662 <_printf_float+0x3aa>
 80124aa:	2200      	movs	r2, #0
 80124ac:	2300      	movs	r3, #0
 80124ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80124b2:	f7ee fb21 	bl	8000af8 <__aeabi_dcmpeq>
 80124b6:	2800      	cmp	r0, #0
 80124b8:	d033      	beq.n	8012522 <_printf_float+0x26a>
 80124ba:	2301      	movs	r3, #1
 80124bc:	4a41      	ldr	r2, [pc, #260]	; (80125c4 <_printf_float+0x30c>)
 80124be:	4631      	mov	r1, r6
 80124c0:	4628      	mov	r0, r5
 80124c2:	47b8      	blx	r7
 80124c4:	3001      	adds	r0, #1
 80124c6:	f43f af54 	beq.w	8012372 <_printf_float+0xba>
 80124ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80124ce:	429a      	cmp	r2, r3
 80124d0:	db02      	blt.n	80124d8 <_printf_float+0x220>
 80124d2:	6823      	ldr	r3, [r4, #0]
 80124d4:	07d8      	lsls	r0, r3, #31
 80124d6:	d50f      	bpl.n	80124f8 <_printf_float+0x240>
 80124d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80124dc:	4631      	mov	r1, r6
 80124de:	4628      	mov	r0, r5
 80124e0:	47b8      	blx	r7
 80124e2:	3001      	adds	r0, #1
 80124e4:	f43f af45 	beq.w	8012372 <_printf_float+0xba>
 80124e8:	f04f 0800 	mov.w	r8, #0
 80124ec:	f104 091a 	add.w	r9, r4, #26
 80124f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124f2:	3b01      	subs	r3, #1
 80124f4:	4543      	cmp	r3, r8
 80124f6:	dc09      	bgt.n	801250c <_printf_float+0x254>
 80124f8:	6823      	ldr	r3, [r4, #0]
 80124fa:	079b      	lsls	r3, r3, #30
 80124fc:	f100 8103 	bmi.w	8012706 <_printf_float+0x44e>
 8012500:	68e0      	ldr	r0, [r4, #12]
 8012502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012504:	4298      	cmp	r0, r3
 8012506:	bfb8      	it	lt
 8012508:	4618      	movlt	r0, r3
 801250a:	e734      	b.n	8012376 <_printf_float+0xbe>
 801250c:	2301      	movs	r3, #1
 801250e:	464a      	mov	r2, r9
 8012510:	4631      	mov	r1, r6
 8012512:	4628      	mov	r0, r5
 8012514:	47b8      	blx	r7
 8012516:	3001      	adds	r0, #1
 8012518:	f43f af2b 	beq.w	8012372 <_printf_float+0xba>
 801251c:	f108 0801 	add.w	r8, r8, #1
 8012520:	e7e6      	b.n	80124f0 <_printf_float+0x238>
 8012522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012524:	2b00      	cmp	r3, #0
 8012526:	dc2b      	bgt.n	8012580 <_printf_float+0x2c8>
 8012528:	2301      	movs	r3, #1
 801252a:	4a26      	ldr	r2, [pc, #152]	; (80125c4 <_printf_float+0x30c>)
 801252c:	4631      	mov	r1, r6
 801252e:	4628      	mov	r0, r5
 8012530:	47b8      	blx	r7
 8012532:	3001      	adds	r0, #1
 8012534:	f43f af1d 	beq.w	8012372 <_printf_float+0xba>
 8012538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801253a:	b923      	cbnz	r3, 8012546 <_printf_float+0x28e>
 801253c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801253e:	b913      	cbnz	r3, 8012546 <_printf_float+0x28e>
 8012540:	6823      	ldr	r3, [r4, #0]
 8012542:	07d9      	lsls	r1, r3, #31
 8012544:	d5d8      	bpl.n	80124f8 <_printf_float+0x240>
 8012546:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801254a:	4631      	mov	r1, r6
 801254c:	4628      	mov	r0, r5
 801254e:	47b8      	blx	r7
 8012550:	3001      	adds	r0, #1
 8012552:	f43f af0e 	beq.w	8012372 <_printf_float+0xba>
 8012556:	f04f 0900 	mov.w	r9, #0
 801255a:	f104 0a1a 	add.w	sl, r4, #26
 801255e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012560:	425b      	negs	r3, r3
 8012562:	454b      	cmp	r3, r9
 8012564:	dc01      	bgt.n	801256a <_printf_float+0x2b2>
 8012566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012568:	e794      	b.n	8012494 <_printf_float+0x1dc>
 801256a:	2301      	movs	r3, #1
 801256c:	4652      	mov	r2, sl
 801256e:	4631      	mov	r1, r6
 8012570:	4628      	mov	r0, r5
 8012572:	47b8      	blx	r7
 8012574:	3001      	adds	r0, #1
 8012576:	f43f aefc 	beq.w	8012372 <_printf_float+0xba>
 801257a:	f109 0901 	add.w	r9, r9, #1
 801257e:	e7ee      	b.n	801255e <_printf_float+0x2a6>
 8012580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012582:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012584:	429a      	cmp	r2, r3
 8012586:	bfa8      	it	ge
 8012588:	461a      	movge	r2, r3
 801258a:	2a00      	cmp	r2, #0
 801258c:	4691      	mov	r9, r2
 801258e:	dd07      	ble.n	80125a0 <_printf_float+0x2e8>
 8012590:	4613      	mov	r3, r2
 8012592:	4631      	mov	r1, r6
 8012594:	4642      	mov	r2, r8
 8012596:	4628      	mov	r0, r5
 8012598:	47b8      	blx	r7
 801259a:	3001      	adds	r0, #1
 801259c:	f43f aee9 	beq.w	8012372 <_printf_float+0xba>
 80125a0:	f104 031a 	add.w	r3, r4, #26
 80125a4:	f04f 0b00 	mov.w	fp, #0
 80125a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80125ac:	9306      	str	r3, [sp, #24]
 80125ae:	e015      	b.n	80125dc <_printf_float+0x324>
 80125b0:	7fefffff 	.word	0x7fefffff
 80125b4:	08019ee8 	.word	0x08019ee8
 80125b8:	08019ee4 	.word	0x08019ee4
 80125bc:	08019ef0 	.word	0x08019ef0
 80125c0:	08019eec 	.word	0x08019eec
 80125c4:	08019ef4 	.word	0x08019ef4
 80125c8:	2301      	movs	r3, #1
 80125ca:	9a06      	ldr	r2, [sp, #24]
 80125cc:	4631      	mov	r1, r6
 80125ce:	4628      	mov	r0, r5
 80125d0:	47b8      	blx	r7
 80125d2:	3001      	adds	r0, #1
 80125d4:	f43f aecd 	beq.w	8012372 <_printf_float+0xba>
 80125d8:	f10b 0b01 	add.w	fp, fp, #1
 80125dc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80125e0:	ebaa 0309 	sub.w	r3, sl, r9
 80125e4:	455b      	cmp	r3, fp
 80125e6:	dcef      	bgt.n	80125c8 <_printf_float+0x310>
 80125e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80125ec:	429a      	cmp	r2, r3
 80125ee:	44d0      	add	r8, sl
 80125f0:	db15      	blt.n	801261e <_printf_float+0x366>
 80125f2:	6823      	ldr	r3, [r4, #0]
 80125f4:	07da      	lsls	r2, r3, #31
 80125f6:	d412      	bmi.n	801261e <_printf_float+0x366>
 80125f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80125fc:	eba3 020a 	sub.w	r2, r3, sl
 8012600:	eba3 0a01 	sub.w	sl, r3, r1
 8012604:	4592      	cmp	sl, r2
 8012606:	bfa8      	it	ge
 8012608:	4692      	movge	sl, r2
 801260a:	f1ba 0f00 	cmp.w	sl, #0
 801260e:	dc0e      	bgt.n	801262e <_printf_float+0x376>
 8012610:	f04f 0800 	mov.w	r8, #0
 8012614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012618:	f104 091a 	add.w	r9, r4, #26
 801261c:	e019      	b.n	8012652 <_printf_float+0x39a>
 801261e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012622:	4631      	mov	r1, r6
 8012624:	4628      	mov	r0, r5
 8012626:	47b8      	blx	r7
 8012628:	3001      	adds	r0, #1
 801262a:	d1e5      	bne.n	80125f8 <_printf_float+0x340>
 801262c:	e6a1      	b.n	8012372 <_printf_float+0xba>
 801262e:	4653      	mov	r3, sl
 8012630:	4642      	mov	r2, r8
 8012632:	4631      	mov	r1, r6
 8012634:	4628      	mov	r0, r5
 8012636:	47b8      	blx	r7
 8012638:	3001      	adds	r0, #1
 801263a:	d1e9      	bne.n	8012610 <_printf_float+0x358>
 801263c:	e699      	b.n	8012372 <_printf_float+0xba>
 801263e:	2301      	movs	r3, #1
 8012640:	464a      	mov	r2, r9
 8012642:	4631      	mov	r1, r6
 8012644:	4628      	mov	r0, r5
 8012646:	47b8      	blx	r7
 8012648:	3001      	adds	r0, #1
 801264a:	f43f ae92 	beq.w	8012372 <_printf_float+0xba>
 801264e:	f108 0801 	add.w	r8, r8, #1
 8012652:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012656:	1a9b      	subs	r3, r3, r2
 8012658:	eba3 030a 	sub.w	r3, r3, sl
 801265c:	4543      	cmp	r3, r8
 801265e:	dcee      	bgt.n	801263e <_printf_float+0x386>
 8012660:	e74a      	b.n	80124f8 <_printf_float+0x240>
 8012662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012664:	2a01      	cmp	r2, #1
 8012666:	dc01      	bgt.n	801266c <_printf_float+0x3b4>
 8012668:	07db      	lsls	r3, r3, #31
 801266a:	d53a      	bpl.n	80126e2 <_printf_float+0x42a>
 801266c:	2301      	movs	r3, #1
 801266e:	4642      	mov	r2, r8
 8012670:	4631      	mov	r1, r6
 8012672:	4628      	mov	r0, r5
 8012674:	47b8      	blx	r7
 8012676:	3001      	adds	r0, #1
 8012678:	f43f ae7b 	beq.w	8012372 <_printf_float+0xba>
 801267c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012680:	4631      	mov	r1, r6
 8012682:	4628      	mov	r0, r5
 8012684:	47b8      	blx	r7
 8012686:	3001      	adds	r0, #1
 8012688:	f108 0801 	add.w	r8, r8, #1
 801268c:	f43f ae71 	beq.w	8012372 <_printf_float+0xba>
 8012690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012692:	2200      	movs	r2, #0
 8012694:	f103 3aff 	add.w	sl, r3, #4294967295
 8012698:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801269c:	2300      	movs	r3, #0
 801269e:	f7ee fa2b 	bl	8000af8 <__aeabi_dcmpeq>
 80126a2:	b9c8      	cbnz	r0, 80126d8 <_printf_float+0x420>
 80126a4:	4653      	mov	r3, sl
 80126a6:	4642      	mov	r2, r8
 80126a8:	4631      	mov	r1, r6
 80126aa:	4628      	mov	r0, r5
 80126ac:	47b8      	blx	r7
 80126ae:	3001      	adds	r0, #1
 80126b0:	d10e      	bne.n	80126d0 <_printf_float+0x418>
 80126b2:	e65e      	b.n	8012372 <_printf_float+0xba>
 80126b4:	2301      	movs	r3, #1
 80126b6:	4652      	mov	r2, sl
 80126b8:	4631      	mov	r1, r6
 80126ba:	4628      	mov	r0, r5
 80126bc:	47b8      	blx	r7
 80126be:	3001      	adds	r0, #1
 80126c0:	f43f ae57 	beq.w	8012372 <_printf_float+0xba>
 80126c4:	f108 0801 	add.w	r8, r8, #1
 80126c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126ca:	3b01      	subs	r3, #1
 80126cc:	4543      	cmp	r3, r8
 80126ce:	dcf1      	bgt.n	80126b4 <_printf_float+0x3fc>
 80126d0:	464b      	mov	r3, r9
 80126d2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80126d6:	e6de      	b.n	8012496 <_printf_float+0x1de>
 80126d8:	f04f 0800 	mov.w	r8, #0
 80126dc:	f104 0a1a 	add.w	sl, r4, #26
 80126e0:	e7f2      	b.n	80126c8 <_printf_float+0x410>
 80126e2:	2301      	movs	r3, #1
 80126e4:	e7df      	b.n	80126a6 <_printf_float+0x3ee>
 80126e6:	2301      	movs	r3, #1
 80126e8:	464a      	mov	r2, r9
 80126ea:	4631      	mov	r1, r6
 80126ec:	4628      	mov	r0, r5
 80126ee:	47b8      	blx	r7
 80126f0:	3001      	adds	r0, #1
 80126f2:	f43f ae3e 	beq.w	8012372 <_printf_float+0xba>
 80126f6:	f108 0801 	add.w	r8, r8, #1
 80126fa:	68e3      	ldr	r3, [r4, #12]
 80126fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80126fe:	1a9b      	subs	r3, r3, r2
 8012700:	4543      	cmp	r3, r8
 8012702:	dcf0      	bgt.n	80126e6 <_printf_float+0x42e>
 8012704:	e6fc      	b.n	8012500 <_printf_float+0x248>
 8012706:	f04f 0800 	mov.w	r8, #0
 801270a:	f104 0919 	add.w	r9, r4, #25
 801270e:	e7f4      	b.n	80126fa <_printf_float+0x442>
 8012710:	2900      	cmp	r1, #0
 8012712:	f43f ae8b 	beq.w	801242c <_printf_float+0x174>
 8012716:	2300      	movs	r3, #0
 8012718:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801271c:	ab09      	add	r3, sp, #36	; 0x24
 801271e:	9300      	str	r3, [sp, #0]
 8012720:	ec49 8b10 	vmov	d0, r8, r9
 8012724:	6022      	str	r2, [r4, #0]
 8012726:	f8cd a004 	str.w	sl, [sp, #4]
 801272a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801272e:	4628      	mov	r0, r5
 8012730:	f7ff fd2e 	bl	8012190 <__cvt>
 8012734:	4680      	mov	r8, r0
 8012736:	e648      	b.n	80123ca <_printf_float+0x112>

08012738 <_printf_common>:
 8012738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801273c:	4691      	mov	r9, r2
 801273e:	461f      	mov	r7, r3
 8012740:	688a      	ldr	r2, [r1, #8]
 8012742:	690b      	ldr	r3, [r1, #16]
 8012744:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012748:	4293      	cmp	r3, r2
 801274a:	bfb8      	it	lt
 801274c:	4613      	movlt	r3, r2
 801274e:	f8c9 3000 	str.w	r3, [r9]
 8012752:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012756:	4606      	mov	r6, r0
 8012758:	460c      	mov	r4, r1
 801275a:	b112      	cbz	r2, 8012762 <_printf_common+0x2a>
 801275c:	3301      	adds	r3, #1
 801275e:	f8c9 3000 	str.w	r3, [r9]
 8012762:	6823      	ldr	r3, [r4, #0]
 8012764:	0699      	lsls	r1, r3, #26
 8012766:	bf42      	ittt	mi
 8012768:	f8d9 3000 	ldrmi.w	r3, [r9]
 801276c:	3302      	addmi	r3, #2
 801276e:	f8c9 3000 	strmi.w	r3, [r9]
 8012772:	6825      	ldr	r5, [r4, #0]
 8012774:	f015 0506 	ands.w	r5, r5, #6
 8012778:	d107      	bne.n	801278a <_printf_common+0x52>
 801277a:	f104 0a19 	add.w	sl, r4, #25
 801277e:	68e3      	ldr	r3, [r4, #12]
 8012780:	f8d9 2000 	ldr.w	r2, [r9]
 8012784:	1a9b      	subs	r3, r3, r2
 8012786:	42ab      	cmp	r3, r5
 8012788:	dc28      	bgt.n	80127dc <_printf_common+0xa4>
 801278a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801278e:	6822      	ldr	r2, [r4, #0]
 8012790:	3300      	adds	r3, #0
 8012792:	bf18      	it	ne
 8012794:	2301      	movne	r3, #1
 8012796:	0692      	lsls	r2, r2, #26
 8012798:	d42d      	bmi.n	80127f6 <_printf_common+0xbe>
 801279a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801279e:	4639      	mov	r1, r7
 80127a0:	4630      	mov	r0, r6
 80127a2:	47c0      	blx	r8
 80127a4:	3001      	adds	r0, #1
 80127a6:	d020      	beq.n	80127ea <_printf_common+0xb2>
 80127a8:	6823      	ldr	r3, [r4, #0]
 80127aa:	68e5      	ldr	r5, [r4, #12]
 80127ac:	f8d9 2000 	ldr.w	r2, [r9]
 80127b0:	f003 0306 	and.w	r3, r3, #6
 80127b4:	2b04      	cmp	r3, #4
 80127b6:	bf08      	it	eq
 80127b8:	1aad      	subeq	r5, r5, r2
 80127ba:	68a3      	ldr	r3, [r4, #8]
 80127bc:	6922      	ldr	r2, [r4, #16]
 80127be:	bf0c      	ite	eq
 80127c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80127c4:	2500      	movne	r5, #0
 80127c6:	4293      	cmp	r3, r2
 80127c8:	bfc4      	itt	gt
 80127ca:	1a9b      	subgt	r3, r3, r2
 80127cc:	18ed      	addgt	r5, r5, r3
 80127ce:	f04f 0900 	mov.w	r9, #0
 80127d2:	341a      	adds	r4, #26
 80127d4:	454d      	cmp	r5, r9
 80127d6:	d11a      	bne.n	801280e <_printf_common+0xd6>
 80127d8:	2000      	movs	r0, #0
 80127da:	e008      	b.n	80127ee <_printf_common+0xb6>
 80127dc:	2301      	movs	r3, #1
 80127de:	4652      	mov	r2, sl
 80127e0:	4639      	mov	r1, r7
 80127e2:	4630      	mov	r0, r6
 80127e4:	47c0      	blx	r8
 80127e6:	3001      	adds	r0, #1
 80127e8:	d103      	bne.n	80127f2 <_printf_common+0xba>
 80127ea:	f04f 30ff 	mov.w	r0, #4294967295
 80127ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127f2:	3501      	adds	r5, #1
 80127f4:	e7c3      	b.n	801277e <_printf_common+0x46>
 80127f6:	18e1      	adds	r1, r4, r3
 80127f8:	1c5a      	adds	r2, r3, #1
 80127fa:	2030      	movs	r0, #48	; 0x30
 80127fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012800:	4422      	add	r2, r4
 8012802:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012806:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801280a:	3302      	adds	r3, #2
 801280c:	e7c5      	b.n	801279a <_printf_common+0x62>
 801280e:	2301      	movs	r3, #1
 8012810:	4622      	mov	r2, r4
 8012812:	4639      	mov	r1, r7
 8012814:	4630      	mov	r0, r6
 8012816:	47c0      	blx	r8
 8012818:	3001      	adds	r0, #1
 801281a:	d0e6      	beq.n	80127ea <_printf_common+0xb2>
 801281c:	f109 0901 	add.w	r9, r9, #1
 8012820:	e7d8      	b.n	80127d4 <_printf_common+0x9c>
	...

08012824 <_printf_i>:
 8012824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012828:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801282c:	460c      	mov	r4, r1
 801282e:	7e09      	ldrb	r1, [r1, #24]
 8012830:	b085      	sub	sp, #20
 8012832:	296e      	cmp	r1, #110	; 0x6e
 8012834:	4617      	mov	r7, r2
 8012836:	4606      	mov	r6, r0
 8012838:	4698      	mov	r8, r3
 801283a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801283c:	f000 80b3 	beq.w	80129a6 <_printf_i+0x182>
 8012840:	d822      	bhi.n	8012888 <_printf_i+0x64>
 8012842:	2963      	cmp	r1, #99	; 0x63
 8012844:	d036      	beq.n	80128b4 <_printf_i+0x90>
 8012846:	d80a      	bhi.n	801285e <_printf_i+0x3a>
 8012848:	2900      	cmp	r1, #0
 801284a:	f000 80b9 	beq.w	80129c0 <_printf_i+0x19c>
 801284e:	2958      	cmp	r1, #88	; 0x58
 8012850:	f000 8083 	beq.w	801295a <_printf_i+0x136>
 8012854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012858:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801285c:	e032      	b.n	80128c4 <_printf_i+0xa0>
 801285e:	2964      	cmp	r1, #100	; 0x64
 8012860:	d001      	beq.n	8012866 <_printf_i+0x42>
 8012862:	2969      	cmp	r1, #105	; 0x69
 8012864:	d1f6      	bne.n	8012854 <_printf_i+0x30>
 8012866:	6820      	ldr	r0, [r4, #0]
 8012868:	6813      	ldr	r3, [r2, #0]
 801286a:	0605      	lsls	r5, r0, #24
 801286c:	f103 0104 	add.w	r1, r3, #4
 8012870:	d52a      	bpl.n	80128c8 <_printf_i+0xa4>
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	6011      	str	r1, [r2, #0]
 8012876:	2b00      	cmp	r3, #0
 8012878:	da03      	bge.n	8012882 <_printf_i+0x5e>
 801287a:	222d      	movs	r2, #45	; 0x2d
 801287c:	425b      	negs	r3, r3
 801287e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012882:	486f      	ldr	r0, [pc, #444]	; (8012a40 <_printf_i+0x21c>)
 8012884:	220a      	movs	r2, #10
 8012886:	e039      	b.n	80128fc <_printf_i+0xd8>
 8012888:	2973      	cmp	r1, #115	; 0x73
 801288a:	f000 809d 	beq.w	80129c8 <_printf_i+0x1a4>
 801288e:	d808      	bhi.n	80128a2 <_printf_i+0x7e>
 8012890:	296f      	cmp	r1, #111	; 0x6f
 8012892:	d020      	beq.n	80128d6 <_printf_i+0xb2>
 8012894:	2970      	cmp	r1, #112	; 0x70
 8012896:	d1dd      	bne.n	8012854 <_printf_i+0x30>
 8012898:	6823      	ldr	r3, [r4, #0]
 801289a:	f043 0320 	orr.w	r3, r3, #32
 801289e:	6023      	str	r3, [r4, #0]
 80128a0:	e003      	b.n	80128aa <_printf_i+0x86>
 80128a2:	2975      	cmp	r1, #117	; 0x75
 80128a4:	d017      	beq.n	80128d6 <_printf_i+0xb2>
 80128a6:	2978      	cmp	r1, #120	; 0x78
 80128a8:	d1d4      	bne.n	8012854 <_printf_i+0x30>
 80128aa:	2378      	movs	r3, #120	; 0x78
 80128ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80128b0:	4864      	ldr	r0, [pc, #400]	; (8012a44 <_printf_i+0x220>)
 80128b2:	e055      	b.n	8012960 <_printf_i+0x13c>
 80128b4:	6813      	ldr	r3, [r2, #0]
 80128b6:	1d19      	adds	r1, r3, #4
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	6011      	str	r1, [r2, #0]
 80128bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80128c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80128c4:	2301      	movs	r3, #1
 80128c6:	e08c      	b.n	80129e2 <_printf_i+0x1be>
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	6011      	str	r1, [r2, #0]
 80128cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80128d0:	bf18      	it	ne
 80128d2:	b21b      	sxthne	r3, r3
 80128d4:	e7cf      	b.n	8012876 <_printf_i+0x52>
 80128d6:	6813      	ldr	r3, [r2, #0]
 80128d8:	6825      	ldr	r5, [r4, #0]
 80128da:	1d18      	adds	r0, r3, #4
 80128dc:	6010      	str	r0, [r2, #0]
 80128de:	0628      	lsls	r0, r5, #24
 80128e0:	d501      	bpl.n	80128e6 <_printf_i+0xc2>
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	e002      	b.n	80128ec <_printf_i+0xc8>
 80128e6:	0668      	lsls	r0, r5, #25
 80128e8:	d5fb      	bpl.n	80128e2 <_printf_i+0xbe>
 80128ea:	881b      	ldrh	r3, [r3, #0]
 80128ec:	4854      	ldr	r0, [pc, #336]	; (8012a40 <_printf_i+0x21c>)
 80128ee:	296f      	cmp	r1, #111	; 0x6f
 80128f0:	bf14      	ite	ne
 80128f2:	220a      	movne	r2, #10
 80128f4:	2208      	moveq	r2, #8
 80128f6:	2100      	movs	r1, #0
 80128f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80128fc:	6865      	ldr	r5, [r4, #4]
 80128fe:	60a5      	str	r5, [r4, #8]
 8012900:	2d00      	cmp	r5, #0
 8012902:	f2c0 8095 	blt.w	8012a30 <_printf_i+0x20c>
 8012906:	6821      	ldr	r1, [r4, #0]
 8012908:	f021 0104 	bic.w	r1, r1, #4
 801290c:	6021      	str	r1, [r4, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d13d      	bne.n	801298e <_printf_i+0x16a>
 8012912:	2d00      	cmp	r5, #0
 8012914:	f040 808e 	bne.w	8012a34 <_printf_i+0x210>
 8012918:	4665      	mov	r5, ip
 801291a:	2a08      	cmp	r2, #8
 801291c:	d10b      	bne.n	8012936 <_printf_i+0x112>
 801291e:	6823      	ldr	r3, [r4, #0]
 8012920:	07db      	lsls	r3, r3, #31
 8012922:	d508      	bpl.n	8012936 <_printf_i+0x112>
 8012924:	6923      	ldr	r3, [r4, #16]
 8012926:	6862      	ldr	r2, [r4, #4]
 8012928:	429a      	cmp	r2, r3
 801292a:	bfde      	ittt	le
 801292c:	2330      	movle	r3, #48	; 0x30
 801292e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012932:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012936:	ebac 0305 	sub.w	r3, ip, r5
 801293a:	6123      	str	r3, [r4, #16]
 801293c:	f8cd 8000 	str.w	r8, [sp]
 8012940:	463b      	mov	r3, r7
 8012942:	aa03      	add	r2, sp, #12
 8012944:	4621      	mov	r1, r4
 8012946:	4630      	mov	r0, r6
 8012948:	f7ff fef6 	bl	8012738 <_printf_common>
 801294c:	3001      	adds	r0, #1
 801294e:	d14d      	bne.n	80129ec <_printf_i+0x1c8>
 8012950:	f04f 30ff 	mov.w	r0, #4294967295
 8012954:	b005      	add	sp, #20
 8012956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801295a:	4839      	ldr	r0, [pc, #228]	; (8012a40 <_printf_i+0x21c>)
 801295c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012960:	6813      	ldr	r3, [r2, #0]
 8012962:	6821      	ldr	r1, [r4, #0]
 8012964:	1d1d      	adds	r5, r3, #4
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	6015      	str	r5, [r2, #0]
 801296a:	060a      	lsls	r2, r1, #24
 801296c:	d50b      	bpl.n	8012986 <_printf_i+0x162>
 801296e:	07ca      	lsls	r2, r1, #31
 8012970:	bf44      	itt	mi
 8012972:	f041 0120 	orrmi.w	r1, r1, #32
 8012976:	6021      	strmi	r1, [r4, #0]
 8012978:	b91b      	cbnz	r3, 8012982 <_printf_i+0x15e>
 801297a:	6822      	ldr	r2, [r4, #0]
 801297c:	f022 0220 	bic.w	r2, r2, #32
 8012980:	6022      	str	r2, [r4, #0]
 8012982:	2210      	movs	r2, #16
 8012984:	e7b7      	b.n	80128f6 <_printf_i+0xd2>
 8012986:	064d      	lsls	r5, r1, #25
 8012988:	bf48      	it	mi
 801298a:	b29b      	uxthmi	r3, r3
 801298c:	e7ef      	b.n	801296e <_printf_i+0x14a>
 801298e:	4665      	mov	r5, ip
 8012990:	fbb3 f1f2 	udiv	r1, r3, r2
 8012994:	fb02 3311 	mls	r3, r2, r1, r3
 8012998:	5cc3      	ldrb	r3, [r0, r3]
 801299a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801299e:	460b      	mov	r3, r1
 80129a0:	2900      	cmp	r1, #0
 80129a2:	d1f5      	bne.n	8012990 <_printf_i+0x16c>
 80129a4:	e7b9      	b.n	801291a <_printf_i+0xf6>
 80129a6:	6813      	ldr	r3, [r2, #0]
 80129a8:	6825      	ldr	r5, [r4, #0]
 80129aa:	6961      	ldr	r1, [r4, #20]
 80129ac:	1d18      	adds	r0, r3, #4
 80129ae:	6010      	str	r0, [r2, #0]
 80129b0:	0628      	lsls	r0, r5, #24
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	d501      	bpl.n	80129ba <_printf_i+0x196>
 80129b6:	6019      	str	r1, [r3, #0]
 80129b8:	e002      	b.n	80129c0 <_printf_i+0x19c>
 80129ba:	066a      	lsls	r2, r5, #25
 80129bc:	d5fb      	bpl.n	80129b6 <_printf_i+0x192>
 80129be:	8019      	strh	r1, [r3, #0]
 80129c0:	2300      	movs	r3, #0
 80129c2:	6123      	str	r3, [r4, #16]
 80129c4:	4665      	mov	r5, ip
 80129c6:	e7b9      	b.n	801293c <_printf_i+0x118>
 80129c8:	6813      	ldr	r3, [r2, #0]
 80129ca:	1d19      	adds	r1, r3, #4
 80129cc:	6011      	str	r1, [r2, #0]
 80129ce:	681d      	ldr	r5, [r3, #0]
 80129d0:	6862      	ldr	r2, [r4, #4]
 80129d2:	2100      	movs	r1, #0
 80129d4:	4628      	mov	r0, r5
 80129d6:	f7ed fc1b 	bl	8000210 <memchr>
 80129da:	b108      	cbz	r0, 80129e0 <_printf_i+0x1bc>
 80129dc:	1b40      	subs	r0, r0, r5
 80129de:	6060      	str	r0, [r4, #4]
 80129e0:	6863      	ldr	r3, [r4, #4]
 80129e2:	6123      	str	r3, [r4, #16]
 80129e4:	2300      	movs	r3, #0
 80129e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129ea:	e7a7      	b.n	801293c <_printf_i+0x118>
 80129ec:	6923      	ldr	r3, [r4, #16]
 80129ee:	462a      	mov	r2, r5
 80129f0:	4639      	mov	r1, r7
 80129f2:	4630      	mov	r0, r6
 80129f4:	47c0      	blx	r8
 80129f6:	3001      	adds	r0, #1
 80129f8:	d0aa      	beq.n	8012950 <_printf_i+0x12c>
 80129fa:	6823      	ldr	r3, [r4, #0]
 80129fc:	079b      	lsls	r3, r3, #30
 80129fe:	d413      	bmi.n	8012a28 <_printf_i+0x204>
 8012a00:	68e0      	ldr	r0, [r4, #12]
 8012a02:	9b03      	ldr	r3, [sp, #12]
 8012a04:	4298      	cmp	r0, r3
 8012a06:	bfb8      	it	lt
 8012a08:	4618      	movlt	r0, r3
 8012a0a:	e7a3      	b.n	8012954 <_printf_i+0x130>
 8012a0c:	2301      	movs	r3, #1
 8012a0e:	464a      	mov	r2, r9
 8012a10:	4639      	mov	r1, r7
 8012a12:	4630      	mov	r0, r6
 8012a14:	47c0      	blx	r8
 8012a16:	3001      	adds	r0, #1
 8012a18:	d09a      	beq.n	8012950 <_printf_i+0x12c>
 8012a1a:	3501      	adds	r5, #1
 8012a1c:	68e3      	ldr	r3, [r4, #12]
 8012a1e:	9a03      	ldr	r2, [sp, #12]
 8012a20:	1a9b      	subs	r3, r3, r2
 8012a22:	42ab      	cmp	r3, r5
 8012a24:	dcf2      	bgt.n	8012a0c <_printf_i+0x1e8>
 8012a26:	e7eb      	b.n	8012a00 <_printf_i+0x1dc>
 8012a28:	2500      	movs	r5, #0
 8012a2a:	f104 0919 	add.w	r9, r4, #25
 8012a2e:	e7f5      	b.n	8012a1c <_printf_i+0x1f8>
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d1ac      	bne.n	801298e <_printf_i+0x16a>
 8012a34:	7803      	ldrb	r3, [r0, #0]
 8012a36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012a3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a3e:	e76c      	b.n	801291a <_printf_i+0xf6>
 8012a40:	08019ef6 	.word	0x08019ef6
 8012a44:	08019f07 	.word	0x08019f07

08012a48 <iprintf>:
 8012a48:	b40f      	push	{r0, r1, r2, r3}
 8012a4a:	4b0a      	ldr	r3, [pc, #40]	; (8012a74 <iprintf+0x2c>)
 8012a4c:	b513      	push	{r0, r1, r4, lr}
 8012a4e:	681c      	ldr	r4, [r3, #0]
 8012a50:	b124      	cbz	r4, 8012a5c <iprintf+0x14>
 8012a52:	69a3      	ldr	r3, [r4, #24]
 8012a54:	b913      	cbnz	r3, 8012a5c <iprintf+0x14>
 8012a56:	4620      	mov	r0, r4
 8012a58:	f001 f896 	bl	8013b88 <__sinit>
 8012a5c:	ab05      	add	r3, sp, #20
 8012a5e:	9a04      	ldr	r2, [sp, #16]
 8012a60:	68a1      	ldr	r1, [r4, #8]
 8012a62:	9301      	str	r3, [sp, #4]
 8012a64:	4620      	mov	r0, r4
 8012a66:	f001 fe19 	bl	801469c <_vfiprintf_r>
 8012a6a:	b002      	add	sp, #8
 8012a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a70:	b004      	add	sp, #16
 8012a72:	4770      	bx	lr
 8012a74:	200007a4 	.word	0x200007a4

08012a78 <_puts_r>:
 8012a78:	b570      	push	{r4, r5, r6, lr}
 8012a7a:	460e      	mov	r6, r1
 8012a7c:	4605      	mov	r5, r0
 8012a7e:	b118      	cbz	r0, 8012a88 <_puts_r+0x10>
 8012a80:	6983      	ldr	r3, [r0, #24]
 8012a82:	b90b      	cbnz	r3, 8012a88 <_puts_r+0x10>
 8012a84:	f001 f880 	bl	8013b88 <__sinit>
 8012a88:	69ab      	ldr	r3, [r5, #24]
 8012a8a:	68ac      	ldr	r4, [r5, #8]
 8012a8c:	b913      	cbnz	r3, 8012a94 <_puts_r+0x1c>
 8012a8e:	4628      	mov	r0, r5
 8012a90:	f001 f87a 	bl	8013b88 <__sinit>
 8012a94:	4b23      	ldr	r3, [pc, #140]	; (8012b24 <_puts_r+0xac>)
 8012a96:	429c      	cmp	r4, r3
 8012a98:	d117      	bne.n	8012aca <_puts_r+0x52>
 8012a9a:	686c      	ldr	r4, [r5, #4]
 8012a9c:	89a3      	ldrh	r3, [r4, #12]
 8012a9e:	071b      	lsls	r3, r3, #28
 8012aa0:	d51d      	bpl.n	8012ade <_puts_r+0x66>
 8012aa2:	6923      	ldr	r3, [r4, #16]
 8012aa4:	b1db      	cbz	r3, 8012ade <_puts_r+0x66>
 8012aa6:	3e01      	subs	r6, #1
 8012aa8:	68a3      	ldr	r3, [r4, #8]
 8012aaa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012aae:	3b01      	subs	r3, #1
 8012ab0:	60a3      	str	r3, [r4, #8]
 8012ab2:	b9e9      	cbnz	r1, 8012af0 <_puts_r+0x78>
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	da2e      	bge.n	8012b16 <_puts_r+0x9e>
 8012ab8:	4622      	mov	r2, r4
 8012aba:	210a      	movs	r1, #10
 8012abc:	4628      	mov	r0, r5
 8012abe:	f000 f86f 	bl	8012ba0 <__swbuf_r>
 8012ac2:	3001      	adds	r0, #1
 8012ac4:	d011      	beq.n	8012aea <_puts_r+0x72>
 8012ac6:	200a      	movs	r0, #10
 8012ac8:	e011      	b.n	8012aee <_puts_r+0x76>
 8012aca:	4b17      	ldr	r3, [pc, #92]	; (8012b28 <_puts_r+0xb0>)
 8012acc:	429c      	cmp	r4, r3
 8012ace:	d101      	bne.n	8012ad4 <_puts_r+0x5c>
 8012ad0:	68ac      	ldr	r4, [r5, #8]
 8012ad2:	e7e3      	b.n	8012a9c <_puts_r+0x24>
 8012ad4:	4b15      	ldr	r3, [pc, #84]	; (8012b2c <_puts_r+0xb4>)
 8012ad6:	429c      	cmp	r4, r3
 8012ad8:	bf08      	it	eq
 8012ada:	68ec      	ldreq	r4, [r5, #12]
 8012adc:	e7de      	b.n	8012a9c <_puts_r+0x24>
 8012ade:	4621      	mov	r1, r4
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	f000 f8af 	bl	8012c44 <__swsetup_r>
 8012ae6:	2800      	cmp	r0, #0
 8012ae8:	d0dd      	beq.n	8012aa6 <_puts_r+0x2e>
 8012aea:	f04f 30ff 	mov.w	r0, #4294967295
 8012aee:	bd70      	pop	{r4, r5, r6, pc}
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	da04      	bge.n	8012afe <_puts_r+0x86>
 8012af4:	69a2      	ldr	r2, [r4, #24]
 8012af6:	429a      	cmp	r2, r3
 8012af8:	dc06      	bgt.n	8012b08 <_puts_r+0x90>
 8012afa:	290a      	cmp	r1, #10
 8012afc:	d004      	beq.n	8012b08 <_puts_r+0x90>
 8012afe:	6823      	ldr	r3, [r4, #0]
 8012b00:	1c5a      	adds	r2, r3, #1
 8012b02:	6022      	str	r2, [r4, #0]
 8012b04:	7019      	strb	r1, [r3, #0]
 8012b06:	e7cf      	b.n	8012aa8 <_puts_r+0x30>
 8012b08:	4622      	mov	r2, r4
 8012b0a:	4628      	mov	r0, r5
 8012b0c:	f000 f848 	bl	8012ba0 <__swbuf_r>
 8012b10:	3001      	adds	r0, #1
 8012b12:	d1c9      	bne.n	8012aa8 <_puts_r+0x30>
 8012b14:	e7e9      	b.n	8012aea <_puts_r+0x72>
 8012b16:	6823      	ldr	r3, [r4, #0]
 8012b18:	200a      	movs	r0, #10
 8012b1a:	1c5a      	adds	r2, r3, #1
 8012b1c:	6022      	str	r2, [r4, #0]
 8012b1e:	7018      	strb	r0, [r3, #0]
 8012b20:	e7e5      	b.n	8012aee <_puts_r+0x76>
 8012b22:	bf00      	nop
 8012b24:	08019f48 	.word	0x08019f48
 8012b28:	08019f68 	.word	0x08019f68
 8012b2c:	08019f28 	.word	0x08019f28

08012b30 <puts>:
 8012b30:	4b02      	ldr	r3, [pc, #8]	; (8012b3c <puts+0xc>)
 8012b32:	4601      	mov	r1, r0
 8012b34:	6818      	ldr	r0, [r3, #0]
 8012b36:	f7ff bf9f 	b.w	8012a78 <_puts_r>
 8012b3a:	bf00      	nop
 8012b3c:	200007a4 	.word	0x200007a4

08012b40 <_sbrk_r>:
 8012b40:	b538      	push	{r3, r4, r5, lr}
 8012b42:	4c06      	ldr	r4, [pc, #24]	; (8012b5c <_sbrk_r+0x1c>)
 8012b44:	2300      	movs	r3, #0
 8012b46:	4605      	mov	r5, r0
 8012b48:	4608      	mov	r0, r1
 8012b4a:	6023      	str	r3, [r4, #0]
 8012b4c:	f7f0 fb4a 	bl	80031e4 <_sbrk>
 8012b50:	1c43      	adds	r3, r0, #1
 8012b52:	d102      	bne.n	8012b5a <_sbrk_r+0x1a>
 8012b54:	6823      	ldr	r3, [r4, #0]
 8012b56:	b103      	cbz	r3, 8012b5a <_sbrk_r+0x1a>
 8012b58:	602b      	str	r3, [r5, #0]
 8012b5a:	bd38      	pop	{r3, r4, r5, pc}
 8012b5c:	20002c68 	.word	0x20002c68

08012b60 <siprintf>:
 8012b60:	b40e      	push	{r1, r2, r3}
 8012b62:	b500      	push	{lr}
 8012b64:	b09c      	sub	sp, #112	; 0x70
 8012b66:	ab1d      	add	r3, sp, #116	; 0x74
 8012b68:	9002      	str	r0, [sp, #8]
 8012b6a:	9006      	str	r0, [sp, #24]
 8012b6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012b70:	4809      	ldr	r0, [pc, #36]	; (8012b98 <siprintf+0x38>)
 8012b72:	9107      	str	r1, [sp, #28]
 8012b74:	9104      	str	r1, [sp, #16]
 8012b76:	4909      	ldr	r1, [pc, #36]	; (8012b9c <siprintf+0x3c>)
 8012b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b7c:	9105      	str	r1, [sp, #20]
 8012b7e:	6800      	ldr	r0, [r0, #0]
 8012b80:	9301      	str	r3, [sp, #4]
 8012b82:	a902      	add	r1, sp, #8
 8012b84:	f001 fc68 	bl	8014458 <_svfiprintf_r>
 8012b88:	9b02      	ldr	r3, [sp, #8]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	701a      	strb	r2, [r3, #0]
 8012b8e:	b01c      	add	sp, #112	; 0x70
 8012b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b94:	b003      	add	sp, #12
 8012b96:	4770      	bx	lr
 8012b98:	200007a4 	.word	0x200007a4
 8012b9c:	ffff0208 	.word	0xffff0208

08012ba0 <__swbuf_r>:
 8012ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ba2:	460e      	mov	r6, r1
 8012ba4:	4614      	mov	r4, r2
 8012ba6:	4605      	mov	r5, r0
 8012ba8:	b118      	cbz	r0, 8012bb2 <__swbuf_r+0x12>
 8012baa:	6983      	ldr	r3, [r0, #24]
 8012bac:	b90b      	cbnz	r3, 8012bb2 <__swbuf_r+0x12>
 8012bae:	f000 ffeb 	bl	8013b88 <__sinit>
 8012bb2:	4b21      	ldr	r3, [pc, #132]	; (8012c38 <__swbuf_r+0x98>)
 8012bb4:	429c      	cmp	r4, r3
 8012bb6:	d12a      	bne.n	8012c0e <__swbuf_r+0x6e>
 8012bb8:	686c      	ldr	r4, [r5, #4]
 8012bba:	69a3      	ldr	r3, [r4, #24]
 8012bbc:	60a3      	str	r3, [r4, #8]
 8012bbe:	89a3      	ldrh	r3, [r4, #12]
 8012bc0:	071a      	lsls	r2, r3, #28
 8012bc2:	d52e      	bpl.n	8012c22 <__swbuf_r+0x82>
 8012bc4:	6923      	ldr	r3, [r4, #16]
 8012bc6:	b363      	cbz	r3, 8012c22 <__swbuf_r+0x82>
 8012bc8:	6923      	ldr	r3, [r4, #16]
 8012bca:	6820      	ldr	r0, [r4, #0]
 8012bcc:	1ac0      	subs	r0, r0, r3
 8012bce:	6963      	ldr	r3, [r4, #20]
 8012bd0:	b2f6      	uxtb	r6, r6
 8012bd2:	4283      	cmp	r3, r0
 8012bd4:	4637      	mov	r7, r6
 8012bd6:	dc04      	bgt.n	8012be2 <__swbuf_r+0x42>
 8012bd8:	4621      	mov	r1, r4
 8012bda:	4628      	mov	r0, r5
 8012bdc:	f000 ff6a 	bl	8013ab4 <_fflush_r>
 8012be0:	bb28      	cbnz	r0, 8012c2e <__swbuf_r+0x8e>
 8012be2:	68a3      	ldr	r3, [r4, #8]
 8012be4:	3b01      	subs	r3, #1
 8012be6:	60a3      	str	r3, [r4, #8]
 8012be8:	6823      	ldr	r3, [r4, #0]
 8012bea:	1c5a      	adds	r2, r3, #1
 8012bec:	6022      	str	r2, [r4, #0]
 8012bee:	701e      	strb	r6, [r3, #0]
 8012bf0:	6963      	ldr	r3, [r4, #20]
 8012bf2:	3001      	adds	r0, #1
 8012bf4:	4283      	cmp	r3, r0
 8012bf6:	d004      	beq.n	8012c02 <__swbuf_r+0x62>
 8012bf8:	89a3      	ldrh	r3, [r4, #12]
 8012bfa:	07db      	lsls	r3, r3, #31
 8012bfc:	d519      	bpl.n	8012c32 <__swbuf_r+0x92>
 8012bfe:	2e0a      	cmp	r6, #10
 8012c00:	d117      	bne.n	8012c32 <__swbuf_r+0x92>
 8012c02:	4621      	mov	r1, r4
 8012c04:	4628      	mov	r0, r5
 8012c06:	f000 ff55 	bl	8013ab4 <_fflush_r>
 8012c0a:	b190      	cbz	r0, 8012c32 <__swbuf_r+0x92>
 8012c0c:	e00f      	b.n	8012c2e <__swbuf_r+0x8e>
 8012c0e:	4b0b      	ldr	r3, [pc, #44]	; (8012c3c <__swbuf_r+0x9c>)
 8012c10:	429c      	cmp	r4, r3
 8012c12:	d101      	bne.n	8012c18 <__swbuf_r+0x78>
 8012c14:	68ac      	ldr	r4, [r5, #8]
 8012c16:	e7d0      	b.n	8012bba <__swbuf_r+0x1a>
 8012c18:	4b09      	ldr	r3, [pc, #36]	; (8012c40 <__swbuf_r+0xa0>)
 8012c1a:	429c      	cmp	r4, r3
 8012c1c:	bf08      	it	eq
 8012c1e:	68ec      	ldreq	r4, [r5, #12]
 8012c20:	e7cb      	b.n	8012bba <__swbuf_r+0x1a>
 8012c22:	4621      	mov	r1, r4
 8012c24:	4628      	mov	r0, r5
 8012c26:	f000 f80d 	bl	8012c44 <__swsetup_r>
 8012c2a:	2800      	cmp	r0, #0
 8012c2c:	d0cc      	beq.n	8012bc8 <__swbuf_r+0x28>
 8012c2e:	f04f 37ff 	mov.w	r7, #4294967295
 8012c32:	4638      	mov	r0, r7
 8012c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c36:	bf00      	nop
 8012c38:	08019f48 	.word	0x08019f48
 8012c3c:	08019f68 	.word	0x08019f68
 8012c40:	08019f28 	.word	0x08019f28

08012c44 <__swsetup_r>:
 8012c44:	4b32      	ldr	r3, [pc, #200]	; (8012d10 <__swsetup_r+0xcc>)
 8012c46:	b570      	push	{r4, r5, r6, lr}
 8012c48:	681d      	ldr	r5, [r3, #0]
 8012c4a:	4606      	mov	r6, r0
 8012c4c:	460c      	mov	r4, r1
 8012c4e:	b125      	cbz	r5, 8012c5a <__swsetup_r+0x16>
 8012c50:	69ab      	ldr	r3, [r5, #24]
 8012c52:	b913      	cbnz	r3, 8012c5a <__swsetup_r+0x16>
 8012c54:	4628      	mov	r0, r5
 8012c56:	f000 ff97 	bl	8013b88 <__sinit>
 8012c5a:	4b2e      	ldr	r3, [pc, #184]	; (8012d14 <__swsetup_r+0xd0>)
 8012c5c:	429c      	cmp	r4, r3
 8012c5e:	d10f      	bne.n	8012c80 <__swsetup_r+0x3c>
 8012c60:	686c      	ldr	r4, [r5, #4]
 8012c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c66:	b29a      	uxth	r2, r3
 8012c68:	0715      	lsls	r5, r2, #28
 8012c6a:	d42c      	bmi.n	8012cc6 <__swsetup_r+0x82>
 8012c6c:	06d0      	lsls	r0, r2, #27
 8012c6e:	d411      	bmi.n	8012c94 <__swsetup_r+0x50>
 8012c70:	2209      	movs	r2, #9
 8012c72:	6032      	str	r2, [r6, #0]
 8012c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c78:	81a3      	strh	r3, [r4, #12]
 8012c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8012c7e:	e03e      	b.n	8012cfe <__swsetup_r+0xba>
 8012c80:	4b25      	ldr	r3, [pc, #148]	; (8012d18 <__swsetup_r+0xd4>)
 8012c82:	429c      	cmp	r4, r3
 8012c84:	d101      	bne.n	8012c8a <__swsetup_r+0x46>
 8012c86:	68ac      	ldr	r4, [r5, #8]
 8012c88:	e7eb      	b.n	8012c62 <__swsetup_r+0x1e>
 8012c8a:	4b24      	ldr	r3, [pc, #144]	; (8012d1c <__swsetup_r+0xd8>)
 8012c8c:	429c      	cmp	r4, r3
 8012c8e:	bf08      	it	eq
 8012c90:	68ec      	ldreq	r4, [r5, #12]
 8012c92:	e7e6      	b.n	8012c62 <__swsetup_r+0x1e>
 8012c94:	0751      	lsls	r1, r2, #29
 8012c96:	d512      	bpl.n	8012cbe <__swsetup_r+0x7a>
 8012c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c9a:	b141      	cbz	r1, 8012cae <__swsetup_r+0x6a>
 8012c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ca0:	4299      	cmp	r1, r3
 8012ca2:	d002      	beq.n	8012caa <__swsetup_r+0x66>
 8012ca4:	4630      	mov	r0, r6
 8012ca6:	f7ff f9cb 	bl	8012040 <_free_r>
 8012caa:	2300      	movs	r3, #0
 8012cac:	6363      	str	r3, [r4, #52]	; 0x34
 8012cae:	89a3      	ldrh	r3, [r4, #12]
 8012cb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012cb4:	81a3      	strh	r3, [r4, #12]
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	6063      	str	r3, [r4, #4]
 8012cba:	6923      	ldr	r3, [r4, #16]
 8012cbc:	6023      	str	r3, [r4, #0]
 8012cbe:	89a3      	ldrh	r3, [r4, #12]
 8012cc0:	f043 0308 	orr.w	r3, r3, #8
 8012cc4:	81a3      	strh	r3, [r4, #12]
 8012cc6:	6923      	ldr	r3, [r4, #16]
 8012cc8:	b94b      	cbnz	r3, 8012cde <__swsetup_r+0x9a>
 8012cca:	89a3      	ldrh	r3, [r4, #12]
 8012ccc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012cd4:	d003      	beq.n	8012cde <__swsetup_r+0x9a>
 8012cd6:	4621      	mov	r1, r4
 8012cd8:	4630      	mov	r0, r6
 8012cda:	f001 f811 	bl	8013d00 <__smakebuf_r>
 8012cde:	89a2      	ldrh	r2, [r4, #12]
 8012ce0:	f012 0301 	ands.w	r3, r2, #1
 8012ce4:	d00c      	beq.n	8012d00 <__swsetup_r+0xbc>
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	60a3      	str	r3, [r4, #8]
 8012cea:	6963      	ldr	r3, [r4, #20]
 8012cec:	425b      	negs	r3, r3
 8012cee:	61a3      	str	r3, [r4, #24]
 8012cf0:	6923      	ldr	r3, [r4, #16]
 8012cf2:	b953      	cbnz	r3, 8012d0a <__swsetup_r+0xc6>
 8012cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cf8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012cfc:	d1ba      	bne.n	8012c74 <__swsetup_r+0x30>
 8012cfe:	bd70      	pop	{r4, r5, r6, pc}
 8012d00:	0792      	lsls	r2, r2, #30
 8012d02:	bf58      	it	pl
 8012d04:	6963      	ldrpl	r3, [r4, #20]
 8012d06:	60a3      	str	r3, [r4, #8]
 8012d08:	e7f2      	b.n	8012cf0 <__swsetup_r+0xac>
 8012d0a:	2000      	movs	r0, #0
 8012d0c:	e7f7      	b.n	8012cfe <__swsetup_r+0xba>
 8012d0e:	bf00      	nop
 8012d10:	200007a4 	.word	0x200007a4
 8012d14:	08019f48 	.word	0x08019f48
 8012d18:	08019f68 	.word	0x08019f68
 8012d1c:	08019f28 	.word	0x08019f28

08012d20 <quorem>:
 8012d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d24:	6903      	ldr	r3, [r0, #16]
 8012d26:	690c      	ldr	r4, [r1, #16]
 8012d28:	42a3      	cmp	r3, r4
 8012d2a:	4680      	mov	r8, r0
 8012d2c:	f2c0 8082 	blt.w	8012e34 <quorem+0x114>
 8012d30:	3c01      	subs	r4, #1
 8012d32:	f101 0714 	add.w	r7, r1, #20
 8012d36:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012d3a:	f100 0614 	add.w	r6, r0, #20
 8012d3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012d42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012d46:	eb06 030c 	add.w	r3, r6, ip
 8012d4a:	3501      	adds	r5, #1
 8012d4c:	eb07 090c 	add.w	r9, r7, ip
 8012d50:	9301      	str	r3, [sp, #4]
 8012d52:	fbb0 f5f5 	udiv	r5, r0, r5
 8012d56:	b395      	cbz	r5, 8012dbe <quorem+0x9e>
 8012d58:	f04f 0a00 	mov.w	sl, #0
 8012d5c:	4638      	mov	r0, r7
 8012d5e:	46b6      	mov	lr, r6
 8012d60:	46d3      	mov	fp, sl
 8012d62:	f850 2b04 	ldr.w	r2, [r0], #4
 8012d66:	b293      	uxth	r3, r2
 8012d68:	fb05 a303 	mla	r3, r5, r3, sl
 8012d6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012d70:	b29b      	uxth	r3, r3
 8012d72:	ebab 0303 	sub.w	r3, fp, r3
 8012d76:	0c12      	lsrs	r2, r2, #16
 8012d78:	f8de b000 	ldr.w	fp, [lr]
 8012d7c:	fb05 a202 	mla	r2, r5, r2, sl
 8012d80:	fa13 f38b 	uxtah	r3, r3, fp
 8012d84:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012d88:	fa1f fb82 	uxth.w	fp, r2
 8012d8c:	f8de 2000 	ldr.w	r2, [lr]
 8012d90:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012d94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d98:	b29b      	uxth	r3, r3
 8012d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d9e:	4581      	cmp	r9, r0
 8012da0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012da4:	f84e 3b04 	str.w	r3, [lr], #4
 8012da8:	d2db      	bcs.n	8012d62 <quorem+0x42>
 8012daa:	f856 300c 	ldr.w	r3, [r6, ip]
 8012dae:	b933      	cbnz	r3, 8012dbe <quorem+0x9e>
 8012db0:	9b01      	ldr	r3, [sp, #4]
 8012db2:	3b04      	subs	r3, #4
 8012db4:	429e      	cmp	r6, r3
 8012db6:	461a      	mov	r2, r3
 8012db8:	d330      	bcc.n	8012e1c <quorem+0xfc>
 8012dba:	f8c8 4010 	str.w	r4, [r8, #16]
 8012dbe:	4640      	mov	r0, r8
 8012dc0:	f001 f9f6 	bl	80141b0 <__mcmp>
 8012dc4:	2800      	cmp	r0, #0
 8012dc6:	db25      	blt.n	8012e14 <quorem+0xf4>
 8012dc8:	3501      	adds	r5, #1
 8012dca:	4630      	mov	r0, r6
 8012dcc:	f04f 0c00 	mov.w	ip, #0
 8012dd0:	f857 2b04 	ldr.w	r2, [r7], #4
 8012dd4:	f8d0 e000 	ldr.w	lr, [r0]
 8012dd8:	b293      	uxth	r3, r2
 8012dda:	ebac 0303 	sub.w	r3, ip, r3
 8012dde:	0c12      	lsrs	r2, r2, #16
 8012de0:	fa13 f38e 	uxtah	r3, r3, lr
 8012de4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012de8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012dec:	b29b      	uxth	r3, r3
 8012dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012df2:	45b9      	cmp	r9, r7
 8012df4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012df8:	f840 3b04 	str.w	r3, [r0], #4
 8012dfc:	d2e8      	bcs.n	8012dd0 <quorem+0xb0>
 8012dfe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012e02:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012e06:	b92a      	cbnz	r2, 8012e14 <quorem+0xf4>
 8012e08:	3b04      	subs	r3, #4
 8012e0a:	429e      	cmp	r6, r3
 8012e0c:	461a      	mov	r2, r3
 8012e0e:	d30b      	bcc.n	8012e28 <quorem+0x108>
 8012e10:	f8c8 4010 	str.w	r4, [r8, #16]
 8012e14:	4628      	mov	r0, r5
 8012e16:	b003      	add	sp, #12
 8012e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e1c:	6812      	ldr	r2, [r2, #0]
 8012e1e:	3b04      	subs	r3, #4
 8012e20:	2a00      	cmp	r2, #0
 8012e22:	d1ca      	bne.n	8012dba <quorem+0x9a>
 8012e24:	3c01      	subs	r4, #1
 8012e26:	e7c5      	b.n	8012db4 <quorem+0x94>
 8012e28:	6812      	ldr	r2, [r2, #0]
 8012e2a:	3b04      	subs	r3, #4
 8012e2c:	2a00      	cmp	r2, #0
 8012e2e:	d1ef      	bne.n	8012e10 <quorem+0xf0>
 8012e30:	3c01      	subs	r4, #1
 8012e32:	e7ea      	b.n	8012e0a <quorem+0xea>
 8012e34:	2000      	movs	r0, #0
 8012e36:	e7ee      	b.n	8012e16 <quorem+0xf6>

08012e38 <_dtoa_r>:
 8012e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e3c:	ec57 6b10 	vmov	r6, r7, d0
 8012e40:	b097      	sub	sp, #92	; 0x5c
 8012e42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012e44:	9106      	str	r1, [sp, #24]
 8012e46:	4604      	mov	r4, r0
 8012e48:	920b      	str	r2, [sp, #44]	; 0x2c
 8012e4a:	9312      	str	r3, [sp, #72]	; 0x48
 8012e4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012e50:	e9cd 6700 	strd	r6, r7, [sp]
 8012e54:	b93d      	cbnz	r5, 8012e66 <_dtoa_r+0x2e>
 8012e56:	2010      	movs	r0, #16
 8012e58:	f7ff f8ce 	bl	8011ff8 <malloc>
 8012e5c:	6260      	str	r0, [r4, #36]	; 0x24
 8012e5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012e62:	6005      	str	r5, [r0, #0]
 8012e64:	60c5      	str	r5, [r0, #12]
 8012e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e68:	6819      	ldr	r1, [r3, #0]
 8012e6a:	b151      	cbz	r1, 8012e82 <_dtoa_r+0x4a>
 8012e6c:	685a      	ldr	r2, [r3, #4]
 8012e6e:	604a      	str	r2, [r1, #4]
 8012e70:	2301      	movs	r3, #1
 8012e72:	4093      	lsls	r3, r2
 8012e74:	608b      	str	r3, [r1, #8]
 8012e76:	4620      	mov	r0, r4
 8012e78:	f000 ffb8 	bl	8013dec <_Bfree>
 8012e7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e7e:	2200      	movs	r2, #0
 8012e80:	601a      	str	r2, [r3, #0]
 8012e82:	1e3b      	subs	r3, r7, #0
 8012e84:	bfbb      	ittet	lt
 8012e86:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012e8a:	9301      	strlt	r3, [sp, #4]
 8012e8c:	2300      	movge	r3, #0
 8012e8e:	2201      	movlt	r2, #1
 8012e90:	bfac      	ite	ge
 8012e92:	f8c8 3000 	strge.w	r3, [r8]
 8012e96:	f8c8 2000 	strlt.w	r2, [r8]
 8012e9a:	4baf      	ldr	r3, [pc, #700]	; (8013158 <_dtoa_r+0x320>)
 8012e9c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012ea0:	ea33 0308 	bics.w	r3, r3, r8
 8012ea4:	d114      	bne.n	8012ed0 <_dtoa_r+0x98>
 8012ea6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012ea8:	f242 730f 	movw	r3, #9999	; 0x270f
 8012eac:	6013      	str	r3, [r2, #0]
 8012eae:	9b00      	ldr	r3, [sp, #0]
 8012eb0:	b923      	cbnz	r3, 8012ebc <_dtoa_r+0x84>
 8012eb2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012eb6:	2800      	cmp	r0, #0
 8012eb8:	f000 8542 	beq.w	8013940 <_dtoa_r+0xb08>
 8012ebc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ebe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801316c <_dtoa_r+0x334>
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	f000 8544 	beq.w	8013950 <_dtoa_r+0xb18>
 8012ec8:	f10b 0303 	add.w	r3, fp, #3
 8012ecc:	f000 bd3e 	b.w	801394c <_dtoa_r+0xb14>
 8012ed0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	4630      	mov	r0, r6
 8012eda:	4639      	mov	r1, r7
 8012edc:	f7ed fe0c 	bl	8000af8 <__aeabi_dcmpeq>
 8012ee0:	4681      	mov	r9, r0
 8012ee2:	b168      	cbz	r0, 8012f00 <_dtoa_r+0xc8>
 8012ee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	6013      	str	r3, [r2, #0]
 8012eea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	f000 8524 	beq.w	801393a <_dtoa_r+0xb02>
 8012ef2:	4b9a      	ldr	r3, [pc, #616]	; (801315c <_dtoa_r+0x324>)
 8012ef4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012ef6:	f103 3bff 	add.w	fp, r3, #4294967295
 8012efa:	6013      	str	r3, [r2, #0]
 8012efc:	f000 bd28 	b.w	8013950 <_dtoa_r+0xb18>
 8012f00:	aa14      	add	r2, sp, #80	; 0x50
 8012f02:	a915      	add	r1, sp, #84	; 0x54
 8012f04:	ec47 6b10 	vmov	d0, r6, r7
 8012f08:	4620      	mov	r0, r4
 8012f0a:	f001 f9c8 	bl	801429e <__d2b>
 8012f0e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012f12:	9004      	str	r0, [sp, #16]
 8012f14:	2d00      	cmp	r5, #0
 8012f16:	d07c      	beq.n	8013012 <_dtoa_r+0x1da>
 8012f18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012f1c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012f20:	46b2      	mov	sl, r6
 8012f22:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8012f26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012f2a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8012f2e:	2200      	movs	r2, #0
 8012f30:	4b8b      	ldr	r3, [pc, #556]	; (8013160 <_dtoa_r+0x328>)
 8012f32:	4650      	mov	r0, sl
 8012f34:	4659      	mov	r1, fp
 8012f36:	f7ed f9bf 	bl	80002b8 <__aeabi_dsub>
 8012f3a:	a381      	add	r3, pc, #516	; (adr r3, 8013140 <_dtoa_r+0x308>)
 8012f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f40:	f7ed fb72 	bl	8000628 <__aeabi_dmul>
 8012f44:	a380      	add	r3, pc, #512	; (adr r3, 8013148 <_dtoa_r+0x310>)
 8012f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f4a:	f7ed f9b7 	bl	80002bc <__adddf3>
 8012f4e:	4606      	mov	r6, r0
 8012f50:	4628      	mov	r0, r5
 8012f52:	460f      	mov	r7, r1
 8012f54:	f7ed fafe 	bl	8000554 <__aeabi_i2d>
 8012f58:	a37d      	add	r3, pc, #500	; (adr r3, 8013150 <_dtoa_r+0x318>)
 8012f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f5e:	f7ed fb63 	bl	8000628 <__aeabi_dmul>
 8012f62:	4602      	mov	r2, r0
 8012f64:	460b      	mov	r3, r1
 8012f66:	4630      	mov	r0, r6
 8012f68:	4639      	mov	r1, r7
 8012f6a:	f7ed f9a7 	bl	80002bc <__adddf3>
 8012f6e:	4606      	mov	r6, r0
 8012f70:	460f      	mov	r7, r1
 8012f72:	f7ed fe09 	bl	8000b88 <__aeabi_d2iz>
 8012f76:	2200      	movs	r2, #0
 8012f78:	4682      	mov	sl, r0
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	4630      	mov	r0, r6
 8012f7e:	4639      	mov	r1, r7
 8012f80:	f7ed fdc4 	bl	8000b0c <__aeabi_dcmplt>
 8012f84:	b148      	cbz	r0, 8012f9a <_dtoa_r+0x162>
 8012f86:	4650      	mov	r0, sl
 8012f88:	f7ed fae4 	bl	8000554 <__aeabi_i2d>
 8012f8c:	4632      	mov	r2, r6
 8012f8e:	463b      	mov	r3, r7
 8012f90:	f7ed fdb2 	bl	8000af8 <__aeabi_dcmpeq>
 8012f94:	b908      	cbnz	r0, 8012f9a <_dtoa_r+0x162>
 8012f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f9a:	f1ba 0f16 	cmp.w	sl, #22
 8012f9e:	d859      	bhi.n	8013054 <_dtoa_r+0x21c>
 8012fa0:	4970      	ldr	r1, [pc, #448]	; (8013164 <_dtoa_r+0x32c>)
 8012fa2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012fa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012faa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fae:	f7ed fdcb 	bl	8000b48 <__aeabi_dcmpgt>
 8012fb2:	2800      	cmp	r0, #0
 8012fb4:	d050      	beq.n	8013058 <_dtoa_r+0x220>
 8012fb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012fba:	2300      	movs	r3, #0
 8012fbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8012fbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012fc0:	1b5d      	subs	r5, r3, r5
 8012fc2:	f1b5 0801 	subs.w	r8, r5, #1
 8012fc6:	bf49      	itett	mi
 8012fc8:	f1c5 0301 	rsbmi	r3, r5, #1
 8012fcc:	2300      	movpl	r3, #0
 8012fce:	9305      	strmi	r3, [sp, #20]
 8012fd0:	f04f 0800 	movmi.w	r8, #0
 8012fd4:	bf58      	it	pl
 8012fd6:	9305      	strpl	r3, [sp, #20]
 8012fd8:	f1ba 0f00 	cmp.w	sl, #0
 8012fdc:	db3e      	blt.n	801305c <_dtoa_r+0x224>
 8012fde:	2300      	movs	r3, #0
 8012fe0:	44d0      	add	r8, sl
 8012fe2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012fe6:	9307      	str	r3, [sp, #28]
 8012fe8:	9b06      	ldr	r3, [sp, #24]
 8012fea:	2b09      	cmp	r3, #9
 8012fec:	f200 8090 	bhi.w	8013110 <_dtoa_r+0x2d8>
 8012ff0:	2b05      	cmp	r3, #5
 8012ff2:	bfc4      	itt	gt
 8012ff4:	3b04      	subgt	r3, #4
 8012ff6:	9306      	strgt	r3, [sp, #24]
 8012ff8:	9b06      	ldr	r3, [sp, #24]
 8012ffa:	f1a3 0302 	sub.w	r3, r3, #2
 8012ffe:	bfcc      	ite	gt
 8013000:	2500      	movgt	r5, #0
 8013002:	2501      	movle	r5, #1
 8013004:	2b03      	cmp	r3, #3
 8013006:	f200 808f 	bhi.w	8013128 <_dtoa_r+0x2f0>
 801300a:	e8df f003 	tbb	[pc, r3]
 801300e:	7f7d      	.short	0x7f7d
 8013010:	7131      	.short	0x7131
 8013012:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8013016:	441d      	add	r5, r3
 8013018:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801301c:	2820      	cmp	r0, #32
 801301e:	dd13      	ble.n	8013048 <_dtoa_r+0x210>
 8013020:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8013024:	9b00      	ldr	r3, [sp, #0]
 8013026:	fa08 f800 	lsl.w	r8, r8, r0
 801302a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801302e:	fa23 f000 	lsr.w	r0, r3, r0
 8013032:	ea48 0000 	orr.w	r0, r8, r0
 8013036:	f7ed fa7d 	bl	8000534 <__aeabi_ui2d>
 801303a:	2301      	movs	r3, #1
 801303c:	4682      	mov	sl, r0
 801303e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8013042:	3d01      	subs	r5, #1
 8013044:	9313      	str	r3, [sp, #76]	; 0x4c
 8013046:	e772      	b.n	8012f2e <_dtoa_r+0xf6>
 8013048:	9b00      	ldr	r3, [sp, #0]
 801304a:	f1c0 0020 	rsb	r0, r0, #32
 801304e:	fa03 f000 	lsl.w	r0, r3, r0
 8013052:	e7f0      	b.n	8013036 <_dtoa_r+0x1fe>
 8013054:	2301      	movs	r3, #1
 8013056:	e7b1      	b.n	8012fbc <_dtoa_r+0x184>
 8013058:	900f      	str	r0, [sp, #60]	; 0x3c
 801305a:	e7b0      	b.n	8012fbe <_dtoa_r+0x186>
 801305c:	9b05      	ldr	r3, [sp, #20]
 801305e:	eba3 030a 	sub.w	r3, r3, sl
 8013062:	9305      	str	r3, [sp, #20]
 8013064:	f1ca 0300 	rsb	r3, sl, #0
 8013068:	9307      	str	r3, [sp, #28]
 801306a:	2300      	movs	r3, #0
 801306c:	930e      	str	r3, [sp, #56]	; 0x38
 801306e:	e7bb      	b.n	8012fe8 <_dtoa_r+0x1b0>
 8013070:	2301      	movs	r3, #1
 8013072:	930a      	str	r3, [sp, #40]	; 0x28
 8013074:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013076:	2b00      	cmp	r3, #0
 8013078:	dd59      	ble.n	801312e <_dtoa_r+0x2f6>
 801307a:	9302      	str	r3, [sp, #8]
 801307c:	4699      	mov	r9, r3
 801307e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013080:	2200      	movs	r2, #0
 8013082:	6072      	str	r2, [r6, #4]
 8013084:	2204      	movs	r2, #4
 8013086:	f102 0014 	add.w	r0, r2, #20
 801308a:	4298      	cmp	r0, r3
 801308c:	6871      	ldr	r1, [r6, #4]
 801308e:	d953      	bls.n	8013138 <_dtoa_r+0x300>
 8013090:	4620      	mov	r0, r4
 8013092:	f000 fe77 	bl	8013d84 <_Balloc>
 8013096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013098:	6030      	str	r0, [r6, #0]
 801309a:	f1b9 0f0e 	cmp.w	r9, #14
 801309e:	f8d3 b000 	ldr.w	fp, [r3]
 80130a2:	f200 80e6 	bhi.w	8013272 <_dtoa_r+0x43a>
 80130a6:	2d00      	cmp	r5, #0
 80130a8:	f000 80e3 	beq.w	8013272 <_dtoa_r+0x43a>
 80130ac:	ed9d 7b00 	vldr	d7, [sp]
 80130b0:	f1ba 0f00 	cmp.w	sl, #0
 80130b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80130b8:	dd74      	ble.n	80131a4 <_dtoa_r+0x36c>
 80130ba:	4a2a      	ldr	r2, [pc, #168]	; (8013164 <_dtoa_r+0x32c>)
 80130bc:	f00a 030f 	and.w	r3, sl, #15
 80130c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80130c4:	ed93 7b00 	vldr	d7, [r3]
 80130c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80130cc:	06f0      	lsls	r0, r6, #27
 80130ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80130d2:	d565      	bpl.n	80131a0 <_dtoa_r+0x368>
 80130d4:	4b24      	ldr	r3, [pc, #144]	; (8013168 <_dtoa_r+0x330>)
 80130d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80130da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80130de:	f7ed fbcd 	bl	800087c <__aeabi_ddiv>
 80130e2:	e9cd 0100 	strd	r0, r1, [sp]
 80130e6:	f006 060f 	and.w	r6, r6, #15
 80130ea:	2503      	movs	r5, #3
 80130ec:	4f1e      	ldr	r7, [pc, #120]	; (8013168 <_dtoa_r+0x330>)
 80130ee:	e04c      	b.n	801318a <_dtoa_r+0x352>
 80130f0:	2301      	movs	r3, #1
 80130f2:	930a      	str	r3, [sp, #40]	; 0x28
 80130f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130f6:	4453      	add	r3, sl
 80130f8:	f103 0901 	add.w	r9, r3, #1
 80130fc:	9302      	str	r3, [sp, #8]
 80130fe:	464b      	mov	r3, r9
 8013100:	2b01      	cmp	r3, #1
 8013102:	bfb8      	it	lt
 8013104:	2301      	movlt	r3, #1
 8013106:	e7ba      	b.n	801307e <_dtoa_r+0x246>
 8013108:	2300      	movs	r3, #0
 801310a:	e7b2      	b.n	8013072 <_dtoa_r+0x23a>
 801310c:	2300      	movs	r3, #0
 801310e:	e7f0      	b.n	80130f2 <_dtoa_r+0x2ba>
 8013110:	2501      	movs	r5, #1
 8013112:	2300      	movs	r3, #0
 8013114:	9306      	str	r3, [sp, #24]
 8013116:	950a      	str	r5, [sp, #40]	; 0x28
 8013118:	f04f 33ff 	mov.w	r3, #4294967295
 801311c:	9302      	str	r3, [sp, #8]
 801311e:	4699      	mov	r9, r3
 8013120:	2200      	movs	r2, #0
 8013122:	2312      	movs	r3, #18
 8013124:	920b      	str	r2, [sp, #44]	; 0x2c
 8013126:	e7aa      	b.n	801307e <_dtoa_r+0x246>
 8013128:	2301      	movs	r3, #1
 801312a:	930a      	str	r3, [sp, #40]	; 0x28
 801312c:	e7f4      	b.n	8013118 <_dtoa_r+0x2e0>
 801312e:	2301      	movs	r3, #1
 8013130:	9302      	str	r3, [sp, #8]
 8013132:	4699      	mov	r9, r3
 8013134:	461a      	mov	r2, r3
 8013136:	e7f5      	b.n	8013124 <_dtoa_r+0x2ec>
 8013138:	3101      	adds	r1, #1
 801313a:	6071      	str	r1, [r6, #4]
 801313c:	0052      	lsls	r2, r2, #1
 801313e:	e7a2      	b.n	8013086 <_dtoa_r+0x24e>
 8013140:	636f4361 	.word	0x636f4361
 8013144:	3fd287a7 	.word	0x3fd287a7
 8013148:	8b60c8b3 	.word	0x8b60c8b3
 801314c:	3fc68a28 	.word	0x3fc68a28
 8013150:	509f79fb 	.word	0x509f79fb
 8013154:	3fd34413 	.word	0x3fd34413
 8013158:	7ff00000 	.word	0x7ff00000
 801315c:	08019ef5 	.word	0x08019ef5
 8013160:	3ff80000 	.word	0x3ff80000
 8013164:	08019fb0 	.word	0x08019fb0
 8013168:	08019f88 	.word	0x08019f88
 801316c:	08019f21 	.word	0x08019f21
 8013170:	07f1      	lsls	r1, r6, #31
 8013172:	d508      	bpl.n	8013186 <_dtoa_r+0x34e>
 8013174:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013178:	e9d7 2300 	ldrd	r2, r3, [r7]
 801317c:	f7ed fa54 	bl	8000628 <__aeabi_dmul>
 8013180:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013184:	3501      	adds	r5, #1
 8013186:	1076      	asrs	r6, r6, #1
 8013188:	3708      	adds	r7, #8
 801318a:	2e00      	cmp	r6, #0
 801318c:	d1f0      	bne.n	8013170 <_dtoa_r+0x338>
 801318e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013192:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013196:	f7ed fb71 	bl	800087c <__aeabi_ddiv>
 801319a:	e9cd 0100 	strd	r0, r1, [sp]
 801319e:	e01a      	b.n	80131d6 <_dtoa_r+0x39e>
 80131a0:	2502      	movs	r5, #2
 80131a2:	e7a3      	b.n	80130ec <_dtoa_r+0x2b4>
 80131a4:	f000 80a0 	beq.w	80132e8 <_dtoa_r+0x4b0>
 80131a8:	f1ca 0600 	rsb	r6, sl, #0
 80131ac:	4b9f      	ldr	r3, [pc, #636]	; (801342c <_dtoa_r+0x5f4>)
 80131ae:	4fa0      	ldr	r7, [pc, #640]	; (8013430 <_dtoa_r+0x5f8>)
 80131b0:	f006 020f 	and.w	r2, r6, #15
 80131b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80131b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80131c0:	f7ed fa32 	bl	8000628 <__aeabi_dmul>
 80131c4:	e9cd 0100 	strd	r0, r1, [sp]
 80131c8:	1136      	asrs	r6, r6, #4
 80131ca:	2300      	movs	r3, #0
 80131cc:	2502      	movs	r5, #2
 80131ce:	2e00      	cmp	r6, #0
 80131d0:	d17f      	bne.n	80132d2 <_dtoa_r+0x49a>
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d1e1      	bne.n	801319a <_dtoa_r+0x362>
 80131d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80131d8:	2b00      	cmp	r3, #0
 80131da:	f000 8087 	beq.w	80132ec <_dtoa_r+0x4b4>
 80131de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80131e2:	2200      	movs	r2, #0
 80131e4:	4b93      	ldr	r3, [pc, #588]	; (8013434 <_dtoa_r+0x5fc>)
 80131e6:	4630      	mov	r0, r6
 80131e8:	4639      	mov	r1, r7
 80131ea:	f7ed fc8f 	bl	8000b0c <__aeabi_dcmplt>
 80131ee:	2800      	cmp	r0, #0
 80131f0:	d07c      	beq.n	80132ec <_dtoa_r+0x4b4>
 80131f2:	f1b9 0f00 	cmp.w	r9, #0
 80131f6:	d079      	beq.n	80132ec <_dtoa_r+0x4b4>
 80131f8:	9b02      	ldr	r3, [sp, #8]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	dd35      	ble.n	801326a <_dtoa_r+0x432>
 80131fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013202:	9308      	str	r3, [sp, #32]
 8013204:	4639      	mov	r1, r7
 8013206:	2200      	movs	r2, #0
 8013208:	4b8b      	ldr	r3, [pc, #556]	; (8013438 <_dtoa_r+0x600>)
 801320a:	4630      	mov	r0, r6
 801320c:	f7ed fa0c 	bl	8000628 <__aeabi_dmul>
 8013210:	e9cd 0100 	strd	r0, r1, [sp]
 8013214:	9f02      	ldr	r7, [sp, #8]
 8013216:	3501      	adds	r5, #1
 8013218:	4628      	mov	r0, r5
 801321a:	f7ed f99b 	bl	8000554 <__aeabi_i2d>
 801321e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013222:	f7ed fa01 	bl	8000628 <__aeabi_dmul>
 8013226:	2200      	movs	r2, #0
 8013228:	4b84      	ldr	r3, [pc, #528]	; (801343c <_dtoa_r+0x604>)
 801322a:	f7ed f847 	bl	80002bc <__adddf3>
 801322e:	4605      	mov	r5, r0
 8013230:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013234:	2f00      	cmp	r7, #0
 8013236:	d15d      	bne.n	80132f4 <_dtoa_r+0x4bc>
 8013238:	2200      	movs	r2, #0
 801323a:	4b81      	ldr	r3, [pc, #516]	; (8013440 <_dtoa_r+0x608>)
 801323c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013240:	f7ed f83a 	bl	80002b8 <__aeabi_dsub>
 8013244:	462a      	mov	r2, r5
 8013246:	4633      	mov	r3, r6
 8013248:	e9cd 0100 	strd	r0, r1, [sp]
 801324c:	f7ed fc7c 	bl	8000b48 <__aeabi_dcmpgt>
 8013250:	2800      	cmp	r0, #0
 8013252:	f040 8288 	bne.w	8013766 <_dtoa_r+0x92e>
 8013256:	462a      	mov	r2, r5
 8013258:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801325c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013260:	f7ed fc54 	bl	8000b0c <__aeabi_dcmplt>
 8013264:	2800      	cmp	r0, #0
 8013266:	f040 827c 	bne.w	8013762 <_dtoa_r+0x92a>
 801326a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801326e:	e9cd 2300 	strd	r2, r3, [sp]
 8013272:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013274:	2b00      	cmp	r3, #0
 8013276:	f2c0 8150 	blt.w	801351a <_dtoa_r+0x6e2>
 801327a:	f1ba 0f0e 	cmp.w	sl, #14
 801327e:	f300 814c 	bgt.w	801351a <_dtoa_r+0x6e2>
 8013282:	4b6a      	ldr	r3, [pc, #424]	; (801342c <_dtoa_r+0x5f4>)
 8013284:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013288:	ed93 7b00 	vldr	d7, [r3]
 801328c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801328e:	2b00      	cmp	r3, #0
 8013290:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013294:	f280 80d8 	bge.w	8013448 <_dtoa_r+0x610>
 8013298:	f1b9 0f00 	cmp.w	r9, #0
 801329c:	f300 80d4 	bgt.w	8013448 <_dtoa_r+0x610>
 80132a0:	f040 825e 	bne.w	8013760 <_dtoa_r+0x928>
 80132a4:	2200      	movs	r2, #0
 80132a6:	4b66      	ldr	r3, [pc, #408]	; (8013440 <_dtoa_r+0x608>)
 80132a8:	ec51 0b17 	vmov	r0, r1, d7
 80132ac:	f7ed f9bc 	bl	8000628 <__aeabi_dmul>
 80132b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80132b4:	f7ed fc3e 	bl	8000b34 <__aeabi_dcmpge>
 80132b8:	464f      	mov	r7, r9
 80132ba:	464e      	mov	r6, r9
 80132bc:	2800      	cmp	r0, #0
 80132be:	f040 8234 	bne.w	801372a <_dtoa_r+0x8f2>
 80132c2:	2331      	movs	r3, #49	; 0x31
 80132c4:	f10b 0501 	add.w	r5, fp, #1
 80132c8:	f88b 3000 	strb.w	r3, [fp]
 80132cc:	f10a 0a01 	add.w	sl, sl, #1
 80132d0:	e22f      	b.n	8013732 <_dtoa_r+0x8fa>
 80132d2:	07f2      	lsls	r2, r6, #31
 80132d4:	d505      	bpl.n	80132e2 <_dtoa_r+0x4aa>
 80132d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80132da:	f7ed f9a5 	bl	8000628 <__aeabi_dmul>
 80132de:	3501      	adds	r5, #1
 80132e0:	2301      	movs	r3, #1
 80132e2:	1076      	asrs	r6, r6, #1
 80132e4:	3708      	adds	r7, #8
 80132e6:	e772      	b.n	80131ce <_dtoa_r+0x396>
 80132e8:	2502      	movs	r5, #2
 80132ea:	e774      	b.n	80131d6 <_dtoa_r+0x39e>
 80132ec:	f8cd a020 	str.w	sl, [sp, #32]
 80132f0:	464f      	mov	r7, r9
 80132f2:	e791      	b.n	8013218 <_dtoa_r+0x3e0>
 80132f4:	4b4d      	ldr	r3, [pc, #308]	; (801342c <_dtoa_r+0x5f4>)
 80132f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80132fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80132fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013300:	2b00      	cmp	r3, #0
 8013302:	d047      	beq.n	8013394 <_dtoa_r+0x55c>
 8013304:	4602      	mov	r2, r0
 8013306:	460b      	mov	r3, r1
 8013308:	2000      	movs	r0, #0
 801330a:	494e      	ldr	r1, [pc, #312]	; (8013444 <_dtoa_r+0x60c>)
 801330c:	f7ed fab6 	bl	800087c <__aeabi_ddiv>
 8013310:	462a      	mov	r2, r5
 8013312:	4633      	mov	r3, r6
 8013314:	f7ec ffd0 	bl	80002b8 <__aeabi_dsub>
 8013318:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801331c:	465d      	mov	r5, fp
 801331e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013322:	f7ed fc31 	bl	8000b88 <__aeabi_d2iz>
 8013326:	4606      	mov	r6, r0
 8013328:	f7ed f914 	bl	8000554 <__aeabi_i2d>
 801332c:	4602      	mov	r2, r0
 801332e:	460b      	mov	r3, r1
 8013330:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013334:	f7ec ffc0 	bl	80002b8 <__aeabi_dsub>
 8013338:	3630      	adds	r6, #48	; 0x30
 801333a:	f805 6b01 	strb.w	r6, [r5], #1
 801333e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013342:	e9cd 0100 	strd	r0, r1, [sp]
 8013346:	f7ed fbe1 	bl	8000b0c <__aeabi_dcmplt>
 801334a:	2800      	cmp	r0, #0
 801334c:	d163      	bne.n	8013416 <_dtoa_r+0x5de>
 801334e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013352:	2000      	movs	r0, #0
 8013354:	4937      	ldr	r1, [pc, #220]	; (8013434 <_dtoa_r+0x5fc>)
 8013356:	f7ec ffaf 	bl	80002b8 <__aeabi_dsub>
 801335a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801335e:	f7ed fbd5 	bl	8000b0c <__aeabi_dcmplt>
 8013362:	2800      	cmp	r0, #0
 8013364:	f040 80b7 	bne.w	80134d6 <_dtoa_r+0x69e>
 8013368:	eba5 030b 	sub.w	r3, r5, fp
 801336c:	429f      	cmp	r7, r3
 801336e:	f77f af7c 	ble.w	801326a <_dtoa_r+0x432>
 8013372:	2200      	movs	r2, #0
 8013374:	4b30      	ldr	r3, [pc, #192]	; (8013438 <_dtoa_r+0x600>)
 8013376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801337a:	f7ed f955 	bl	8000628 <__aeabi_dmul>
 801337e:	2200      	movs	r2, #0
 8013380:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013384:	4b2c      	ldr	r3, [pc, #176]	; (8013438 <_dtoa_r+0x600>)
 8013386:	e9dd 0100 	ldrd	r0, r1, [sp]
 801338a:	f7ed f94d 	bl	8000628 <__aeabi_dmul>
 801338e:	e9cd 0100 	strd	r0, r1, [sp]
 8013392:	e7c4      	b.n	801331e <_dtoa_r+0x4e6>
 8013394:	462a      	mov	r2, r5
 8013396:	4633      	mov	r3, r6
 8013398:	f7ed f946 	bl	8000628 <__aeabi_dmul>
 801339c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80133a0:	eb0b 0507 	add.w	r5, fp, r7
 80133a4:	465e      	mov	r6, fp
 80133a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80133aa:	f7ed fbed 	bl	8000b88 <__aeabi_d2iz>
 80133ae:	4607      	mov	r7, r0
 80133b0:	f7ed f8d0 	bl	8000554 <__aeabi_i2d>
 80133b4:	3730      	adds	r7, #48	; 0x30
 80133b6:	4602      	mov	r2, r0
 80133b8:	460b      	mov	r3, r1
 80133ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80133be:	f7ec ff7b 	bl	80002b8 <__aeabi_dsub>
 80133c2:	f806 7b01 	strb.w	r7, [r6], #1
 80133c6:	42ae      	cmp	r6, r5
 80133c8:	e9cd 0100 	strd	r0, r1, [sp]
 80133cc:	f04f 0200 	mov.w	r2, #0
 80133d0:	d126      	bne.n	8013420 <_dtoa_r+0x5e8>
 80133d2:	4b1c      	ldr	r3, [pc, #112]	; (8013444 <_dtoa_r+0x60c>)
 80133d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80133d8:	f7ec ff70 	bl	80002bc <__adddf3>
 80133dc:	4602      	mov	r2, r0
 80133de:	460b      	mov	r3, r1
 80133e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80133e4:	f7ed fbb0 	bl	8000b48 <__aeabi_dcmpgt>
 80133e8:	2800      	cmp	r0, #0
 80133ea:	d174      	bne.n	80134d6 <_dtoa_r+0x69e>
 80133ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80133f0:	2000      	movs	r0, #0
 80133f2:	4914      	ldr	r1, [pc, #80]	; (8013444 <_dtoa_r+0x60c>)
 80133f4:	f7ec ff60 	bl	80002b8 <__aeabi_dsub>
 80133f8:	4602      	mov	r2, r0
 80133fa:	460b      	mov	r3, r1
 80133fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013400:	f7ed fb84 	bl	8000b0c <__aeabi_dcmplt>
 8013404:	2800      	cmp	r0, #0
 8013406:	f43f af30 	beq.w	801326a <_dtoa_r+0x432>
 801340a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801340e:	2b30      	cmp	r3, #48	; 0x30
 8013410:	f105 32ff 	add.w	r2, r5, #4294967295
 8013414:	d002      	beq.n	801341c <_dtoa_r+0x5e4>
 8013416:	f8dd a020 	ldr.w	sl, [sp, #32]
 801341a:	e04a      	b.n	80134b2 <_dtoa_r+0x67a>
 801341c:	4615      	mov	r5, r2
 801341e:	e7f4      	b.n	801340a <_dtoa_r+0x5d2>
 8013420:	4b05      	ldr	r3, [pc, #20]	; (8013438 <_dtoa_r+0x600>)
 8013422:	f7ed f901 	bl	8000628 <__aeabi_dmul>
 8013426:	e9cd 0100 	strd	r0, r1, [sp]
 801342a:	e7bc      	b.n	80133a6 <_dtoa_r+0x56e>
 801342c:	08019fb0 	.word	0x08019fb0
 8013430:	08019f88 	.word	0x08019f88
 8013434:	3ff00000 	.word	0x3ff00000
 8013438:	40240000 	.word	0x40240000
 801343c:	401c0000 	.word	0x401c0000
 8013440:	40140000 	.word	0x40140000
 8013444:	3fe00000 	.word	0x3fe00000
 8013448:	e9dd 6700 	ldrd	r6, r7, [sp]
 801344c:	465d      	mov	r5, fp
 801344e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013452:	4630      	mov	r0, r6
 8013454:	4639      	mov	r1, r7
 8013456:	f7ed fa11 	bl	800087c <__aeabi_ddiv>
 801345a:	f7ed fb95 	bl	8000b88 <__aeabi_d2iz>
 801345e:	4680      	mov	r8, r0
 8013460:	f7ed f878 	bl	8000554 <__aeabi_i2d>
 8013464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013468:	f7ed f8de 	bl	8000628 <__aeabi_dmul>
 801346c:	4602      	mov	r2, r0
 801346e:	460b      	mov	r3, r1
 8013470:	4630      	mov	r0, r6
 8013472:	4639      	mov	r1, r7
 8013474:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8013478:	f7ec ff1e 	bl	80002b8 <__aeabi_dsub>
 801347c:	f805 6b01 	strb.w	r6, [r5], #1
 8013480:	eba5 060b 	sub.w	r6, r5, fp
 8013484:	45b1      	cmp	r9, r6
 8013486:	4602      	mov	r2, r0
 8013488:	460b      	mov	r3, r1
 801348a:	d139      	bne.n	8013500 <_dtoa_r+0x6c8>
 801348c:	f7ec ff16 	bl	80002bc <__adddf3>
 8013490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013494:	4606      	mov	r6, r0
 8013496:	460f      	mov	r7, r1
 8013498:	f7ed fb56 	bl	8000b48 <__aeabi_dcmpgt>
 801349c:	b9c8      	cbnz	r0, 80134d2 <_dtoa_r+0x69a>
 801349e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80134a2:	4630      	mov	r0, r6
 80134a4:	4639      	mov	r1, r7
 80134a6:	f7ed fb27 	bl	8000af8 <__aeabi_dcmpeq>
 80134aa:	b110      	cbz	r0, 80134b2 <_dtoa_r+0x67a>
 80134ac:	f018 0f01 	tst.w	r8, #1
 80134b0:	d10f      	bne.n	80134d2 <_dtoa_r+0x69a>
 80134b2:	9904      	ldr	r1, [sp, #16]
 80134b4:	4620      	mov	r0, r4
 80134b6:	f000 fc99 	bl	8013dec <_Bfree>
 80134ba:	2300      	movs	r3, #0
 80134bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80134be:	702b      	strb	r3, [r5, #0]
 80134c0:	f10a 0301 	add.w	r3, sl, #1
 80134c4:	6013      	str	r3, [r2, #0]
 80134c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	f000 8241 	beq.w	8013950 <_dtoa_r+0xb18>
 80134ce:	601d      	str	r5, [r3, #0]
 80134d0:	e23e      	b.n	8013950 <_dtoa_r+0xb18>
 80134d2:	f8cd a020 	str.w	sl, [sp, #32]
 80134d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80134da:	2a39      	cmp	r2, #57	; 0x39
 80134dc:	f105 33ff 	add.w	r3, r5, #4294967295
 80134e0:	d108      	bne.n	80134f4 <_dtoa_r+0x6bc>
 80134e2:	459b      	cmp	fp, r3
 80134e4:	d10a      	bne.n	80134fc <_dtoa_r+0x6c4>
 80134e6:	9b08      	ldr	r3, [sp, #32]
 80134e8:	3301      	adds	r3, #1
 80134ea:	9308      	str	r3, [sp, #32]
 80134ec:	2330      	movs	r3, #48	; 0x30
 80134ee:	f88b 3000 	strb.w	r3, [fp]
 80134f2:	465b      	mov	r3, fp
 80134f4:	781a      	ldrb	r2, [r3, #0]
 80134f6:	3201      	adds	r2, #1
 80134f8:	701a      	strb	r2, [r3, #0]
 80134fa:	e78c      	b.n	8013416 <_dtoa_r+0x5de>
 80134fc:	461d      	mov	r5, r3
 80134fe:	e7ea      	b.n	80134d6 <_dtoa_r+0x69e>
 8013500:	2200      	movs	r2, #0
 8013502:	4b9b      	ldr	r3, [pc, #620]	; (8013770 <_dtoa_r+0x938>)
 8013504:	f7ed f890 	bl	8000628 <__aeabi_dmul>
 8013508:	2200      	movs	r2, #0
 801350a:	2300      	movs	r3, #0
 801350c:	4606      	mov	r6, r0
 801350e:	460f      	mov	r7, r1
 8013510:	f7ed faf2 	bl	8000af8 <__aeabi_dcmpeq>
 8013514:	2800      	cmp	r0, #0
 8013516:	d09a      	beq.n	801344e <_dtoa_r+0x616>
 8013518:	e7cb      	b.n	80134b2 <_dtoa_r+0x67a>
 801351a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801351c:	2a00      	cmp	r2, #0
 801351e:	f000 808b 	beq.w	8013638 <_dtoa_r+0x800>
 8013522:	9a06      	ldr	r2, [sp, #24]
 8013524:	2a01      	cmp	r2, #1
 8013526:	dc6e      	bgt.n	8013606 <_dtoa_r+0x7ce>
 8013528:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801352a:	2a00      	cmp	r2, #0
 801352c:	d067      	beq.n	80135fe <_dtoa_r+0x7c6>
 801352e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013532:	9f07      	ldr	r7, [sp, #28]
 8013534:	9d05      	ldr	r5, [sp, #20]
 8013536:	9a05      	ldr	r2, [sp, #20]
 8013538:	2101      	movs	r1, #1
 801353a:	441a      	add	r2, r3
 801353c:	4620      	mov	r0, r4
 801353e:	9205      	str	r2, [sp, #20]
 8013540:	4498      	add	r8, r3
 8013542:	f000 fcf3 	bl	8013f2c <__i2b>
 8013546:	4606      	mov	r6, r0
 8013548:	2d00      	cmp	r5, #0
 801354a:	dd0c      	ble.n	8013566 <_dtoa_r+0x72e>
 801354c:	f1b8 0f00 	cmp.w	r8, #0
 8013550:	dd09      	ble.n	8013566 <_dtoa_r+0x72e>
 8013552:	4545      	cmp	r5, r8
 8013554:	9a05      	ldr	r2, [sp, #20]
 8013556:	462b      	mov	r3, r5
 8013558:	bfa8      	it	ge
 801355a:	4643      	movge	r3, r8
 801355c:	1ad2      	subs	r2, r2, r3
 801355e:	9205      	str	r2, [sp, #20]
 8013560:	1aed      	subs	r5, r5, r3
 8013562:	eba8 0803 	sub.w	r8, r8, r3
 8013566:	9b07      	ldr	r3, [sp, #28]
 8013568:	b1eb      	cbz	r3, 80135a6 <_dtoa_r+0x76e>
 801356a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801356c:	2b00      	cmp	r3, #0
 801356e:	d067      	beq.n	8013640 <_dtoa_r+0x808>
 8013570:	b18f      	cbz	r7, 8013596 <_dtoa_r+0x75e>
 8013572:	4631      	mov	r1, r6
 8013574:	463a      	mov	r2, r7
 8013576:	4620      	mov	r0, r4
 8013578:	f000 fd78 	bl	801406c <__pow5mult>
 801357c:	9a04      	ldr	r2, [sp, #16]
 801357e:	4601      	mov	r1, r0
 8013580:	4606      	mov	r6, r0
 8013582:	4620      	mov	r0, r4
 8013584:	f000 fcdb 	bl	8013f3e <__multiply>
 8013588:	9904      	ldr	r1, [sp, #16]
 801358a:	9008      	str	r0, [sp, #32]
 801358c:	4620      	mov	r0, r4
 801358e:	f000 fc2d 	bl	8013dec <_Bfree>
 8013592:	9b08      	ldr	r3, [sp, #32]
 8013594:	9304      	str	r3, [sp, #16]
 8013596:	9b07      	ldr	r3, [sp, #28]
 8013598:	1bda      	subs	r2, r3, r7
 801359a:	d004      	beq.n	80135a6 <_dtoa_r+0x76e>
 801359c:	9904      	ldr	r1, [sp, #16]
 801359e:	4620      	mov	r0, r4
 80135a0:	f000 fd64 	bl	801406c <__pow5mult>
 80135a4:	9004      	str	r0, [sp, #16]
 80135a6:	2101      	movs	r1, #1
 80135a8:	4620      	mov	r0, r4
 80135aa:	f000 fcbf 	bl	8013f2c <__i2b>
 80135ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80135b0:	4607      	mov	r7, r0
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	f000 81d0 	beq.w	8013958 <_dtoa_r+0xb20>
 80135b8:	461a      	mov	r2, r3
 80135ba:	4601      	mov	r1, r0
 80135bc:	4620      	mov	r0, r4
 80135be:	f000 fd55 	bl	801406c <__pow5mult>
 80135c2:	9b06      	ldr	r3, [sp, #24]
 80135c4:	2b01      	cmp	r3, #1
 80135c6:	4607      	mov	r7, r0
 80135c8:	dc40      	bgt.n	801364c <_dtoa_r+0x814>
 80135ca:	9b00      	ldr	r3, [sp, #0]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d139      	bne.n	8013644 <_dtoa_r+0x80c>
 80135d0:	9b01      	ldr	r3, [sp, #4]
 80135d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d136      	bne.n	8013648 <_dtoa_r+0x810>
 80135da:	9b01      	ldr	r3, [sp, #4]
 80135dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80135e0:	0d1b      	lsrs	r3, r3, #20
 80135e2:	051b      	lsls	r3, r3, #20
 80135e4:	b12b      	cbz	r3, 80135f2 <_dtoa_r+0x7ba>
 80135e6:	9b05      	ldr	r3, [sp, #20]
 80135e8:	3301      	adds	r3, #1
 80135ea:	9305      	str	r3, [sp, #20]
 80135ec:	f108 0801 	add.w	r8, r8, #1
 80135f0:	2301      	movs	r3, #1
 80135f2:	9307      	str	r3, [sp, #28]
 80135f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d12a      	bne.n	8013650 <_dtoa_r+0x818>
 80135fa:	2001      	movs	r0, #1
 80135fc:	e030      	b.n	8013660 <_dtoa_r+0x828>
 80135fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013600:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013604:	e795      	b.n	8013532 <_dtoa_r+0x6fa>
 8013606:	9b07      	ldr	r3, [sp, #28]
 8013608:	f109 37ff 	add.w	r7, r9, #4294967295
 801360c:	42bb      	cmp	r3, r7
 801360e:	bfbf      	itttt	lt
 8013610:	9b07      	ldrlt	r3, [sp, #28]
 8013612:	9707      	strlt	r7, [sp, #28]
 8013614:	1afa      	sublt	r2, r7, r3
 8013616:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013618:	bfbb      	ittet	lt
 801361a:	189b      	addlt	r3, r3, r2
 801361c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801361e:	1bdf      	subge	r7, r3, r7
 8013620:	2700      	movlt	r7, #0
 8013622:	f1b9 0f00 	cmp.w	r9, #0
 8013626:	bfb5      	itete	lt
 8013628:	9b05      	ldrlt	r3, [sp, #20]
 801362a:	9d05      	ldrge	r5, [sp, #20]
 801362c:	eba3 0509 	sublt.w	r5, r3, r9
 8013630:	464b      	movge	r3, r9
 8013632:	bfb8      	it	lt
 8013634:	2300      	movlt	r3, #0
 8013636:	e77e      	b.n	8013536 <_dtoa_r+0x6fe>
 8013638:	9f07      	ldr	r7, [sp, #28]
 801363a:	9d05      	ldr	r5, [sp, #20]
 801363c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801363e:	e783      	b.n	8013548 <_dtoa_r+0x710>
 8013640:	9a07      	ldr	r2, [sp, #28]
 8013642:	e7ab      	b.n	801359c <_dtoa_r+0x764>
 8013644:	2300      	movs	r3, #0
 8013646:	e7d4      	b.n	80135f2 <_dtoa_r+0x7ba>
 8013648:	9b00      	ldr	r3, [sp, #0]
 801364a:	e7d2      	b.n	80135f2 <_dtoa_r+0x7ba>
 801364c:	2300      	movs	r3, #0
 801364e:	9307      	str	r3, [sp, #28]
 8013650:	693b      	ldr	r3, [r7, #16]
 8013652:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8013656:	6918      	ldr	r0, [r3, #16]
 8013658:	f000 fc1a 	bl	8013e90 <__hi0bits>
 801365c:	f1c0 0020 	rsb	r0, r0, #32
 8013660:	4440      	add	r0, r8
 8013662:	f010 001f 	ands.w	r0, r0, #31
 8013666:	d047      	beq.n	80136f8 <_dtoa_r+0x8c0>
 8013668:	f1c0 0320 	rsb	r3, r0, #32
 801366c:	2b04      	cmp	r3, #4
 801366e:	dd3b      	ble.n	80136e8 <_dtoa_r+0x8b0>
 8013670:	9b05      	ldr	r3, [sp, #20]
 8013672:	f1c0 001c 	rsb	r0, r0, #28
 8013676:	4403      	add	r3, r0
 8013678:	9305      	str	r3, [sp, #20]
 801367a:	4405      	add	r5, r0
 801367c:	4480      	add	r8, r0
 801367e:	9b05      	ldr	r3, [sp, #20]
 8013680:	2b00      	cmp	r3, #0
 8013682:	dd05      	ble.n	8013690 <_dtoa_r+0x858>
 8013684:	461a      	mov	r2, r3
 8013686:	9904      	ldr	r1, [sp, #16]
 8013688:	4620      	mov	r0, r4
 801368a:	f000 fd3d 	bl	8014108 <__lshift>
 801368e:	9004      	str	r0, [sp, #16]
 8013690:	f1b8 0f00 	cmp.w	r8, #0
 8013694:	dd05      	ble.n	80136a2 <_dtoa_r+0x86a>
 8013696:	4639      	mov	r1, r7
 8013698:	4642      	mov	r2, r8
 801369a:	4620      	mov	r0, r4
 801369c:	f000 fd34 	bl	8014108 <__lshift>
 80136a0:	4607      	mov	r7, r0
 80136a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136a4:	b353      	cbz	r3, 80136fc <_dtoa_r+0x8c4>
 80136a6:	4639      	mov	r1, r7
 80136a8:	9804      	ldr	r0, [sp, #16]
 80136aa:	f000 fd81 	bl	80141b0 <__mcmp>
 80136ae:	2800      	cmp	r0, #0
 80136b0:	da24      	bge.n	80136fc <_dtoa_r+0x8c4>
 80136b2:	2300      	movs	r3, #0
 80136b4:	220a      	movs	r2, #10
 80136b6:	9904      	ldr	r1, [sp, #16]
 80136b8:	4620      	mov	r0, r4
 80136ba:	f000 fbae 	bl	8013e1a <__multadd>
 80136be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136c0:	9004      	str	r0, [sp, #16]
 80136c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	f000 814d 	beq.w	8013966 <_dtoa_r+0xb2e>
 80136cc:	2300      	movs	r3, #0
 80136ce:	4631      	mov	r1, r6
 80136d0:	220a      	movs	r2, #10
 80136d2:	4620      	mov	r0, r4
 80136d4:	f000 fba1 	bl	8013e1a <__multadd>
 80136d8:	9b02      	ldr	r3, [sp, #8]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	4606      	mov	r6, r0
 80136de:	dc4f      	bgt.n	8013780 <_dtoa_r+0x948>
 80136e0:	9b06      	ldr	r3, [sp, #24]
 80136e2:	2b02      	cmp	r3, #2
 80136e4:	dd4c      	ble.n	8013780 <_dtoa_r+0x948>
 80136e6:	e011      	b.n	801370c <_dtoa_r+0x8d4>
 80136e8:	d0c9      	beq.n	801367e <_dtoa_r+0x846>
 80136ea:	9a05      	ldr	r2, [sp, #20]
 80136ec:	331c      	adds	r3, #28
 80136ee:	441a      	add	r2, r3
 80136f0:	9205      	str	r2, [sp, #20]
 80136f2:	441d      	add	r5, r3
 80136f4:	4498      	add	r8, r3
 80136f6:	e7c2      	b.n	801367e <_dtoa_r+0x846>
 80136f8:	4603      	mov	r3, r0
 80136fa:	e7f6      	b.n	80136ea <_dtoa_r+0x8b2>
 80136fc:	f1b9 0f00 	cmp.w	r9, #0
 8013700:	dc38      	bgt.n	8013774 <_dtoa_r+0x93c>
 8013702:	9b06      	ldr	r3, [sp, #24]
 8013704:	2b02      	cmp	r3, #2
 8013706:	dd35      	ble.n	8013774 <_dtoa_r+0x93c>
 8013708:	f8cd 9008 	str.w	r9, [sp, #8]
 801370c:	9b02      	ldr	r3, [sp, #8]
 801370e:	b963      	cbnz	r3, 801372a <_dtoa_r+0x8f2>
 8013710:	4639      	mov	r1, r7
 8013712:	2205      	movs	r2, #5
 8013714:	4620      	mov	r0, r4
 8013716:	f000 fb80 	bl	8013e1a <__multadd>
 801371a:	4601      	mov	r1, r0
 801371c:	4607      	mov	r7, r0
 801371e:	9804      	ldr	r0, [sp, #16]
 8013720:	f000 fd46 	bl	80141b0 <__mcmp>
 8013724:	2800      	cmp	r0, #0
 8013726:	f73f adcc 	bgt.w	80132c2 <_dtoa_r+0x48a>
 801372a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801372c:	465d      	mov	r5, fp
 801372e:	ea6f 0a03 	mvn.w	sl, r3
 8013732:	f04f 0900 	mov.w	r9, #0
 8013736:	4639      	mov	r1, r7
 8013738:	4620      	mov	r0, r4
 801373a:	f000 fb57 	bl	8013dec <_Bfree>
 801373e:	2e00      	cmp	r6, #0
 8013740:	f43f aeb7 	beq.w	80134b2 <_dtoa_r+0x67a>
 8013744:	f1b9 0f00 	cmp.w	r9, #0
 8013748:	d005      	beq.n	8013756 <_dtoa_r+0x91e>
 801374a:	45b1      	cmp	r9, r6
 801374c:	d003      	beq.n	8013756 <_dtoa_r+0x91e>
 801374e:	4649      	mov	r1, r9
 8013750:	4620      	mov	r0, r4
 8013752:	f000 fb4b 	bl	8013dec <_Bfree>
 8013756:	4631      	mov	r1, r6
 8013758:	4620      	mov	r0, r4
 801375a:	f000 fb47 	bl	8013dec <_Bfree>
 801375e:	e6a8      	b.n	80134b2 <_dtoa_r+0x67a>
 8013760:	2700      	movs	r7, #0
 8013762:	463e      	mov	r6, r7
 8013764:	e7e1      	b.n	801372a <_dtoa_r+0x8f2>
 8013766:	f8dd a020 	ldr.w	sl, [sp, #32]
 801376a:	463e      	mov	r6, r7
 801376c:	e5a9      	b.n	80132c2 <_dtoa_r+0x48a>
 801376e:	bf00      	nop
 8013770:	40240000 	.word	0x40240000
 8013774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013776:	f8cd 9008 	str.w	r9, [sp, #8]
 801377a:	2b00      	cmp	r3, #0
 801377c:	f000 80fa 	beq.w	8013974 <_dtoa_r+0xb3c>
 8013780:	2d00      	cmp	r5, #0
 8013782:	dd05      	ble.n	8013790 <_dtoa_r+0x958>
 8013784:	4631      	mov	r1, r6
 8013786:	462a      	mov	r2, r5
 8013788:	4620      	mov	r0, r4
 801378a:	f000 fcbd 	bl	8014108 <__lshift>
 801378e:	4606      	mov	r6, r0
 8013790:	9b07      	ldr	r3, [sp, #28]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d04c      	beq.n	8013830 <_dtoa_r+0x9f8>
 8013796:	6871      	ldr	r1, [r6, #4]
 8013798:	4620      	mov	r0, r4
 801379a:	f000 faf3 	bl	8013d84 <_Balloc>
 801379e:	6932      	ldr	r2, [r6, #16]
 80137a0:	3202      	adds	r2, #2
 80137a2:	4605      	mov	r5, r0
 80137a4:	0092      	lsls	r2, r2, #2
 80137a6:	f106 010c 	add.w	r1, r6, #12
 80137aa:	300c      	adds	r0, #12
 80137ac:	f7fe fc34 	bl	8012018 <memcpy>
 80137b0:	2201      	movs	r2, #1
 80137b2:	4629      	mov	r1, r5
 80137b4:	4620      	mov	r0, r4
 80137b6:	f000 fca7 	bl	8014108 <__lshift>
 80137ba:	9b00      	ldr	r3, [sp, #0]
 80137bc:	f8cd b014 	str.w	fp, [sp, #20]
 80137c0:	f003 0301 	and.w	r3, r3, #1
 80137c4:	46b1      	mov	r9, r6
 80137c6:	9307      	str	r3, [sp, #28]
 80137c8:	4606      	mov	r6, r0
 80137ca:	4639      	mov	r1, r7
 80137cc:	9804      	ldr	r0, [sp, #16]
 80137ce:	f7ff faa7 	bl	8012d20 <quorem>
 80137d2:	4649      	mov	r1, r9
 80137d4:	4605      	mov	r5, r0
 80137d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80137da:	9804      	ldr	r0, [sp, #16]
 80137dc:	f000 fce8 	bl	80141b0 <__mcmp>
 80137e0:	4632      	mov	r2, r6
 80137e2:	9000      	str	r0, [sp, #0]
 80137e4:	4639      	mov	r1, r7
 80137e6:	4620      	mov	r0, r4
 80137e8:	f000 fcfc 	bl	80141e4 <__mdiff>
 80137ec:	68c3      	ldr	r3, [r0, #12]
 80137ee:	4602      	mov	r2, r0
 80137f0:	bb03      	cbnz	r3, 8013834 <_dtoa_r+0x9fc>
 80137f2:	4601      	mov	r1, r0
 80137f4:	9008      	str	r0, [sp, #32]
 80137f6:	9804      	ldr	r0, [sp, #16]
 80137f8:	f000 fcda 	bl	80141b0 <__mcmp>
 80137fc:	9a08      	ldr	r2, [sp, #32]
 80137fe:	4603      	mov	r3, r0
 8013800:	4611      	mov	r1, r2
 8013802:	4620      	mov	r0, r4
 8013804:	9308      	str	r3, [sp, #32]
 8013806:	f000 faf1 	bl	8013dec <_Bfree>
 801380a:	9b08      	ldr	r3, [sp, #32]
 801380c:	b9a3      	cbnz	r3, 8013838 <_dtoa_r+0xa00>
 801380e:	9a06      	ldr	r2, [sp, #24]
 8013810:	b992      	cbnz	r2, 8013838 <_dtoa_r+0xa00>
 8013812:	9a07      	ldr	r2, [sp, #28]
 8013814:	b982      	cbnz	r2, 8013838 <_dtoa_r+0xa00>
 8013816:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801381a:	d029      	beq.n	8013870 <_dtoa_r+0xa38>
 801381c:	9b00      	ldr	r3, [sp, #0]
 801381e:	2b00      	cmp	r3, #0
 8013820:	dd01      	ble.n	8013826 <_dtoa_r+0x9ee>
 8013822:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8013826:	9b05      	ldr	r3, [sp, #20]
 8013828:	1c5d      	adds	r5, r3, #1
 801382a:	f883 8000 	strb.w	r8, [r3]
 801382e:	e782      	b.n	8013736 <_dtoa_r+0x8fe>
 8013830:	4630      	mov	r0, r6
 8013832:	e7c2      	b.n	80137ba <_dtoa_r+0x982>
 8013834:	2301      	movs	r3, #1
 8013836:	e7e3      	b.n	8013800 <_dtoa_r+0x9c8>
 8013838:	9a00      	ldr	r2, [sp, #0]
 801383a:	2a00      	cmp	r2, #0
 801383c:	db04      	blt.n	8013848 <_dtoa_r+0xa10>
 801383e:	d125      	bne.n	801388c <_dtoa_r+0xa54>
 8013840:	9a06      	ldr	r2, [sp, #24]
 8013842:	bb1a      	cbnz	r2, 801388c <_dtoa_r+0xa54>
 8013844:	9a07      	ldr	r2, [sp, #28]
 8013846:	bb0a      	cbnz	r2, 801388c <_dtoa_r+0xa54>
 8013848:	2b00      	cmp	r3, #0
 801384a:	ddec      	ble.n	8013826 <_dtoa_r+0x9ee>
 801384c:	2201      	movs	r2, #1
 801384e:	9904      	ldr	r1, [sp, #16]
 8013850:	4620      	mov	r0, r4
 8013852:	f000 fc59 	bl	8014108 <__lshift>
 8013856:	4639      	mov	r1, r7
 8013858:	9004      	str	r0, [sp, #16]
 801385a:	f000 fca9 	bl	80141b0 <__mcmp>
 801385e:	2800      	cmp	r0, #0
 8013860:	dc03      	bgt.n	801386a <_dtoa_r+0xa32>
 8013862:	d1e0      	bne.n	8013826 <_dtoa_r+0x9ee>
 8013864:	f018 0f01 	tst.w	r8, #1
 8013868:	d0dd      	beq.n	8013826 <_dtoa_r+0x9ee>
 801386a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801386e:	d1d8      	bne.n	8013822 <_dtoa_r+0x9ea>
 8013870:	9b05      	ldr	r3, [sp, #20]
 8013872:	9a05      	ldr	r2, [sp, #20]
 8013874:	1c5d      	adds	r5, r3, #1
 8013876:	2339      	movs	r3, #57	; 0x39
 8013878:	7013      	strb	r3, [r2, #0]
 801387a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801387e:	2b39      	cmp	r3, #57	; 0x39
 8013880:	f105 32ff 	add.w	r2, r5, #4294967295
 8013884:	d04f      	beq.n	8013926 <_dtoa_r+0xaee>
 8013886:	3301      	adds	r3, #1
 8013888:	7013      	strb	r3, [r2, #0]
 801388a:	e754      	b.n	8013736 <_dtoa_r+0x8fe>
 801388c:	9a05      	ldr	r2, [sp, #20]
 801388e:	2b00      	cmp	r3, #0
 8013890:	f102 0501 	add.w	r5, r2, #1
 8013894:	dd06      	ble.n	80138a4 <_dtoa_r+0xa6c>
 8013896:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801389a:	d0e9      	beq.n	8013870 <_dtoa_r+0xa38>
 801389c:	f108 0801 	add.w	r8, r8, #1
 80138a0:	9b05      	ldr	r3, [sp, #20]
 80138a2:	e7c2      	b.n	801382a <_dtoa_r+0x9f2>
 80138a4:	9a02      	ldr	r2, [sp, #8]
 80138a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80138aa:	eba5 030b 	sub.w	r3, r5, fp
 80138ae:	4293      	cmp	r3, r2
 80138b0:	d021      	beq.n	80138f6 <_dtoa_r+0xabe>
 80138b2:	2300      	movs	r3, #0
 80138b4:	220a      	movs	r2, #10
 80138b6:	9904      	ldr	r1, [sp, #16]
 80138b8:	4620      	mov	r0, r4
 80138ba:	f000 faae 	bl	8013e1a <__multadd>
 80138be:	45b1      	cmp	r9, r6
 80138c0:	9004      	str	r0, [sp, #16]
 80138c2:	f04f 0300 	mov.w	r3, #0
 80138c6:	f04f 020a 	mov.w	r2, #10
 80138ca:	4649      	mov	r1, r9
 80138cc:	4620      	mov	r0, r4
 80138ce:	d105      	bne.n	80138dc <_dtoa_r+0xaa4>
 80138d0:	f000 faa3 	bl	8013e1a <__multadd>
 80138d4:	4681      	mov	r9, r0
 80138d6:	4606      	mov	r6, r0
 80138d8:	9505      	str	r5, [sp, #20]
 80138da:	e776      	b.n	80137ca <_dtoa_r+0x992>
 80138dc:	f000 fa9d 	bl	8013e1a <__multadd>
 80138e0:	4631      	mov	r1, r6
 80138e2:	4681      	mov	r9, r0
 80138e4:	2300      	movs	r3, #0
 80138e6:	220a      	movs	r2, #10
 80138e8:	4620      	mov	r0, r4
 80138ea:	f000 fa96 	bl	8013e1a <__multadd>
 80138ee:	4606      	mov	r6, r0
 80138f0:	e7f2      	b.n	80138d8 <_dtoa_r+0xaa0>
 80138f2:	f04f 0900 	mov.w	r9, #0
 80138f6:	2201      	movs	r2, #1
 80138f8:	9904      	ldr	r1, [sp, #16]
 80138fa:	4620      	mov	r0, r4
 80138fc:	f000 fc04 	bl	8014108 <__lshift>
 8013900:	4639      	mov	r1, r7
 8013902:	9004      	str	r0, [sp, #16]
 8013904:	f000 fc54 	bl	80141b0 <__mcmp>
 8013908:	2800      	cmp	r0, #0
 801390a:	dcb6      	bgt.n	801387a <_dtoa_r+0xa42>
 801390c:	d102      	bne.n	8013914 <_dtoa_r+0xadc>
 801390e:	f018 0f01 	tst.w	r8, #1
 8013912:	d1b2      	bne.n	801387a <_dtoa_r+0xa42>
 8013914:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013918:	2b30      	cmp	r3, #48	; 0x30
 801391a:	f105 32ff 	add.w	r2, r5, #4294967295
 801391e:	f47f af0a 	bne.w	8013736 <_dtoa_r+0x8fe>
 8013922:	4615      	mov	r5, r2
 8013924:	e7f6      	b.n	8013914 <_dtoa_r+0xadc>
 8013926:	4593      	cmp	fp, r2
 8013928:	d105      	bne.n	8013936 <_dtoa_r+0xafe>
 801392a:	2331      	movs	r3, #49	; 0x31
 801392c:	f10a 0a01 	add.w	sl, sl, #1
 8013930:	f88b 3000 	strb.w	r3, [fp]
 8013934:	e6ff      	b.n	8013736 <_dtoa_r+0x8fe>
 8013936:	4615      	mov	r5, r2
 8013938:	e79f      	b.n	801387a <_dtoa_r+0xa42>
 801393a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80139a0 <_dtoa_r+0xb68>
 801393e:	e007      	b.n	8013950 <_dtoa_r+0xb18>
 8013940:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013942:	f8df b060 	ldr.w	fp, [pc, #96]	; 80139a4 <_dtoa_r+0xb6c>
 8013946:	b11b      	cbz	r3, 8013950 <_dtoa_r+0xb18>
 8013948:	f10b 0308 	add.w	r3, fp, #8
 801394c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801394e:	6013      	str	r3, [r2, #0]
 8013950:	4658      	mov	r0, fp
 8013952:	b017      	add	sp, #92	; 0x5c
 8013954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013958:	9b06      	ldr	r3, [sp, #24]
 801395a:	2b01      	cmp	r3, #1
 801395c:	f77f ae35 	ble.w	80135ca <_dtoa_r+0x792>
 8013960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013962:	9307      	str	r3, [sp, #28]
 8013964:	e649      	b.n	80135fa <_dtoa_r+0x7c2>
 8013966:	9b02      	ldr	r3, [sp, #8]
 8013968:	2b00      	cmp	r3, #0
 801396a:	dc03      	bgt.n	8013974 <_dtoa_r+0xb3c>
 801396c:	9b06      	ldr	r3, [sp, #24]
 801396e:	2b02      	cmp	r3, #2
 8013970:	f73f aecc 	bgt.w	801370c <_dtoa_r+0x8d4>
 8013974:	465d      	mov	r5, fp
 8013976:	4639      	mov	r1, r7
 8013978:	9804      	ldr	r0, [sp, #16]
 801397a:	f7ff f9d1 	bl	8012d20 <quorem>
 801397e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013982:	f805 8b01 	strb.w	r8, [r5], #1
 8013986:	9a02      	ldr	r2, [sp, #8]
 8013988:	eba5 030b 	sub.w	r3, r5, fp
 801398c:	429a      	cmp	r2, r3
 801398e:	ddb0      	ble.n	80138f2 <_dtoa_r+0xaba>
 8013990:	2300      	movs	r3, #0
 8013992:	220a      	movs	r2, #10
 8013994:	9904      	ldr	r1, [sp, #16]
 8013996:	4620      	mov	r0, r4
 8013998:	f000 fa3f 	bl	8013e1a <__multadd>
 801399c:	9004      	str	r0, [sp, #16]
 801399e:	e7ea      	b.n	8013976 <_dtoa_r+0xb3e>
 80139a0:	08019ef4 	.word	0x08019ef4
 80139a4:	08019f18 	.word	0x08019f18

080139a8 <__sflush_r>:
 80139a8:	898a      	ldrh	r2, [r1, #12]
 80139aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139ae:	4605      	mov	r5, r0
 80139b0:	0710      	lsls	r0, r2, #28
 80139b2:	460c      	mov	r4, r1
 80139b4:	d458      	bmi.n	8013a68 <__sflush_r+0xc0>
 80139b6:	684b      	ldr	r3, [r1, #4]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	dc05      	bgt.n	80139c8 <__sflush_r+0x20>
 80139bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80139be:	2b00      	cmp	r3, #0
 80139c0:	dc02      	bgt.n	80139c8 <__sflush_r+0x20>
 80139c2:	2000      	movs	r0, #0
 80139c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80139ca:	2e00      	cmp	r6, #0
 80139cc:	d0f9      	beq.n	80139c2 <__sflush_r+0x1a>
 80139ce:	2300      	movs	r3, #0
 80139d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80139d4:	682f      	ldr	r7, [r5, #0]
 80139d6:	6a21      	ldr	r1, [r4, #32]
 80139d8:	602b      	str	r3, [r5, #0]
 80139da:	d032      	beq.n	8013a42 <__sflush_r+0x9a>
 80139dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80139de:	89a3      	ldrh	r3, [r4, #12]
 80139e0:	075a      	lsls	r2, r3, #29
 80139e2:	d505      	bpl.n	80139f0 <__sflush_r+0x48>
 80139e4:	6863      	ldr	r3, [r4, #4]
 80139e6:	1ac0      	subs	r0, r0, r3
 80139e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80139ea:	b10b      	cbz	r3, 80139f0 <__sflush_r+0x48>
 80139ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80139ee:	1ac0      	subs	r0, r0, r3
 80139f0:	2300      	movs	r3, #0
 80139f2:	4602      	mov	r2, r0
 80139f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80139f6:	6a21      	ldr	r1, [r4, #32]
 80139f8:	4628      	mov	r0, r5
 80139fa:	47b0      	blx	r6
 80139fc:	1c43      	adds	r3, r0, #1
 80139fe:	89a3      	ldrh	r3, [r4, #12]
 8013a00:	d106      	bne.n	8013a10 <__sflush_r+0x68>
 8013a02:	6829      	ldr	r1, [r5, #0]
 8013a04:	291d      	cmp	r1, #29
 8013a06:	d848      	bhi.n	8013a9a <__sflush_r+0xf2>
 8013a08:	4a29      	ldr	r2, [pc, #164]	; (8013ab0 <__sflush_r+0x108>)
 8013a0a:	40ca      	lsrs	r2, r1
 8013a0c:	07d6      	lsls	r6, r2, #31
 8013a0e:	d544      	bpl.n	8013a9a <__sflush_r+0xf2>
 8013a10:	2200      	movs	r2, #0
 8013a12:	6062      	str	r2, [r4, #4]
 8013a14:	04d9      	lsls	r1, r3, #19
 8013a16:	6922      	ldr	r2, [r4, #16]
 8013a18:	6022      	str	r2, [r4, #0]
 8013a1a:	d504      	bpl.n	8013a26 <__sflush_r+0x7e>
 8013a1c:	1c42      	adds	r2, r0, #1
 8013a1e:	d101      	bne.n	8013a24 <__sflush_r+0x7c>
 8013a20:	682b      	ldr	r3, [r5, #0]
 8013a22:	b903      	cbnz	r3, 8013a26 <__sflush_r+0x7e>
 8013a24:	6560      	str	r0, [r4, #84]	; 0x54
 8013a26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a28:	602f      	str	r7, [r5, #0]
 8013a2a:	2900      	cmp	r1, #0
 8013a2c:	d0c9      	beq.n	80139c2 <__sflush_r+0x1a>
 8013a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a32:	4299      	cmp	r1, r3
 8013a34:	d002      	beq.n	8013a3c <__sflush_r+0x94>
 8013a36:	4628      	mov	r0, r5
 8013a38:	f7fe fb02 	bl	8012040 <_free_r>
 8013a3c:	2000      	movs	r0, #0
 8013a3e:	6360      	str	r0, [r4, #52]	; 0x34
 8013a40:	e7c0      	b.n	80139c4 <__sflush_r+0x1c>
 8013a42:	2301      	movs	r3, #1
 8013a44:	4628      	mov	r0, r5
 8013a46:	47b0      	blx	r6
 8013a48:	1c41      	adds	r1, r0, #1
 8013a4a:	d1c8      	bne.n	80139de <__sflush_r+0x36>
 8013a4c:	682b      	ldr	r3, [r5, #0]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d0c5      	beq.n	80139de <__sflush_r+0x36>
 8013a52:	2b1d      	cmp	r3, #29
 8013a54:	d001      	beq.n	8013a5a <__sflush_r+0xb2>
 8013a56:	2b16      	cmp	r3, #22
 8013a58:	d101      	bne.n	8013a5e <__sflush_r+0xb6>
 8013a5a:	602f      	str	r7, [r5, #0]
 8013a5c:	e7b1      	b.n	80139c2 <__sflush_r+0x1a>
 8013a5e:	89a3      	ldrh	r3, [r4, #12]
 8013a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a64:	81a3      	strh	r3, [r4, #12]
 8013a66:	e7ad      	b.n	80139c4 <__sflush_r+0x1c>
 8013a68:	690f      	ldr	r7, [r1, #16]
 8013a6a:	2f00      	cmp	r7, #0
 8013a6c:	d0a9      	beq.n	80139c2 <__sflush_r+0x1a>
 8013a6e:	0793      	lsls	r3, r2, #30
 8013a70:	680e      	ldr	r6, [r1, #0]
 8013a72:	bf08      	it	eq
 8013a74:	694b      	ldreq	r3, [r1, #20]
 8013a76:	600f      	str	r7, [r1, #0]
 8013a78:	bf18      	it	ne
 8013a7a:	2300      	movne	r3, #0
 8013a7c:	eba6 0807 	sub.w	r8, r6, r7
 8013a80:	608b      	str	r3, [r1, #8]
 8013a82:	f1b8 0f00 	cmp.w	r8, #0
 8013a86:	dd9c      	ble.n	80139c2 <__sflush_r+0x1a>
 8013a88:	4643      	mov	r3, r8
 8013a8a:	463a      	mov	r2, r7
 8013a8c:	6a21      	ldr	r1, [r4, #32]
 8013a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a90:	4628      	mov	r0, r5
 8013a92:	47b0      	blx	r6
 8013a94:	2800      	cmp	r0, #0
 8013a96:	dc06      	bgt.n	8013aa6 <__sflush_r+0xfe>
 8013a98:	89a3      	ldrh	r3, [r4, #12]
 8013a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a9e:	81a3      	strh	r3, [r4, #12]
 8013aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8013aa4:	e78e      	b.n	80139c4 <__sflush_r+0x1c>
 8013aa6:	4407      	add	r7, r0
 8013aa8:	eba8 0800 	sub.w	r8, r8, r0
 8013aac:	e7e9      	b.n	8013a82 <__sflush_r+0xda>
 8013aae:	bf00      	nop
 8013ab0:	20400001 	.word	0x20400001

08013ab4 <_fflush_r>:
 8013ab4:	b538      	push	{r3, r4, r5, lr}
 8013ab6:	690b      	ldr	r3, [r1, #16]
 8013ab8:	4605      	mov	r5, r0
 8013aba:	460c      	mov	r4, r1
 8013abc:	b1db      	cbz	r3, 8013af6 <_fflush_r+0x42>
 8013abe:	b118      	cbz	r0, 8013ac8 <_fflush_r+0x14>
 8013ac0:	6983      	ldr	r3, [r0, #24]
 8013ac2:	b90b      	cbnz	r3, 8013ac8 <_fflush_r+0x14>
 8013ac4:	f000 f860 	bl	8013b88 <__sinit>
 8013ac8:	4b0c      	ldr	r3, [pc, #48]	; (8013afc <_fflush_r+0x48>)
 8013aca:	429c      	cmp	r4, r3
 8013acc:	d109      	bne.n	8013ae2 <_fflush_r+0x2e>
 8013ace:	686c      	ldr	r4, [r5, #4]
 8013ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ad4:	b17b      	cbz	r3, 8013af6 <_fflush_r+0x42>
 8013ad6:	4621      	mov	r1, r4
 8013ad8:	4628      	mov	r0, r5
 8013ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ade:	f7ff bf63 	b.w	80139a8 <__sflush_r>
 8013ae2:	4b07      	ldr	r3, [pc, #28]	; (8013b00 <_fflush_r+0x4c>)
 8013ae4:	429c      	cmp	r4, r3
 8013ae6:	d101      	bne.n	8013aec <_fflush_r+0x38>
 8013ae8:	68ac      	ldr	r4, [r5, #8]
 8013aea:	e7f1      	b.n	8013ad0 <_fflush_r+0x1c>
 8013aec:	4b05      	ldr	r3, [pc, #20]	; (8013b04 <_fflush_r+0x50>)
 8013aee:	429c      	cmp	r4, r3
 8013af0:	bf08      	it	eq
 8013af2:	68ec      	ldreq	r4, [r5, #12]
 8013af4:	e7ec      	b.n	8013ad0 <_fflush_r+0x1c>
 8013af6:	2000      	movs	r0, #0
 8013af8:	bd38      	pop	{r3, r4, r5, pc}
 8013afa:	bf00      	nop
 8013afc:	08019f48 	.word	0x08019f48
 8013b00:	08019f68 	.word	0x08019f68
 8013b04:	08019f28 	.word	0x08019f28

08013b08 <std>:
 8013b08:	2300      	movs	r3, #0
 8013b0a:	b510      	push	{r4, lr}
 8013b0c:	4604      	mov	r4, r0
 8013b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8013b12:	6083      	str	r3, [r0, #8]
 8013b14:	8181      	strh	r1, [r0, #12]
 8013b16:	6643      	str	r3, [r0, #100]	; 0x64
 8013b18:	81c2      	strh	r2, [r0, #14]
 8013b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013b1e:	6183      	str	r3, [r0, #24]
 8013b20:	4619      	mov	r1, r3
 8013b22:	2208      	movs	r2, #8
 8013b24:	305c      	adds	r0, #92	; 0x5c
 8013b26:	f7fe fa82 	bl	801202e <memset>
 8013b2a:	4b05      	ldr	r3, [pc, #20]	; (8013b40 <std+0x38>)
 8013b2c:	6263      	str	r3, [r4, #36]	; 0x24
 8013b2e:	4b05      	ldr	r3, [pc, #20]	; (8013b44 <std+0x3c>)
 8013b30:	62a3      	str	r3, [r4, #40]	; 0x28
 8013b32:	4b05      	ldr	r3, [pc, #20]	; (8013b48 <std+0x40>)
 8013b34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013b36:	4b05      	ldr	r3, [pc, #20]	; (8013b4c <std+0x44>)
 8013b38:	6224      	str	r4, [r4, #32]
 8013b3a:	6323      	str	r3, [r4, #48]	; 0x30
 8013b3c:	bd10      	pop	{r4, pc}
 8013b3e:	bf00      	nop
 8013b40:	080148c9 	.word	0x080148c9
 8013b44:	080148eb 	.word	0x080148eb
 8013b48:	08014923 	.word	0x08014923
 8013b4c:	08014947 	.word	0x08014947

08013b50 <_cleanup_r>:
 8013b50:	4901      	ldr	r1, [pc, #4]	; (8013b58 <_cleanup_r+0x8>)
 8013b52:	f000 b885 	b.w	8013c60 <_fwalk_reent>
 8013b56:	bf00      	nop
 8013b58:	08013ab5 	.word	0x08013ab5

08013b5c <__sfmoreglue>:
 8013b5c:	b570      	push	{r4, r5, r6, lr}
 8013b5e:	1e4a      	subs	r2, r1, #1
 8013b60:	2568      	movs	r5, #104	; 0x68
 8013b62:	4355      	muls	r5, r2
 8013b64:	460e      	mov	r6, r1
 8013b66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013b6a:	f7fe fab7 	bl	80120dc <_malloc_r>
 8013b6e:	4604      	mov	r4, r0
 8013b70:	b140      	cbz	r0, 8013b84 <__sfmoreglue+0x28>
 8013b72:	2100      	movs	r1, #0
 8013b74:	e9c0 1600 	strd	r1, r6, [r0]
 8013b78:	300c      	adds	r0, #12
 8013b7a:	60a0      	str	r0, [r4, #8]
 8013b7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013b80:	f7fe fa55 	bl	801202e <memset>
 8013b84:	4620      	mov	r0, r4
 8013b86:	bd70      	pop	{r4, r5, r6, pc}

08013b88 <__sinit>:
 8013b88:	6983      	ldr	r3, [r0, #24]
 8013b8a:	b510      	push	{r4, lr}
 8013b8c:	4604      	mov	r4, r0
 8013b8e:	bb33      	cbnz	r3, 8013bde <__sinit+0x56>
 8013b90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013b94:	6503      	str	r3, [r0, #80]	; 0x50
 8013b96:	4b12      	ldr	r3, [pc, #72]	; (8013be0 <__sinit+0x58>)
 8013b98:	4a12      	ldr	r2, [pc, #72]	; (8013be4 <__sinit+0x5c>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	6282      	str	r2, [r0, #40]	; 0x28
 8013b9e:	4298      	cmp	r0, r3
 8013ba0:	bf04      	itt	eq
 8013ba2:	2301      	moveq	r3, #1
 8013ba4:	6183      	streq	r3, [r0, #24]
 8013ba6:	f000 f81f 	bl	8013be8 <__sfp>
 8013baa:	6060      	str	r0, [r4, #4]
 8013bac:	4620      	mov	r0, r4
 8013bae:	f000 f81b 	bl	8013be8 <__sfp>
 8013bb2:	60a0      	str	r0, [r4, #8]
 8013bb4:	4620      	mov	r0, r4
 8013bb6:	f000 f817 	bl	8013be8 <__sfp>
 8013bba:	2200      	movs	r2, #0
 8013bbc:	60e0      	str	r0, [r4, #12]
 8013bbe:	2104      	movs	r1, #4
 8013bc0:	6860      	ldr	r0, [r4, #4]
 8013bc2:	f7ff ffa1 	bl	8013b08 <std>
 8013bc6:	2201      	movs	r2, #1
 8013bc8:	2109      	movs	r1, #9
 8013bca:	68a0      	ldr	r0, [r4, #8]
 8013bcc:	f7ff ff9c 	bl	8013b08 <std>
 8013bd0:	2202      	movs	r2, #2
 8013bd2:	2112      	movs	r1, #18
 8013bd4:	68e0      	ldr	r0, [r4, #12]
 8013bd6:	f7ff ff97 	bl	8013b08 <std>
 8013bda:	2301      	movs	r3, #1
 8013bdc:	61a3      	str	r3, [r4, #24]
 8013bde:	bd10      	pop	{r4, pc}
 8013be0:	08019ee0 	.word	0x08019ee0
 8013be4:	08013b51 	.word	0x08013b51

08013be8 <__sfp>:
 8013be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bea:	4b1b      	ldr	r3, [pc, #108]	; (8013c58 <__sfp+0x70>)
 8013bec:	681e      	ldr	r6, [r3, #0]
 8013bee:	69b3      	ldr	r3, [r6, #24]
 8013bf0:	4607      	mov	r7, r0
 8013bf2:	b913      	cbnz	r3, 8013bfa <__sfp+0x12>
 8013bf4:	4630      	mov	r0, r6
 8013bf6:	f7ff ffc7 	bl	8013b88 <__sinit>
 8013bfa:	3648      	adds	r6, #72	; 0x48
 8013bfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013c00:	3b01      	subs	r3, #1
 8013c02:	d503      	bpl.n	8013c0c <__sfp+0x24>
 8013c04:	6833      	ldr	r3, [r6, #0]
 8013c06:	b133      	cbz	r3, 8013c16 <__sfp+0x2e>
 8013c08:	6836      	ldr	r6, [r6, #0]
 8013c0a:	e7f7      	b.n	8013bfc <__sfp+0x14>
 8013c0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013c10:	b16d      	cbz	r5, 8013c2e <__sfp+0x46>
 8013c12:	3468      	adds	r4, #104	; 0x68
 8013c14:	e7f4      	b.n	8013c00 <__sfp+0x18>
 8013c16:	2104      	movs	r1, #4
 8013c18:	4638      	mov	r0, r7
 8013c1a:	f7ff ff9f 	bl	8013b5c <__sfmoreglue>
 8013c1e:	6030      	str	r0, [r6, #0]
 8013c20:	2800      	cmp	r0, #0
 8013c22:	d1f1      	bne.n	8013c08 <__sfp+0x20>
 8013c24:	230c      	movs	r3, #12
 8013c26:	603b      	str	r3, [r7, #0]
 8013c28:	4604      	mov	r4, r0
 8013c2a:	4620      	mov	r0, r4
 8013c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c2e:	4b0b      	ldr	r3, [pc, #44]	; (8013c5c <__sfp+0x74>)
 8013c30:	6665      	str	r5, [r4, #100]	; 0x64
 8013c32:	e9c4 5500 	strd	r5, r5, [r4]
 8013c36:	60a5      	str	r5, [r4, #8]
 8013c38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013c3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013c40:	2208      	movs	r2, #8
 8013c42:	4629      	mov	r1, r5
 8013c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013c48:	f7fe f9f1 	bl	801202e <memset>
 8013c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013c54:	e7e9      	b.n	8013c2a <__sfp+0x42>
 8013c56:	bf00      	nop
 8013c58:	08019ee0 	.word	0x08019ee0
 8013c5c:	ffff0001 	.word	0xffff0001

08013c60 <_fwalk_reent>:
 8013c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c64:	4680      	mov	r8, r0
 8013c66:	4689      	mov	r9, r1
 8013c68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013c6c:	2600      	movs	r6, #0
 8013c6e:	b914      	cbnz	r4, 8013c76 <_fwalk_reent+0x16>
 8013c70:	4630      	mov	r0, r6
 8013c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013c7a:	3f01      	subs	r7, #1
 8013c7c:	d501      	bpl.n	8013c82 <_fwalk_reent+0x22>
 8013c7e:	6824      	ldr	r4, [r4, #0]
 8013c80:	e7f5      	b.n	8013c6e <_fwalk_reent+0xe>
 8013c82:	89ab      	ldrh	r3, [r5, #12]
 8013c84:	2b01      	cmp	r3, #1
 8013c86:	d907      	bls.n	8013c98 <_fwalk_reent+0x38>
 8013c88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013c8c:	3301      	adds	r3, #1
 8013c8e:	d003      	beq.n	8013c98 <_fwalk_reent+0x38>
 8013c90:	4629      	mov	r1, r5
 8013c92:	4640      	mov	r0, r8
 8013c94:	47c8      	blx	r9
 8013c96:	4306      	orrs	r6, r0
 8013c98:	3568      	adds	r5, #104	; 0x68
 8013c9a:	e7ee      	b.n	8013c7a <_fwalk_reent+0x1a>

08013c9c <_localeconv_r>:
 8013c9c:	4b04      	ldr	r3, [pc, #16]	; (8013cb0 <_localeconv_r+0x14>)
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	6a18      	ldr	r0, [r3, #32]
 8013ca2:	4b04      	ldr	r3, [pc, #16]	; (8013cb4 <_localeconv_r+0x18>)
 8013ca4:	2800      	cmp	r0, #0
 8013ca6:	bf08      	it	eq
 8013ca8:	4618      	moveq	r0, r3
 8013caa:	30f0      	adds	r0, #240	; 0xf0
 8013cac:	4770      	bx	lr
 8013cae:	bf00      	nop
 8013cb0:	200007a4 	.word	0x200007a4
 8013cb4:	20000808 	.word	0x20000808

08013cb8 <__swhatbuf_r>:
 8013cb8:	b570      	push	{r4, r5, r6, lr}
 8013cba:	460e      	mov	r6, r1
 8013cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cc0:	2900      	cmp	r1, #0
 8013cc2:	b096      	sub	sp, #88	; 0x58
 8013cc4:	4614      	mov	r4, r2
 8013cc6:	461d      	mov	r5, r3
 8013cc8:	da07      	bge.n	8013cda <__swhatbuf_r+0x22>
 8013cca:	2300      	movs	r3, #0
 8013ccc:	602b      	str	r3, [r5, #0]
 8013cce:	89b3      	ldrh	r3, [r6, #12]
 8013cd0:	061a      	lsls	r2, r3, #24
 8013cd2:	d410      	bmi.n	8013cf6 <__swhatbuf_r+0x3e>
 8013cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013cd8:	e00e      	b.n	8013cf8 <__swhatbuf_r+0x40>
 8013cda:	466a      	mov	r2, sp
 8013cdc:	f000 fe5a 	bl	8014994 <_fstat_r>
 8013ce0:	2800      	cmp	r0, #0
 8013ce2:	dbf2      	blt.n	8013cca <__swhatbuf_r+0x12>
 8013ce4:	9a01      	ldr	r2, [sp, #4]
 8013ce6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013cea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013cee:	425a      	negs	r2, r3
 8013cf0:	415a      	adcs	r2, r3
 8013cf2:	602a      	str	r2, [r5, #0]
 8013cf4:	e7ee      	b.n	8013cd4 <__swhatbuf_r+0x1c>
 8013cf6:	2340      	movs	r3, #64	; 0x40
 8013cf8:	2000      	movs	r0, #0
 8013cfa:	6023      	str	r3, [r4, #0]
 8013cfc:	b016      	add	sp, #88	; 0x58
 8013cfe:	bd70      	pop	{r4, r5, r6, pc}

08013d00 <__smakebuf_r>:
 8013d00:	898b      	ldrh	r3, [r1, #12]
 8013d02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d04:	079d      	lsls	r5, r3, #30
 8013d06:	4606      	mov	r6, r0
 8013d08:	460c      	mov	r4, r1
 8013d0a:	d507      	bpl.n	8013d1c <__smakebuf_r+0x1c>
 8013d0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013d10:	6023      	str	r3, [r4, #0]
 8013d12:	6123      	str	r3, [r4, #16]
 8013d14:	2301      	movs	r3, #1
 8013d16:	6163      	str	r3, [r4, #20]
 8013d18:	b002      	add	sp, #8
 8013d1a:	bd70      	pop	{r4, r5, r6, pc}
 8013d1c:	ab01      	add	r3, sp, #4
 8013d1e:	466a      	mov	r2, sp
 8013d20:	f7ff ffca 	bl	8013cb8 <__swhatbuf_r>
 8013d24:	9900      	ldr	r1, [sp, #0]
 8013d26:	4605      	mov	r5, r0
 8013d28:	4630      	mov	r0, r6
 8013d2a:	f7fe f9d7 	bl	80120dc <_malloc_r>
 8013d2e:	b948      	cbnz	r0, 8013d44 <__smakebuf_r+0x44>
 8013d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d34:	059a      	lsls	r2, r3, #22
 8013d36:	d4ef      	bmi.n	8013d18 <__smakebuf_r+0x18>
 8013d38:	f023 0303 	bic.w	r3, r3, #3
 8013d3c:	f043 0302 	orr.w	r3, r3, #2
 8013d40:	81a3      	strh	r3, [r4, #12]
 8013d42:	e7e3      	b.n	8013d0c <__smakebuf_r+0xc>
 8013d44:	4b0d      	ldr	r3, [pc, #52]	; (8013d7c <__smakebuf_r+0x7c>)
 8013d46:	62b3      	str	r3, [r6, #40]	; 0x28
 8013d48:	89a3      	ldrh	r3, [r4, #12]
 8013d4a:	6020      	str	r0, [r4, #0]
 8013d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d50:	81a3      	strh	r3, [r4, #12]
 8013d52:	9b00      	ldr	r3, [sp, #0]
 8013d54:	6163      	str	r3, [r4, #20]
 8013d56:	9b01      	ldr	r3, [sp, #4]
 8013d58:	6120      	str	r0, [r4, #16]
 8013d5a:	b15b      	cbz	r3, 8013d74 <__smakebuf_r+0x74>
 8013d5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d60:	4630      	mov	r0, r6
 8013d62:	f000 fe29 	bl	80149b8 <_isatty_r>
 8013d66:	b128      	cbz	r0, 8013d74 <__smakebuf_r+0x74>
 8013d68:	89a3      	ldrh	r3, [r4, #12]
 8013d6a:	f023 0303 	bic.w	r3, r3, #3
 8013d6e:	f043 0301 	orr.w	r3, r3, #1
 8013d72:	81a3      	strh	r3, [r4, #12]
 8013d74:	89a3      	ldrh	r3, [r4, #12]
 8013d76:	431d      	orrs	r5, r3
 8013d78:	81a5      	strh	r5, [r4, #12]
 8013d7a:	e7cd      	b.n	8013d18 <__smakebuf_r+0x18>
 8013d7c:	08013b51 	.word	0x08013b51

08013d80 <__malloc_lock>:
 8013d80:	4770      	bx	lr

08013d82 <__malloc_unlock>:
 8013d82:	4770      	bx	lr

08013d84 <_Balloc>:
 8013d84:	b570      	push	{r4, r5, r6, lr}
 8013d86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013d88:	4604      	mov	r4, r0
 8013d8a:	460e      	mov	r6, r1
 8013d8c:	b93d      	cbnz	r5, 8013d9e <_Balloc+0x1a>
 8013d8e:	2010      	movs	r0, #16
 8013d90:	f7fe f932 	bl	8011ff8 <malloc>
 8013d94:	6260      	str	r0, [r4, #36]	; 0x24
 8013d96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013d9a:	6005      	str	r5, [r0, #0]
 8013d9c:	60c5      	str	r5, [r0, #12]
 8013d9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013da0:	68eb      	ldr	r3, [r5, #12]
 8013da2:	b183      	cbz	r3, 8013dc6 <_Balloc+0x42>
 8013da4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013da6:	68db      	ldr	r3, [r3, #12]
 8013da8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013dac:	b9b8      	cbnz	r0, 8013dde <_Balloc+0x5a>
 8013dae:	2101      	movs	r1, #1
 8013db0:	fa01 f506 	lsl.w	r5, r1, r6
 8013db4:	1d6a      	adds	r2, r5, #5
 8013db6:	0092      	lsls	r2, r2, #2
 8013db8:	4620      	mov	r0, r4
 8013dba:	f000 fabf 	bl	801433c <_calloc_r>
 8013dbe:	b160      	cbz	r0, 8013dda <_Balloc+0x56>
 8013dc0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013dc4:	e00e      	b.n	8013de4 <_Balloc+0x60>
 8013dc6:	2221      	movs	r2, #33	; 0x21
 8013dc8:	2104      	movs	r1, #4
 8013dca:	4620      	mov	r0, r4
 8013dcc:	f000 fab6 	bl	801433c <_calloc_r>
 8013dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013dd2:	60e8      	str	r0, [r5, #12]
 8013dd4:	68db      	ldr	r3, [r3, #12]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d1e4      	bne.n	8013da4 <_Balloc+0x20>
 8013dda:	2000      	movs	r0, #0
 8013ddc:	bd70      	pop	{r4, r5, r6, pc}
 8013dde:	6802      	ldr	r2, [r0, #0]
 8013de0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013de4:	2300      	movs	r3, #0
 8013de6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013dea:	e7f7      	b.n	8013ddc <_Balloc+0x58>

08013dec <_Bfree>:
 8013dec:	b570      	push	{r4, r5, r6, lr}
 8013dee:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013df0:	4606      	mov	r6, r0
 8013df2:	460d      	mov	r5, r1
 8013df4:	b93c      	cbnz	r4, 8013e06 <_Bfree+0x1a>
 8013df6:	2010      	movs	r0, #16
 8013df8:	f7fe f8fe 	bl	8011ff8 <malloc>
 8013dfc:	6270      	str	r0, [r6, #36]	; 0x24
 8013dfe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013e02:	6004      	str	r4, [r0, #0]
 8013e04:	60c4      	str	r4, [r0, #12]
 8013e06:	b13d      	cbz	r5, 8013e18 <_Bfree+0x2c>
 8013e08:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013e0a:	686a      	ldr	r2, [r5, #4]
 8013e0c:	68db      	ldr	r3, [r3, #12]
 8013e0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013e12:	6029      	str	r1, [r5, #0]
 8013e14:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013e18:	bd70      	pop	{r4, r5, r6, pc}

08013e1a <__multadd>:
 8013e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e1e:	690d      	ldr	r5, [r1, #16]
 8013e20:	461f      	mov	r7, r3
 8013e22:	4606      	mov	r6, r0
 8013e24:	460c      	mov	r4, r1
 8013e26:	f101 0c14 	add.w	ip, r1, #20
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	f8dc 0000 	ldr.w	r0, [ip]
 8013e30:	b281      	uxth	r1, r0
 8013e32:	fb02 7101 	mla	r1, r2, r1, r7
 8013e36:	0c0f      	lsrs	r7, r1, #16
 8013e38:	0c00      	lsrs	r0, r0, #16
 8013e3a:	fb02 7000 	mla	r0, r2, r0, r7
 8013e3e:	b289      	uxth	r1, r1
 8013e40:	3301      	adds	r3, #1
 8013e42:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013e46:	429d      	cmp	r5, r3
 8013e48:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013e4c:	f84c 1b04 	str.w	r1, [ip], #4
 8013e50:	dcec      	bgt.n	8013e2c <__multadd+0x12>
 8013e52:	b1d7      	cbz	r7, 8013e8a <__multadd+0x70>
 8013e54:	68a3      	ldr	r3, [r4, #8]
 8013e56:	42ab      	cmp	r3, r5
 8013e58:	dc12      	bgt.n	8013e80 <__multadd+0x66>
 8013e5a:	6861      	ldr	r1, [r4, #4]
 8013e5c:	4630      	mov	r0, r6
 8013e5e:	3101      	adds	r1, #1
 8013e60:	f7ff ff90 	bl	8013d84 <_Balloc>
 8013e64:	6922      	ldr	r2, [r4, #16]
 8013e66:	3202      	adds	r2, #2
 8013e68:	f104 010c 	add.w	r1, r4, #12
 8013e6c:	4680      	mov	r8, r0
 8013e6e:	0092      	lsls	r2, r2, #2
 8013e70:	300c      	adds	r0, #12
 8013e72:	f7fe f8d1 	bl	8012018 <memcpy>
 8013e76:	4621      	mov	r1, r4
 8013e78:	4630      	mov	r0, r6
 8013e7a:	f7ff ffb7 	bl	8013dec <_Bfree>
 8013e7e:	4644      	mov	r4, r8
 8013e80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013e84:	3501      	adds	r5, #1
 8013e86:	615f      	str	r7, [r3, #20]
 8013e88:	6125      	str	r5, [r4, #16]
 8013e8a:	4620      	mov	r0, r4
 8013e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013e90 <__hi0bits>:
 8013e90:	0c02      	lsrs	r2, r0, #16
 8013e92:	0412      	lsls	r2, r2, #16
 8013e94:	4603      	mov	r3, r0
 8013e96:	b9b2      	cbnz	r2, 8013ec6 <__hi0bits+0x36>
 8013e98:	0403      	lsls	r3, r0, #16
 8013e9a:	2010      	movs	r0, #16
 8013e9c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013ea0:	bf04      	itt	eq
 8013ea2:	021b      	lsleq	r3, r3, #8
 8013ea4:	3008      	addeq	r0, #8
 8013ea6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013eaa:	bf04      	itt	eq
 8013eac:	011b      	lsleq	r3, r3, #4
 8013eae:	3004      	addeq	r0, #4
 8013eb0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013eb4:	bf04      	itt	eq
 8013eb6:	009b      	lsleq	r3, r3, #2
 8013eb8:	3002      	addeq	r0, #2
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	db06      	blt.n	8013ecc <__hi0bits+0x3c>
 8013ebe:	005b      	lsls	r3, r3, #1
 8013ec0:	d503      	bpl.n	8013eca <__hi0bits+0x3a>
 8013ec2:	3001      	adds	r0, #1
 8013ec4:	4770      	bx	lr
 8013ec6:	2000      	movs	r0, #0
 8013ec8:	e7e8      	b.n	8013e9c <__hi0bits+0xc>
 8013eca:	2020      	movs	r0, #32
 8013ecc:	4770      	bx	lr

08013ece <__lo0bits>:
 8013ece:	6803      	ldr	r3, [r0, #0]
 8013ed0:	f013 0207 	ands.w	r2, r3, #7
 8013ed4:	4601      	mov	r1, r0
 8013ed6:	d00b      	beq.n	8013ef0 <__lo0bits+0x22>
 8013ed8:	07da      	lsls	r2, r3, #31
 8013eda:	d423      	bmi.n	8013f24 <__lo0bits+0x56>
 8013edc:	0798      	lsls	r0, r3, #30
 8013ede:	bf49      	itett	mi
 8013ee0:	085b      	lsrmi	r3, r3, #1
 8013ee2:	089b      	lsrpl	r3, r3, #2
 8013ee4:	2001      	movmi	r0, #1
 8013ee6:	600b      	strmi	r3, [r1, #0]
 8013ee8:	bf5c      	itt	pl
 8013eea:	600b      	strpl	r3, [r1, #0]
 8013eec:	2002      	movpl	r0, #2
 8013eee:	4770      	bx	lr
 8013ef0:	b298      	uxth	r0, r3
 8013ef2:	b9a8      	cbnz	r0, 8013f20 <__lo0bits+0x52>
 8013ef4:	0c1b      	lsrs	r3, r3, #16
 8013ef6:	2010      	movs	r0, #16
 8013ef8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013efc:	bf04      	itt	eq
 8013efe:	0a1b      	lsreq	r3, r3, #8
 8013f00:	3008      	addeq	r0, #8
 8013f02:	071a      	lsls	r2, r3, #28
 8013f04:	bf04      	itt	eq
 8013f06:	091b      	lsreq	r3, r3, #4
 8013f08:	3004      	addeq	r0, #4
 8013f0a:	079a      	lsls	r2, r3, #30
 8013f0c:	bf04      	itt	eq
 8013f0e:	089b      	lsreq	r3, r3, #2
 8013f10:	3002      	addeq	r0, #2
 8013f12:	07da      	lsls	r2, r3, #31
 8013f14:	d402      	bmi.n	8013f1c <__lo0bits+0x4e>
 8013f16:	085b      	lsrs	r3, r3, #1
 8013f18:	d006      	beq.n	8013f28 <__lo0bits+0x5a>
 8013f1a:	3001      	adds	r0, #1
 8013f1c:	600b      	str	r3, [r1, #0]
 8013f1e:	4770      	bx	lr
 8013f20:	4610      	mov	r0, r2
 8013f22:	e7e9      	b.n	8013ef8 <__lo0bits+0x2a>
 8013f24:	2000      	movs	r0, #0
 8013f26:	4770      	bx	lr
 8013f28:	2020      	movs	r0, #32
 8013f2a:	4770      	bx	lr

08013f2c <__i2b>:
 8013f2c:	b510      	push	{r4, lr}
 8013f2e:	460c      	mov	r4, r1
 8013f30:	2101      	movs	r1, #1
 8013f32:	f7ff ff27 	bl	8013d84 <_Balloc>
 8013f36:	2201      	movs	r2, #1
 8013f38:	6144      	str	r4, [r0, #20]
 8013f3a:	6102      	str	r2, [r0, #16]
 8013f3c:	bd10      	pop	{r4, pc}

08013f3e <__multiply>:
 8013f3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f42:	4614      	mov	r4, r2
 8013f44:	690a      	ldr	r2, [r1, #16]
 8013f46:	6923      	ldr	r3, [r4, #16]
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	bfb8      	it	lt
 8013f4c:	460b      	movlt	r3, r1
 8013f4e:	4688      	mov	r8, r1
 8013f50:	bfbc      	itt	lt
 8013f52:	46a0      	movlt	r8, r4
 8013f54:	461c      	movlt	r4, r3
 8013f56:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013f5a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013f5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013f62:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013f66:	eb07 0609 	add.w	r6, r7, r9
 8013f6a:	42b3      	cmp	r3, r6
 8013f6c:	bfb8      	it	lt
 8013f6e:	3101      	addlt	r1, #1
 8013f70:	f7ff ff08 	bl	8013d84 <_Balloc>
 8013f74:	f100 0514 	add.w	r5, r0, #20
 8013f78:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013f7c:	462b      	mov	r3, r5
 8013f7e:	2200      	movs	r2, #0
 8013f80:	4573      	cmp	r3, lr
 8013f82:	d316      	bcc.n	8013fb2 <__multiply+0x74>
 8013f84:	f104 0214 	add.w	r2, r4, #20
 8013f88:	f108 0114 	add.w	r1, r8, #20
 8013f8c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013f90:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013f94:	9300      	str	r3, [sp, #0]
 8013f96:	9b00      	ldr	r3, [sp, #0]
 8013f98:	9201      	str	r2, [sp, #4]
 8013f9a:	4293      	cmp	r3, r2
 8013f9c:	d80c      	bhi.n	8013fb8 <__multiply+0x7a>
 8013f9e:	2e00      	cmp	r6, #0
 8013fa0:	dd03      	ble.n	8013faa <__multiply+0x6c>
 8013fa2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d05d      	beq.n	8014066 <__multiply+0x128>
 8013faa:	6106      	str	r6, [r0, #16]
 8013fac:	b003      	add	sp, #12
 8013fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fb2:	f843 2b04 	str.w	r2, [r3], #4
 8013fb6:	e7e3      	b.n	8013f80 <__multiply+0x42>
 8013fb8:	f8b2 b000 	ldrh.w	fp, [r2]
 8013fbc:	f1bb 0f00 	cmp.w	fp, #0
 8013fc0:	d023      	beq.n	801400a <__multiply+0xcc>
 8013fc2:	4689      	mov	r9, r1
 8013fc4:	46ac      	mov	ip, r5
 8013fc6:	f04f 0800 	mov.w	r8, #0
 8013fca:	f859 4b04 	ldr.w	r4, [r9], #4
 8013fce:	f8dc a000 	ldr.w	sl, [ip]
 8013fd2:	b2a3      	uxth	r3, r4
 8013fd4:	fa1f fa8a 	uxth.w	sl, sl
 8013fd8:	fb0b a303 	mla	r3, fp, r3, sl
 8013fdc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013fe0:	f8dc 4000 	ldr.w	r4, [ip]
 8013fe4:	4443      	add	r3, r8
 8013fe6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013fea:	fb0b 840a 	mla	r4, fp, sl, r8
 8013fee:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013ff2:	46e2      	mov	sl, ip
 8013ff4:	b29b      	uxth	r3, r3
 8013ff6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013ffa:	454f      	cmp	r7, r9
 8013ffc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014000:	f84a 3b04 	str.w	r3, [sl], #4
 8014004:	d82b      	bhi.n	801405e <__multiply+0x120>
 8014006:	f8cc 8004 	str.w	r8, [ip, #4]
 801400a:	9b01      	ldr	r3, [sp, #4]
 801400c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014010:	3204      	adds	r2, #4
 8014012:	f1ba 0f00 	cmp.w	sl, #0
 8014016:	d020      	beq.n	801405a <__multiply+0x11c>
 8014018:	682b      	ldr	r3, [r5, #0]
 801401a:	4689      	mov	r9, r1
 801401c:	46a8      	mov	r8, r5
 801401e:	f04f 0b00 	mov.w	fp, #0
 8014022:	f8b9 c000 	ldrh.w	ip, [r9]
 8014026:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801402a:	fb0a 440c 	mla	r4, sl, ip, r4
 801402e:	445c      	add	r4, fp
 8014030:	46c4      	mov	ip, r8
 8014032:	b29b      	uxth	r3, r3
 8014034:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014038:	f84c 3b04 	str.w	r3, [ip], #4
 801403c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014040:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014044:	0c1b      	lsrs	r3, r3, #16
 8014046:	fb0a b303 	mla	r3, sl, r3, fp
 801404a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801404e:	454f      	cmp	r7, r9
 8014050:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014054:	d805      	bhi.n	8014062 <__multiply+0x124>
 8014056:	f8c8 3004 	str.w	r3, [r8, #4]
 801405a:	3504      	adds	r5, #4
 801405c:	e79b      	b.n	8013f96 <__multiply+0x58>
 801405e:	46d4      	mov	ip, sl
 8014060:	e7b3      	b.n	8013fca <__multiply+0x8c>
 8014062:	46e0      	mov	r8, ip
 8014064:	e7dd      	b.n	8014022 <__multiply+0xe4>
 8014066:	3e01      	subs	r6, #1
 8014068:	e799      	b.n	8013f9e <__multiply+0x60>
	...

0801406c <__pow5mult>:
 801406c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014070:	4615      	mov	r5, r2
 8014072:	f012 0203 	ands.w	r2, r2, #3
 8014076:	4606      	mov	r6, r0
 8014078:	460f      	mov	r7, r1
 801407a:	d007      	beq.n	801408c <__pow5mult+0x20>
 801407c:	3a01      	subs	r2, #1
 801407e:	4c21      	ldr	r4, [pc, #132]	; (8014104 <__pow5mult+0x98>)
 8014080:	2300      	movs	r3, #0
 8014082:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014086:	f7ff fec8 	bl	8013e1a <__multadd>
 801408a:	4607      	mov	r7, r0
 801408c:	10ad      	asrs	r5, r5, #2
 801408e:	d035      	beq.n	80140fc <__pow5mult+0x90>
 8014090:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014092:	b93c      	cbnz	r4, 80140a4 <__pow5mult+0x38>
 8014094:	2010      	movs	r0, #16
 8014096:	f7fd ffaf 	bl	8011ff8 <malloc>
 801409a:	6270      	str	r0, [r6, #36]	; 0x24
 801409c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80140a0:	6004      	str	r4, [r0, #0]
 80140a2:	60c4      	str	r4, [r0, #12]
 80140a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80140a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80140ac:	b94c      	cbnz	r4, 80140c2 <__pow5mult+0x56>
 80140ae:	f240 2171 	movw	r1, #625	; 0x271
 80140b2:	4630      	mov	r0, r6
 80140b4:	f7ff ff3a 	bl	8013f2c <__i2b>
 80140b8:	2300      	movs	r3, #0
 80140ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80140be:	4604      	mov	r4, r0
 80140c0:	6003      	str	r3, [r0, #0]
 80140c2:	f04f 0800 	mov.w	r8, #0
 80140c6:	07eb      	lsls	r3, r5, #31
 80140c8:	d50a      	bpl.n	80140e0 <__pow5mult+0x74>
 80140ca:	4639      	mov	r1, r7
 80140cc:	4622      	mov	r2, r4
 80140ce:	4630      	mov	r0, r6
 80140d0:	f7ff ff35 	bl	8013f3e <__multiply>
 80140d4:	4639      	mov	r1, r7
 80140d6:	4681      	mov	r9, r0
 80140d8:	4630      	mov	r0, r6
 80140da:	f7ff fe87 	bl	8013dec <_Bfree>
 80140de:	464f      	mov	r7, r9
 80140e0:	106d      	asrs	r5, r5, #1
 80140e2:	d00b      	beq.n	80140fc <__pow5mult+0x90>
 80140e4:	6820      	ldr	r0, [r4, #0]
 80140e6:	b938      	cbnz	r0, 80140f8 <__pow5mult+0x8c>
 80140e8:	4622      	mov	r2, r4
 80140ea:	4621      	mov	r1, r4
 80140ec:	4630      	mov	r0, r6
 80140ee:	f7ff ff26 	bl	8013f3e <__multiply>
 80140f2:	6020      	str	r0, [r4, #0]
 80140f4:	f8c0 8000 	str.w	r8, [r0]
 80140f8:	4604      	mov	r4, r0
 80140fa:	e7e4      	b.n	80140c6 <__pow5mult+0x5a>
 80140fc:	4638      	mov	r0, r7
 80140fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014102:	bf00      	nop
 8014104:	0801a078 	.word	0x0801a078

08014108 <__lshift>:
 8014108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801410c:	460c      	mov	r4, r1
 801410e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014112:	6923      	ldr	r3, [r4, #16]
 8014114:	6849      	ldr	r1, [r1, #4]
 8014116:	eb0a 0903 	add.w	r9, sl, r3
 801411a:	68a3      	ldr	r3, [r4, #8]
 801411c:	4607      	mov	r7, r0
 801411e:	4616      	mov	r6, r2
 8014120:	f109 0501 	add.w	r5, r9, #1
 8014124:	42ab      	cmp	r3, r5
 8014126:	db32      	blt.n	801418e <__lshift+0x86>
 8014128:	4638      	mov	r0, r7
 801412a:	f7ff fe2b 	bl	8013d84 <_Balloc>
 801412e:	2300      	movs	r3, #0
 8014130:	4680      	mov	r8, r0
 8014132:	f100 0114 	add.w	r1, r0, #20
 8014136:	461a      	mov	r2, r3
 8014138:	4553      	cmp	r3, sl
 801413a:	db2b      	blt.n	8014194 <__lshift+0x8c>
 801413c:	6920      	ldr	r0, [r4, #16]
 801413e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014142:	f104 0314 	add.w	r3, r4, #20
 8014146:	f016 021f 	ands.w	r2, r6, #31
 801414a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801414e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014152:	d025      	beq.n	80141a0 <__lshift+0x98>
 8014154:	f1c2 0e20 	rsb	lr, r2, #32
 8014158:	2000      	movs	r0, #0
 801415a:	681e      	ldr	r6, [r3, #0]
 801415c:	468a      	mov	sl, r1
 801415e:	4096      	lsls	r6, r2
 8014160:	4330      	orrs	r0, r6
 8014162:	f84a 0b04 	str.w	r0, [sl], #4
 8014166:	f853 0b04 	ldr.w	r0, [r3], #4
 801416a:	459c      	cmp	ip, r3
 801416c:	fa20 f00e 	lsr.w	r0, r0, lr
 8014170:	d814      	bhi.n	801419c <__lshift+0x94>
 8014172:	6048      	str	r0, [r1, #4]
 8014174:	b108      	cbz	r0, 801417a <__lshift+0x72>
 8014176:	f109 0502 	add.w	r5, r9, #2
 801417a:	3d01      	subs	r5, #1
 801417c:	4638      	mov	r0, r7
 801417e:	f8c8 5010 	str.w	r5, [r8, #16]
 8014182:	4621      	mov	r1, r4
 8014184:	f7ff fe32 	bl	8013dec <_Bfree>
 8014188:	4640      	mov	r0, r8
 801418a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801418e:	3101      	adds	r1, #1
 8014190:	005b      	lsls	r3, r3, #1
 8014192:	e7c7      	b.n	8014124 <__lshift+0x1c>
 8014194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014198:	3301      	adds	r3, #1
 801419a:	e7cd      	b.n	8014138 <__lshift+0x30>
 801419c:	4651      	mov	r1, sl
 801419e:	e7dc      	b.n	801415a <__lshift+0x52>
 80141a0:	3904      	subs	r1, #4
 80141a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80141a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80141aa:	459c      	cmp	ip, r3
 80141ac:	d8f9      	bhi.n	80141a2 <__lshift+0x9a>
 80141ae:	e7e4      	b.n	801417a <__lshift+0x72>

080141b0 <__mcmp>:
 80141b0:	6903      	ldr	r3, [r0, #16]
 80141b2:	690a      	ldr	r2, [r1, #16]
 80141b4:	1a9b      	subs	r3, r3, r2
 80141b6:	b530      	push	{r4, r5, lr}
 80141b8:	d10c      	bne.n	80141d4 <__mcmp+0x24>
 80141ba:	0092      	lsls	r2, r2, #2
 80141bc:	3014      	adds	r0, #20
 80141be:	3114      	adds	r1, #20
 80141c0:	1884      	adds	r4, r0, r2
 80141c2:	4411      	add	r1, r2
 80141c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80141c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80141cc:	4295      	cmp	r5, r2
 80141ce:	d003      	beq.n	80141d8 <__mcmp+0x28>
 80141d0:	d305      	bcc.n	80141de <__mcmp+0x2e>
 80141d2:	2301      	movs	r3, #1
 80141d4:	4618      	mov	r0, r3
 80141d6:	bd30      	pop	{r4, r5, pc}
 80141d8:	42a0      	cmp	r0, r4
 80141da:	d3f3      	bcc.n	80141c4 <__mcmp+0x14>
 80141dc:	e7fa      	b.n	80141d4 <__mcmp+0x24>
 80141de:	f04f 33ff 	mov.w	r3, #4294967295
 80141e2:	e7f7      	b.n	80141d4 <__mcmp+0x24>

080141e4 <__mdiff>:
 80141e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141e8:	460d      	mov	r5, r1
 80141ea:	4607      	mov	r7, r0
 80141ec:	4611      	mov	r1, r2
 80141ee:	4628      	mov	r0, r5
 80141f0:	4614      	mov	r4, r2
 80141f2:	f7ff ffdd 	bl	80141b0 <__mcmp>
 80141f6:	1e06      	subs	r6, r0, #0
 80141f8:	d108      	bne.n	801420c <__mdiff+0x28>
 80141fa:	4631      	mov	r1, r6
 80141fc:	4638      	mov	r0, r7
 80141fe:	f7ff fdc1 	bl	8013d84 <_Balloc>
 8014202:	2301      	movs	r3, #1
 8014204:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801420c:	bfa4      	itt	ge
 801420e:	4623      	movge	r3, r4
 8014210:	462c      	movge	r4, r5
 8014212:	4638      	mov	r0, r7
 8014214:	6861      	ldr	r1, [r4, #4]
 8014216:	bfa6      	itte	ge
 8014218:	461d      	movge	r5, r3
 801421a:	2600      	movge	r6, #0
 801421c:	2601      	movlt	r6, #1
 801421e:	f7ff fdb1 	bl	8013d84 <_Balloc>
 8014222:	692b      	ldr	r3, [r5, #16]
 8014224:	60c6      	str	r6, [r0, #12]
 8014226:	6926      	ldr	r6, [r4, #16]
 8014228:	f105 0914 	add.w	r9, r5, #20
 801422c:	f104 0214 	add.w	r2, r4, #20
 8014230:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014234:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014238:	f100 0514 	add.w	r5, r0, #20
 801423c:	f04f 0e00 	mov.w	lr, #0
 8014240:	f852 ab04 	ldr.w	sl, [r2], #4
 8014244:	f859 4b04 	ldr.w	r4, [r9], #4
 8014248:	fa1e f18a 	uxtah	r1, lr, sl
 801424c:	b2a3      	uxth	r3, r4
 801424e:	1ac9      	subs	r1, r1, r3
 8014250:	0c23      	lsrs	r3, r4, #16
 8014252:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8014256:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801425a:	b289      	uxth	r1, r1
 801425c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014260:	45c8      	cmp	r8, r9
 8014262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014266:	4694      	mov	ip, r2
 8014268:	f845 3b04 	str.w	r3, [r5], #4
 801426c:	d8e8      	bhi.n	8014240 <__mdiff+0x5c>
 801426e:	45bc      	cmp	ip, r7
 8014270:	d304      	bcc.n	801427c <__mdiff+0x98>
 8014272:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014276:	b183      	cbz	r3, 801429a <__mdiff+0xb6>
 8014278:	6106      	str	r6, [r0, #16]
 801427a:	e7c5      	b.n	8014208 <__mdiff+0x24>
 801427c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014280:	fa1e f381 	uxtah	r3, lr, r1
 8014284:	141a      	asrs	r2, r3, #16
 8014286:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801428a:	b29b      	uxth	r3, r3
 801428c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014290:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014294:	f845 3b04 	str.w	r3, [r5], #4
 8014298:	e7e9      	b.n	801426e <__mdiff+0x8a>
 801429a:	3e01      	subs	r6, #1
 801429c:	e7e9      	b.n	8014272 <__mdiff+0x8e>

0801429e <__d2b>:
 801429e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80142a2:	460e      	mov	r6, r1
 80142a4:	2101      	movs	r1, #1
 80142a6:	ec59 8b10 	vmov	r8, r9, d0
 80142aa:	4615      	mov	r5, r2
 80142ac:	f7ff fd6a 	bl	8013d84 <_Balloc>
 80142b0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80142b4:	4607      	mov	r7, r0
 80142b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80142ba:	bb34      	cbnz	r4, 801430a <__d2b+0x6c>
 80142bc:	9301      	str	r3, [sp, #4]
 80142be:	f1b8 0300 	subs.w	r3, r8, #0
 80142c2:	d027      	beq.n	8014314 <__d2b+0x76>
 80142c4:	a802      	add	r0, sp, #8
 80142c6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80142ca:	f7ff fe00 	bl	8013ece <__lo0bits>
 80142ce:	9900      	ldr	r1, [sp, #0]
 80142d0:	b1f0      	cbz	r0, 8014310 <__d2b+0x72>
 80142d2:	9a01      	ldr	r2, [sp, #4]
 80142d4:	f1c0 0320 	rsb	r3, r0, #32
 80142d8:	fa02 f303 	lsl.w	r3, r2, r3
 80142dc:	430b      	orrs	r3, r1
 80142de:	40c2      	lsrs	r2, r0
 80142e0:	617b      	str	r3, [r7, #20]
 80142e2:	9201      	str	r2, [sp, #4]
 80142e4:	9b01      	ldr	r3, [sp, #4]
 80142e6:	61bb      	str	r3, [r7, #24]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	bf14      	ite	ne
 80142ec:	2102      	movne	r1, #2
 80142ee:	2101      	moveq	r1, #1
 80142f0:	6139      	str	r1, [r7, #16]
 80142f2:	b1c4      	cbz	r4, 8014326 <__d2b+0x88>
 80142f4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80142f8:	4404      	add	r4, r0
 80142fa:	6034      	str	r4, [r6, #0]
 80142fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014300:	6028      	str	r0, [r5, #0]
 8014302:	4638      	mov	r0, r7
 8014304:	b003      	add	sp, #12
 8014306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801430a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801430e:	e7d5      	b.n	80142bc <__d2b+0x1e>
 8014310:	6179      	str	r1, [r7, #20]
 8014312:	e7e7      	b.n	80142e4 <__d2b+0x46>
 8014314:	a801      	add	r0, sp, #4
 8014316:	f7ff fdda 	bl	8013ece <__lo0bits>
 801431a:	9b01      	ldr	r3, [sp, #4]
 801431c:	617b      	str	r3, [r7, #20]
 801431e:	2101      	movs	r1, #1
 8014320:	6139      	str	r1, [r7, #16]
 8014322:	3020      	adds	r0, #32
 8014324:	e7e5      	b.n	80142f2 <__d2b+0x54>
 8014326:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801432a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801432e:	6030      	str	r0, [r6, #0]
 8014330:	6918      	ldr	r0, [r3, #16]
 8014332:	f7ff fdad 	bl	8013e90 <__hi0bits>
 8014336:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801433a:	e7e1      	b.n	8014300 <__d2b+0x62>

0801433c <_calloc_r>:
 801433c:	b538      	push	{r3, r4, r5, lr}
 801433e:	fb02 f401 	mul.w	r4, r2, r1
 8014342:	4621      	mov	r1, r4
 8014344:	f7fd feca 	bl	80120dc <_malloc_r>
 8014348:	4605      	mov	r5, r0
 801434a:	b118      	cbz	r0, 8014354 <_calloc_r+0x18>
 801434c:	4622      	mov	r2, r4
 801434e:	2100      	movs	r1, #0
 8014350:	f7fd fe6d 	bl	801202e <memset>
 8014354:	4628      	mov	r0, r5
 8014356:	bd38      	pop	{r3, r4, r5, pc}

08014358 <_realloc_r>:
 8014358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801435a:	4607      	mov	r7, r0
 801435c:	4614      	mov	r4, r2
 801435e:	460e      	mov	r6, r1
 8014360:	b921      	cbnz	r1, 801436c <_realloc_r+0x14>
 8014362:	4611      	mov	r1, r2
 8014364:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014368:	f7fd beb8 	b.w	80120dc <_malloc_r>
 801436c:	b922      	cbnz	r2, 8014378 <_realloc_r+0x20>
 801436e:	f7fd fe67 	bl	8012040 <_free_r>
 8014372:	4625      	mov	r5, r4
 8014374:	4628      	mov	r0, r5
 8014376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014378:	f000 fb6b 	bl	8014a52 <_malloc_usable_size_r>
 801437c:	42a0      	cmp	r0, r4
 801437e:	d20f      	bcs.n	80143a0 <_realloc_r+0x48>
 8014380:	4621      	mov	r1, r4
 8014382:	4638      	mov	r0, r7
 8014384:	f7fd feaa 	bl	80120dc <_malloc_r>
 8014388:	4605      	mov	r5, r0
 801438a:	2800      	cmp	r0, #0
 801438c:	d0f2      	beq.n	8014374 <_realloc_r+0x1c>
 801438e:	4631      	mov	r1, r6
 8014390:	4622      	mov	r2, r4
 8014392:	f7fd fe41 	bl	8012018 <memcpy>
 8014396:	4631      	mov	r1, r6
 8014398:	4638      	mov	r0, r7
 801439a:	f7fd fe51 	bl	8012040 <_free_r>
 801439e:	e7e9      	b.n	8014374 <_realloc_r+0x1c>
 80143a0:	4635      	mov	r5, r6
 80143a2:	e7e7      	b.n	8014374 <_realloc_r+0x1c>

080143a4 <__ssputs_r>:
 80143a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143a8:	688e      	ldr	r6, [r1, #8]
 80143aa:	429e      	cmp	r6, r3
 80143ac:	4682      	mov	sl, r0
 80143ae:	460c      	mov	r4, r1
 80143b0:	4690      	mov	r8, r2
 80143b2:	4699      	mov	r9, r3
 80143b4:	d837      	bhi.n	8014426 <__ssputs_r+0x82>
 80143b6:	898a      	ldrh	r2, [r1, #12]
 80143b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80143bc:	d031      	beq.n	8014422 <__ssputs_r+0x7e>
 80143be:	6825      	ldr	r5, [r4, #0]
 80143c0:	6909      	ldr	r1, [r1, #16]
 80143c2:	1a6f      	subs	r7, r5, r1
 80143c4:	6965      	ldr	r5, [r4, #20]
 80143c6:	2302      	movs	r3, #2
 80143c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80143cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80143d0:	f109 0301 	add.w	r3, r9, #1
 80143d4:	443b      	add	r3, r7
 80143d6:	429d      	cmp	r5, r3
 80143d8:	bf38      	it	cc
 80143da:	461d      	movcc	r5, r3
 80143dc:	0553      	lsls	r3, r2, #21
 80143de:	d530      	bpl.n	8014442 <__ssputs_r+0x9e>
 80143e0:	4629      	mov	r1, r5
 80143e2:	f7fd fe7b 	bl	80120dc <_malloc_r>
 80143e6:	4606      	mov	r6, r0
 80143e8:	b950      	cbnz	r0, 8014400 <__ssputs_r+0x5c>
 80143ea:	230c      	movs	r3, #12
 80143ec:	f8ca 3000 	str.w	r3, [sl]
 80143f0:	89a3      	ldrh	r3, [r4, #12]
 80143f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143f6:	81a3      	strh	r3, [r4, #12]
 80143f8:	f04f 30ff 	mov.w	r0, #4294967295
 80143fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014400:	463a      	mov	r2, r7
 8014402:	6921      	ldr	r1, [r4, #16]
 8014404:	f7fd fe08 	bl	8012018 <memcpy>
 8014408:	89a3      	ldrh	r3, [r4, #12]
 801440a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801440e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014412:	81a3      	strh	r3, [r4, #12]
 8014414:	6126      	str	r6, [r4, #16]
 8014416:	6165      	str	r5, [r4, #20]
 8014418:	443e      	add	r6, r7
 801441a:	1bed      	subs	r5, r5, r7
 801441c:	6026      	str	r6, [r4, #0]
 801441e:	60a5      	str	r5, [r4, #8]
 8014420:	464e      	mov	r6, r9
 8014422:	454e      	cmp	r6, r9
 8014424:	d900      	bls.n	8014428 <__ssputs_r+0x84>
 8014426:	464e      	mov	r6, r9
 8014428:	4632      	mov	r2, r6
 801442a:	4641      	mov	r1, r8
 801442c:	6820      	ldr	r0, [r4, #0]
 801442e:	f000 faf7 	bl	8014a20 <memmove>
 8014432:	68a3      	ldr	r3, [r4, #8]
 8014434:	1b9b      	subs	r3, r3, r6
 8014436:	60a3      	str	r3, [r4, #8]
 8014438:	6823      	ldr	r3, [r4, #0]
 801443a:	441e      	add	r6, r3
 801443c:	6026      	str	r6, [r4, #0]
 801443e:	2000      	movs	r0, #0
 8014440:	e7dc      	b.n	80143fc <__ssputs_r+0x58>
 8014442:	462a      	mov	r2, r5
 8014444:	f7ff ff88 	bl	8014358 <_realloc_r>
 8014448:	4606      	mov	r6, r0
 801444a:	2800      	cmp	r0, #0
 801444c:	d1e2      	bne.n	8014414 <__ssputs_r+0x70>
 801444e:	6921      	ldr	r1, [r4, #16]
 8014450:	4650      	mov	r0, sl
 8014452:	f7fd fdf5 	bl	8012040 <_free_r>
 8014456:	e7c8      	b.n	80143ea <__ssputs_r+0x46>

08014458 <_svfiprintf_r>:
 8014458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801445c:	461d      	mov	r5, r3
 801445e:	898b      	ldrh	r3, [r1, #12]
 8014460:	061f      	lsls	r7, r3, #24
 8014462:	b09d      	sub	sp, #116	; 0x74
 8014464:	4680      	mov	r8, r0
 8014466:	460c      	mov	r4, r1
 8014468:	4616      	mov	r6, r2
 801446a:	d50f      	bpl.n	801448c <_svfiprintf_r+0x34>
 801446c:	690b      	ldr	r3, [r1, #16]
 801446e:	b96b      	cbnz	r3, 801448c <_svfiprintf_r+0x34>
 8014470:	2140      	movs	r1, #64	; 0x40
 8014472:	f7fd fe33 	bl	80120dc <_malloc_r>
 8014476:	6020      	str	r0, [r4, #0]
 8014478:	6120      	str	r0, [r4, #16]
 801447a:	b928      	cbnz	r0, 8014488 <_svfiprintf_r+0x30>
 801447c:	230c      	movs	r3, #12
 801447e:	f8c8 3000 	str.w	r3, [r8]
 8014482:	f04f 30ff 	mov.w	r0, #4294967295
 8014486:	e0c8      	b.n	801461a <_svfiprintf_r+0x1c2>
 8014488:	2340      	movs	r3, #64	; 0x40
 801448a:	6163      	str	r3, [r4, #20]
 801448c:	2300      	movs	r3, #0
 801448e:	9309      	str	r3, [sp, #36]	; 0x24
 8014490:	2320      	movs	r3, #32
 8014492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014496:	2330      	movs	r3, #48	; 0x30
 8014498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801449c:	9503      	str	r5, [sp, #12]
 801449e:	f04f 0b01 	mov.w	fp, #1
 80144a2:	4637      	mov	r7, r6
 80144a4:	463d      	mov	r5, r7
 80144a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80144aa:	b10b      	cbz	r3, 80144b0 <_svfiprintf_r+0x58>
 80144ac:	2b25      	cmp	r3, #37	; 0x25
 80144ae:	d13e      	bne.n	801452e <_svfiprintf_r+0xd6>
 80144b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80144b4:	d00b      	beq.n	80144ce <_svfiprintf_r+0x76>
 80144b6:	4653      	mov	r3, sl
 80144b8:	4632      	mov	r2, r6
 80144ba:	4621      	mov	r1, r4
 80144bc:	4640      	mov	r0, r8
 80144be:	f7ff ff71 	bl	80143a4 <__ssputs_r>
 80144c2:	3001      	adds	r0, #1
 80144c4:	f000 80a4 	beq.w	8014610 <_svfiprintf_r+0x1b8>
 80144c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144ca:	4453      	add	r3, sl
 80144cc:	9309      	str	r3, [sp, #36]	; 0x24
 80144ce:	783b      	ldrb	r3, [r7, #0]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	f000 809d 	beq.w	8014610 <_svfiprintf_r+0x1b8>
 80144d6:	2300      	movs	r3, #0
 80144d8:	f04f 32ff 	mov.w	r2, #4294967295
 80144dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144e0:	9304      	str	r3, [sp, #16]
 80144e2:	9307      	str	r3, [sp, #28]
 80144e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80144e8:	931a      	str	r3, [sp, #104]	; 0x68
 80144ea:	462f      	mov	r7, r5
 80144ec:	2205      	movs	r2, #5
 80144ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80144f2:	4850      	ldr	r0, [pc, #320]	; (8014634 <_svfiprintf_r+0x1dc>)
 80144f4:	f7eb fe8c 	bl	8000210 <memchr>
 80144f8:	9b04      	ldr	r3, [sp, #16]
 80144fa:	b9d0      	cbnz	r0, 8014532 <_svfiprintf_r+0xda>
 80144fc:	06d9      	lsls	r1, r3, #27
 80144fe:	bf44      	itt	mi
 8014500:	2220      	movmi	r2, #32
 8014502:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014506:	071a      	lsls	r2, r3, #28
 8014508:	bf44      	itt	mi
 801450a:	222b      	movmi	r2, #43	; 0x2b
 801450c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014510:	782a      	ldrb	r2, [r5, #0]
 8014512:	2a2a      	cmp	r2, #42	; 0x2a
 8014514:	d015      	beq.n	8014542 <_svfiprintf_r+0xea>
 8014516:	9a07      	ldr	r2, [sp, #28]
 8014518:	462f      	mov	r7, r5
 801451a:	2000      	movs	r0, #0
 801451c:	250a      	movs	r5, #10
 801451e:	4639      	mov	r1, r7
 8014520:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014524:	3b30      	subs	r3, #48	; 0x30
 8014526:	2b09      	cmp	r3, #9
 8014528:	d94d      	bls.n	80145c6 <_svfiprintf_r+0x16e>
 801452a:	b1b8      	cbz	r0, 801455c <_svfiprintf_r+0x104>
 801452c:	e00f      	b.n	801454e <_svfiprintf_r+0xf6>
 801452e:	462f      	mov	r7, r5
 8014530:	e7b8      	b.n	80144a4 <_svfiprintf_r+0x4c>
 8014532:	4a40      	ldr	r2, [pc, #256]	; (8014634 <_svfiprintf_r+0x1dc>)
 8014534:	1a80      	subs	r0, r0, r2
 8014536:	fa0b f000 	lsl.w	r0, fp, r0
 801453a:	4318      	orrs	r0, r3
 801453c:	9004      	str	r0, [sp, #16]
 801453e:	463d      	mov	r5, r7
 8014540:	e7d3      	b.n	80144ea <_svfiprintf_r+0x92>
 8014542:	9a03      	ldr	r2, [sp, #12]
 8014544:	1d11      	adds	r1, r2, #4
 8014546:	6812      	ldr	r2, [r2, #0]
 8014548:	9103      	str	r1, [sp, #12]
 801454a:	2a00      	cmp	r2, #0
 801454c:	db01      	blt.n	8014552 <_svfiprintf_r+0xfa>
 801454e:	9207      	str	r2, [sp, #28]
 8014550:	e004      	b.n	801455c <_svfiprintf_r+0x104>
 8014552:	4252      	negs	r2, r2
 8014554:	f043 0302 	orr.w	r3, r3, #2
 8014558:	9207      	str	r2, [sp, #28]
 801455a:	9304      	str	r3, [sp, #16]
 801455c:	783b      	ldrb	r3, [r7, #0]
 801455e:	2b2e      	cmp	r3, #46	; 0x2e
 8014560:	d10c      	bne.n	801457c <_svfiprintf_r+0x124>
 8014562:	787b      	ldrb	r3, [r7, #1]
 8014564:	2b2a      	cmp	r3, #42	; 0x2a
 8014566:	d133      	bne.n	80145d0 <_svfiprintf_r+0x178>
 8014568:	9b03      	ldr	r3, [sp, #12]
 801456a:	1d1a      	adds	r2, r3, #4
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	9203      	str	r2, [sp, #12]
 8014570:	2b00      	cmp	r3, #0
 8014572:	bfb8      	it	lt
 8014574:	f04f 33ff 	movlt.w	r3, #4294967295
 8014578:	3702      	adds	r7, #2
 801457a:	9305      	str	r3, [sp, #20]
 801457c:	4d2e      	ldr	r5, [pc, #184]	; (8014638 <_svfiprintf_r+0x1e0>)
 801457e:	7839      	ldrb	r1, [r7, #0]
 8014580:	2203      	movs	r2, #3
 8014582:	4628      	mov	r0, r5
 8014584:	f7eb fe44 	bl	8000210 <memchr>
 8014588:	b138      	cbz	r0, 801459a <_svfiprintf_r+0x142>
 801458a:	2340      	movs	r3, #64	; 0x40
 801458c:	1b40      	subs	r0, r0, r5
 801458e:	fa03 f000 	lsl.w	r0, r3, r0
 8014592:	9b04      	ldr	r3, [sp, #16]
 8014594:	4303      	orrs	r3, r0
 8014596:	3701      	adds	r7, #1
 8014598:	9304      	str	r3, [sp, #16]
 801459a:	7839      	ldrb	r1, [r7, #0]
 801459c:	4827      	ldr	r0, [pc, #156]	; (801463c <_svfiprintf_r+0x1e4>)
 801459e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80145a2:	2206      	movs	r2, #6
 80145a4:	1c7e      	adds	r6, r7, #1
 80145a6:	f7eb fe33 	bl	8000210 <memchr>
 80145aa:	2800      	cmp	r0, #0
 80145ac:	d038      	beq.n	8014620 <_svfiprintf_r+0x1c8>
 80145ae:	4b24      	ldr	r3, [pc, #144]	; (8014640 <_svfiprintf_r+0x1e8>)
 80145b0:	bb13      	cbnz	r3, 80145f8 <_svfiprintf_r+0x1a0>
 80145b2:	9b03      	ldr	r3, [sp, #12]
 80145b4:	3307      	adds	r3, #7
 80145b6:	f023 0307 	bic.w	r3, r3, #7
 80145ba:	3308      	adds	r3, #8
 80145bc:	9303      	str	r3, [sp, #12]
 80145be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145c0:	444b      	add	r3, r9
 80145c2:	9309      	str	r3, [sp, #36]	; 0x24
 80145c4:	e76d      	b.n	80144a2 <_svfiprintf_r+0x4a>
 80145c6:	fb05 3202 	mla	r2, r5, r2, r3
 80145ca:	2001      	movs	r0, #1
 80145cc:	460f      	mov	r7, r1
 80145ce:	e7a6      	b.n	801451e <_svfiprintf_r+0xc6>
 80145d0:	2300      	movs	r3, #0
 80145d2:	3701      	adds	r7, #1
 80145d4:	9305      	str	r3, [sp, #20]
 80145d6:	4619      	mov	r1, r3
 80145d8:	250a      	movs	r5, #10
 80145da:	4638      	mov	r0, r7
 80145dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145e0:	3a30      	subs	r2, #48	; 0x30
 80145e2:	2a09      	cmp	r2, #9
 80145e4:	d903      	bls.n	80145ee <_svfiprintf_r+0x196>
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d0c8      	beq.n	801457c <_svfiprintf_r+0x124>
 80145ea:	9105      	str	r1, [sp, #20]
 80145ec:	e7c6      	b.n	801457c <_svfiprintf_r+0x124>
 80145ee:	fb05 2101 	mla	r1, r5, r1, r2
 80145f2:	2301      	movs	r3, #1
 80145f4:	4607      	mov	r7, r0
 80145f6:	e7f0      	b.n	80145da <_svfiprintf_r+0x182>
 80145f8:	ab03      	add	r3, sp, #12
 80145fa:	9300      	str	r3, [sp, #0]
 80145fc:	4622      	mov	r2, r4
 80145fe:	4b11      	ldr	r3, [pc, #68]	; (8014644 <_svfiprintf_r+0x1ec>)
 8014600:	a904      	add	r1, sp, #16
 8014602:	4640      	mov	r0, r8
 8014604:	f7fd fe58 	bl	80122b8 <_printf_float>
 8014608:	f1b0 3fff 	cmp.w	r0, #4294967295
 801460c:	4681      	mov	r9, r0
 801460e:	d1d6      	bne.n	80145be <_svfiprintf_r+0x166>
 8014610:	89a3      	ldrh	r3, [r4, #12]
 8014612:	065b      	lsls	r3, r3, #25
 8014614:	f53f af35 	bmi.w	8014482 <_svfiprintf_r+0x2a>
 8014618:	9809      	ldr	r0, [sp, #36]	; 0x24
 801461a:	b01d      	add	sp, #116	; 0x74
 801461c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014620:	ab03      	add	r3, sp, #12
 8014622:	9300      	str	r3, [sp, #0]
 8014624:	4622      	mov	r2, r4
 8014626:	4b07      	ldr	r3, [pc, #28]	; (8014644 <_svfiprintf_r+0x1ec>)
 8014628:	a904      	add	r1, sp, #16
 801462a:	4640      	mov	r0, r8
 801462c:	f7fe f8fa 	bl	8012824 <_printf_i>
 8014630:	e7ea      	b.n	8014608 <_svfiprintf_r+0x1b0>
 8014632:	bf00      	nop
 8014634:	0801a084 	.word	0x0801a084
 8014638:	0801a08a 	.word	0x0801a08a
 801463c:	0801a08e 	.word	0x0801a08e
 8014640:	080122b9 	.word	0x080122b9
 8014644:	080143a5 	.word	0x080143a5

08014648 <__sfputc_r>:
 8014648:	6893      	ldr	r3, [r2, #8]
 801464a:	3b01      	subs	r3, #1
 801464c:	2b00      	cmp	r3, #0
 801464e:	b410      	push	{r4}
 8014650:	6093      	str	r3, [r2, #8]
 8014652:	da08      	bge.n	8014666 <__sfputc_r+0x1e>
 8014654:	6994      	ldr	r4, [r2, #24]
 8014656:	42a3      	cmp	r3, r4
 8014658:	db01      	blt.n	801465e <__sfputc_r+0x16>
 801465a:	290a      	cmp	r1, #10
 801465c:	d103      	bne.n	8014666 <__sfputc_r+0x1e>
 801465e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014662:	f7fe ba9d 	b.w	8012ba0 <__swbuf_r>
 8014666:	6813      	ldr	r3, [r2, #0]
 8014668:	1c58      	adds	r0, r3, #1
 801466a:	6010      	str	r0, [r2, #0]
 801466c:	7019      	strb	r1, [r3, #0]
 801466e:	4608      	mov	r0, r1
 8014670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014674:	4770      	bx	lr

08014676 <__sfputs_r>:
 8014676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014678:	4606      	mov	r6, r0
 801467a:	460f      	mov	r7, r1
 801467c:	4614      	mov	r4, r2
 801467e:	18d5      	adds	r5, r2, r3
 8014680:	42ac      	cmp	r4, r5
 8014682:	d101      	bne.n	8014688 <__sfputs_r+0x12>
 8014684:	2000      	movs	r0, #0
 8014686:	e007      	b.n	8014698 <__sfputs_r+0x22>
 8014688:	463a      	mov	r2, r7
 801468a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801468e:	4630      	mov	r0, r6
 8014690:	f7ff ffda 	bl	8014648 <__sfputc_r>
 8014694:	1c43      	adds	r3, r0, #1
 8014696:	d1f3      	bne.n	8014680 <__sfputs_r+0xa>
 8014698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801469c <_vfiprintf_r>:
 801469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146a0:	460c      	mov	r4, r1
 80146a2:	b09d      	sub	sp, #116	; 0x74
 80146a4:	4617      	mov	r7, r2
 80146a6:	461d      	mov	r5, r3
 80146a8:	4606      	mov	r6, r0
 80146aa:	b118      	cbz	r0, 80146b4 <_vfiprintf_r+0x18>
 80146ac:	6983      	ldr	r3, [r0, #24]
 80146ae:	b90b      	cbnz	r3, 80146b4 <_vfiprintf_r+0x18>
 80146b0:	f7ff fa6a 	bl	8013b88 <__sinit>
 80146b4:	4b7c      	ldr	r3, [pc, #496]	; (80148a8 <_vfiprintf_r+0x20c>)
 80146b6:	429c      	cmp	r4, r3
 80146b8:	d158      	bne.n	801476c <_vfiprintf_r+0xd0>
 80146ba:	6874      	ldr	r4, [r6, #4]
 80146bc:	89a3      	ldrh	r3, [r4, #12]
 80146be:	0718      	lsls	r0, r3, #28
 80146c0:	d55e      	bpl.n	8014780 <_vfiprintf_r+0xe4>
 80146c2:	6923      	ldr	r3, [r4, #16]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d05b      	beq.n	8014780 <_vfiprintf_r+0xe4>
 80146c8:	2300      	movs	r3, #0
 80146ca:	9309      	str	r3, [sp, #36]	; 0x24
 80146cc:	2320      	movs	r3, #32
 80146ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80146d2:	2330      	movs	r3, #48	; 0x30
 80146d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80146d8:	9503      	str	r5, [sp, #12]
 80146da:	f04f 0b01 	mov.w	fp, #1
 80146de:	46b8      	mov	r8, r7
 80146e0:	4645      	mov	r5, r8
 80146e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80146e6:	b10b      	cbz	r3, 80146ec <_vfiprintf_r+0x50>
 80146e8:	2b25      	cmp	r3, #37	; 0x25
 80146ea:	d154      	bne.n	8014796 <_vfiprintf_r+0xfa>
 80146ec:	ebb8 0a07 	subs.w	sl, r8, r7
 80146f0:	d00b      	beq.n	801470a <_vfiprintf_r+0x6e>
 80146f2:	4653      	mov	r3, sl
 80146f4:	463a      	mov	r2, r7
 80146f6:	4621      	mov	r1, r4
 80146f8:	4630      	mov	r0, r6
 80146fa:	f7ff ffbc 	bl	8014676 <__sfputs_r>
 80146fe:	3001      	adds	r0, #1
 8014700:	f000 80c2 	beq.w	8014888 <_vfiprintf_r+0x1ec>
 8014704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014706:	4453      	add	r3, sl
 8014708:	9309      	str	r3, [sp, #36]	; 0x24
 801470a:	f898 3000 	ldrb.w	r3, [r8]
 801470e:	2b00      	cmp	r3, #0
 8014710:	f000 80ba 	beq.w	8014888 <_vfiprintf_r+0x1ec>
 8014714:	2300      	movs	r3, #0
 8014716:	f04f 32ff 	mov.w	r2, #4294967295
 801471a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801471e:	9304      	str	r3, [sp, #16]
 8014720:	9307      	str	r3, [sp, #28]
 8014722:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014726:	931a      	str	r3, [sp, #104]	; 0x68
 8014728:	46a8      	mov	r8, r5
 801472a:	2205      	movs	r2, #5
 801472c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014730:	485e      	ldr	r0, [pc, #376]	; (80148ac <_vfiprintf_r+0x210>)
 8014732:	f7eb fd6d 	bl	8000210 <memchr>
 8014736:	9b04      	ldr	r3, [sp, #16]
 8014738:	bb78      	cbnz	r0, 801479a <_vfiprintf_r+0xfe>
 801473a:	06d9      	lsls	r1, r3, #27
 801473c:	bf44      	itt	mi
 801473e:	2220      	movmi	r2, #32
 8014740:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014744:	071a      	lsls	r2, r3, #28
 8014746:	bf44      	itt	mi
 8014748:	222b      	movmi	r2, #43	; 0x2b
 801474a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801474e:	782a      	ldrb	r2, [r5, #0]
 8014750:	2a2a      	cmp	r2, #42	; 0x2a
 8014752:	d02a      	beq.n	80147aa <_vfiprintf_r+0x10e>
 8014754:	9a07      	ldr	r2, [sp, #28]
 8014756:	46a8      	mov	r8, r5
 8014758:	2000      	movs	r0, #0
 801475a:	250a      	movs	r5, #10
 801475c:	4641      	mov	r1, r8
 801475e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014762:	3b30      	subs	r3, #48	; 0x30
 8014764:	2b09      	cmp	r3, #9
 8014766:	d969      	bls.n	801483c <_vfiprintf_r+0x1a0>
 8014768:	b360      	cbz	r0, 80147c4 <_vfiprintf_r+0x128>
 801476a:	e024      	b.n	80147b6 <_vfiprintf_r+0x11a>
 801476c:	4b50      	ldr	r3, [pc, #320]	; (80148b0 <_vfiprintf_r+0x214>)
 801476e:	429c      	cmp	r4, r3
 8014770:	d101      	bne.n	8014776 <_vfiprintf_r+0xda>
 8014772:	68b4      	ldr	r4, [r6, #8]
 8014774:	e7a2      	b.n	80146bc <_vfiprintf_r+0x20>
 8014776:	4b4f      	ldr	r3, [pc, #316]	; (80148b4 <_vfiprintf_r+0x218>)
 8014778:	429c      	cmp	r4, r3
 801477a:	bf08      	it	eq
 801477c:	68f4      	ldreq	r4, [r6, #12]
 801477e:	e79d      	b.n	80146bc <_vfiprintf_r+0x20>
 8014780:	4621      	mov	r1, r4
 8014782:	4630      	mov	r0, r6
 8014784:	f7fe fa5e 	bl	8012c44 <__swsetup_r>
 8014788:	2800      	cmp	r0, #0
 801478a:	d09d      	beq.n	80146c8 <_vfiprintf_r+0x2c>
 801478c:	f04f 30ff 	mov.w	r0, #4294967295
 8014790:	b01d      	add	sp, #116	; 0x74
 8014792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014796:	46a8      	mov	r8, r5
 8014798:	e7a2      	b.n	80146e0 <_vfiprintf_r+0x44>
 801479a:	4a44      	ldr	r2, [pc, #272]	; (80148ac <_vfiprintf_r+0x210>)
 801479c:	1a80      	subs	r0, r0, r2
 801479e:	fa0b f000 	lsl.w	r0, fp, r0
 80147a2:	4318      	orrs	r0, r3
 80147a4:	9004      	str	r0, [sp, #16]
 80147a6:	4645      	mov	r5, r8
 80147a8:	e7be      	b.n	8014728 <_vfiprintf_r+0x8c>
 80147aa:	9a03      	ldr	r2, [sp, #12]
 80147ac:	1d11      	adds	r1, r2, #4
 80147ae:	6812      	ldr	r2, [r2, #0]
 80147b0:	9103      	str	r1, [sp, #12]
 80147b2:	2a00      	cmp	r2, #0
 80147b4:	db01      	blt.n	80147ba <_vfiprintf_r+0x11e>
 80147b6:	9207      	str	r2, [sp, #28]
 80147b8:	e004      	b.n	80147c4 <_vfiprintf_r+0x128>
 80147ba:	4252      	negs	r2, r2
 80147bc:	f043 0302 	orr.w	r3, r3, #2
 80147c0:	9207      	str	r2, [sp, #28]
 80147c2:	9304      	str	r3, [sp, #16]
 80147c4:	f898 3000 	ldrb.w	r3, [r8]
 80147c8:	2b2e      	cmp	r3, #46	; 0x2e
 80147ca:	d10e      	bne.n	80147ea <_vfiprintf_r+0x14e>
 80147cc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80147d0:	2b2a      	cmp	r3, #42	; 0x2a
 80147d2:	d138      	bne.n	8014846 <_vfiprintf_r+0x1aa>
 80147d4:	9b03      	ldr	r3, [sp, #12]
 80147d6:	1d1a      	adds	r2, r3, #4
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	9203      	str	r2, [sp, #12]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	bfb8      	it	lt
 80147e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80147e4:	f108 0802 	add.w	r8, r8, #2
 80147e8:	9305      	str	r3, [sp, #20]
 80147ea:	4d33      	ldr	r5, [pc, #204]	; (80148b8 <_vfiprintf_r+0x21c>)
 80147ec:	f898 1000 	ldrb.w	r1, [r8]
 80147f0:	2203      	movs	r2, #3
 80147f2:	4628      	mov	r0, r5
 80147f4:	f7eb fd0c 	bl	8000210 <memchr>
 80147f8:	b140      	cbz	r0, 801480c <_vfiprintf_r+0x170>
 80147fa:	2340      	movs	r3, #64	; 0x40
 80147fc:	1b40      	subs	r0, r0, r5
 80147fe:	fa03 f000 	lsl.w	r0, r3, r0
 8014802:	9b04      	ldr	r3, [sp, #16]
 8014804:	4303      	orrs	r3, r0
 8014806:	f108 0801 	add.w	r8, r8, #1
 801480a:	9304      	str	r3, [sp, #16]
 801480c:	f898 1000 	ldrb.w	r1, [r8]
 8014810:	482a      	ldr	r0, [pc, #168]	; (80148bc <_vfiprintf_r+0x220>)
 8014812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014816:	2206      	movs	r2, #6
 8014818:	f108 0701 	add.w	r7, r8, #1
 801481c:	f7eb fcf8 	bl	8000210 <memchr>
 8014820:	2800      	cmp	r0, #0
 8014822:	d037      	beq.n	8014894 <_vfiprintf_r+0x1f8>
 8014824:	4b26      	ldr	r3, [pc, #152]	; (80148c0 <_vfiprintf_r+0x224>)
 8014826:	bb1b      	cbnz	r3, 8014870 <_vfiprintf_r+0x1d4>
 8014828:	9b03      	ldr	r3, [sp, #12]
 801482a:	3307      	adds	r3, #7
 801482c:	f023 0307 	bic.w	r3, r3, #7
 8014830:	3308      	adds	r3, #8
 8014832:	9303      	str	r3, [sp, #12]
 8014834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014836:	444b      	add	r3, r9
 8014838:	9309      	str	r3, [sp, #36]	; 0x24
 801483a:	e750      	b.n	80146de <_vfiprintf_r+0x42>
 801483c:	fb05 3202 	mla	r2, r5, r2, r3
 8014840:	2001      	movs	r0, #1
 8014842:	4688      	mov	r8, r1
 8014844:	e78a      	b.n	801475c <_vfiprintf_r+0xc0>
 8014846:	2300      	movs	r3, #0
 8014848:	f108 0801 	add.w	r8, r8, #1
 801484c:	9305      	str	r3, [sp, #20]
 801484e:	4619      	mov	r1, r3
 8014850:	250a      	movs	r5, #10
 8014852:	4640      	mov	r0, r8
 8014854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014858:	3a30      	subs	r2, #48	; 0x30
 801485a:	2a09      	cmp	r2, #9
 801485c:	d903      	bls.n	8014866 <_vfiprintf_r+0x1ca>
 801485e:	2b00      	cmp	r3, #0
 8014860:	d0c3      	beq.n	80147ea <_vfiprintf_r+0x14e>
 8014862:	9105      	str	r1, [sp, #20]
 8014864:	e7c1      	b.n	80147ea <_vfiprintf_r+0x14e>
 8014866:	fb05 2101 	mla	r1, r5, r1, r2
 801486a:	2301      	movs	r3, #1
 801486c:	4680      	mov	r8, r0
 801486e:	e7f0      	b.n	8014852 <_vfiprintf_r+0x1b6>
 8014870:	ab03      	add	r3, sp, #12
 8014872:	9300      	str	r3, [sp, #0]
 8014874:	4622      	mov	r2, r4
 8014876:	4b13      	ldr	r3, [pc, #76]	; (80148c4 <_vfiprintf_r+0x228>)
 8014878:	a904      	add	r1, sp, #16
 801487a:	4630      	mov	r0, r6
 801487c:	f7fd fd1c 	bl	80122b8 <_printf_float>
 8014880:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014884:	4681      	mov	r9, r0
 8014886:	d1d5      	bne.n	8014834 <_vfiprintf_r+0x198>
 8014888:	89a3      	ldrh	r3, [r4, #12]
 801488a:	065b      	lsls	r3, r3, #25
 801488c:	f53f af7e 	bmi.w	801478c <_vfiprintf_r+0xf0>
 8014890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014892:	e77d      	b.n	8014790 <_vfiprintf_r+0xf4>
 8014894:	ab03      	add	r3, sp, #12
 8014896:	9300      	str	r3, [sp, #0]
 8014898:	4622      	mov	r2, r4
 801489a:	4b0a      	ldr	r3, [pc, #40]	; (80148c4 <_vfiprintf_r+0x228>)
 801489c:	a904      	add	r1, sp, #16
 801489e:	4630      	mov	r0, r6
 80148a0:	f7fd ffc0 	bl	8012824 <_printf_i>
 80148a4:	e7ec      	b.n	8014880 <_vfiprintf_r+0x1e4>
 80148a6:	bf00      	nop
 80148a8:	08019f48 	.word	0x08019f48
 80148ac:	0801a084 	.word	0x0801a084
 80148b0:	08019f68 	.word	0x08019f68
 80148b4:	08019f28 	.word	0x08019f28
 80148b8:	0801a08a 	.word	0x0801a08a
 80148bc:	0801a08e 	.word	0x0801a08e
 80148c0:	080122b9 	.word	0x080122b9
 80148c4:	08014677 	.word	0x08014677

080148c8 <__sread>:
 80148c8:	b510      	push	{r4, lr}
 80148ca:	460c      	mov	r4, r1
 80148cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148d0:	f000 f8c8 	bl	8014a64 <_read_r>
 80148d4:	2800      	cmp	r0, #0
 80148d6:	bfab      	itete	ge
 80148d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80148da:	89a3      	ldrhlt	r3, [r4, #12]
 80148dc:	181b      	addge	r3, r3, r0
 80148de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80148e2:	bfac      	ite	ge
 80148e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80148e6:	81a3      	strhlt	r3, [r4, #12]
 80148e8:	bd10      	pop	{r4, pc}

080148ea <__swrite>:
 80148ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148ee:	461f      	mov	r7, r3
 80148f0:	898b      	ldrh	r3, [r1, #12]
 80148f2:	05db      	lsls	r3, r3, #23
 80148f4:	4605      	mov	r5, r0
 80148f6:	460c      	mov	r4, r1
 80148f8:	4616      	mov	r6, r2
 80148fa:	d505      	bpl.n	8014908 <__swrite+0x1e>
 80148fc:	2302      	movs	r3, #2
 80148fe:	2200      	movs	r2, #0
 8014900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014904:	f000 f868 	bl	80149d8 <_lseek_r>
 8014908:	89a3      	ldrh	r3, [r4, #12]
 801490a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801490e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014912:	81a3      	strh	r3, [r4, #12]
 8014914:	4632      	mov	r2, r6
 8014916:	463b      	mov	r3, r7
 8014918:	4628      	mov	r0, r5
 801491a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801491e:	f000 b817 	b.w	8014950 <_write_r>

08014922 <__sseek>:
 8014922:	b510      	push	{r4, lr}
 8014924:	460c      	mov	r4, r1
 8014926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801492a:	f000 f855 	bl	80149d8 <_lseek_r>
 801492e:	1c43      	adds	r3, r0, #1
 8014930:	89a3      	ldrh	r3, [r4, #12]
 8014932:	bf15      	itete	ne
 8014934:	6560      	strne	r0, [r4, #84]	; 0x54
 8014936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801493a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801493e:	81a3      	strheq	r3, [r4, #12]
 8014940:	bf18      	it	ne
 8014942:	81a3      	strhne	r3, [r4, #12]
 8014944:	bd10      	pop	{r4, pc}

08014946 <__sclose>:
 8014946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801494a:	f000 b813 	b.w	8014974 <_close_r>
	...

08014950 <_write_r>:
 8014950:	b538      	push	{r3, r4, r5, lr}
 8014952:	4c07      	ldr	r4, [pc, #28]	; (8014970 <_write_r+0x20>)
 8014954:	4605      	mov	r5, r0
 8014956:	4608      	mov	r0, r1
 8014958:	4611      	mov	r1, r2
 801495a:	2200      	movs	r2, #0
 801495c:	6022      	str	r2, [r4, #0]
 801495e:	461a      	mov	r2, r3
 8014960:	f7ee fbef 	bl	8003142 <_write>
 8014964:	1c43      	adds	r3, r0, #1
 8014966:	d102      	bne.n	801496e <_write_r+0x1e>
 8014968:	6823      	ldr	r3, [r4, #0]
 801496a:	b103      	cbz	r3, 801496e <_write_r+0x1e>
 801496c:	602b      	str	r3, [r5, #0]
 801496e:	bd38      	pop	{r3, r4, r5, pc}
 8014970:	20002c68 	.word	0x20002c68

08014974 <_close_r>:
 8014974:	b538      	push	{r3, r4, r5, lr}
 8014976:	4c06      	ldr	r4, [pc, #24]	; (8014990 <_close_r+0x1c>)
 8014978:	2300      	movs	r3, #0
 801497a:	4605      	mov	r5, r0
 801497c:	4608      	mov	r0, r1
 801497e:	6023      	str	r3, [r4, #0]
 8014980:	f7ee fbfb 	bl	800317a <_close>
 8014984:	1c43      	adds	r3, r0, #1
 8014986:	d102      	bne.n	801498e <_close_r+0x1a>
 8014988:	6823      	ldr	r3, [r4, #0]
 801498a:	b103      	cbz	r3, 801498e <_close_r+0x1a>
 801498c:	602b      	str	r3, [r5, #0]
 801498e:	bd38      	pop	{r3, r4, r5, pc}
 8014990:	20002c68 	.word	0x20002c68

08014994 <_fstat_r>:
 8014994:	b538      	push	{r3, r4, r5, lr}
 8014996:	4c07      	ldr	r4, [pc, #28]	; (80149b4 <_fstat_r+0x20>)
 8014998:	2300      	movs	r3, #0
 801499a:	4605      	mov	r5, r0
 801499c:	4608      	mov	r0, r1
 801499e:	4611      	mov	r1, r2
 80149a0:	6023      	str	r3, [r4, #0]
 80149a2:	f7ee fbf6 	bl	8003192 <_fstat>
 80149a6:	1c43      	adds	r3, r0, #1
 80149a8:	d102      	bne.n	80149b0 <_fstat_r+0x1c>
 80149aa:	6823      	ldr	r3, [r4, #0]
 80149ac:	b103      	cbz	r3, 80149b0 <_fstat_r+0x1c>
 80149ae:	602b      	str	r3, [r5, #0]
 80149b0:	bd38      	pop	{r3, r4, r5, pc}
 80149b2:	bf00      	nop
 80149b4:	20002c68 	.word	0x20002c68

080149b8 <_isatty_r>:
 80149b8:	b538      	push	{r3, r4, r5, lr}
 80149ba:	4c06      	ldr	r4, [pc, #24]	; (80149d4 <_isatty_r+0x1c>)
 80149bc:	2300      	movs	r3, #0
 80149be:	4605      	mov	r5, r0
 80149c0:	4608      	mov	r0, r1
 80149c2:	6023      	str	r3, [r4, #0]
 80149c4:	f7ee fbf5 	bl	80031b2 <_isatty>
 80149c8:	1c43      	adds	r3, r0, #1
 80149ca:	d102      	bne.n	80149d2 <_isatty_r+0x1a>
 80149cc:	6823      	ldr	r3, [r4, #0]
 80149ce:	b103      	cbz	r3, 80149d2 <_isatty_r+0x1a>
 80149d0:	602b      	str	r3, [r5, #0]
 80149d2:	bd38      	pop	{r3, r4, r5, pc}
 80149d4:	20002c68 	.word	0x20002c68

080149d8 <_lseek_r>:
 80149d8:	b538      	push	{r3, r4, r5, lr}
 80149da:	4c07      	ldr	r4, [pc, #28]	; (80149f8 <_lseek_r+0x20>)
 80149dc:	4605      	mov	r5, r0
 80149de:	4608      	mov	r0, r1
 80149e0:	4611      	mov	r1, r2
 80149e2:	2200      	movs	r2, #0
 80149e4:	6022      	str	r2, [r4, #0]
 80149e6:	461a      	mov	r2, r3
 80149e8:	f7ee fbee 	bl	80031c8 <_lseek>
 80149ec:	1c43      	adds	r3, r0, #1
 80149ee:	d102      	bne.n	80149f6 <_lseek_r+0x1e>
 80149f0:	6823      	ldr	r3, [r4, #0]
 80149f2:	b103      	cbz	r3, 80149f6 <_lseek_r+0x1e>
 80149f4:	602b      	str	r3, [r5, #0]
 80149f6:	bd38      	pop	{r3, r4, r5, pc}
 80149f8:	20002c68 	.word	0x20002c68

080149fc <__ascii_mbtowc>:
 80149fc:	b082      	sub	sp, #8
 80149fe:	b901      	cbnz	r1, 8014a02 <__ascii_mbtowc+0x6>
 8014a00:	a901      	add	r1, sp, #4
 8014a02:	b142      	cbz	r2, 8014a16 <__ascii_mbtowc+0x1a>
 8014a04:	b14b      	cbz	r3, 8014a1a <__ascii_mbtowc+0x1e>
 8014a06:	7813      	ldrb	r3, [r2, #0]
 8014a08:	600b      	str	r3, [r1, #0]
 8014a0a:	7812      	ldrb	r2, [r2, #0]
 8014a0c:	1c10      	adds	r0, r2, #0
 8014a0e:	bf18      	it	ne
 8014a10:	2001      	movne	r0, #1
 8014a12:	b002      	add	sp, #8
 8014a14:	4770      	bx	lr
 8014a16:	4610      	mov	r0, r2
 8014a18:	e7fb      	b.n	8014a12 <__ascii_mbtowc+0x16>
 8014a1a:	f06f 0001 	mvn.w	r0, #1
 8014a1e:	e7f8      	b.n	8014a12 <__ascii_mbtowc+0x16>

08014a20 <memmove>:
 8014a20:	4288      	cmp	r0, r1
 8014a22:	b510      	push	{r4, lr}
 8014a24:	eb01 0302 	add.w	r3, r1, r2
 8014a28:	d807      	bhi.n	8014a3a <memmove+0x1a>
 8014a2a:	1e42      	subs	r2, r0, #1
 8014a2c:	4299      	cmp	r1, r3
 8014a2e:	d00a      	beq.n	8014a46 <memmove+0x26>
 8014a30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a34:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014a38:	e7f8      	b.n	8014a2c <memmove+0xc>
 8014a3a:	4283      	cmp	r3, r0
 8014a3c:	d9f5      	bls.n	8014a2a <memmove+0xa>
 8014a3e:	1881      	adds	r1, r0, r2
 8014a40:	1ad2      	subs	r2, r2, r3
 8014a42:	42d3      	cmn	r3, r2
 8014a44:	d100      	bne.n	8014a48 <memmove+0x28>
 8014a46:	bd10      	pop	{r4, pc}
 8014a48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a4c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014a50:	e7f7      	b.n	8014a42 <memmove+0x22>

08014a52 <_malloc_usable_size_r>:
 8014a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a56:	1f18      	subs	r0, r3, #4
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	bfbc      	itt	lt
 8014a5c:	580b      	ldrlt	r3, [r1, r0]
 8014a5e:	18c0      	addlt	r0, r0, r3
 8014a60:	4770      	bx	lr
	...

08014a64 <_read_r>:
 8014a64:	b538      	push	{r3, r4, r5, lr}
 8014a66:	4c07      	ldr	r4, [pc, #28]	; (8014a84 <_read_r+0x20>)
 8014a68:	4605      	mov	r5, r0
 8014a6a:	4608      	mov	r0, r1
 8014a6c:	4611      	mov	r1, r2
 8014a6e:	2200      	movs	r2, #0
 8014a70:	6022      	str	r2, [r4, #0]
 8014a72:	461a      	mov	r2, r3
 8014a74:	f7ee fb48 	bl	8003108 <_read>
 8014a78:	1c43      	adds	r3, r0, #1
 8014a7a:	d102      	bne.n	8014a82 <_read_r+0x1e>
 8014a7c:	6823      	ldr	r3, [r4, #0]
 8014a7e:	b103      	cbz	r3, 8014a82 <_read_r+0x1e>
 8014a80:	602b      	str	r3, [r5, #0]
 8014a82:	bd38      	pop	{r3, r4, r5, pc}
 8014a84:	20002c68 	.word	0x20002c68

08014a88 <__ascii_wctomb>:
 8014a88:	b149      	cbz	r1, 8014a9e <__ascii_wctomb+0x16>
 8014a8a:	2aff      	cmp	r2, #255	; 0xff
 8014a8c:	bf85      	ittet	hi
 8014a8e:	238a      	movhi	r3, #138	; 0x8a
 8014a90:	6003      	strhi	r3, [r0, #0]
 8014a92:	700a      	strbls	r2, [r1, #0]
 8014a94:	f04f 30ff 	movhi.w	r0, #4294967295
 8014a98:	bf98      	it	ls
 8014a9a:	2001      	movls	r0, #1
 8014a9c:	4770      	bx	lr
 8014a9e:	4608      	mov	r0, r1
 8014aa0:	4770      	bx	lr
	...

08014aa4 <_init>:
 8014aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aa6:	bf00      	nop
 8014aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014aaa:	bc08      	pop	{r3}
 8014aac:	469e      	mov	lr, r3
 8014aae:	4770      	bx	lr

08014ab0 <_fini>:
 8014ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ab2:	bf00      	nop
 8014ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ab6:	bc08      	pop	{r3}
 8014ab8:	469e      	mov	lr, r3
 8014aba:	4770      	bx	lr
